###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               28/Sep/2021  21:07:50
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Components\stack\GP\gp_proxyTbl.c
#    Command line       =  
#        -f C:\usertemp\AppData\Local\Temp\EW59EA.tmp ("I:\ZigBee3.0\7.
#        基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Components\stack\GP\gp_proxyTbl.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D
#        HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D INT_HEAP_LEN=2300
#        -D HAL_LCD=TRUE -D xHAL_LCD_OLED12864 -D HAL_ADC=TRUE -lC
#        "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        -lA "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\7.
#        基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "I:\ZigBee3.0\7.
#        基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List\gp_proxyTbl.lst
#    Object file        =  
#        I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj\gp_proxyTbl.r51
#
###############################################################################

I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack 3.0.1\Components\stack\GP\gp_proxyTbl.c
      1          /**************************************************************************************************
      2            Filename:       gp_proxyTbl.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45             
     46          #include "ZGlobals.h"
     47          #include "ZDObject.h"
     48          #include "nwk_util.h"   
     49          #include "ZComDef.h"
     50          #include "cGP_stub.h"
     51          #include "gp_common.h"
     52          #include "gp_interface.h"
     53          #include "zcl_green_power.h"
     54          #include "OSAL.h"
     55          
     56          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     57             
     58           /*********************************************************************
     59           * MACROS
     60           */ 
     61          
     62           /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69             
     70           /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          ZDO_DeviceAnnce_t aliasConflictAnnce;
   \                     aliasConflictAnnce:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
     74          
     75           /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */
     86          
     87           /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
     91          static uint8 pt_getAlias( uint8* pNew );
     92          static uint8 pt_getSecurity( uint8* pNew );
     93          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew );
     94          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
     95          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
     96          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
     97          
     98          /*********************************************************************
     99           * PUBLIC FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn          pt_ZclReadGetProxyEntry
    104           *
    105           * @brief       Populate the given item data
    106           *
    107           * @param       nvId - NV entry to read
    108           *              pData - Pointer to OTA message payload
    109           *              len - Lenght of the payload
    110           *
    111           * @return
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
   \                     pt_ZclReadGetProxyEntry:
    114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 146
   \   000005   746E         MOV       A,#0x6e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V12,R4
   \   00000C   8D..         MOV       ?V13,R5
    115            uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   7488         MOV       A,#-0x78
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   740A         MOV       A,#0xa
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    116            uint8  currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   00001E   7406         MOV       A,#0x6
   \   000020   12....       LCALL     ?XSTACK_DISP102_8
   \   000023   7441         MOV       A,#0x41
   \   000025   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    117            uint8  gpdEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000028   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
   \   00002B   7441         MOV       A,#0x41
   \   00002D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    118            uint8  gpdEntryLen = 0;
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   F0           MOVX      @DPTR,A
    119            uint8  status;
    120            uint16 options;
    121          
    122            status = gp_getProxyTableByIndex( nvId, currEntry );
   \   000037                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?XSTACK_DISP102_8
   \   00003C   12....       LCALL     ?Subroutine3 & 0xFFFF
    123          
    124            // if FAIL or Empty
    125            if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
   \                     ??CrossCallReturnLabel_5:
   \   00003F   6005         JZ        ??pt_ZclReadGetProxyEntry_0
   \   000041   740D         MOV       A,#0xd
   \   000043   6E           XRL       A,R6
   \   000044   7003         JNZ       ??pt_ZclReadGetProxyEntry_1
    126            {
    127              // FAIL
    128              return status;
   \                     ??pt_ZclReadGetProxyEntry_0:
   \   000046   02....       LJMP      ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
    129            }
    130          
    131            osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \                     ??pt_ZclReadGetProxyEntry_1:
   \   000049   7406         MOV       A,#0x6
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   88..         MOV       ?V0,R0
   \   000050   89..         MOV       ?V1,R1
   \   000052   75..00       MOV       ?V2,#0x0
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005A   7C02         MOV       R4,#0x2
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7403         MOV       A,#0x3
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   744A         MOV       A,#0x4a
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00006D   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
    132            osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \   000073                ; Setup parameters for call to function osal_memcpy
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000078   7C02         MOV       R4,#0x2
   \   00007A   7D00         MOV       R5,#0x0
   \   00007C   7407         MOV       A,#0x7
   \   00007E   12....       LCALL     ?XSTACK_DISP101_8
   \   000081   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
    133            gpdEntryLen += sizeof ( uint16 );
   \   000087   85..82       MOV       DPL,?XSP + 0
   \   00008A   85..83       MOV       DPH,?XSP + 1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   2402         ADD       A,#0x2
   \   000090   F0           MOVX      @DPTR,A
    134            
    135            // Options bitfield
    136            // If Application Id bitfield is 0b000
    137            if( GP_IS_APPLICATION_ID_GPD( options ) )
   \   000091   7404         MOV       A,#0x4
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E0           MOVX      A,@DPTR
   \   000097   5407         ANL       A,#0x7
   \   000099   F8           MOV       R0,A
   \   00009A   7018         JNZ       ??pt_ZclReadGetProxyEntry_3
    138            {        
    139              // Populate GPD ID
    140              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   00009C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00009C   A8..         MOV       R0,?XSP + 0
   \   00009E   A9..         MOV       R1,?XSP + 1
   \   0000A0   88..         MOV       ?V0,R0
   \   0000A2   89..         MOV       ?V1,R1
   \   0000A4   78..         MOV       R0,#?V0
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   7449         MOV       A,#0x49
   \   0000AB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AE   7904         MOV       R1,#0x4
   \   0000B0   740E         MOV       A,#0xe
   \   0000B2   8032         SJMP      ??pt_ZclReadGetProxyEntry_4
    141            }
    142            // If Application Id bitfield is 0b010
    143            else if( GP_IS_APPLICATION_ID_IEEE( options ) )
   \                     ??pt_ZclReadGetProxyEntry_3:
   \   0000B4   7402         MOV       A,#0x2
   \   0000B6   68           XRL       A,R0
   \   0000B7   7036         JNZ       ??pt_ZclReadGetProxyEntry_5
    144            {   
    145              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0000B9                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000B9   A8..         MOV       R0,?XSP + 0
   \   0000BB   A9..         MOV       R1,?XSP + 1
   \   0000BD   88..         MOV       ?V0,R0
   \   0000BF   89..         MOV       ?V1,R1
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7449         MOV       A,#0x49
   \   0000C8   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CB   7908         MOV       R1,#0x8
   \   0000CD   740A         MOV       A,#0xa
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
    146              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0000D8                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000D8   78..         MOV       R0,#?V0
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DD   7449         MOV       A,#0x49
   \   0000DF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E2   7901         MOV       R1,#0x1
   \   0000E4   7412         MOV       A,#0x12
   \                     ??pt_ZclReadGetProxyEntry_4:
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
    147            }
   \   0000E9   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
    148            
    149            if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_5:
   \   0000EF   7407         MOV       A,#0x7
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   A2E5         MOV       C,0xE0 /* A   */.5
   \   0000F7   501F         JNC       ??pt_ZclReadGetProxyEntry_6
    150            {
    151              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
   \   0000F9                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000F9   A8..         MOV       R0,?XSP + 0
   \   0000FB   A9..         MOV       R1,?XSP + 1
   \   0000FD   88..         MOV       ?V0,R0
   \   0000FF   89..         MOV       ?V1,R1
   \   000101   78..         MOV       R0,#?V0
   \   000103   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000106   7449         MOV       A,#0x49
   \   000108   12....       LCALL     ?XSTACK_DISP102_8
   \   00010B   7902         MOV       R1,#0x2
   \   00010D   7413         MOV       A,#0x13
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ?Subroutine5 & 0xFFFF
    152            }
   \                     ??CrossCallReturnLabel_14:
   \   000115   12....       LCALL     ?DEALLOC_XSTACK8
    153            
    154            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_6:
   \   000118   7407         MOV       A,#0x7
   \   00011A   12....       LCALL     ?XSTACK_DISP0_8
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000120   501F         JNC       ??pt_ZclReadGetProxyEntry_7
    155            {
    156              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   000122                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000122   A8..         MOV       R0,?XSP + 0
   \   000124   A9..         MOV       R1,?XSP + 1
   \   000126   88..         MOV       ?V0,R0
   \   000128   89..         MOV       ?V1,R1
   \   00012A   78..         MOV       R0,#?V0
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012F   7449         MOV       A,#0x49
   \   000131   12....       LCALL     ?XSTACK_DISP102_8
   \   000134   7901         MOV       R1,#0x1
   \   000136   7415         MOV       A,#0x15
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   12....       LCALL     ?Subroutine5 & 0xFFFF
    157            }
   \                     ??CrossCallReturnLabel_15:
   \   00013E   12....       LCALL     ?DEALLOC_XSTACK8
    158            
    159            if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
   \                     ??pt_ZclReadGetProxyEntry_7:
   \   000141   7407         MOV       A,#0x7
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   E0           MOVX      A,@DPTR
   \   000147   A2E6         MOV       C,0xE0 /* A   */.6
   \   000149   400A         JC        ??pt_ZclReadGetProxyEntry_8
   \   00014B   7406         MOV       A,#0x6
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   E0           MOVX      A,@DPTR
   \   000151   A2E5         MOV       C,0xE0 /* A   */.5
   \   000153   501F         JNC       ??pt_ZclReadGetProxyEntry_9
    160            {
    161              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_8:
   \   000155                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000155   A8..         MOV       R0,?XSP + 0
   \   000157   A9..         MOV       R1,?XSP + 1
   \   000159   88..         MOV       ?V0,R0
   \   00015B   89..         MOV       ?V1,R1
   \   00015D   78..         MOV       R0,#?V0
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000162   7449         MOV       A,#0x49
   \   000164   12....       LCALL     ?XSTACK_DISP102_8
   \   000167   7904         MOV       R1,#0x4
   \   000169   7416         MOV       A,#0x16
   \   00016B   12....       LCALL     ?XSTACK_DISP0_8
   \   00016E   12....       LCALL     ?Subroutine5 & 0xFFFF
    162            }
   \                     ??CrossCallReturnLabel_16:
   \   000171   12....       LCALL     ?DEALLOC_XSTACK8
    163            
    164            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_9:
   \   000174   7407         MOV       A,#0x7
   \   000176   12....       LCALL     ?XSTACK_DISP0_8
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00017C   501F         JNC       ??pt_ZclReadGetProxyEntry_10
    165            {
    166              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
   \   00017E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00017E   A8..         MOV       R0,?XSP + 0
   \   000180   A9..         MOV       R1,?XSP + 1
   \   000182   88..         MOV       ?V0,R0
   \   000184   89..         MOV       ?V1,R1
   \   000186   78..         MOV       R0,#?V0
   \   000188   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018B   7449         MOV       A,#0x49
   \   00018D   12....       LCALL     ?XSTACK_DISP102_8
   \   000190   7910         MOV       R1,#0x10
   \   000192   741A         MOV       A,#0x1a
   \   000194   12....       LCALL     ?XSTACK_DISP0_8
   \   000197   12....       LCALL     ?Subroutine5 & 0xFFFF
    167            }
   \                     ??CrossCallReturnLabel_17:
   \   00019A   12....       LCALL     ?DEALLOC_XSTACK8
    168            
    169            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??pt_ZclReadGetProxyEntry_10:
   \   00019D   7406         MOV       A,#0x6
   \   00019F   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001A5   4003         JC        $+5
   \   0001A7   02....       LJMP      ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
    170            {
    171              uint8 sinkCount = 0;
   \   0001AA   7401         MOV       A,#0x1
   \   0001AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AF   12....       LCALL     ?Subroutine2 & 0xFFFF
    172              uint8 sinkCountByte = gpdEntryLen;
    173              
    174              gpdEntryLen += sizeof ( sinkCountByte );
    175              
    176              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??CrossCallReturnLabel_3:
   \   0001B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B5   E582         MOV       A,DPL
   \   0001B7   28           ADD       A,R0
   \   0001B8   F5..         MOV       ?V14,A
   \   0001BA   E4           CLR       A
   \   0001BB   3583         ADDC      A,DPH
   \   0001BD   F5..         MOV       ?V15,A
   \   0001BF   7488         MOV       A,#-0x78
   \   0001C1   12....       LCALL     ?XSTACK_DISP100_8
   \   0001C4   88..         MOV       ?V0,R0
   \   0001C6   89..         MOV       ?V1,R1
   \   0001C8   7401         MOV       A,#0x1
   \   0001CA   12....       LCALL     ?XSTACK_DISP100_8
   \   0001CD   88..         MOV       ?V4,R0
   \   0001CF   89..         MOV       ?V5,R1
   \   0001D1   75..00       MOV       ?V6,#0x0
   \   0001D4                ; Setup parameters for call to function osal_memcmp
   \   0001D4   7428         MOV       A,#0x28
   \   0001D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D9   A982         MOV       R1,DPL
   \   0001DB   AA83         MOV       R2,DPH
   \   0001DD   89..         MOV       ?V8,R1
   \   0001DF   8A..         MOV       ?V9,R2
   \   0001E1   75..00       MOV       ?V10,#0x0
   \   0001E4   78..         MOV       R0,#?V8
   \   0001E6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E9   7C0A         MOV       R4,#0xa
   \   0001EB   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0001EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F1   E9           MOV       A,R1
   \   0001F2   703A         JNZ       ??pt_ZclReadGetProxyEntry_12
    177              {
    178                sinkCount += 1;
   \   0001F4   7401         MOV       A,#0x1
   \   0001F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   04           INC       A
   \   0001FB   F0           MOVX      @DPTR,A
    179                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   0001FC                ; Setup parameters for call to function osal_memcpy
   \   0001FC   78..         MOV       R0,#?V4
   \   0001FE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000201   7C01         MOV       R4,#0x1
   \   000203   7D00         MOV       R5,#0x0
   \   000205   AA..         MOV       R2,?V14
   \   000207   AB..         MOV       R3,?V15
   \   000209   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00020C   12....       LCALL     ?DEALLOC_XSTACK8
    180                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   00020F                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00020F   A8..         MOV       R0,?XSP + 0
   \   000211   A9..         MOV       R1,?XSP + 1
   \   000213   88..         MOV       ?V8,R0
   \   000215   89..         MOV       ?V9,R1
   \   000217   78..         MOV       R0,#?V8
   \   000219   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021C   7449         MOV       A,#0x49
   \   00021E   12....       LCALL     ?XSTACK_DISP102_8
   \   000221   790A         MOV       R1,#0xa
   \   000223   742A         MOV       A,#0x2a
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   12....       LCALL     ?Subroutine5 & 0xFFFF
    181              }
   \                     ??CrossCallReturnLabel_18:
   \   00022B   12....       LCALL     ?DEALLOC_XSTACK8
    182              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_ZclReadGetProxyEntry_12:
   \   00022E                ; Setup parameters for call to function osal_memcmp
   \   00022E   7432         MOV       A,#0x32
   \   000230   12....       LCALL     ?XSTACK_DISP0_8
   \   000233   A982         MOV       R1,DPL
   \   000235   AA83         MOV       R2,DPH
   \   000237   89..         MOV       ?V8,R1
   \   000239   8A..         MOV       ?V9,R2
   \   00023B   78..         MOV       R0,#?V8
   \   00023D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000240   7C0A         MOV       R4,#0xa
   \   000242   12....       LCALL     ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000245   12....       LCALL     ?DEALLOC_XSTACK8
   \   000248   E9           MOV       A,R1
   \   000249   703A         JNZ       ??pt_ZclReadGetProxyEntry_11
    183              {
    184                sinkCount += 1;
   \   00024B   7401         MOV       A,#0x1
   \   00024D   12....       LCALL     ?XSTACK_DISP0_8
   \   000250   E0           MOVX      A,@DPTR
   \   000251   04           INC       A
   \   000252   F0           MOVX      @DPTR,A
    185                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   000253                ; Setup parameters for call to function osal_memcpy
   \   000253   78..         MOV       R0,#?V4
   \   000255   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000258   7C01         MOV       R4,#0x1
   \   00025A   7D00         MOV       R5,#0x0
   \   00025C   AA..         MOV       R2,?V14
   \   00025E   AB..         MOV       R3,?V15
   \   000260   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000263   12....       LCALL     ?DEALLOC_XSTACK8
    186                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   000266                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000266   A8..         MOV       R0,?XSP + 0
   \   000268   A9..         MOV       R1,?XSP + 1
   \   00026A   88..         MOV       ?V0,R0
   \   00026C   89..         MOV       ?V1,R1
   \   00026E   78..         MOV       R0,#?V0
   \   000270   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000273   7449         MOV       A,#0x49
   \   000275   12....       LCALL     ?XSTACK_DISP102_8
   \   000278   790A         MOV       R1,#0xa
   \   00027A   7434         MOV       A,#0x34
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   12....       LCALL     ?Subroutine5 & 0xFFFF
    187              }
    188            }
   \                     ??CrossCallReturnLabel_19:
   \   000282   12....       LCALL     ?DEALLOC_XSTACK8
    189               
    190            if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_11:
   \   000285   7407         MOV       A,#0x7
   \   000287   12....       LCALL     ?XSTACK_DISP0_8
   \   00028A   E0           MOVX      A,@DPTR
   \   00028B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00028D   4003         JC        $+5
   \   00028F   02....       LJMP      ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
    191            {
    192              uint8 groupCount = 0;
   \   000292   7401         MOV       A,#0x1
   \   000294   12....       LCALL     ?XSTACK_DISP0_8
   \   000297   12....       LCALL     ?Subroutine2 & 0xFFFF
    193              uint8 groupCountByte = gpdEntryLen;
    194              
    195              gpdEntryLen++;
    196              
    197              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \                     ??CrossCallReturnLabel_4:
   \   00029A   12....       LCALL     ?XSTACK_DISP0_8
   \   00029D   E582         MOV       A,DPL
   \   00029F   28           ADD       A,R0
   \   0002A0   F5..         MOV       ?V0,A
   \   0002A2   E4           CLR       A
   \   0002A3   3583         ADDC      A,DPH
   \   0002A5   F5..         MOV       ?V1,A
   \   0002A7   7401         MOV       A,#0x1
   \   0002A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0002AC   88..         MOV       ?V4,R0
   \   0002AE   89..         MOV       ?V5,R1
   \   0002B0   75..00       MOV       ?V6,#0x0
   \   0002B3   743C         MOV       A,#0x3c
   \   0002B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B8   E0           MOVX      A,@DPTR
   \   0002B9   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002BB   503A         JNC       ??pt_ZclReadGetProxyEntry_14
    198              {
    199                groupCount += 1;
   \   0002BD   7401         MOV       A,#0x1
   \   0002BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C2   7401         MOV       A,#0x1
   \   0002C4   F0           MOVX      @DPTR,A
    200                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
   \   0002C5                ; Setup parameters for call to function osal_memcpy
   \   0002C5   78..         MOV       R0,#?V4
   \   0002C7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002CA   7C01         MOV       R4,#0x1
   \   0002CC   7D00         MOV       R5,#0x0
   \   0002CE   AA..         MOV       R2,?V0
   \   0002D0   AB..         MOV       R3,?V1
   \   0002D2   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0002D5   12....       LCALL     ?DEALLOC_XSTACK8
    201                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0002D8                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002D8   A8..         MOV       R0,?XSP + 0
   \   0002DA   A9..         MOV       R1,?XSP + 1
   \   0002DC   88..         MOV       ?V2,R0
   \   0002DE   89..         MOV       ?V3,R1
   \   0002E0   78..         MOV       R0,#?V2
   \   0002E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002E5   7449         MOV       A,#0x49
   \   0002E7   12....       LCALL     ?XSTACK_DISP102_8
   \   0002EA   7904         MOV       R1,#0x4
   \   0002EC   743F         MOV       A,#0x3f
   \   0002EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F1   12....       LCALL     ?Subroutine5 & 0xFFFF
    202              }
   \                     ??CrossCallReturnLabel_20:
   \   0002F4   12....       LCALL     ?DEALLOC_XSTACK8
    203              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??pt_ZclReadGetProxyEntry_14:
   \   0002F7   743C         MOV       A,#0x3c
   \   0002F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FC   E0           MOVX      A,@DPTR
   \   0002FD   A2E1         MOV       C,0xE0 /* A   */.1
   \   0002FF   503A         JNC       ??pt_ZclReadGetProxyEntry_13
    204              {
    205                groupCount += 1;
   \   000301   7401         MOV       A,#0x1
   \   000303   12....       LCALL     ?XSTACK_DISP0_8
   \   000306   E0           MOVX      A,@DPTR
   \   000307   04           INC       A
   \   000308   F0           MOVX      @DPTR,A
    206                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
   \   000309                ; Setup parameters for call to function osal_memcpy
   \   000309   78..         MOV       R0,#?V4
   \   00030B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00030E   7C01         MOV       R4,#0x1
   \   000310   7D00         MOV       R5,#0x0
   \   000312   AA..         MOV       R2,?V0
   \   000314   AB..         MOV       R3,?V1
   \   000316   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000319   12....       LCALL     ?DEALLOC_XSTACK8
    207                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   00031C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00031C   A8..         MOV       R0,?XSP + 0
   \   00031E   A9..         MOV       R1,?XSP + 1
   \   000320   88..         MOV       ?V0,R0
   \   000322   89..         MOV       ?V1,R1
   \   000324   78..         MOV       R0,#?V0
   \   000326   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000329   7449         MOV       A,#0x49
   \   00032B   12....       LCALL     ?XSTACK_DISP102_8
   \   00032E   7904         MOV       R1,#0x4
   \   000330   7443         MOV       A,#0x43
   \   000332   12....       LCALL     ?XSTACK_DISP0_8
   \   000335   12....       LCALL     ?Subroutine5 & 0xFFFF
    208              }
    209            }
   \                     ??CrossCallReturnLabel_21:
   \   000338   12....       LCALL     ?DEALLOC_XSTACK8
    210            
    211            gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_13:
   \   00033B                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00033B   A8..         MOV       R0,?XSP + 0
   \   00033D   A9..         MOV       R1,?XSP + 1
   \   00033F   88..         MOV       ?V0,R0
   \   000341   89..         MOV       ?V1,R1
   \   000343   78..         MOV       R0,#?V0
   \   000345   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000348   7449         MOV       A,#0x49
   \   00034A   12....       LCALL     ?XSTACK_DISP102_8
   \   00034D   7901         MOV       R1,#0x1
   \   00034F   7447         MOV       A,#0x47
   \   000351   12....       LCALL     ?XSTACK_DISP0_8
   \   000354   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000357   12....       LCALL     ?DEALLOC_XSTACK8
    212            
    213            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
   \   00035A   7406         MOV       A,#0x6
   \   00035C   12....       LCALL     ?XSTACK_DISP0_8
   \   00035F   E0           MOVX      A,@DPTR
   \   000360   5418         ANL       A,#0x18
   \   000362   6418         XRL       A,#0x18
   \   000364   6017         JZ        ??pt_ZclReadGetProxyEntry_15
    214            {
    215              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   000366                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000366   78..         MOV       R0,#?V0
   \   000368   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00036B   7449         MOV       A,#0x49
   \   00036D   12....       LCALL     ?XSTACK_DISP102_8
   \   000370   7901         MOV       R1,#0x1
   \   000372   7448         MOV       A,#0x48
   \   000374   12....       LCALL     ?XSTACK_DISP0_8
   \   000377   12....       LCALL     ?Subroutine5 & 0xFFFF
    216            }
   \                     ??CrossCallReturnLabel_23:
   \   00037A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??pt_ZclReadGetProxyEntry_15:
   \   00037D   74AA         MOV       A,#-0x56
   \   00037F   12....       LCALL     ?XSTACK_DISP0_8
   \   000382   E0           MOVX      A,@DPTR
   \   000383   F5..         MOV       ?V0,A
   \   000385   A3           INC       DPTR
   \   000386   E0           MOVX      A,@DPTR
   \   000387   F5..         MOV       ?V1,A
    217            
    218            if ( pData != NULL )
   \   000389   85..82       MOV       DPL,?V0
   \   00038C   F583         MOV       DPH,A
   \   00038E   E0           MOVX      A,@DPTR
   \   00038F   F8           MOV       R0,A
   \   000390   E5..         MOV       A,?V12
   \   000392   45..         ORL       A,?V13
   \   000394   7003         JNZ       $+5
   \   000396   02....       LJMP      ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
    219            {
    220              uint8 sinkEntryLen;
    221              uint16 totalLen;
    222              
    223              sinkEntryLen = gpdEntryLen;
   \   000399   85..82       MOV       DPL,?XSP + 0
   \   00039C   85..83       MOV       DPH,?XSP + 1
   \   00039F   E0           MOVX      A,@DPTR
   \   0003A0   FF           MOV       R7,A
    224              if ( *len != 0 )
   \   0003A1   E8           MOV       A,R0
   \   0003A2   6004         JZ        ??pt_ZclReadGetProxyEntry_17
    225              {
    226              gpdEntryLen -= sizeof ( uint16 );
   \   0003A4   E0           MOVX      A,@DPTR
   \   0003A5   24FE         ADD       A,#-0x2
   \   0003A7   F0           MOVX      @DPTR,A
    227              }
    228              totalLen = gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_17:
   \   0003A8   E0           MOVX      A,@DPTR
   \   0003A9   F8           MOV       R0,A
   \   0003AA   7402         MOV       A,#0x2
   \   0003AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AF   E8           MOV       A,R0
   \   0003B0   F0           MOVX      @DPTR,A
   \   0003B1   A3           INC       DPTR
   \   0003B2   E4           CLR       A
   \   0003B3   F0           MOVX      @DPTR,A
    229              totalLen += *len;
   \   0003B4   85..82       MOV       DPL,?V0
   \   0003B7   85..83       MOV       DPH,?V1
   \   0003BA   E0           MOVX      A,@DPTR
   \   0003BB   F8           MOV       R0,A
   \   0003BC   7402         MOV       A,#0x2
   \   0003BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C1   E0           MOVX      A,@DPTR
   \   0003C2   28           ADD       A,R0
   \   0003C3   F0           MOVX      @DPTR,A
   \   0003C4   A3           INC       DPTR
   \   0003C5   E0           MOVX      A,@DPTR
   \   0003C6   3400         ADDC      A,#0x0
   \   0003C8   F0           MOVX      @DPTR,A
    230              osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
   \   0003C9                ; Setup parameters for call to function osal_memcpy
   \   0003C9   7402         MOV       A,#0x2
   \   0003CB   12....       LCALL     ?XSTACK_DISP100_8
   \   0003CE   88..         MOV       ?V4,R0
   \   0003D0   89..         MOV       ?V5,R1
   \   0003D2   75..00       MOV       ?V6,#0x0
   \   0003D5   78..         MOV       R0,#?V4
   \   0003D7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003DA   7C02         MOV       R4,#0x2
   \   0003DC   7D00         MOV       R5,#0x0
   \   0003DE   AA..         MOV       R2,?V12
   \   0003E0   AB..         MOV       R3,?V13
   \   0003E2   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0003E5   12....       LCALL     ?DEALLOC_XSTACK8
    231              if ( *len == 0 )
   \   0003E8   85..82       MOV       DPL,?V0
   \   0003EB   85..83       MOV       DPH,?V1
   \   0003EE   E0           MOVX      A,@DPTR
   \   0003EF   700A         JNZ       ??pt_ZclReadGetProxyEntry_18
    232              {
    233                pData += sizeof ( uint16 );
   \   0003F1   E5..         MOV       A,?V12
   \   0003F3   2402         ADD       A,#0x2
   \   0003F5   F5..         MOV       ?V12,A
   \   0003F7   5002         JNC       ??pt_ZclReadGetProxyEntry_18
   \   0003F9   05..         INC       ?V13
    234              }
    235              gpdEntryLen += sizeof ( uint16 );
   \                     ??pt_ZclReadGetProxyEntry_18:
   \   0003FB   85..82       MOV       DPL,?XSP + 0
   \   0003FE   85..83       MOV       DPH,?XSP + 1
   \   000401   E0           MOVX      A,@DPTR
   \   000402   2402         ADD       A,#0x2
   \   000404   F0           MOVX      @DPTR,A
    236              
    237              pData += *len;
    238              osal_memcpy( pData, gpdEntry, sinkEntryLen );
   \   000405                ; Setup parameters for call to function osal_memcpy
   \   000405   7447         MOV       A,#0x47
   \   000407   12....       LCALL     ?XSTACK_DISP100_8
   \   00040A   88..         MOV       ?V4,R0
   \   00040C   89..         MOV       ?V5,R1
   \   00040E   78..         MOV       R0,#?V4
   \   000410   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000413   EF           MOV       A,R7
   \   000414   FC           MOV       R4,A
   \   000415   7D00         MOV       R5,#0x0
   \   000417   85..82       MOV       DPL,?V0
   \   00041A   85..83       MOV       DPH,?V1
   \   00041D   E0           MOVX      A,@DPTR
   \   00041E   F8           MOV       R0,A
   \   00041F   E5..         MOV       A,?V12
   \   000421   28           ADD       A,R0
   \   000422   FA           MOV       R2,A
   \   000423   E4           CLR       A
   \   000424   35..         ADDC      A,?V13
   \   000426   FB           MOV       R3,A
   \   000427   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00042A   12....       LCALL     ?DEALLOC_XSTACK8
    239              if ( *len != 0 )
   \   00042D   85..82       MOV       DPL,?V0
   \   000430   85..83       MOV       DPH,?V1
   \   000433   E0           MOVX      A,@DPTR
   \   000434   601B         JZ        ??pt_ZclReadGetProxyEntry_19
    240              {
    241                *len = totalLen;
   \   000436   7402         MOV       A,#0x2
   \   000438   12....       LCALL     ?XSTACK_DISP0_8
   \   00043B   E0           MOVX      A,@DPTR
   \   00043C   85..82       MOV       DPL,?V0
   \   00043F   85..83       MOV       DPH,?V1
   \   000442   801D         SJMP      ??pt_ZclReadGetProxyEntry_20
    242                return status;
    243              }
    244              *len += gpdEntryLen;
    245              return status;
    246            }
    247            else
    248            {
    249              if ( *len == 0 )
   \                     ??pt_ZclReadGetProxyEntry_16:
   \   000444   E8           MOV       A,R0
   \   000445   700A         JNZ       ??pt_ZclReadGetProxyEntry_19
    250              {
    251                gpdEntryLen += sizeof ( uint16 );
   \   000447   85..82       MOV       DPL,?XSP + 0
   \   00044A   85..83       MOV       DPH,?XSP + 1
   \   00044D   E0           MOVX      A,@DPTR
   \   00044E   2402         ADD       A,#0x2
   \   000450   F0           MOVX      @DPTR,A
    252              }
    253              *len += gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_19:
   \   000451   85..82       MOV       DPL,?XSP + 0
   \   000454   85..83       MOV       DPH,?XSP + 1
   \   000457   E0           MOVX      A,@DPTR
   \   000458   F8           MOV       R0,A
   \   000459   85..82       MOV       DPL,?V0
   \   00045C   85..83       MOV       DPH,?V1
   \   00045F   E0           MOVX      A,@DPTR
   \   000460   28           ADD       A,R0
   \                     ??pt_ZclReadGetProxyEntry_20:
   \   000461   F0           MOVX      @DPTR,A
    254              return status;
   \   000462   EE           MOV       A,R6
   \   000463   F9           MOV       R1,A
   \                     ??pt_ZclReadGetProxyEntry_2:
   \   000464   7492         MOV       A,#-0x6e
   \   000466   12....       LCALL     ?DEALLOC_XSTACK8
   \   000469   7F10         MOV       R7,#0x10
   \   00046B   02....       LJMP      ?BANKED_LEAVE_XDATA
    255            }
    256          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine9_0
   \   000004                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR       A
   \   000001   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000004   F8           MOV       R0,A
   \   000005   04           INC       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   7447         MOV       A,#0x47
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FB           MOV       R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000003   E9           MOV       A,R1
   \   000004   FE           MOV       R6,A
   \   000005   740A         MOV       A,#0xa
   \   000007   6E           XRL       A,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   A9..         MOV       R1,?V0
   \   000004   AA..         MOV       R2,?V1
   \   000006   AB..         MOV       R3,?V2
   \   000008                REQUIRE ??Subroutine12_0
   \   000008                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET
    257          
    258          /*********************************************************************
    259           * @fn      zclGpp_ReadWriteAttrCB
    260           *
    261           * @brief   Handle Diagnostics attributes.
    262           *
    263           * @param   clusterId - cluster that attribute belongs to
    264           * @param   attrId - attribute to be read or written
    265           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    266           * @param   pValue - pointer to attribute value, OTA endian
    267           * @param   pLen - length of attribute value read, native endian
    268           *
    269           * @return  status
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclGpp_ReadWriteAttrCB:
    272                                                   uint8 *pValue, uint16 *pLen )
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    274            ZStatus_t status = ZSuccess;
   \   000007   7900         MOV       R1,#0x0
    275            uint16 proxyTableIndex;
    276            uint8 i;
    277          
    278            switch ( oper )
   \   000009   E5..         MOV       A,?V1
   \   00000B   6008         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   00000D   14           DEC       A
   \   00000E   6005         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   000010   14           DEC       A
   \   000011   604A         JZ        ??zclGpp_ReadWriteAttrCB_1
   \   000013   804A         SJMP      ??zclGpp_ReadWriteAttrCB_2
    279            {
    280              case ZCL_OPER_LEN:
    281              case ZCL_OPER_READ:
    282                if ( attrId == ATTRID_GP_PROXY_TABLE )
   \                     ??zclGpp_ReadWriteAttrCB_0:
   \   000015   7411         MOV       A,#0x11
   \   000017   6C           XRL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   7044         JNZ       ??zclGpp_ReadWriteAttrCB_2
    283                { 
    284                  for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001B   75..00       MOV       ?V0,#0x0
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   \   000028   740E         MOV       A,#0xe
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
    285                  {
    286                    proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
    287                    
    288                    status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
   \                     ??zclGpp_ReadWriteAttrCB_3:
   \   000034                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2410         ADD       A,#0x10
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   3403         ADDC      A,#0x3
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   E9           MOV       A,R1
   \   00004F   F9           MOV       R1,A
    289                    if ( status != ZSuccess )
   \   000050   700B         JNZ       ??zclGpp_ReadWriteAttrCB_1
    290                    {
    291                      status = ZFailure;
    292                      break;
    293                    }
    294                  }
   \   000052   05..         INC       ?V0
   \   000054   E5..         MOV       A,?V0
   \   000056   C3           CLR       C
   \   000057   9406         SUBB      A,#0x6
   \   000059   5004         JNC       ??zclGpp_ReadWriteAttrCB_2
   \   00005B   80D7         SJMP      ??zclGpp_ReadWriteAttrCB_3
    295                  
    296                }
    297                break;
    298          
    299              case ZCL_OPER_WRITE:
    300                status = ZFailure;
   \                     ??zclGpp_ReadWriteAttrCB_1:
   \   00005D   7901         MOV       R1,#0x1
    301                break;
    302            }
    303          
    304            return ( status );
   \                     ??zclGpp_ReadWriteAttrCB_2:
   \   00005F   7F04         MOV       R7,#0x4
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
    305          }
    306          
    307           /*********************************************************************
    308           * @fn          gp_pairingSetProxyTblOptions
    309           *
    310           * @brief       Function to fill the options pramenter in a Proxy Table entry
    311           *              from a GP Pairing Command
    312           *
    313           * @param       pBitField - pointer to the bit field.
    314           *              bit       - position of the bit to set in the given bitfield.
    315           *
    316           * @return      
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
   \                     gp_pairingSetProxyTblOptions:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    320            uint8  proxyOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV       R4,?XSP + 0
   \   000017   AD..         MOV       R5,?XSP + 1
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    321            uint16 opt = 0; 
    322            
    323            PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
    324            PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
    325            PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
   \   00001E   8A..         MOV       ?V0,R2
   \   000020   EA           MOV       A,R2
   \   000021   5407         ANL       A,#0x7
   \   000023   F8           MOV       R0,A
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   54F8         ANL       A,#0xf8
   \   00002D   48           ORL       A,R0
   \   00002E   4418         ORL       A,#0x18
   \   000030   F0           MOVX      @DPTR,A
    326            PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
   \   000031   54DF         ANL       A,#0xdf
   \   000033   FA           MOV       R2,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FB           MOV       R3,A
   \   000037   85....       MOV       ?V1,?V5
   \   00003A   7403         MOV       A,#0x3
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?US_SHR
   \   000041   E5..         MOV       A,?V0
   \   000043   5420         ANL       A,#0x20
   \   000045   F8           MOV       R0,A
   \   000046   EA           MOV       A,R2
   \   000047   48           ORL       A,R0
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   EB           MOV       A,R3
   \   000051   F0           MOVX      @DPTR,A
    327            
    328            if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
   \   000052   85....       MOV       ?V0,?V4
   \   000055   E5..         MOV       A,?V0
   \   000057   C4           SWAP      A
   \   000058   13           RRC       A
   \   000059   5407         ANL       A,#0x7
   \   00005B   5403         ANL       A,#0x3
   \   00005D   F9           MOV       R1,A
   \   00005E   7403         MOV       A,#0x3
   \   000060   69           XRL       A,R1
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   7017         JNZ       ??gp_pairingSetProxyTblOptions_0
    329            {
    330              PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   D2E6         SETB      0xE0 /* A   */.6
   \   00006C   F0           MOVX      @DPTR,A
    331            }
    332            else
    333            {
    334              PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
    335            }
    336            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
    337            {
    338              PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
    339            }
    340            else
    341            {
    342              PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_1:
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   C2E7         CLR       0xE0 /* A   */.7
   \   000070   F0           MOVX      @DPTR,A
    343            }
    344            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
   \   000071   7402         MOV       A,#0x2
   \   000073   69           XRL       A,R1
   \   000074   7017         JNZ       ??gp_pairingSetProxyTblOptions_2
    345            {
    346              PROXY_TBL_SET_CGROUP( &proxyOpt[1] );
   \   000076   7401         MOV       A,#0x1
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   D2E0         SETB      0xE0 /* A   */.0
   \   00007E   8015         SJMP      ??gp_pairingSetProxyTblOptions_3
    347            }
   \                     ??gp_pairingSetProxyTblOptions_0:
   \   000080   E0           MOVX      A,@DPTR
   \   000081   C2E6         CLR       0xE0 /* A   */.6
   \   000083   F0           MOVX      @DPTR,A
   \   000084   7401         MOV       A,#0x1
   \   000086   69           XRL       A,R1
   \   000087   70E4         JNZ       ??gp_pairingSetProxyTblOptions_1
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   D2E7         SETB      0xE0 /* A   */.7
   \   00008C   F0           MOVX      @DPTR,A
    348            else
    349            {
    350              PROXY_TBL_CLR_CGROUP( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_2:
   \   00008D   7401         MOV       A,#0x1
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   E0           MOVX      A,@DPTR
   \   000093   C2E0         CLR       0xE0 /* A   */.0
   \                     ??gp_pairingSetProxyTblOptions_3:
   \   000095   F0           MOVX      @DPTR,A
    351            }
    352            
    353            // FALSE by default
    354            PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
    355            
    356            // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
    357            // of this proxy. The default value is FALSE
    358            PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
   \   000096   E0           MOVX      A,@DPTR
   \   000097   54F9         ANL       A,#0xf9
   \   000099   F0           MOVX      @DPTR,A
    359            // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
    360            if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
   \   00009A   E5..         MOV       A,?V0
   \   00009C   5480         ANL       A,#0x80
   \   00009E   6005         JZ        ??gp_pairingSetProxyTblOptions_4
    361            {
    362              PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   D2E3         SETB      0xE0 /* A   */.3
   \   0000A3   8003         SJMP      ??gp_pairingSetProxyTblOptions_5
    363            }
    364            else
    365            {
    366              PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_4:
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   C2E3         CLR       0xE0 /* A   */.3
   \                     ??gp_pairingSetProxyTblOptions_5:
   \   0000A8   F0           MOVX      @DPTR,A
    367            }
    368            
    369            if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
   \   0000A9   E9           MOV       A,R1
   \   0000AA   7005         JNZ       ??gp_pairingSetProxyTblOptions_6
    370            {
    371              PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   D2E4         SETB      0xE0 /* A   */.4
   \   0000AF   8003         SJMP      ??gp_pairingSetProxyTblOptions_7
    372            }
    373            else
    374            {
    375              PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_6:
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   C2E4         CLR       0xE0 /* A   */.4
   \                     ??gp_pairingSetProxyTblOptions_7:
   \   0000B4   F0           MOVX      @DPTR,A
    376            }
    377            if ( (GP_ALIAS ( pairingOpt )) && (!GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt )) )
   \   0000B5   85....       MOV       ?V1,?V5
   \   0000B8   85....       MOV       ?V2,?V6
   \   0000BB   85....       MOV       ?V3,?V7
   \   0000BE   90....       MOV       DPTR,#__Constant_10000
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?L_AND_X
   \   0000C6   E5..         MOV       A,?V0
   \   0000C8   45..         ORL       A,?V1
   \   0000CA   45..         ORL       A,?V2
   \   0000CC   45..         ORL       A,?V3
   \   0000CE   600F         JZ        ??gp_pairingSetProxyTblOptions_8
   \   0000D0   7402         MOV       A,#0x2
   \   0000D2   69           XRL       A,R1
   \   0000D3   600A         JZ        ??gp_pairingSetProxyTblOptions_8
    378            {
    379              PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
   \   0000D5   7401         MOV       A,#0x1
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   D2E5         SETB      0xE0 /* A   */.5
   \   0000DD   8008         SJMP      ??gp_pairingSetProxyTblOptions_9
    380            }
    381            else
    382            {
    383              PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
   \                     ??gp_pairingSetProxyTblOptions_8:
   \   0000DF   7401         MOV       A,#0x1
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   C2E5         CLR       0xE0 /* A   */.5
   \                     ??gp_pairingSetProxyTblOptions_9:
   \   0000E7   F0           MOVX      @DPTR,A
    384            }
    385            if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
   \   0000E8   7409         MOV       A,#0x9
   \   0000EA   78..         MOV       R0,#?V4
   \   0000EC   12....       LCALL     ?US_SHR
   \   0000EF   E5..         MOV       A,?V4
   \   0000F1   5403         ANL       A,#0x3
   \   0000F3   C3           CLR       C
   \   0000F4   9402         SUBB      A,#0x2
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   4004         JC        ??gp_pairingSetProxyTblOptions_10
    386            {
    387              PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
   \   0000F9   D2E6         SETB      0xE0 /* A   */.6
   \   0000FB   8002         SJMP      ??gp_pairingSetProxyTblOptions_11
    388            }
    389            else
    390            {
    391              PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_10:
   \   0000FD   C2E6         CLR       0xE0 /* A   */.6
   \                     ??gp_pairingSetProxyTblOptions_11:
   \   0000FF   F0           MOVX      @DPTR,A
    392            }
    393            PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
    394            PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
   \   000100   E0           MOVX      A,@DPTR
   \   000101   C2E7         CLR       0xE0 /* A   */.7
   \   000103   12....       LCALL     ?Subroutine8 & 0xFFFF
    395            
    396            opt |= ( ( proxyOpt[0] ) & 0x00FF );
    397            opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
    398              
    399            return opt;
   \                     ??CrossCallReturnLabel_11:
   \   000106   FA           MOV       R2,A
   \   000107   7401         MOV       A,#0x1
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   FB           MOV       R3,A
   \   00010E   7402         MOV       A,#0x2
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   \   000113   7F08         MOV       R7,#0x8
   \   000115   02....       LJMP      ?BANKED_LEAVE_XDATA
    400          }
    401          
    402          /*********************************************************************
    403           * @fn          gp_PairingUpdateProxyTlb
    404           *
    405           * @brief       General function fill the proxy table vector
    406           *
    407           * @param       
    408           *
    409           * @return      
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
   \                     gp_PairingUpdateProxyTlb:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 72
   \   000005   74B8         MOV       A,#-0x48
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    413            uint8  entryVector[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_3`
   \   000011   7407         MOV       A,#0x7
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    414            uint8  entryLen = 0;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
    415            uint8  addSink;
    416            uint8  newSinkGroup = 0;
    417            uint16 entryOptions = 0;
   \   000022   7403         MOV       A,#0x3
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    418            uint8  securityOpt = 0;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
    419            uint8  searchCounter = 0x0A;
   \   000032   04           INC       A
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   740A         MOV       A,#0xa
   \   000038   F0           MOVX      @DPTR,A
    420            uint16 invalidAlias = 0xFFFF;
   \   000039   7405         MOV       A,#0x5
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   74FF         MOV       A,#-0x1
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
    421            
    422            addSink = GP_ADD_SINK( payload->options );
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   78..         MOV       R0,#?V8
   \   000049   12....       LCALL     ?L_MOV_X
   \   00004C   85....       MOV       ?V0,?V8
   \   00004F   E5..         MOV       A,?V0
   \   000051   13           RRC       A
   \   000052   13           RRC       A
   \   000053   13           RRC       A
   \   000054   541F         ANL       A,#0x1f
   \   000056   5401         ANL       A,#0x1
   \   000058   F5..         MOV       ?V6,A
    423            
    424            entryOptions = gp_pairingSetProxyTblOptions( payload->options );
   \   00005A                ; Setup parameters for call to function gp_pairingSetProxyTblOptions
   \   00005A   AA..         MOV       R2,?V8
   \   00005C   AB..         MOV       R3,?V9
   \   00005E   AC..         MOV       R4,?V10
   \   000060   AD..         MOV       R5,?V11
   \   000062   12....       LCALL     `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
   \   000065   7403         MOV       A,#0x3
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   EA           MOV       A,R2
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   EB           MOV       A,R3
   \   00006E   12....       LCALL     ?Subroutine1 & 0xFFFF
    425            gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_0:
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   7409         MOV       A,#0x9
   \   000076   12....       LCALL     ?XSTACK_DISP102_8
   \   000079   7902         MOV       R1,#0x2
   \   00007B   7405         MOV       A,#0x5
   \   00007D   12....       LCALL     ?XSTACK_DISP101_8
   \   000080   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   8E82         MOV       DPL,R6
   \   000088   8F83         MOV       DPH,R7
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?L_MOV_X
   \   00008F   E5..         MOV       A,?V0
   \   000091   5407         ANL       A,#0x7
   \   000093   F8           MOV       R0,A
   \   000094   7018         JNZ       ??gp_PairingUpdateProxyTlb_0
    426              
    427            // Options bitfield
    428            // If Application Id bitfield is 0b000
    429            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    430            {        
    431              // Populate GPD ID
    432              entryLen += sizeof( uint32 );
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   2404         ADD       A,#0x4
   \   00009F   12....       LCALL     ?Subroutine1 & 0xFFFF
    433              gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
    434            }
   \                     ??CrossCallReturnLabel_1:
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   7409         MOV       A,#0x9
   \   0000A7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AA   7904         MOV       R1,#0x4
   \   0000AC   8019         SJMP      ??gp_PairingUpdateProxyTlb_1
    435            // If Application Id bitfield is 0b010
    436            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_PairingUpdateProxyTlb_0:
   \   0000AE   7402         MOV       A,#0x2
   \   0000B0   68           XRL       A,R0
   \   0000B1   7020         JNZ       ??gp_PairingUpdateProxyTlb_2
    437            {   
    438              gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0000B3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000B3   A8..         MOV       R0,?XSP + 0
   \   0000B5   A9..         MOV       R1,?XSP + 1
   \   0000B7   88..         MOV       ?V0,R0
   \   0000B9   89..         MOV       ?V1,R1
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   7409         MOV       A,#0x9
   \   0000C2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C5   7908         MOV       R1,#0x8
   \                     ??gp_PairingUpdateProxyTlb_1:
   \   0000C7   EE           MOV       A,R6
   \   0000C8   29           ADD       A,R1
   \   0000C9   FA           MOV       R2,A
   \   0000CA   E4           CLR       A
   \   0000CB   3F           ADDC      A,R7
   \   0000CC   FB           MOV       R3,A
    439            }
   \   0000CD   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
    440            
    441             gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_2:
   \   0000D3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000D3   A8..         MOV       R0,?XSP + 0
   \   0000D5   A9..         MOV       R1,?XSP + 1
   \   0000D7   88..         MOV       ?V0,R0
   \   0000D9   89..         MOV       ?V1,R1
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   7409         MOV       A,#0x9
   \   0000E2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E5   7901         MOV       R1,#0x1
   \   0000E7   EE           MOV       A,R6
   \   0000E8   2410         ADD       A,#0x10
   \   0000EA   FA           MOV       R2,A
   \   0000EB   E4           CLR       A
   \   0000EC   3F           ADDC      A,R7
   \   0000ED   FB           MOV       R3,A
   \   0000EE   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000F1   12....       LCALL     ?DEALLOC_XSTACK8
    442          
    443            if( !GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) )
   \   0000F4   EE           MOV       A,R6
   \   0000F5   2432         ADD       A,#0x32
   \   0000F7   F5..         MOV       ?V4,A
   \   0000F9   E4           CLR       A
   \   0000FA   3F           ADDC      A,R7
   \   0000FB   F5..         MOV       ?V5,A
   \   0000FD   8E82         MOV       DPL,R6
   \   0000FF   8F83         MOV       DPH,R7
   \   000101   78..         MOV       R0,#?V0
   \   000103   12....       LCALL     ?L_MOV_X
   \   000106   E5..         MOV       A,?V0
   \   000108   C4           SWAP      A
   \   000109   13           RRC       A
   \   00010A   5407         ANL       A,#0x7
   \   00010C   5403         ANL       A,#0x3
   \   00010E   6402         XRL       A,#0x2
   \   000110   A8..         MOV       R0,?XSP + 0
   \   000112   A9..         MOV       R1,?XSP + 1
   \   000114   88..         MOV       ?V0,R0
   \   000116   89..         MOV       ?V1,R1
   \   000118   78..         MOV       R0,#?V0
   \   00011A   6010         JZ        ??gp_PairingUpdateProxyTlb_3
    444            {
    445              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \   00011C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011F   7409         MOV       A,#0x9
   \   000121   12....       LCALL     ?XSTACK_DISP102_8
   \   000124   7902         MOV       R1,#0x2
   \   000126   AA..         MOV       R2,?V4
   \   000128   AB..         MOV       R3,?V5
   \   00012A   800F         SJMP      ??gp_PairingUpdateProxyTlb_4
    446            }
    447            else
    448            {
    449              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_3:
   \   00012C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012F   7409         MOV       A,#0x9
   \   000131   12....       LCALL     ?XSTACK_DISP102_8
   \   000134   7902         MOV       R1,#0x2
   \   000136   7407         MOV       A,#0x7
   \   000138   12....       LCALL     ?XSTACK_DISP101_8
    450            }
   \                     ??gp_PairingUpdateProxyTlb_4:
   \   00013B   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00013E   12....       LCALL     ?DEALLOC_XSTACK8
    451          
    452          
    453            //Security options
    454            securityOpt |= GP_GET_SEC_LEVEL( payload->options );
    455            securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
   \   000141   8E82         MOV       DPL,R6
   \   000143   8F83         MOV       DPH,R7
   \   000145   78..         MOV       R0,#?V0
   \   000147   12....       LCALL     ?L_MOV_X
   \   00014A   85....       MOV       ?V8,?V0
   \   00014D   85....       MOV       ?V9,?V1
   \   000150   740B         MOV       A,#0xb
   \   000152   78..         MOV       R0,#?V8
   \   000154   12....       LCALL     ?US_SHR
   \   000157   E5..         MOV       A,?V8
   \   000159   33           RLC       A
   \   00015A   33           RLC       A
   \   00015B   54FC         ANL       A,#0xfc
   \   00015D   541C         ANL       A,#0x1c
   \   00015F   F9           MOV       R1,A
   \   000160   7409         MOV       A,#0x9
   \   000162   78..         MOV       R0,#?V0
   \   000164   12....       LCALL     ?US_SHR
   \   000167   E5..         MOV       A,?V0
   \   000169   5403         ANL       A,#0x3
   \   00016B   49           ORL       A,R1
   \   00016C   F8           MOV       R0,A
   \   00016D   7402         MOV       A,#0x2
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   E0           MOVX      A,@DPTR
   \   000173   48           ORL       A,R0
   \   000174   F0           MOVX      @DPTR,A
    456            osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
   \   000175                ; Setup parameters for call to function osal_memcpy
   \   000175   7402         MOV       A,#0x2
   \   000177   12....       LCALL     ?XSTACK_DISP100_8
   \   00017A   88..         MOV       ?V0,R0
   \   00017C   89..         MOV       ?V1,R1
   \   00017E   75..00       MOV       ?V2,#0x0
   \   000181   78..         MOV       R0,#?V0
   \   000183   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000186   7C01         MOV       R4,#0x1
   \   000188   7D00         MOV       R5,#0x0
   \   00018A   7403         MOV       A,#0x3
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   F8           MOV       R0,A
   \   000191   740A         MOV       A,#0xa
   \   000193   12....       LCALL     ?XSTACK_DISP0_8
   \   000196   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000199   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00019C   12....       LCALL     ?DEALLOC_XSTACK8
    457            entryLen += sizeof ( uint8 );
   \   00019F   85..82       MOV       DPL,?XSP + 0
   \   0001A2   85..83       MOV       DPH,?XSP + 1
   \   0001A5   E0           MOVX      A,@DPTR
   \   0001A6   04           INC       A
   \   0001A7   12....       LCALL     ?Subroutine1 & 0xFFFF
    458          
    459            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_2:
   \   0001AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AD   7409         MOV       A,#0x9
   \   0001AF   12....       LCALL     ?XSTACK_DISP102_8
   \   0001B2   7904         MOV       R1,#0x4
   \   0001B4   EE           MOV       A,R6
   \   0001B5   241E         ADD       A,#0x1e
   \   0001B7   FA           MOV       R2,A
   \   0001B8   E4           CLR       A
   \   0001B9   3F           ADDC      A,R7
   \   0001BA   FB           MOV       R3,A
   \   0001BB   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
    460            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
   \   0001C1                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001C1   78..         MOV       R0,#?V0
   \   0001C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C6   7409         MOV       A,#0x9
   \   0001C8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001CB   7910         MOV       R1,#0x10
   \   0001CD   EE           MOV       A,R6
   \   0001CE   2422         ADD       A,#0x22
   \   0001D0   FA           MOV       R2,A
   \   0001D1   E4           CLR       A
   \   0001D2   3F           ADDC      A,R7
   \   0001D3   FB           MOV       R3,A
   \   0001D4   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
    461            
    462            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0001DA   EE           MOV       A,R6
   \   0001DB   2411         ADD       A,#0x11
   \   0001DD   F5..         MOV       ?V2,A
   \   0001DF   E4           CLR       A
   \   0001E0   3F           ADDC      A,R7
   \   0001E1   F5..         MOV       ?V3,A
   \   0001E3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001E3   78..         MOV       R0,#?V0
   \   0001E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E8   7409         MOV       A,#0x9
   \   0001EA   12....       LCALL     ?XSTACK_DISP102_8
   \   0001ED   7908         MOV       R1,#0x8
   \   0001EF   AA..         MOV       R2,?V2
   \   0001F1   AB..         MOV       R3,?V3
   \   0001F3   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001F6   12....       LCALL     ?DEALLOC_XSTACK8
    463            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   0001F9   EE           MOV       A,R6
   \   0001FA   2419         ADD       A,#0x19
   \   0001FC   F5..         MOV       ?V0,A
   \   0001FE   E4           CLR       A
   \   0001FF   3F           ADDC      A,R7
   \   000200   F5..         MOV       ?V1,A
   \   000202                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000202   A8..         MOV       R0,?XSP + 0
   \   000204   A9..         MOV       R1,?XSP + 1
   \   000206   88..         MOV       ?V8,R0
   \   000208   89..         MOV       ?V9,R1
   \   00020A   78..         MOV       R0,#?V8
   \   00020C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020F   7409         MOV       A,#0x9
   \   000211   12....       LCALL     ?XSTACK_DISP102_8
   \   000214   7902         MOV       R1,#0x2
   \   000216   AA..         MOV       R2,?V0
   \   000218   AB..         MOV       R3,?V1
   \   00021A   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00021D   12....       LCALL     ?DEALLOC_XSTACK8
    464            // to add the invalid entries
    465            osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \   000220                ; Setup parameters for call to function osal_memset
   \   000220   7C08         MOV       R4,#0x8
   \   000222   7D00         MOV       R5,#0x0
   \   000224   79FF         MOV       R1,#-0x1
   \   000226   AA..         MOV       R2,?V2
   \   000228   AB..         MOV       R3,?V3
   \   00022A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    466            payload->sinkNwkAddr = 0xFFFF;
   \   00022D   85..82       MOV       DPL,?V0
   \   000230   85..83       MOV       DPH,?V1
   \   000233   74FF         MOV       A,#-0x1
   \   000235   F0           MOVX      @DPTR,A
   \   000236   A3           INC       DPTR
   \   000237   F0           MOVX      @DPTR,A
    467            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   000238                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000238   78..         MOV       R0,#?V8
   \   00023A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00023D   7409         MOV       A,#0x9
   \   00023F   12....       LCALL     ?XSTACK_DISP102_8
   \   000242   7908         MOV       R1,#0x8
   \   000244   AA..         MOV       R2,?V2
   \   000246   AB..         MOV       R3,?V3
   \   000248   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00024B   12....       LCALL     ?DEALLOC_XSTACK8
    468            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   00024E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00024E   A8..         MOV       R0,?XSP + 0
   \   000250   A9..         MOV       R1,?XSP + 1
   \   000252   88..         MOV       ?V2,R0
   \   000254   89..         MOV       ?V3,R1
   \   000256   78..         MOV       R0,#?V2
   \   000258   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025B   7409         MOV       A,#0x9
   \   00025D   12....       LCALL     ?XSTACK_DISP102_8
   \   000260   7902         MOV       R1,#0x2
   \   000262   AA..         MOV       R2,?V0
   \   000264   AB..         MOV       R3,?V1
   \   000266   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000269   12....       LCALL     ?DEALLOC_XSTACK8
    469            
    470            newSinkGroup = PROXY_TBL_GET_DGROUP( entryOptions & 0x00FF );
    471            newSinkGroup |= PROXY_TBL_GET_CGROUP( ( entryOptions & 0xFF00 ) >> 8 );
    472            osal_memset( &entryVector[entryLen], newSinkGroup, sizeof ( uint8 ) );
   \   00026C                ; Setup parameters for call to function osal_memset
   \   00026C   7C01         MOV       R4,#0x1
   \   00026E   7D00         MOV       R5,#0x0
   \   000270   7403         MOV       A,#0x3
   \   000272   12....       LCALL     ?XSTACK_DISP0_8
   \   000275   A3           INC       DPTR
   \   000276   E0           MOVX      A,@DPTR
   \   000277   5401         ANL       A,#0x1
   \   000279   FA           MOV       R2,A
   \   00027A   7403         MOV       A,#0x3
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   E0           MOVX      A,@DPTR
   \   000280   33           RLC       A
   \   000281   33           RLC       A
   \   000282   5401         ANL       A,#0x1
   \   000284   4A           ORL       A,R2
   \   000285   F9           MOV       R1,A
   \   000286   85..82       MOV       DPL,?XSP + 0
   \   000289   85..83       MOV       DPH,?XSP + 1
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   FA           MOV       R2,A
   \   00028E   7407         MOV       A,#0x7
   \   000290   12....       LCALL     ?XSTACK_DISP0_8
   \   000293   E582         MOV       A,DPL
   \   000295   2A           ADD       A,R2
   \   000296   FA           MOV       R2,A
   \   000297   E4           CLR       A
   \   000298   3583         ADDC      A,DPH
   \   00029A   FB           MOV       R3,A
   \   00029B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    473            entryLen++;
   \   00029E   85..82       MOV       DPL,?XSP + 0
   \   0002A1   85..83       MOV       DPH,?XSP + 1
   \   0002A4   E0           MOVX      A,@DPTR
   \   0002A5   04           INC       A
   \   0002A6   F0           MOVX      @DPTR,A
    474            
    475            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   0002A7   EE           MOV       A,R6
   \   0002A8   241B         ADD       A,#0x1b
   \   0002AA   F5..         MOV       ?V0,A
   \   0002AC   E4           CLR       A
   \   0002AD   3F           ADDC      A,R7
   \   0002AE   F5..         MOV       ?V1,A
   \   0002B0                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002B0   78..         MOV       R0,#?V2
   \   0002B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B5   7409         MOV       A,#0x9
   \   0002B7   12....       LCALL     ?XSTACK_DISP102_8
   \   0002BA   7902         MOV       R1,#0x2
   \   0002BC   AA..         MOV       R2,?V0
   \   0002BE   AB..         MOV       R3,?V1
   \   0002C0   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0002C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002C6   8E82         MOV       DPL,R6
   \   0002C8   8F83         MOV       DPH,R7
   \   0002CA   78..         MOV       R0,#?V8
   \   0002CC   12....       LCALL     ?L_MOV_X
   \   0002CF   E5..         MOV       A,?V8
   \   0002D1   C4           SWAP      A
   \   0002D2   13           RRC       A
   \   0002D3   5407         ANL       A,#0x7
   \   0002D5   5403         ANL       A,#0x3
   \   0002D7   F8           MOV       R0,A
   \   0002D8   7402         MOV       A,#0x2
   \   0002DA   68           XRL       A,R0
   \   0002DB   6005         JZ        ??gp_PairingUpdateProxyTlb_5
   \   0002DD   7401         MOV       A,#0x1
   \   0002DF   68           XRL       A,R0
   \   0002E0   7012         JNZ       ??gp_PairingUpdateProxyTlb_6
    476            if( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) || GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) )
    477            {
    478              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_5:
   \   0002E2                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002E2   78..         MOV       R0,#?V2
   \   0002E4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002E7   7409         MOV       A,#0x9
   \   0002E9   12....       LCALL     ?XSTACK_DISP102_8
   \   0002EC   7902         MOV       R1,#0x2
   \   0002EE   AA..         MOV       R2,?V4
   \   0002F0   AB..         MOV       R3,?V5
   \   0002F2   8011         SJMP      ??gp_PairingUpdateProxyTlb_7
    479            }
    480            else
    481            {
    482              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_6:
   \   0002F4                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002F4   78..         MOV       R0,#?V2
   \   0002F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F9   7409         MOV       A,#0x9
   \   0002FB   12....       LCALL     ?XSTACK_DISP102_8
   \   0002FE   7902         MOV       R1,#0x2
   \   000300   7407         MOV       A,#0x7
   \   000302   12....       LCALL     ?XSTACK_DISP101_8
    483            }
   \                     ??gp_PairingUpdateProxyTlb_7:
   \   000305   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000308   12....       LCALL     ?DEALLOC_XSTACK8
    484            // to add the invalid entries
    485            payload->sinkGroupID = 0xFFFF;
   \   00030B   85..82       MOV       DPL,?V0
   \   00030E   85..83       MOV       DPH,?V1
   \   000311   74FF         MOV       A,#-0x1
   \   000313   F0           MOVX      @DPTR,A
   \   000314   A3           INC       DPTR
   \   000315   F0           MOVX      @DPTR,A
    486            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   000316                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000316   78..         MOV       R0,#?V2
   \   000318   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00031B   7409         MOV       A,#0x9
   \   00031D   12....       LCALL     ?XSTACK_DISP102_8
   \   000320   7902         MOV       R1,#0x2
   \   000322   AA..         MOV       R2,?V0
   \   000324   AB..         MOV       R3,?V1
   \   000326   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000329   12....       LCALL     ?DEALLOC_XSTACK8
    487            gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   00032C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00032C   A8..         MOV       R0,?XSP + 0
   \   00032E   A9..         MOV       R1,?XSP + 1
   \   000330   88..         MOV       ?V0,R0
   \   000332   89..         MOV       ?V1,R1
   \   000334   78..         MOV       R0,#?V0
   \   000336   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000339   7409         MOV       A,#0x9
   \   00033B   12....       LCALL     ?XSTACK_DISP102_8
   \   00033E   7902         MOV       R1,#0x2
   \   000340   7407         MOV       A,#0x7
   \   000342   12....       LCALL     ?XSTACK_DISP101_8
   \   000345   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000348   12....       LCALL     ?DEALLOC_XSTACK8
    488          
    489            
    490            gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
   \   00034B                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00034B   78..         MOV       R0,#?V0
   \   00034D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000350   7409         MOV       A,#0x9
   \   000352   12....       LCALL     ?XSTACK_DISP102_8
   \   000355   7901         MOV       R1,#0x1
   \   000357   EE           MOV       A,R6
   \   000358   2434         ADD       A,#0x34
   \   00035A   FA           MOV       R2,A
   \   00035B   E4           CLR       A
   \   00035C   3F           ADDC      A,R7
   \   00035D   FB           MOV       R3,A
   \   00035E   12....       LCALL     ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000361   12....       LCALL     ?DEALLOC_XSTACK8
    491           
    492            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
   \   000364   85..82       MOV       DPL,?XSP + 0
   \   000367   85..83       MOV       DPH,?XSP + 1
   \   00036A   E0           MOVX      A,@DPTR
   \   00036B   F8           MOV       R0,A
   \   00036C   7407         MOV       A,#0x7
   \   00036E   12....       LCALL     ?XSTACK_DISP0_8
   \   000371   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000374   7401         MOV       A,#0x1
   \   000376   12....       LCALL     ?XSTACK_DISP100_8
   \   000379   88..         MOV       ?V0,R0
   \   00037B   89..         MOV       ?V1,R1
   \   00037D   75..00       MOV       ?V2,#0x0
   \   000380   E0           MOVX      A,@DPTR
   \   000381   5418         ANL       A,#0x18
   \   000383   6008         JZ        ??gp_PairingUpdateProxyTlb_8
    493            {
    494              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   000385                ; Setup parameters for call to function osal_memcpy
    495            }
    496            else
    497            {
    498              searchCounter = 0xFF;
   \   000385   7401         MOV       A,#0x1
   \   000387   12....       LCALL     ?XSTACK_DISP0_8
   \   00038A   74FF         MOV       A,#-0x1
   \   00038C   F0           MOVX      @DPTR,A
    499              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   00038D                ; Setup parameters for call to function osal_memcpy
   \                     ??gp_PairingUpdateProxyTlb_8:
   \   00038D   78..         MOV       R0,#?V0
   \   00038F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000392   7C01         MOV       R4,#0x1
   \   000394   7D00         MOV       R5,#0x0
    500            }
   \   000396   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000399   12....       LCALL     ?DEALLOC_XSTACK8
    501            // Update the proxy table
    502            gp_UpdateProxyTlb( entryVector, addSink );
   \   00039C                ; Setup parameters for call to function gp_UpdateProxyTlb
   \   00039C   A9..         MOV       R1,?V6
   \   00039E   7407         MOV       A,#0x7
   \   0003A0   12....       LCALL     ?XSTACK_DISP101_8
   \   0003A3   12....       LCALL     `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
    503          }
   \   0003A6   7448         MOV       A,#0x48
   \   0003A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003AB   7F0C         MOV       R7,#0xc
   \   0003AD   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    504          
    505          /*********************************************************************
    506           * @fn          gp_UpdateProxyTlb
    507           *
    508           * @brief       To update the proxy table NV vectors
    509           *
    510           * @param       pNpEntryew - New entry array to be added
    511           *
    512           * @return
    513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
   \                     gp_UpdateProxyTlb:
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 260
   \   000005   7582FC       MOV       DPL,#-0x4
   \   000008   7583FE       MOV       DPH,#-0x2
   \   00000B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00000E   89..         MOV       ?V3,R1
    516            uint8 i;
    517            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000010   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_4`
   \   000013   7441         MOV       A,#0x41
   \   000015   12....       LCALL     ?XSTACK_DISP102_8
   \   000018   7441         MOV       A,#0x41
   \   00001A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    518            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001D   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_5`
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   7441         MOV       A,#0x41
   \   000026   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    519            uint16 proxyTableIndex;
    520            uint8 status;
    521            
    522            // Copy the new entry pointer to array
    523            osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   8A..         MOV       ?V0,R2
   \   00002B   8B..         MOV       ?V1,R3
   \   00002D   F5..         MOV       ?V2,A
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   7C41         MOV       R4,#0x41
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7444         MOV       A,#0x44
   \   00003A   12....       LCALL     ?XSTACK_DISP101_8
   \   00003D   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
    524          
    525            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000043   7F00         MOV       R7,#0x0
    526            {
    527              proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \                     ??gp_UpdateProxyTlb_0:
   \   000045   EF           MOV       A,R7
   \   000046   2410         ADD       A,#0x10
   \   000048   F5..         MOV       ?V0,A
   \   00004A   E4           CLR       A
   \   00004B   3403         ADDC      A,#0x3
   \   00004D   F5..         MOV       ?V1,A
    528              status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
   \   00004F                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00004F   AC..         MOV       R4,?XSP + 0
   \   000051   AD..         MOV       R5,?XSP + 1
   \   000053   AA..         MOV       R2,?V0
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     ?Subroutine3 & 0xFFFF
    529          
    530              if ( status == NV_OPER_FAILED )
   \                     ??CrossCallReturnLabel_6:
   \   000059   7003         JNZ       $+5
   \   00005B   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    531              {
    532                // FAIL
    533                return status;
    534              }
    535              
    536              // if the entry is empty
    537              if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
   \   00005E   740D         MOV       A,#0xd
   \   000060   6E           XRL       A,R6
   \   000061   6003         JZ        $+5
   \   000063   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
   \   000066   7401         MOV       A,#0x1
   \   000068   65..         XRL       A,?V3
   \   00006A   6003         JZ        $+5
   \   00006C   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
    538              {
    539                // Save new entry
    540                status = osal_nv_write( proxyTableIndex, 0,
    541                                     PROXY_TBL_ENTRY_LEN, newEntry );
   \   00006F                ; Setup parameters for call to function osal_nv_write
   \   00006F   7441         MOV       A,#0x41
   \   000071   12....       LCALL     ?XSTACK_DISP100_8
   \   000074   88..         MOV       ?V4,R0
   \   000076   89..         MOV       ?V5,R1
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   75..41       MOV       ?V4,#0x41
   \   000080   75..00       MOV       ?V5,#0x0
   \   000083   78..         MOV       R0,#?V4
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   7C00         MOV       R4,#0x0
   \   00008A   7D00         MOV       R5,#0x0
   \   00008C   AA..         MOV       R2,?V0
   \   00008E   AB..         MOV       R3,?V1
   \   000090   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000093   7404         MOV       A,#0x4
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   E9           MOV       A,R1
   \   000099   FE           MOV       R6,A
    542                
    543                if ( osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    544                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    545                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00009A   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   00009D   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   0000A0                ; Setup parameters for call to function osal_memcmp
   \   0000A0   744C         MOV       A,#0x4c
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   A982         MOV       R1,DPL
   \   0000A7   AA83         MOV       R2,DPH
   \   0000A9   89..         MOV       ?V4,R1
   \   0000AB   8A..         MOV       ?V5,R2
   \   0000AD   75..00       MOV       ?V6,#0x0
   \   0000B0   78..         MOV       R0,#?V4
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B5   12....       LCALL     ?Subroutine7 & 0xFFFF
    546                {
    547                  NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
    548                }
    549                return status;
    550              }
   \                     ??CrossCallReturnLabel_68:
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   6003         JZ        $+5
   \   0000BE   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000C1                ; Setup parameters for call to function osal_memcmp
   \   0000C1   7478         MOV       A,#0x78
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   A982         MOV       R1,DPL
   \   0000C8   AA83         MOV       R2,DPH
   \   0000CA   89..         MOV       ?V4,R1
   \   0000CC   8A..         MOV       ?V5,R2
   \   0000CE   78..         MOV       R0,#?V4
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D3   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D9   E9           MOV       A,R1
   \   0000DA   6003         JZ        $+5
   \   0000DC   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000DF                ; Setup parameters for call to function osal_memcmp
   \   0000DF   747C         MOV       A,#0x7c
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   A982         MOV       R1,DPL
   \   0000E6   AA83         MOV       R2,DPH
   \   0000E8   89..         MOV       ?V4,R1
   \   0000EA   8A..         MOV       ?V5,R2
   \   0000EC   78..         MOV       R0,#?V4
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F1   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000F4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F7   E9           MOV       A,R1
   \   0000F8   6003         JZ        $+5
   \   0000FA   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000FD   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    551              
    552              if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
   \                     ??gp_UpdateProxyTlb_2:
   \   000100   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_11`
   \   000103   74C3         MOV       A,#-0x3d
   \   000105   12....       LCALL     ?XSTACK_DISP102_8
   \   000108   7441         MOV       A,#0x41
   \   00010A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00010D   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_12`
   \   000110   7482         MOV       A,#-0x7e
   \   000112   12....       LCALL     ?XSTACK_DISP102_8
   \   000115   7441         MOV       A,#0x41
   \   000117   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00011A                ; Setup parameters for call to function osal_memcpy
   \   00011A   7441         MOV       A,#0x41
   \   00011C   12....       LCALL     ?XSTACK_DISP100_8
   \   00011F   88..         MOV       ?V4,R0
   \   000121   89..         MOV       ?V5,R1
   \   000123   75..00       MOV       ?V6,#0x0
   \   000126   78..         MOV       R0,#?V4
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012B   7C41         MOV       R4,#0x41
   \   00012D   7D00         MOV       R5,#0x0
   \   00012F   74C6         MOV       A,#-0x3a
   \   000131   12....       LCALL     ?XSTACK_DISP101_8
   \   000134   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000137   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013A                ; Setup parameters for call to function osal_nv_read
   \   00013A   7482         MOV       A,#-0x7e
   \   00013C   12....       LCALL     ?XSTACK_DISP100_8
   \   00013F   88..         MOV       ?V4,R0
   \   000141   89..         MOV       ?V5,R1
   \   000143   78..         MOV       R0,#?V4
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000148   75..41       MOV       ?V4,#0x41
   \   00014B   75..00       MOV       ?V5,#0x0
   \   00014E   78..         MOV       R0,#?V4
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000153   7C00         MOV       R4,#0x0
   \   000155   7D00         MOV       R5,#0x0
   \   000157   AA..         MOV       R2,?V0
   \   000159   AB..         MOV       R3,?V1
   \   00015B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00015E   7404         MOV       A,#0x4
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   E9           MOV       A,R1
   \   000164   703E         JNZ       ??gp_UpdateProxyTlb_4
   \   000166   74C3         MOV       A,#-0x3d
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   5407         ANL       A,#0x7
   \   00016E   F8           MOV       R0,A
   \   00016F   7482         MOV       A,#-0x7e
   \   000171   12....       LCALL     ?XSTACK_DISP0_8
   \   000174   E0           MOVX      A,@DPTR
   \   000175   5407         ANL       A,#0x7
   \   000177   68           XRL       A,R0
   \   000178   702A         JNZ       ??gp_UpdateProxyTlb_4
   \   00017A                ; Setup parameters for call to function osal_memcmp
   \   00017A   7484         MOV       A,#-0x7c
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   A982         MOV       R1,DPL
   \   000181   AA83         MOV       R2,DPH
   \   000183   89..         MOV       ?V4,R1
   \   000185   8A..         MOV       ?V5,R2
   \   000187   78..         MOV       R0,#?V4
   \   000189   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018C   7C08         MOV       R4,#0x8
   \   00018E   7D00         MOV       R5,#0x0
   \   000190   74C8         MOV       A,#-0x38
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   A982         MOV       R1,DPL
   \   000197   AA83         MOV       R2,DPH
   \   000199   7B00         MOV       R3,#0x0
   \   00019B   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00019E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A1   E9           MOV       A,R1
   \   0001A2   7015         JNZ       ??gp_UpdateProxyTlb_5
    553              {
    554                // Entry found
    555                break;
    556              }
    557              
    558              if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \                     ??gp_UpdateProxyTlb_4:
   \   0001A4   EF           MOV       A,R7
   \   0001A5   C3           CLR       C
   \   0001A6   9405         SUBB      A,#0x5
   \   0001A8   4005         JC        ??gp_UpdateProxyTlb_6
    559              {
    560                // No space for new entries
    561                return FAILURE;
   \   0001AA   7901         MOV       R1,#0x1
   \   0001AC   02....       LJMP      ??gp_UpdateProxyTlb_7 & 0xFFFF
    562              }
    563            }
   \                     ??gp_UpdateProxyTlb_6:
   \   0001AF   0F           INC       R7
   \   0001B0   EF           MOV       A,R7
   \   0001B1   C3           CLR       C
   \   0001B2   9406         SUBB      A,#0x6
   \   0001B4   5003         JNC       $+5
   \   0001B6   02....       LJMP      ??gp_UpdateProxyTlb_0 & 0xFFFF
    564            
    565            // Remove the entry
    566            if ( addSink == FALSE )
   \                     ??gp_UpdateProxyTlb_5:
   \   0001B9   E5..         MOV       A,?V3
   \   0001BB   7034         JNZ       ??gp_UpdateProxyTlb_8
    567            {
    568              gp_ResetProxyBasicTblEntry( currEntry );
   \   0001BD                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   0001BD   AA..         MOV       R2,?XSP + 0
   \   0001BF   AB..         MOV       R3,?XSP + 1
   \   0001C1   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    569              
    570              status = osal_nv_write( proxyTableIndex, 0,
    571                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   0001C4                ; Setup parameters for call to function osal_nv_write
   \   0001C4   A8..         MOV       R0,?XSP + 0
   \   0001C6   A9..         MOV       R1,?XSP + 1
   \   0001C8   88..         MOV       ?V4,R0
   \   0001CA   89..         MOV       ?V5,R1
   \   0001CC   78..         MOV       R0,#?V4
   \   0001CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D1   75..41       MOV       ?V4,#0x41
   \   0001D4   75..00       MOV       ?V5,#0x0
   \   0001D7   78..         MOV       R0,#?V4
   \   0001D9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DC   7C00         MOV       R4,#0x0
   \   0001DE   7D00         MOV       R5,#0x0
   \   0001E0   AA..         MOV       R2,?V0
   \   0001E2   AB..         MOV       R3,?V1
   \   0001E4   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001E7   7404         MOV       A,#0x4
   \   0001E9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EC   E9           MOV       A,R1
   \   0001ED   FE           MOV       R6,A
   \   0001EE   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    572              return status;
    573            }
    574          
    575            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_UpdateProxyTlb_8:
   \   0001F1   7441         MOV       A,#0x41
   \   0001F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001F9   4003         JC        $+5
   \   0001FB   02....       LJMP      ??gp_UpdateProxyTlb_9 & 0xFFFF
    576            {
    577              if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
   \   0001FE                ; Setup parameters for call to function pt_updateLightweightUnicastSink
   \   0001FE   A9..         MOV       R1,?V3
   \   000200   AC..         MOV       R4,?XSP + 0
   \   000202   AD..         MOV       R5,?XSP + 1
   \   000204   7441         MOV       A,#0x41
   \   000206   12....       LCALL     ?XSTACK_DISP101_8
   \   000209   12....       LCALL     `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
   \   00020C   E9           MOV       A,R1
   \   00020D   7003         JNZ       $+5
   \   00020F   02....       LJMP      ??gp_UpdateProxyTlb_10 & 0xFFFF
    578              {
    579                // The entry is full
    580                return NV_BAD_ITEM_LEN;
    581              }
    582            }
    583            else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
    584            {
    585              if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
    586              {
    587                // The entry is full
    588                return NV_BAD_ITEM_LEN;
    589              }
    590            }
    591          
    592            if ( pt_getAlias( newEntry ) )
   \                     ??gp_UpdateProxyTlb_11:
   \   000212   7442         MOV       A,#0x42
   \   000214   12....       LCALL     ?XSTACK_DISP0_8
   \   000217   E0           MOVX      A,@DPTR
   \   000218   A2E5         MOV       C,0xE0 /* A   */.5
   \   00021A   5021         JNC       ??gp_UpdateProxyTlb_12
    593            {
    594              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
   \   00021C                ; Setup parameters for call to function osal_memcpy
   \   00021C   744C         MOV       A,#0x4c
   \   00021E   12....       LCALL     ?XSTACK_DISP0_8
   \   000221   A982         MOV       R1,DPL
   \   000223   AA83         MOV       R2,DPH
   \   000225   89..         MOV       ?V4,R1
   \   000227   8A..         MOV       ?V5,R2
   \   000229   78..         MOV       R0,#?V4
   \   00022B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00022E   7C02         MOV       R4,#0x2
   \   000230   7D00         MOV       R5,#0x0
   \   000232   740E         MOV       A,#0xe
   \   000234   12....       LCALL     ?XSTACK_DISP0_8
   \   000237   12....       LCALL     ?Subroutine4 & 0xFFFF
    595            }
   \                     ??CrossCallReturnLabel_39:
   \   00023A   12....       LCALL     ?DEALLOC_XSTACK8
    596              
    597            if ( pt_getSecurity( newEntry ) )
   \                     ??gp_UpdateProxyTlb_12:
   \   00023D   7442         MOV       A,#0x42
   \   00023F   12....       LCALL     ?XSTACK_DISP0_8
   \   000242   E0           MOVX      A,@DPTR
   \   000243   A2E6         MOV       C,0xE0 /* A   */.6
   \   000245   504B         JNC       ??gp_UpdateProxyTlb_13
    598            {
    599              PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
   \   000247   7401         MOV       A,#0x1
   \   000249   12....       LCALL     ?XSTACK_DISP0_8
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   D2E6         SETB      0xE0 /* A   */.6
   \   00024F   F0           MOVX      @DPTR,A
    600              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
   \   000250                ; Setup parameters for call to function osal_memcpy
   \   000250   744E         MOV       A,#0x4e
   \   000252   12....       LCALL     ?XSTACK_DISP0_8
   \   000255   A982         MOV       R1,DPL
   \   000257   AA83         MOV       R2,DPH
   \   000259   89..         MOV       ?V4,R1
   \   00025B   8A..         MOV       ?V5,R2
   \   00025D   78..         MOV       R0,#?V4
   \   00025F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000262   7C01         MOV       R4,#0x1
   \   000264   7D00         MOV       R5,#0x0
   \   000266   7410         MOV       A,#0x10
   \   000268   12....       LCALL     ?XSTACK_DISP0_8
   \   00026B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00026E   12....       LCALL     ?DEALLOC_XSTACK8
    601              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
   \   000271                ; Setup parameters for call to function osal_memcpy
   \   000271   7453         MOV       A,#0x53
   \   000273   12....       LCALL     ?XSTACK_DISP0_8
   \   000276   A982         MOV       R1,DPL
   \   000278   AA83         MOV       R2,DPH
   \   00027A   89..         MOV       ?V4,R1
   \   00027C   8A..         MOV       ?V5,R2
   \   00027E   78..         MOV       R0,#?V4
   \   000280   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000283   7C10         MOV       R4,#0x10
   \   000285   7D00         MOV       R5,#0x0
   \   000287   7415         MOV       A,#0x15
   \   000289   12....       LCALL     ?XSTACK_DISP0_8
   \   00028C   12....       LCALL     ?Subroutine4 & 0xFFFF
    602            }
   \                     ??CrossCallReturnLabel_41:
   \   00028F   12....       LCALL     ?DEALLOC_XSTACK8
    603                   
    604            if ( pt_getSecFrameCounterCapabilities( newEntry ) )
   \                     ??gp_UpdateProxyTlb_13:
   \   000292   7441         MOV       A,#0x41
   \   000294   12....       LCALL     ?XSTACK_DISP0_8
   \   000297   E0           MOVX      A,@DPTR
   \   000298   A2E5         MOV       C,0xE0 /* A   */.5
   \   00029A   500A         JNC       ??gp_UpdateProxyTlb_14
    605            {
    606              PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_OPT] );
   \   00029C   85..82       MOV       DPL,?XSP + 0
   \   00029F   85..83       MOV       DPH,?XSP + 1
   \   0002A2   E0           MOVX      A,@DPTR
   \   0002A3   D2E5         SETB      0xE0 /* A   */.5
   \   0002A5   F0           MOVX      @DPTR,A
    607            }
    608            
    609            osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
   \                     ??gp_UpdateProxyTlb_14:
   \   0002A6                ; Setup parameters for call to function osal_memcpy
   \   0002A6   744F         MOV       A,#0x4f
   \   0002A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AB   A982         MOV       R1,DPL
   \   0002AD   AA83         MOV       R2,DPH
   \   0002AF   89..         MOV       ?V4,R1
   \   0002B1   8A..         MOV       ?V5,R2
   \   0002B3   78..         MOV       R0,#?V4
   \   0002B5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002B8   7C04         MOV       R4,#0x4
   \   0002BA   7D00         MOV       R5,#0x0
   \   0002BC   7411         MOV       A,#0x11
   \   0002BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C1   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0002C4   12....       LCALL     ?DEALLOC_XSTACK8
    610          
    611            currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
   \   0002C7   7480         MOV       A,#-0x80
   \   0002C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CC   E0           MOVX      A,@DPTR
   \   0002CD   C0E0         PUSH      A
   \   0002CF   743F         MOV       A,#0x3f
   \   0002D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D4   D0E0         POP       A
   \   0002D6   F0           MOVX      @DPTR,A
    612              
    613            currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
   \   0002D7   7481         MOV       A,#-0x7f
   \   0002D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DC   E0           MOVX      A,@DPTR
   \   0002DD   C0E0         PUSH      A
   \   0002DF   7440         MOV       A,#0x40
   \   0002E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E4   D0E0         POP       A
   \   0002E6   F0           MOVX      @DPTR,A
    614             
    615            status = osal_nv_write( proxyTableIndex, 0,
    616                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   0002E7                ; Setup parameters for call to function osal_nv_write
   \   0002E7   A8..         MOV       R0,?XSP + 0
   \   0002E9   A9..         MOV       R1,?XSP + 1
   \   0002EB   88..         MOV       ?V4,R0
   \   0002ED   89..         MOV       ?V5,R1
   \   0002EF   78..         MOV       R0,#?V4
   \   0002F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F4   75..41       MOV       ?V4,#0x41
   \   0002F7   75..00       MOV       ?V5,#0x0
   \   0002FA   78..         MOV       R0,#?V4
   \   0002FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002FF   7C00         MOV       R4,#0x0
   \   000301   7D00         MOV       R5,#0x0
   \   000303   AA..         MOV       R2,?V0
   \   000305   AB..         MOV       R3,?V1
   \   000307   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00030A   7404         MOV       A,#0x4
   \   00030C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00030F   E9           MOV       A,R1
   \   000310   FE           MOV       R6,A
    617            
    618            if ( osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    619                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    620                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   000311   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   000314   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   000317                ; Setup parameters for call to function osal_memcmp
   \   000317   740B         MOV       A,#0xb
   \   000319   12....       LCALL     ?XSTACK_DISP0_8
   \   00031C   A982         MOV       R1,DPL
   \   00031E   AA83         MOV       R2,DPH
   \   000320   89..         MOV       ?V4,R1
   \   000322   8A..         MOV       ?V5,R2
   \   000324   78..         MOV       R0,#?V4
   \   000326   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000329   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00032C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00032F   E9           MOV       A,R1
   \   000330   7036         JNZ       ??gp_UpdateProxyTlb_3
   \   000332                ; Setup parameters for call to function osal_memcmp
   \   000332   7437         MOV       A,#0x37
   \   000334   12....       LCALL     ?XSTACK_DISP0_8
   \   000337   A982         MOV       R1,DPL
   \   000339   AA83         MOV       R2,DPH
   \   00033B   89..         MOV       ?V4,R1
   \   00033D   8A..         MOV       ?V5,R2
   \   00033F   78..         MOV       R0,#?V4
   \   000341   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000344   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000347   12....       LCALL     ?DEALLOC_XSTACK8
   \   00034A   E9           MOV       A,R1
   \   00034B   701B         JNZ       ??gp_UpdateProxyTlb_3
   \   00034D                ; Setup parameters for call to function osal_memcmp
   \   00034D   743B         MOV       A,#0x3b
   \   00034F   12....       LCALL     ?XSTACK_DISP0_8
   \   000352   A982         MOV       R1,DPL
   \   000354   AA83         MOV       R2,DPH
   \   000356   89..         MOV       ?V4,R1
   \   000358   8A..         MOV       ?V5,R2
   \   00035A   78..         MOV       R0,#?V4
   \   00035C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00035F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000362   12....       LCALL     ?DEALLOC_XSTACK8
   \   000365   E9           MOV       A,R1
   \   000366   600D         JZ        ??gp_UpdateProxyTlb_1
    621            {
    622              NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
   \                     ??gp_UpdateProxyTlb_3:
   \   000368                ; Setup parameters for call to function NLME_ReportAddressConflict
   \   000368   7901         MOV       R1,#0x1
   \   00036A   90....       MOV       DPTR,#_NIB + 20
   \   00036D   E0           MOVX      A,@DPTR
   \   00036E   FA           MOV       R2,A
   \   00036F   A3           INC       DPTR
   \   000370   E0           MOVX      A,@DPTR
   \   000371   FB           MOV       R3,A
   \   000372   12....       LCALL     `??NLME_ReportAddressConflict::?relay`; Banked call to: NLME_ReportAddressConflict
    623            }
    624            
    625            return status;
   \                     ??gp_UpdateProxyTlb_1:
   \   000375   EE           MOV       A,R6
   \   000376   F9           MOV       R1,A
   \                     ??gp_UpdateProxyTlb_7:
   \   000377   758204       MOV       DPL,#0x4
   \   00037A   758301       MOV       DPH,#0x1
   \   00037D   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   000380   02....       LJMP      ?Subroutine0 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_9:
   \   000383   7442         MOV       A,#0x42
   \   000385   12....       LCALL     ?XSTACK_DISP0_8
   \   000388   E0           MOVX      A,@DPTR
   \   000389   A2E0         MOV       C,0xE0 /* A   */.0
   \   00038B   4003         JC        $+5
   \   00038D   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \   000390                ; Setup parameters for call to function pt_addSinkGroup
   \   000390   AC..         MOV       R4,?XSP + 0
   \   000392   AD..         MOV       R5,?XSP + 1
   \   000394   7441         MOV       A,#0x41
   \   000396   12....       LCALL     ?XSTACK_DISP101_8
   \   000399   12....       LCALL     `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
   \   00039C   E9           MOV       A,R1
   \   00039D   6003         JZ        $+5
   \   00039F   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_10:
   \   0003A2   790C         MOV       R1,#0xc
   \   0003A4   80D1         SJMP      ??gp_UpdateProxyTlb_7
    626          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine10_0
   \   000004                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7C02         MOV       R4,#0x2
   \   000002                REQUIRE ??Subroutine11_0
   \   000002                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    627          
    628          /*********************************************************************
    629           * @fn          gp_CheckAnnouncedDevice
    630           *
    631           * @brief       General function to check if it has the announced device 
    632           *              listed in the SinkAddressList and look for address conflict
    633           *              resolution.
    634           *
    635           * @param       
    636           *
    637           * @return      
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
   \                     gp_CheckAnnouncedDevice:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 67
   \   000005   74BD         MOV       A,#-0x43
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   8A..         MOV       ?V12,R2
   \   000017   8B..         MOV       ?V13,R3
    641            uint8 i;
    642            uint8 status;
    643            uint8 annceDelay;
    644            uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
    645          
    646            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   8A..         MOV       ?V4,R2
   \   00001D   8B..         MOV       ?V5,R3
   \   00001F   8E..         MOV       ?V6,R6
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V0,R0
   \   000027   89..         MOV       ?V1,R1
   \   000029   8E..         MOV       ?V2,R6
    647            {
    648              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
   \                     ??gp_CheckAnnouncedDevice_0:
   \   00002B                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EE           MOV       A,R6
   \   000031   2410         ADD       A,#0x10
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3403         ADDC      A,#0x3
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003B   E9           MOV       A,R1
   \   00003C   F8           MOV       R0,A
    649          
    650              if ( status == NV_OPER_FAILED )
   \   00003D   740A         MOV       A,#0xa
   \   00003F   68           XRL       A,R0
   \   000040   7005         JNZ       ??gp_CheckAnnouncedDevice_1
    651              {
    652                // FAIL
    653          
    654                return ZFailure;
   \   000042   7901         MOV       R1,#0x1
   \   000044   02....       LJMP      ??gp_CheckAnnouncedDevice_2 & 0xFFFF
    655              }
    656              
    657              // if the entry is empty
    658              if ( status == NV_INVALID_DATA )
   \                     ??gp_CheckAnnouncedDevice_1:
   \   000047   740D         MOV       A,#0xd
   \   000049   68           XRL       A,R0
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    659              {
    660                continue;
    661              }
    662              
    663              // Compare for nwk alias address conflict
    664              if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    665                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    666                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   740D         MOV       A,#0xd
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V8,R1
   \   00005A   8A..         MOV       ?V9,R2
   \   00005C   75..00       MOV       ?V10,#0x0
   \   00005F   78..         MOV       R0,#?V8
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   7036         JNZ       ??gp_CheckAnnouncedDevice_4
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   7439         MOV       A,#0x39
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   A982         MOV       R1,DPL
   \   000074   AA83         MOV       R2,DPH
   \   000076   89..         MOV       ?V8,R1
   \   000078   8A..         MOV       ?V9,R2
   \   00007A   78..         MOV       R0,#?V8
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   E9           MOV       A,R1
   \   000086   701B         JNZ       ??gp_CheckAnnouncedDevice_4
   \   000088                ; Setup parameters for call to function osal_memcmp
   \   000088   743D         MOV       A,#0x3d
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   A982         MOV       R1,DPL
   \   00008F   AA83         MOV       R2,DPH
   \   000091   89..         MOV       ?V8,R1
   \   000093   8A..         MOV       ?V9,R2
   \   000095   78..         MOV       R0,#?V8
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009A   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   \   0000A1   6077         JZ        ??gp_CheckAnnouncedDevice_5
    667              {
    668                // Do address conflict resolution
    669                NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
    670                                   sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
   \                     ??gp_CheckAnnouncedDevice_4:
   \   0000A3                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000A3   75..01       MOV       ?V3,#0x1
   \   0000A6   78..         MOV       R0,#?V3
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   790D         MOV       R1,#0xd
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   FC           MOV       R4,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FD           MOV       R5,A
   \   0000B7   7AFD         MOV       R2,#-0x3
   \   0000B9   7BFF         MOV       R3,#-0x1
   \   0000BB   12....       LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000BE   7401         MOV       A,#0x1
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
    671                
    672                aliasConflictAnnce.nwkAddr = sinkNwkAddr;
   \   0000C3   85..82       MOV       DPL,?XSP + 0
   \   0000C6   85..83       MOV       DPH,?XSP + 1
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F8           MOV       R0,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   90....       MOV       DPTR,#aliasConflictAnnce
   \   0000D1   E8           MOV       A,R0
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E9           MOV       A,R1
   \   0000D5   F0           MOVX      @DPTR,A
    673                osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0000D6                ; Setup parameters for call to function osal_memset
   \   0000D6   7C08         MOV       R4,#0x8
   \   0000D8   7D00         MOV       R5,#0x0
   \   0000DA   79FF         MOV       R1,#-0x1
   \   0000DC   7A..         MOV       R2,#(aliasConflictAnnce + 2) & 0xff
   \   0000DE   7B..         MOV       R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
   \   0000E0   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    674                aliasConflictAnnce.capabilities = 0;
   \   0000E3   90....       MOV       DPTR,#aliasConflictAnnce + 10
   \   0000E6   E4           CLR       A
   \   0000E7   F0           MOVX      @DPTR,A
    675                
    676                annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
   \   0000E8                ; Setup parameters for call to function osal_rand
   \   0000E8   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000EB   8A..         MOV       ?V8,R2
   \   0000ED   8B..         MOV       ?V9,R3
   \   0000EF   A8..         MOV       R0,?V8
   \   0000F1   A9..         MOV       R1,?V9
    677                // where:
    678                // 100 is Dmax
    679                // 5   is Dmin
    680                osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
   \   0000F3                ; Setup parameters for call to function osal_start_timerEx
   \   0000F3   7A8A         MOV       R2,#-0x76
   \   0000F5   7B02         MOV       R3,#0x2
   \   0000F7   12....       LCALL     ?US_DIV_MOD
   \   0000FA   E8           MOV       A,R0
   \   0000FB   2405         ADD       A,#0x5
   \   0000FD   F5..         MOV       ?V8,A
   \   0000FF   E4           CLR       A
   \   000100   F5..         MOV       ?V9,A
   \   000102   F5..         MOV       ?V11,A
   \   000104   78..         MOV       R0,#?V8
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000109   7A10         MOV       R2,#0x10
   \   00010B   7B00         MOV       R3,#0x0
   \   00010D   90....       MOV       DPTR,#gp_TaskID
   \   000110   E0           MOVX      A,@DPTR
   \   000111   F9           MOV       R1,A
   \   000112   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000115   7404         MOV       A,#0x4
   \   000117   12....       LCALL     ?DEALLOC_XSTACK8
    681              }
    682          
    683              if( sinkIEEE )
   \                     ??gp_CheckAnnouncedDevice_5:
   \   00011A   E5..         MOV       A,?V12
   \   00011C   45..         ORL       A,?V13
   \   00011E   7003         JNZ       $+5
   \   000120   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    684              {
    685                //Check if one of the Sink IEEE is the same
    686                if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \   000123                ; Setup parameters for call to function osal_memcmp
   \   000123   7424         MOV       A,#0x24
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   A982         MOV       R1,DPL
   \   00012A   AA83         MOV       R2,DPH
   \   00012C   89..         MOV       ?V8,R1
   \   00012E   8A..         MOV       ?V9,R2
   \   000130   78..         MOV       R0,#?V8
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000135   7C08         MOV       R4,#0x8
   \   000137   7D00         MOV       R5,#0x0
   \   000139   A9..         MOV       R1,?V4
   \   00013B   AA..         MOV       R2,?V5
   \   00013D   AB..         MOV       R3,?V6
   \   00013F   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000142   12....       LCALL     ?DEALLOC_XSTACK8
   \   000145   E9           MOV       A,R1
   \   000146   6028         JZ        ??gp_CheckAnnouncedDevice_6
    687                {
    688                  // If Nwk address is different, then update the new address
    689                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   000148                ; Setup parameters for call to function osal_memcmp
   \   000148   742C         MOV       A,#0x2c
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   A982         MOV       R1,DPL
   \   00014F   AA83         MOV       R2,DPH
   \   000151   89..         MOV       ?V8,R1
   \   000153   8A..         MOV       ?V9,R2
   \   000155   78..         MOV       R0,#?V8
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015A   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00015D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000160   E9           MOV       A,R1
   \   000161   7061         JNZ       ??gp_CheckAnnouncedDevice_3
    690                  {
    691                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   000163                ; Setup parameters for call to function osal_memcpy
   \   000163   78..         MOV       R0,#?V0
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000168   7C02         MOV       R4,#0x2
   \   00016A   7D00         MOV       R5,#0x0
   \   00016C   742F         MOV       A,#0x2f
   \   00016E   804B         SJMP      ??gp_CheckAnnouncedDevice_7
    692                  }
    693                }
    694                else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_6:
   \   000170                ; Setup parameters for call to function osal_memcmp
   \   000170   742E         MOV       A,#0x2e
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   A982         MOV       R1,DPL
   \   000177   AA83         MOV       R2,DPH
   \   000179   89..         MOV       ?V8,R1
   \   00017B   8A..         MOV       ?V9,R2
   \   00017D   78..         MOV       R0,#?V8
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000182   7C08         MOV       R4,#0x8
   \   000184   7D00         MOV       R5,#0x0
   \   000186   A9..         MOV       R1,?V4
   \   000188   AA..         MOV       R2,?V5
   \   00018A   AB..         MOV       R3,?V6
   \   00018C   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   E9           MOV       A,R1
   \   000193   602F         JZ        ??gp_CheckAnnouncedDevice_3
    695                {
    696                  // If Nwk address is different, then update the new address
    697                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   000195                ; Setup parameters for call to function osal_memcmp
   \   000195   7436         MOV       A,#0x36
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   A982         MOV       R1,DPL
   \   00019C   AA83         MOV       R2,DPH
   \   00019E   89..         MOV       ?V8,R1
   \   0001A0   8A..         MOV       ?V9,R2
   \   0001A2   78..         MOV       R0,#?V8
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A7   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AD   E9           MOV       A,R1
   \   0001AE   7014         JNZ       ??gp_CheckAnnouncedDevice_3
    698                  {
    699                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   0001B0                ; Setup parameters for call to function osal_memcpy
   \   0001B0   78..         MOV       R0,#?V0
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B5   7C02         MOV       R4,#0x2
   \   0001B7   7D00         MOV       R5,#0x0
   \   0001B9   7439         MOV       A,#0x39
   \                     ??gp_CheckAnnouncedDevice_7:
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
    700                  }
    701                }
    702              }
    703            }
   \   0001BE   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001C1   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??gp_CheckAnnouncedDevice_3:
   \   0001C4   0E           INC       R6
   \   0001C5   EE           MOV       A,R6
   \   0001C6   C3           CLR       C
   \   0001C7   9406         SUBB      A,#0x6
   \   0001C9   5003         JNC       $+5
   \   0001CB   02....       LJMP      ??gp_CheckAnnouncedDevice_0 & 0xFFFF
    704              
    705            return ZSuccess;
   \   0001CE   7900         MOV       R1,#0x0
   \                     ??gp_CheckAnnouncedDevice_2:
   \   0001D0   7443         MOV       A,#0x43
   \   0001D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D5   7F0E         MOV       R7,#0xe
   \   0001D7   02....       LJMP      ?BANKED_LEAVE_XDATA
    706          }
    707          
    708           /*********************************************************************
    709           * PRIVATE FUNCTIONS
    710           *********************************************************************/
    711          
    712          /*********************************************************************
    713           * @fn          gp_PopulateProxyTblEntry
    714           *
    715           * @brief       Populate the given item data
    716           *
    717           * @param       pData - Pointer to the new data
    718           *              size - size of the new data
    719           *              pTblEntryVector - Pointer to the new vector
    720           *              vectorLen - Position in the vector to write the data
    721           *
    722           * @return
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
   \                     gp_PopulateProxyTblEntry:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8C..         MOV       ?V0,R4
   \   000009   8D..         MOV       ?V1,R5
   \   00000B   740F         MOV       A,#0xf
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FE           MOV       R6,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FF           MOV       R7,A
    726            pTblEntryVector += *(uint8*)vectorLen;
    727            
    728            osal_memcpy( pTblEntryVector, pData, size );
   \   000015                ; Setup parameters for call to function osal_memcpy
   \   000015   8A..         MOV       ?V4,R2
   \   000017   8B..         MOV       ?V5,R3
   \   000019   75..00       MOV       ?V6,#0x0
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000021   AC..         MOV       R4,?V2
   \   000023   7D00         MOV       R5,#0x0
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   E5..         MOV       A,?V0
   \   00002D   28           ADD       A,R0
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
    729            *(uint8*)vectorLen += size;
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   25..         ADD       A,?V2
   \   000040   F0           MOVX      @DPTR,A
    730          }
   \   000041   02....       LJMP      ?Subroutine0 & 0xFFFF
    731          
    732          /*********************************************************************
    733           * @fn          pt_getAlias
    734           *
    735           * @brief       Get Bit to update assigned alias field or not
    736           *
    737           * @param       pNew - New entry array to be added
    738           *
    739           * @return      newAlias - TRUE if assigned alias bit is set
    740           */
    741          static uint8 pt_getAlias( uint8* pNew )
    742          {
    743            bool newAlias;
    744            
    745            newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    746            
    747            return newAlias;
    748          }
    749          
    750          /*********************************************************************
    751           * @fn          pt_getSecurity
    752           *
    753           * @brief       Get Bit to update security options field or not
    754           *
    755           * @param       pNew - New entry array to be added
    756           *
    757           * @return      secUse - TRUE if security use bit is set
    758           */
    759          static uint8 pt_getSecurity( uint8* pNew )
    760          {
    761            bool secUse;
    762            
    763            secUse = PROXY_TBL_GET_SEC_USE( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    764          
    765            return secUse;
    766          }
    767          
    768          /*********************************************************************
    769           * @fn          pt_getSecFrameCounterCapabilities
    770           *
    771           * @brief       Get Bit to update security frame counter capabilities
    772           *
    773           * @param       pNew - New entry array to be added
    774           *
    775           * @return      secCap - TRUE if security frame counter capabilities bit is set
    776           */
    777          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew )
    778          {
    779            bool secCap;
    780            
    781            secCap = PROXY_TBL_GET_SEC_CAP( pNew[PROXY_TBL_ENTRY_OPT] );
    782            
    783            return secCap;
    784          }
    785          
    786          /*********************************************************************
    787           * @fn          pt_updateLightweightUnicastSink
    788           *
    789           * @brief       To add new sink entry
    790           *
    791           * @param       pNew - New entry array to be added
    792           *              pCurr - The current entry array in the proxy table
    793           *
    794           * @return      TRUE new entry added, FALSE if not
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
   \                     pt_updateLightweightUnicastSink:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 142
   \   000005   7472         MOV       A,#0x72
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   E9           MOV       A,R1
   \   000016   FE           MOV       R6,A
    798            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000017   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_6`
   \   00001A   744D         MOV       A,#0x4d
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   7441         MOV       A,#0x41
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    799            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000024   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_7`
   \   000027   740C         MOV       A,#0xc
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   7441         MOV       A,#0x41
   \   00002E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    800            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000031   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_8`
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   740A         MOV       A,#0xa
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    801            
    802            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   8A..         MOV       ?V0,R2
   \   000040   8B..         MOV       ?V1,R3
   \   000042   F5..         MOV       ?V2,A
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000049   7C41         MOV       R4,#0x41
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7450         MOV       A,#0x50
   \   00004F   12....       LCALL     ?XSTACK_DISP101_8
   \   000052   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
    803            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V1,A
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006A   7C41         MOV       R4,#0x41
   \   00006C   7D00         MOV       R5,#0x0
   \   00006E   740F         MOV       A,#0xf
   \   000070   12....       LCALL     ?XSTACK_DISP101_8
   \   000073   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
    804            
    805            
    806            // if addSink is TRUE then add the sink to current entry
    807            if ( addSink ) 
   \   000079   7438         MOV       A,#0x38
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   A982         MOV       R1,DPL
   \   000080   AA83         MOV       R2,DPH
   \   000082   89..         MOV       ?V8,R1
   \   000084   8A..         MOV       ?V9,R2
   \   000086   75..00       MOV       ?V10,#0x0
   \   000089   742E         MOV       A,#0x2e
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   A982         MOV       R1,DPL
   \   000090   AA83         MOV       R2,DPH
   \   000092   89..         MOV       ?V4,R1
   \   000094   8A..         MOV       ?V5,R2
   \   000096   75..00       MOV       ?V6,#0x0
   \   000099   746F         MOV       A,#0x6f
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   A982         MOV       R1,DPL
   \   0000A0   AA83         MOV       R2,DPH
   \   0000A2   89..         MOV       ?V0,R1
   \   0000A4   8A..         MOV       ?V1,R2
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AB   88..         MOV       ?V12,R0
   \   0000AD   89..         MOV       ?V13,R1
   \   0000AF   75..00       MOV       ?V14,#0x0
   \   0000B2   EE           MOV       A,R6
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   6058         JZ        ??pt_updateLightweightUnicastSink_0
    808            {
    809              // if the incomming Sink entry is different to the current entry
    810              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000B7                ; Setup parameters for call to function osal_memcmp
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BA   7C0A         MOV       R4,#0xa
   \   0000BC   7D00         MOV       R5,#0x0
   \   0000BE   A9..         MOV       R1,?V4
   \   0000C0   AA..         MOV       R2,?V5
   \   0000C2   AB..         MOV       R3,?V6
   \   0000C4   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CA   E9           MOV       A,R1
   \   0000CB   6003         JZ        $+5
   \   0000CD   02....       LJMP      ??pt_updateLightweightUnicastSink_1 & 0xFFFF
    811              {
    812                // add the sink entry in the next slot if empty
    813                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000D0                ; Setup parameters for call to function osal_memcmp
   \   0000D0   78..         MOV       R0,#?V8
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D5   7C0A         MOV       R4,#0xa
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   A9..         MOV       R1,?V12
   \   0000DB   AA..         MOV       R2,?V13
   \   0000DD   AB..         MOV       R3,?V14
   \   0000DF   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000E2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E5   E9           MOV       A,R1
   \   0000E6   78..         MOV       R0,#?V0
   \   0000E8   6006         JZ        ??pt_updateLightweightUnicastSink_2
    814                {
    815                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
   \   0000EA                ; Setup parameters for call to function osal_memcpy
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000ED   02....       LJMP      ??pt_updateLightweightUnicastSink_3 & 0xFFFF
    816                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    817                  return TRUE;
    818                }
    819              }
    820              else 
    821              {
    822                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    823               return TRUE;
    824              }
    825              // if the incomming Sink entry is different to the current entry
    826              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_updateLightweightUnicastSink_2:
   \   0000F0                ; Setup parameters for call to function osal_memcmp
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F3   7C0A         MOV       R4,#0xa
   \   0000F5   7D00         MOV       R5,#0x0
   \   0000F7   A9..         MOV       R1,?V8
   \   0000F9   AA..         MOV       R2,?V9
   \   0000FB   AB..         MOV       R3,?V10
   \   0000FD   12....       LCALL     ??Subroutine12_0 & 0xFFFF
    827              {
    828                return FALSE;
    829              }
    830            }
   \                     ??CrossCallReturnLabel_85:
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
    831            else
    832            {
    833              // if the incomming Sink entry is the same to the current entry
    834              if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    835              {
    836                // Move the next sink entry to current
    837                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
    838                // Invalidate the sink entry
    839                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    840                
    841                // if the sink entry is empty then remove the proxy table entry
    842                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    843                {
    844                  gp_ResetProxyBasicTblEntry( currEntry );
    845                }
    846                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    847                return TRUE;
    848              }
    849              // if the incomming Sink entry is the same to the current entry
    850              else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    851              {
    852                // Invalidate the sink entry
    853                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    854                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    855                return TRUE;
    856              }
    857            }
    858            return FALSE;
   \                     ??pt_updateLightweightUnicastSink_4:
   \   000103   7900         MOV       R1,#0x0
   \                     ??pt_updateLightweightUnicastSink_5:
   \   000105   748E         MOV       A,#-0x72
   \   000107   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010A   7F0F         MOV       R7,#0xf
   \   00010C   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??pt_updateLightweightUnicastSink_0:
   \   00010F                ; Setup parameters for call to function osal_memcmp
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000112   7C0A         MOV       R4,#0xa
   \   000114   7D00         MOV       R5,#0x0
   \   000116   A9..         MOV       R1,?V4
   \   000118   AA..         MOV       R2,?V5
   \   00011A   AB..         MOV       R3,?V6
   \   00011C   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00011F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000122   E9           MOV       A,R1
   \   000123   606F         JZ        ??pt_updateLightweightUnicastSink_6
   \   000125                ; Setup parameters for call to function osal_memcpy
   \   000125   78..         MOV       R0,#?V8
   \   000127   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012A   7C0A         MOV       R4,#0xa
   \   00012C   7D00         MOV       R5,#0x0
   \   00012E   7431         MOV       A,#0x31
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   \   000139                ; Setup parameters for call to function osal_memcpy
   \   000139   78..         MOV       R0,#?V12
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013E   7C0A         MOV       R4,#0xa
   \   000140   7D00         MOV       R5,#0x0
   \   000142   743B         MOV       A,#0x3b
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014D                ; Setup parameters for call to function osal_memcmp
   \   00014D   78..         MOV       R0,#?V4
   \   00014F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000152   7C0A         MOV       R4,#0xa
   \   000154   7D00         MOV       R5,#0x0
   \   000156   A9..         MOV       R1,?V12
   \   000158   AA..         MOV       R2,?V13
   \   00015A   AB..         MOV       R3,?V14
   \   00015C   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00015F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000162   E9           MOV       A,R1
   \   000163   6008         JZ        ??pt_updateLightweightUnicastSink_1
   \   000165                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   000165   740C         MOV       A,#0xc
   \   000167   12....       LCALL     ?XSTACK_DISP101_8
   \   00016A   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
   \                     ??pt_updateLightweightUnicastSink_1:
   \   00016D                ; Setup parameters for call to function osal_memcpy
   \   00016D   740C         MOV       A,#0xc
   \   00016F   12....       LCALL     ?XSTACK_DISP100_8
   \   000172   88..         MOV       ?V0,R0
   \   000174   89..         MOV       ?V1,R1
   \   000176   78..         MOV       R0,#?V0
   \   000178   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017B   7C41         MOV       R4,#0x41
   \   00017D   7D00         MOV       R5,#0x0
   \   00017F   7403         MOV       A,#0x3
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   E0           MOVX      A,@DPTR
   \   000185   FA           MOV       R2,A
   \   000186   A3           INC       DPTR
   \   000187   E0           MOVX      A,@DPTR
   \   000188   FB           MOV       R3,A
   \   000189   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00018C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018F   7901         MOV       R1,#0x1
   \   000191   02....       LJMP      ??pt_updateLightweightUnicastSink_5 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_6:
   \   000194                ; Setup parameters for call to function osal_memcmp
   \   000194   78..         MOV       R0,#?V0
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000199   7C0A         MOV       R4,#0xa
   \   00019B   7D00         MOV       R5,#0x0
   \   00019D   A9..         MOV       R1,?V8
   \   00019F   AA..         MOV       R2,?V9
   \   0001A1   AB..         MOV       R3,?V10
   \   0001A3   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0001A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A9   E9           MOV       A,R1
   \   0001AA   7003         JNZ       $+5
   \   0001AC   02....       LJMP      ??pt_updateLightweightUnicastSink_4 & 0xFFFF
   \   0001AF                ; Setup parameters for call to function osal_memcpy
   \   0001AF   78..         MOV       R0,#?V12
   \   0001B1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \                     ??pt_updateLightweightUnicastSink_3:
   \   0001B4   7C0A         MOV       R4,#0xa
   \   0001B6   7D00         MOV       R5,#0x0
   \   0001B8   743B         MOV       A,#0x3b
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0001C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C3   80A8         SJMP      ??pt_updateLightweightUnicastSink_1
    859          }
    860          
    861          /*********************************************************************
    862           * @fn          pt_addSinkGroup
    863           *
    864           * @brief       To add new sink group entry
    865           *
    866           * @param       pNew - New entry array to be added
    867           *              pCurr - The current entry array in the proxy table
    868           *
    869           * @return      TRUE new entry added, FALSE if not
    870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    871          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
   \                     pt_addSinkGroup:
    872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 130
   \   000005   747E         MOV       A,#0x7e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    873            bool newSinkGroup;
    874            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_9`
   \   000011   7441         MOV       A,#0x41
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    875            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_10`
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7441         MOV       A,#0x41
   \   000024   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    876            
    877            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   \   00002B   F5..         MOV       ?V2,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C41         MOV       R4,#0x41
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7444         MOV       A,#0x44
   \   000038   12....       LCALL     ?XSTACK_DISP101_8
   \   00003B   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
    878            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   8E..         MOV       ?V0,R6
   \   000043   8F..         MOV       ?V1,R7
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   7C41         MOV       R4,#0x41
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   7403         MOV       A,#0x3
   \   000050   12....       LCALL     ?XSTACK_DISP101_8
   \   000053   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
    879            
    880            newSinkGroup = PROXY_TBL_GET_DGROUP( newEntry[PROXY_TBL_ENTRY_OPT] );
    881            newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    882            
    883            if ( newSinkGroup )
    884            {
    885              if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \   000059   7442         MOV       A,#0x42
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000061   507C         JNC       ??pt_addSinkGroup_0
   \   000063   7436         MOV       A,#0x36
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   A2E1         MOV       C,0xE0 /* A   */.1
   \   00006B   4072         JC        ??pt_addSinkGroup_0
    886              {
    887                if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   00006D   7478         MOV       A,#0x78
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   A982         MOV       R1,DPL
   \   000074   AA83         MOV       R2,DPH
   \   000076   89..         MOV       ?V4,R1
   \   000078   8A..         MOV       ?V5,R2
   \   00007A   75..00       MOV       ?V6,#0x0
   \   00007D   A8..         MOV       R0,?XSP + 0
   \   00007F   A9..         MOV       R1,?XSP + 1
   \   000081   88..         MOV       ?V0,R0
   \   000083   89..         MOV       ?V1,R1
   \   000085   7436         MOV       A,#0x36
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00008D   78..         MOV       R0,#?V4
   \   00008F   401C         JC        ??pt_addSinkGroup_1
    888                {
    889                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \   000091                ; Setup parameters for call to function osal_memcpy
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000094   7C04         MOV       R4,#0x4
   \   000096   7D00         MOV       R5,#0x0
   \   000098   743A         MOV       A,#0x3a
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
    890                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT );
   \   0000A3   7436         MOV       A,#0x36
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   D2E0         SETB      0xE0 /* A   */.0
   \   0000AB   801A         SJMP      ??pt_addSinkGroup_2
    891                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    892                  return TRUE;
    893                }
    894                else
    895                {
    896                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \                     ??pt_addSinkGroup_1:
   \   0000AD                ; Setup parameters for call to function osal_memcpy
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B0   7C04         MOV       R4,#0x4
   \   0000B2   7D00         MOV       R5,#0x0
   \   0000B4   743E         MOV       A,#0x3e
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
    897                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT );
   \   0000BF   7436         MOV       A,#0x36
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   D2E1         SETB      0xE0 /* A   */.1
   \                     ??pt_addSinkGroup_2:
   \   0000C7   F0           MOVX      @DPTR,A
    898                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
   \   0000C8                ; Setup parameters for call to function osal_memcpy
   \   0000C8   78..         MOV       R0,#?V0
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CD   7C41         MOV       R4,#0x41
   \   0000CF   7D00         MOV       R5,#0x0
   \   0000D1   EE           MOV       A,R6
   \   0000D2   FA           MOV       R2,A
   \   0000D3   EF           MOV       A,R7
   \   0000D4   FB           MOV       R3,A
   \   0000D5   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
    899                  return TRUE;
   \   0000DB   7901         MOV       R1,#0x1
   \   0000DD   8002         SJMP      ??pt_addSinkGroup_3
    900                }
    901              }
    902            }
    903            return FALSE;
   \                     ??pt_addSinkGroup_0:
   \   0000DF   7900         MOV       R1,#0x0
   \                     ??pt_addSinkGroup_3:
   \   0000E1   7482         MOV       A,#-0x7e
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E6                REQUIRE ?Subroutine0
   \   0000E6                ; // Fall through to label ?Subroutine0
    904          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_ZclReadGetProxyEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_ZclReadGetProxyEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGpp_ReadWriteAttrCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGpp_ReadWriteAttrCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_pairingSetProxyTblOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_pairingSetProxyTblOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PairingUpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PairingUpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_UpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_UpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CheckAnnouncedDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CheckAnnouncedDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PopulateProxyTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PopulateProxyTblEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_updateLightweightUnicastSink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_updateLightweightUnicastSink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_addSinkGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_addSinkGroup

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_3`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_4`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_5`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_6`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_7`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_8`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_9`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_10`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_11`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_12`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536
    905          
    906          /*********************************************************************
    907           * @fn          pt_lookForGpd
    908           *
    909           * @brief       To see if the GPD id is in this NV entry
    910           *
    911           * @param       currProxyEntryId - NV ID of the proxy table
    912           *              pNew - New tabble entry array to be added
    913           *
    914           * @return      TRUE if the GPD has an entry in current NV vector
    915           */
    916          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
    917          {
    918            uint8 rtrn;
    919          
    920            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    921            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    922          
    923            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    924            
    925            rtrn = osal_nv_read( currProxyEntryId, 0,
    926                                       PROXY_TBL_ENTRY_LEN, currEntry );
    927            
    928            if ( rtrn != SUCCESS )
    929            {
    930              return FALSE;
    931            }
    932          
    933            if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
    934            {
    935              if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
    936              {
    937              return TRUE;
    938              }
    939            }
    940            return FALSE;
    941          }
    942          
    943          #endif
    944          /*********************************************************************
    945          *********************************************************************/
    946          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     93   gp_CheckAnnouncedDevice
        0     90   -> NLME_SendNetworkStatus
        0     89   -> gp_getProxyTableByIndex
        0     92   -> osal_memcmp
        0     92   -> osal_memcpy
        0     89   -> osal_memset
        0     89   -> osal_rand
        0     93   -> osal_start_timerEx
      0     95   gp_PairingUpdateProxyTlb
        0     94   -> gp_PopulateProxyTblEntry
        0     92   -> gp_UpdateProxyTlb
        0     92   -> gp_pairingSetProxyTblOptions
        0     95   -> osal_memcpy
        0     92   -> osal_memset
      0    190   gp_PopulateProxyTblEntry
        0     18   -> osal_memcpy
      1    371   gp_UpdateProxyTlb
        0    275   -> NLME_ReportAddressConflict
        0    275   -> gp_ResetProxyBasicTblEntry
        0    275   -> gp_getProxyTableByIndex
        0    278   -> osal_memcmp
        0    278   -> osal_memcpy
        0    279   -> osal_nv_read
        0    279   -> osal_nv_write
        0    275   -> pt_addSinkGroup
        0    275   -> pt_updateLightweightUnicastSink
      1    110   gp_pairingSetProxyTblOptions
      1    187   pt_ZclReadGetProxyEntry
        0    172   -> gp_PopulateProxyTblEntry
        0    170   -> gp_getProxyTableByIndex
        0    173   -> osal_memcmp
        0    173   -> osal_memcpy
      0    423   pt_addSinkGroup
        0    148   -> osal_memcpy
      0    443   pt_updateLightweightUnicastSink
        0    165   -> gp_ResetProxyBasicTblEntry
        0    168   -> osal_memcmp
        0    168   -> osal_memcpy
      0     18   zclGpp_ReadWriteAttrCB
        0     14   -> pt_ZclReadGetProxyEntry


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_10
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_11
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_12
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_2
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_3
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_4
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_5
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_6
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_7
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,_8
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_9
       6  ??Subroutine10_0
       8  ??Subroutine11_0
       6  ??Subroutine12_0
       6  ??Subroutine9_0
       5  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
       9  ?Subroutine3
       4  ?Subroutine4
       4  ?Subroutine5
       9  ?Subroutine6
       2  ?Subroutine7
       9  ?Subroutine8
       4  __Constant_10000
      11  aliasConflictAnnce
     474  gp_CheckAnnouncedDevice
       6  gp_CheckAnnouncedDevice::?relay
     944  gp_PairingUpdateProxyTlb
       6  gp_PairingUpdateProxyTlb::?relay
      68  gp_PopulateProxyTblEntry
       6  gp_PopulateProxyTblEntry::?relay
     934  gp_UpdateProxyTlb
       6  gp_UpdateProxyTlb::?relay
     280  gp_pairingSetProxyTblOptions
       6  gp_pairingSetProxyTblOptions::?relay
    1134  pt_ZclReadGetProxyEntry
       6  pt_ZclReadGetProxyEntry::?relay
     230  pt_addSinkGroup
       6  pt_addSinkGroup::?relay
     453  pt_updateLightweightUnicastSink
       6  pt_updateLightweightUnicastSink::?relay
     100  zclGpp_ReadWriteAttrCB
       6  zclGpp_ReadWriteAttrCB::?relay

 
 4 707 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
   741 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
   737 bytes of CONST    memory (+ 4 bytes shared)
 4 707 bytes of HUGECODE memory
    11 bytes of XDATA    memory

Errors: none
Warnings: none
