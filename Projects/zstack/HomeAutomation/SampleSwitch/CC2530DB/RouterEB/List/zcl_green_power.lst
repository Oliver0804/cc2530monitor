###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               28/Sep/2021  21:08:05
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Components\stack\zcl\zcl_green_power.c
#    Command line       =  
#        -f C:\usertemp\AppData\Local\Temp\EW946A.tmp ("I:\ZigBee3.0\7.
#        基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Components\stack\zcl\zcl_green_power.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D
#        HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D INT_HEAP_LEN=2300
#        -D HAL_LCD=TRUE -D xHAL_LCD_OLED12864 -D HAL_ADC=TRUE -lC
#        "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        -lA "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\7.
#        基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "I:\ZigBee3.0\7.
#        基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
#        -I "I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7.
#        基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List\zcl_green_power.lst
#    Object file        =  
#        I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj\zcl_green_power.r51
#
###############################################################################

I:\ZigBee3.0\7. 基于ZCL属性上报测试非常成功\7. 基于ZCL属性上报\Z-Stack 3.0.1\Components\stack\zcl\zcl_green_power.c
      1          /**************************************************************************************************
      2            Filename:       zcl_green_power.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "ZGlobals.h"  
     48          #include "ZComDef.h"
     49          #include "zcl.h"
     50          #include "zcl_green_power.h"
     51          #include "stub_aps.h"
     52          #include "gp_common.h"
     53          #include "bdb_interface.h"
     54             
     55          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     56          
     57          /*********************************************************************
     58           * MACROS
     59           */
     60          
     61          /*********************************************************************
     62           * CONSTANTS
     63           */
     64          
     65          /*********************************************************************
     66           * TYPEDEFS
     67           */
     68          
     69          typedef struct zclGpCBRec
     70          {
     71            struct zclGpCBRec        *next;
     72            uint8                     endpoint; // Used to link it into the endpoint descriptor
     73            zclGp_AppCallbacks_t     *CBs;      // Pointer to Callback function
     74          } zclGpCBRec_t;
     75          
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * GLOBAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          static zclGpCBRec_t *zclGpCBs = (zclGpCBRec_t *)NULL;
   \                     zclGpCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint8 zclGpPluginRegisted = FALSE;
   \                     zclGpPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          static gpNotificationMsg_t *pNotificationMsgHead = NULL;
   \                     pNotificationMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          static gpCmdPayloadMsg_t *pCmdPayloadMsgHead = NULL;
   \                     pCmdPayloadMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     92          
     93          //static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
     94          
     95          
     96          /*********************************************************************
     97           * LOCAL FUNCTIONS
     98           */
     99          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg );
    100          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    101          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint );
    102          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg );
    103          
    104          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg, zclGp_AppCallbacks_t *pCBs );
    105          
    106          
    107          /*********************************************************************
    108           * @fn      zclGp_RegisterCmdCallbacks
    109           *
    110           * @brief   Register an applications command callbacks
    111           *
    112           * @param   endpoint - application's endpoint
    113           * @param   callbacks - pointer to the callback record.
    114           *
    115           * @return  ZMemError if not able to allocate
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          ZStatus_t zclGp_RegisterCmdCallbacks( uint8 endpoint, zclGp_AppCallbacks_t *callbacks )
   \                     zclGp_RegisterCmdCallbacks:
    118          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    119            zclGpCBRec_t *pNewItem;
    120            zclGpCBRec_t *pLoop;
    121          
    122            // Register as a ZCL Plugin
    123            if ( zclGpPluginRegisted == FALSE )
   \   00000B   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclGp_RegisterCmdCallbacks_0
    124            {
    125              zcl_registerPlugin( ZCL_CLUSTER_ID_GREEN_POWER,
    126                                  ZCL_CLUSTER_ID_GREEN_POWER,
    127                                  zclGp_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclGp_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclGp_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C21         MOV       R4,#0x21
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A21         MOV       R2,#0x21
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    128          
    129              zclGpPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    130            }
    131          
    132            // Fill in the new profile list
    133            pNewItem = zcl_mem_alloc( sizeof( zclGpCBRec_t ) );
   \                     ??zclGp_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    134            if ( pNewItem == NULL )
   \   000041   EA           MOV       A,R2
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclGp_RegisterCmdCallbacks_1
    135              return (ZMemError);
   \   000045   7910         MOV       R1,#0x10
   \   000047   803C         SJMP      ??zclGp_RegisterCmdCallbacks_2
    136          
    137            pNewItem->next = (zclGpCBRec_t *)NULL;
   \                     ??zclGp_RegisterCmdCallbacks_1:
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine21 & 0xFFFF
    138            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_18:
   \   000053   E5..         MOV       A,?V0
   \   000055   12....       LCALL     ?Subroutine21 & 0xFFFF
    139            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_19:
   \   000058   A3           INC       DPTR
   \   000059   EE           MOV       A,R6
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   EF           MOV       A,R7
   \   00005D   F0           MOVX      @DPTR,A
    140          
    141            // Find spot in list
    142            if (  zclGpCBs == NULL )
   \   00005E   90....       MOV       DPTR,#zclGpCBs
   \   000061   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000064   90....       MOV       DPTR,#zclGpCBs
   \   000067   6017         JZ        ??zclGp_RegisterCmdCallbacks_3
    143            {
    144              zclGpCBs = pNewItem;
    145            }
    146            else
    147            {
    148              // Look for end of list
    149              pLoop = zclGpCBs;
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FC           MOV       R4,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   8003         SJMP      ??zclGp_RegisterCmdCallbacks_4
    150              while ( pLoop->next != NULL )
    151                pLoop = pLoop->next;
   \                     ??zclGp_RegisterCmdCallbacks_5:
   \   00006F   EA           MOV       A,R2
   \   000070   FC           MOV       R4,A
   \   000071   EB           MOV       A,R3
   \                     ??zclGp_RegisterCmdCallbacks_4:
   \   000072   FD           MOV       R5,A
   \   000073   8C82         MOV       DPL,R4
   \   000075   8D83         MOV       DPH,R5
   \   000077   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00007A   70F3         JNZ       ??zclGp_RegisterCmdCallbacks_5
    152          
    153              // Put new item at end of list
    154              pLoop->next = pNewItem;
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
    155            }
   \                     ??zclGp_RegisterCmdCallbacks_3:
   \   000080   12....       LCALL     ?Subroutine22 & 0xFFFF
    156          
    157            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_21:
   \   000083   7900         MOV       R1,#0x0
   \                     ??zclGp_RegisterCmdCallbacks_2:
   \   000085                REQUIRE ?Subroutine0
   \   000085                ; // Fall through to label ?Subroutine0
    158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET
    159          
    160          /*********************************************************************
    161           * @fn      zclGp_FindCallbacks
    162           *
    163           * @brief   Find the callbacks for an endpoint
    164           *
    165           * @param   endpoint - endpoint to find the application callbacks for
    166           *
    167           * @return  pointer to the callbacks
    168           */
    169          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint )
    170          {
    171            zclGpCBRec_t *pCBs;
    172          
    173            pCBs = zclGpCBs;
    174            while ( pCBs )
    175            {
    176              if ( pCBs->endpoint == endpoint )
    177                return ( pCBs->CBs );
    178              pCBs = pCBs->next;
    179            }
    180            return ( (zclGp_AppCallbacks_t *)NULL );
    181          }
    182          
    183          /*********************************************************************
    184           * @fn      zclGp_HdlIncoming
    185           *
    186           * @brief   Callback from ZCL to process incoming Commands specific
    187           *          to this cluster library or Profile commands for attributes
    188           *          that aren't in the attribute list
    189           *
    190           *
    191           * @param   pInMsg - pointer to the incoming message
    192           *
    193           * @return  ZStatus_t
    194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGp_HdlIncoming:
    196          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    197            ZStatus_t stat = ZSuccess;
    198          
    199          #if defined ( INTER_PAN )
    200            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
    201              return ( stat ); // Cluster not supported thru Inter-PAN
    202          #endif
    203            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   5403         ANL       A,#0x3
   \   00000F   6401         XRL       A,#0x1
   \   000011   703D         JNZ       ??zclGp_HdlIncoming_0
    204            {
    205              // Is this a manufacturer specific command?
    206              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000013   E8           MOV       A,R0
   \   000014   5404         ANL       A,#0x4
   \   000016   7038         JNZ       ??zclGp_HdlIncoming_0
    207              {
    208                stat = zclGp_HdlInSpecificCommands( pInMsg );
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    209              }
    210              else
    211              {
    212                // We don't support any manufacturer specific command.
    213                stat = ZFailure;
    214              }
    215            }
   \                     ??CrossCallReturnLabel_118:
   \   00001F   E8           MOV       A,R0
   \   000020   FE           MOV       R6,A
   \   000021   E9           MOV       A,R1
   \   000022   FF           MOV       R7,A
   \   000023   E8           MOV       A,R0
   \   000024   2414         ADD       A,#0x14
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3F           ADDC      A,R7
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   90....       MOV       DPTR,#zclGpCBs
   \                     ??zclGp_HdlIncoming_1:
   \   000031   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000034   601A         JZ        ??zclGp_HdlIncoming_0
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6C           XRL       A,R4
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   70ED         JNZ       ??zclGp_HdlIncoming_1
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FC           MOV       R4,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   FD           MOV       R5,A
   \   00004C   EC           MOV       A,R4
   \   00004D   4D           ORL       A,R5
   \   00004E   7004         JNZ       ??zclGp_HdlIncoming_2
   \                     ??zclGp_HdlIncoming_0:
   \   000050   7901         MOV       R1,#0x1
   \   000052   801A         SJMP      ??zclGp_HdlIncoming_3
   \                     ??zclGp_HdlIncoming_2:
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   6421         XRL       A,#0x21
   \   00005F   7002         JNZ       ??zclGp_HdlIncoming_4
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \                     ??zclGp_HdlIncoming_4:
   \   000063   7006         JNZ       ??zclGp_HdlIncoming_5
   \   000065                ; Setup parameters for call to function zclGp_ProcessInProxyBasic
   \   000065   12....       LCALL     `??zclGp_ProcessInProxyBasic::?relay`; Banked call to: zclGp_ProcessInProxyBasic
   \   000068   E9           MOV       A,R1
   \   000069   8002         SJMP      ??zclGp_HdlIncoming_6
   \                     ??zclGp_HdlIncoming_5:
   \   00006B   7401         MOV       A,#0x1
   \                     ??zclGp_HdlIncoming_6:
   \   00006D   F9           MOV       R1,A
    216            else
    217            {
    218              // Handle all the normal (Read, Write...) commands -- should never get here
    219              stat = ZFailure;
    220            }
    221            return ( stat );
   \                     ??zclGp_HdlIncoming_3:
   \   00006E                REQUIRE ?Subroutine1
   \   00006E                ; // Fall through to label ?Subroutine1
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    223          
    224          /*********************************************************************
    225           * @fn      zclGp_HdlInSpecificCommands
    226           *
    227           * @brief   Callback from ZCL to process incoming Commands specific
    228           *          to this cluster library
    229          
    230           * @param   pInMsg - pointer to the incoming message
    231           *
    232           * @return  ZStatus_t
    233           */
    234          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    235          {
    236            ZStatus_t stat;
    237            zclGp_AppCallbacks_t *pCBs;
    238          
    239            // make sure endpoint exists
    240            pCBs = zclGp_FindCallbacks( pInMsg->msg->endPoint );
    241            if ( pCBs == NULL )
    242              return ( ZFailure );
    243          
    244            switch ( pInMsg->msg->clusterId )
    245            {
    246              case ZCL_CLUSTER_ID_GREEN_POWER:
    247                // Proxy Basic handler
    248                stat = zclGp_ProcessInProxyBasic( pInMsg, pCBs );
    249                break;
    250          
    251              default:
    252                stat = ZFailure;
    253                break;
    254            }
    255          
    256            return ( stat );
    257          }
    258          
    259          /*********************************************************************
    260           * @fn      zclGp_ProcessInProxyBasic
    261           *
    262           * @brief   Process in the received client commands for the Proxy Basic.
    263           *
    264           * @param   pInMsg - pointer to the incoming message
    265           *
    266           * @return  ZStatus_t
    267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    268          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg,
   \                     zclGp_ProcessInProxyBasic:
    269                                                    zclGp_AppCallbacks_t *pCBs )
    270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV       A,#-0x16
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    271            // Server side command handler
    272            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   000012   EA           MOV       A,R2
   \   000013   2406         ADD       A,#0x6
   \   000015   F5..         MOV       ?V2,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   F5..         MOV       ?V3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   2407         ADD       A,#0x7
   \   00001E   F5..         MOV       ?V6,A
   \   000020   E4           CLR       A
   \   000021   3F           ADDC      A,R7
   \   000022   F5..         MOV       ?V7,A
   \   000024   EA           MOV       A,R2
   \   000025   2402         ADD       A,#0x2
   \   000027   F5..         MOV       ?V4,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V5,A
   \   00002D   85..82       MOV       DPL,?V4
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   5408         ANL       A,#0x8
   \   000035   6003         JZ        $+5
   \   000037   02....       LJMP      ??zclGp_ProcessInProxyBasic_0 & 0xFFFF
    273            {
    274              // Server side command handling is not supported
    275              zclDefaultRspCmd_t defaultRspCmd;
    276          
    277              defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \   00003A   85..82       MOV       DPL,?V6
   \   00003D   85..83       MOV       DPH,?V7
   \   000040   E0           MOVX      A,@DPTR
   \   000041   C0E0         PUSH      A
   \   000043   7405         MOV       A,#0x5
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   F0           MOVX      @DPTR,A
    278              defaultRspCmd.statusCode = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \   00004B   7406         MOV       A,#0x6
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   7481         MOV       A,#-0x7f
   \   000052   F0           MOVX      @DPTR,A
    279              zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
    280                                     pInMsg->msg->clusterId, &defaultRspCmd,
    281                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V8,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F5..         MOV       ?V9,A
   \   00005E                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   00005E   85..82       MOV       DPL,?V2
   \   000061   85..83       MOV       DPH,?V3
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V10,A
   \   000067   78..         MOV       R0,#?V10
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   E4           CLR       A
   \   00006D   F5..         MOV       ?V10,A
   \   00006F   F5..         MOV       ?V11,A
   \   000071   78..         MOV       R0,#?V10
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000076   75..01       MOV       ?V10,#0x1
   \   000079   78..         MOV       R0,#?V10
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   78..         MOV       R0,#?V10
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000083   740A         MOV       A,#0xa
   \   000085   12....       LCALL     ?XSTACK_DISP100_8
   \   000088   88..         MOV       ?V10,R0
   \   00008A   89..         MOV       ?V11,R1
   \   00008C   78..         MOV       R0,#?V10
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   85..82       MOV       DPL,?V8
   \   000094   85..83       MOV       DPH,?V9
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   FC           MOV       R4,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   FD           MOV       R5,A
   \   0000A0   E5..         MOV       A,?V8
   \   0000A2   2406         ADD       A,#0x6
   \   0000A4   FA           MOV       R2,A
   \   0000A5   E4           CLR       A
   \   0000A6   35..         ADDC      A,?V9
   \   0000A8   FB           MOV       R3,A
   \   0000A9   E5..         MOV       A,?V8
   \   0000AB   2414         ADD       A,#0x14
   \   0000AD   F582         MOV       DPL,A
   \   0000AF   E4           CLR       A
   \   0000B0   35..         ADDC      A,?V9
   \   0000B2   F583         MOV       DPH,A
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F9           MOV       R1,A
   \   0000B6   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0000B9   7407         MOV       A,#0x7
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
    282            }
    283            // Client side command handler
    284            if ( zcl_ClientCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGp_ProcessInProxyBasic_0:
   \   0000BE   85..82       MOV       DPL,?V4
   \   0000C1   85..83       MOV       DPH,?V5
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   5408         ANL       A,#0x8
   \   0000C7   7003         JNZ       $+5
   \   0000C9   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    285            {
    286              switch ( pInMsg->hdr.commandID )
   \   0000CC   EE           MOV       A,R6
   \   0000CD   240A         ADD       A,#0xa
   \   0000CF   F5..         MOV       ?V12,A
   \   0000D1   E4           CLR       A
   \   0000D2   3F           ADDC      A,R7
   \   0000D3   F5..         MOV       ?V13,A
   \   0000D5   EE           MOV       A,R6
   \   0000D6   2408         ADD       A,#0x8
   \   0000D8   F5..         MOV       ?V4,A
   \   0000DA   E4           CLR       A
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   F5..         MOV       ?V5,A
   \   0000DE   85..82       MOV       DPL,?V6
   \   0000E1   85..83       MOV       DPH,?V7
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   14           DEC       A
   \   0000E6   6014         JZ        ??zclGp_ProcessInProxyBasic_2
   \   0000E8   14           DEC       A
   \   0000E9   7003         JNZ       $+5
   \   0000EB   02....       LJMP      ??zclGp_ProcessInProxyBasic_3 & 0xFFFF
   \   0000EE   24FC         ADD       A,#-0x4
   \   0000F0   7003         JNZ       $+5
   \   0000F2   02....       LJMP      ??zclGp_ProcessInProxyBasic_4 & 0xFFFF
   \   0000F5   24FB         ADD       A,#-0x5
   \   0000F7   605A         JZ        ??zclGp_ProcessInProxyBasic_5
   \   0000F9   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    287              {
    288                case COMMAND_GP_PAIRING:
    289                  if ( pCBs->pfnGpPairingCmd )
   \                     ??zclGp_ProcessInProxyBasic_2:
   \   0000FC   85..82       MOV       DPL,?V0
   \   0000FF   85..83       MOV       DPH,?V1
   \   000102   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000105   7003         JNZ       $+5
   \   000107   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    290                  {
    291                    zclGpPairing_t cmd;
    292                    
    293                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   00010A   12....       LCALL     ?Subroutine10 & 0xFFFF
    294                    
    295                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_2:
   \   00010D   740F         MOV       A,#0xf
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ?Subroutine8 & 0xFFFF
    296                    osal_memcpy( cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_56:
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000118   7C03         MOV       R4,#0x3
   \   00011A   7D00         MOV       R5,#0x0
   \   00011C   7414         MOV       A,#0x14
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   AA82         MOV       R2,DPL
   \   000123   AB83         MOV       R3,DPH
   \   000125   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000128   12....       LCALL     ?DEALLOC_XSTACK8
    297                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   00012B   85..82       MOV       DPL,?V4
   \   00012E   85..83       MOV       DPH,?V5
   \   000131   E0           MOVX      A,@DPTR
   \   000132   2403         ADD       A,#0x3
   \   000134   12....       LCALL     ??Subroutine37_0 & 0xFFFF
    298                              
    299                    if ( cmd.pData == NULL )
   \                     ??CrossCallReturnLabel_60:
   \   000137   7414         MOV       A,#0x14
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00013F   7005         JNZ       ??zclGp_ProcessInProxyBasic_6
    300                    {
    301                      return ZFailure;
   \   000141   7901         MOV       R1,#0x1
   \   000143   02....       LJMP      ??zclGp_ProcessInProxyBasic_7 & 0xFFFF
    302                    }
    303                    
    304                    cmd.pData = pInMsg->pData;
   \                     ??zclGp_ProcessInProxyBasic_6:
   \   000146   7414         MOV       A,#0x14
   \   000148   12....       LCALL     ?XSTACK_DISP0_8
   \   00014B   12....       LCALL     ?Subroutine22 & 0xFFFF
    305                    pCBs->pfnGpPairingCmd( &cmd );
   \                     ??CrossCallReturnLabel_22:
   \   00014E                ; Setup parameters for indirect call
   \   00014E   740F         MOV       A,#0xf
   \   000150   02....       LJMP      ??zclGp_ProcessInProxyBasic_8 & 0xFFFF
    306          
    307                  }
    308                  break;
    309                  
    310                case COMMAND_GP_PROXY_TABLE_REQUEST:
    311                  if ( pCBs->pfnGpProxyTableReqCmd )
   \                     ??zclGp_ProcessInProxyBasic_5:
   \   000153   E5..         MOV       A,?V0
   \   000155   2402         ADD       A,#0x2
   \   000157   F5..         MOV       ?V0,A
   \   000159   5002         JNC       ??zclGp_ProcessInProxyBasic_9
   \   00015B   05..         INC       ?V1
   \                     ??zclGp_ProcessInProxyBasic_9:
   \   00015D   F582         MOV       DPL,A
   \   00015F   85..83       MOV       DPH,?V1
   \   000162   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000165   7003         JNZ       $+5
   \   000167   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    312                  {
    313                    zclGpProxyTableRequest_t cmd;
    314                    
    315                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   00016A   12....       LCALL     ?Subroutine10 & 0xFFFF
    316                    
    317                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_3:
   \   00016D   85..82       MOV       DPL,?XSP + 0
   \   000170   85..83       MOV       DPH,?XSP + 1
   \   000173   12....       LCALL     ?Subroutine8 & 0xFFFF
    318                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_57:
   \   000176   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000179   7C01         MOV       R4,#0x1
   \   00017B   7D00         MOV       R5,#0x0
   \   00017D   7405         MOV       A,#0x5
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   AA82         MOV       R2,DPL
   \   000184   AB83         MOV       R3,DPH
   \   000186   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000189   12....       LCALL     ?DEALLOC_XSTACK8
    319                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   00018C   12....       LCALL     ?Subroutine6 & 0xFFFF
    320                    
    321                    
    322                    cmd.pData = (void*)pInMsg->pData;
   \                     ??CrossCallReturnLabel_61:
   \   00018F   7403         MOV       A,#0x3
   \   000191   12....       LCALL     ?XSTACK_DISP0_8
   \   000194   807D         SJMP      ??CrossCallReturnLabel_12
    323                    pCBs->pfnGpProxyTableReqCmd( &cmd );
    324          
    325                  }
    326                  break;
    327                case COMMAND_GP_PROXY_COMMISSIONING_MODE:
    328                  if(pCBs->pfnGpProxyCommissioningModeCmd)
   \                     ??zclGp_ProcessInProxyBasic_3:
   \   000196   E5..         MOV       A,?V0
   \   000198   2404         ADD       A,#0x4
   \   00019A   F5..         MOV       ?V0,A
   \   00019C   5002         JNC       ??zclGp_ProcessInProxyBasic_10
   \   00019E   05..         INC       ?V1
   \                     ??zclGp_ProcessInProxyBasic_10:
   \   0001A0   F582         MOV       DPL,A
   \   0001A2   85..83       MOV       DPH,?V1
   \   0001A5   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0001A8   7003         JNZ       $+5
   \   0001AA   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    329                  {
    330                    zclGpProxyCommissioningMode_t cmd;
    331          
    332                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   0001AD                ; Setup parameters for call to function osal_memcpy
   \   0001AD   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B3   7C01         MOV       R4,#0x1
   \   0001B5   7D00         MOV       R5,#0x0
   \   0001B7   7405         MOV       A,#0x5
   \   0001B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BC   AA82         MOV       R2,DPL
   \   0001BE   AB83         MOV       R3,DPH
   \   0001C0   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0001C3   12....       LCALL     ?DEALLOC_XSTACK8
    333                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   0001C6   12....       LCALL     ?Subroutine6 & 0xFFFF
    334          
    335                    // alloc for data after options field
    336                    uint8 responseLen = pInMsg->pDataLen - sizeof(cmd.options); 
   \                     ??CrossCallReturnLabel_62:
   \   0001C9   85..82       MOV       DPL,?V12
   \   0001CC   85..83       MOV       DPH,?V13
   \   0001CF   E0           MOVX      A,@DPTR
   \   0001D0   14           DEC       A
    337                   
    338                    cmd.pData = osal_mem_alloc( responseLen );
   \   0001D1   F5..         MOV       ?V2,A
   \   0001D3   75..00       MOV       ?V3,#0x0
   \   0001D6                ; Setup parameters for call to function osal_mem_alloc
   \   0001D6   FA           MOV       R2,A
   \   0001D7   AB..         MOV       R3,?V3
   \   0001D9   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001DC   7403         MOV       A,#0x3
   \   0001DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E1   12....       LCALL     ?Subroutine13 & 0xFFFF
    339                    osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
   \                     ??CrossCallReturnLabel_8:
   \   0001E4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E7   AC..         MOV       R4,?V2
   \   0001E9   AD..         MOV       R5,?V3
   \   0001EB   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001EE   12....       LCALL     ?DEALLOC_XSTACK8
    340          
    341                    if(pInMsg->msg->srcAddr.addrMode == afAddr16Bit)
   \   0001F1   8E82         MOV       DPL,R6
   \   0001F3   8F83         MOV       DPH,R7
   \   0001F5   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0001F8   E8           MOV       A,R0
   \   0001F9   240E         ADD       A,#0xe
   \   0001FB   F582         MOV       DPL,A
   \   0001FD   E4           CLR       A
   \   0001FE   39           ADDC      A,R1
   \   0001FF   F583         MOV       DPH,A
   \   000201   E0           MOVX      A,@DPTR
   \   000202   6402         XRL       A,#0x2
   \   000204   7010         JNZ       ??CrossCallReturnLabel_23
    342                    {
    343                      cmd.srcAddr = pInMsg->msg->srcAddr.addr.shortAddr;
   \   000206   8882         MOV       DPL,R0
   \   000208   8983         MOV       DPH,R1
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   A3           INC       DPTR
   \   00020D   A3           INC       DPTR
   \   00020E   A3           INC       DPTR
   \   00020F   A3           INC       DPTR
   \   000210   12....       LCALL     ?Subroutine15 & 0xFFFF
    344                    }
   \                     ??CrossCallReturnLabel_12:
   \   000213   12....       LCALL     ?Subroutine22 & 0xFFFF
    345                    
    346                    pCBs->pfnGpProxyCommissioningModeCmd( &cmd );
   \                     ??CrossCallReturnLabel_23:
   \   000216                ; Setup parameters for indirect call
   \   000216   AA..         MOV       R2,?XSP + 0
   \   000218   AB..         MOV       R3,?XSP + 1
   \   00021A   02....       LJMP      ??zclGp_ProcessInProxyBasic_11 & 0xFFFF
    347                  }
    348                  break;
    349                  case COMMAND_GP_RESPONSE:
    350                    
    351                    if(pCBs->pfnGpResponseCommand)
   \                     ??zclGp_ProcessInProxyBasic_4:
   \   00021D   E5..         MOV       A,?V0
   \   00021F   2406         ADD       A,#0x6
   \   000221   F5..         MOV       ?V0,A
   \   000223   5002         JNC       ??zclGp_ProcessInProxyBasic_12
   \   000225   05..         INC       ?V1
   \                     ??zclGp_ProcessInProxyBasic_12:
   \   000227   F582         MOV       DPL,A
   \   000229   85..83       MOV       DPH,?V1
   \   00022C   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00022F   7003         JNZ       $+5
   \   000231   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    352                    {
    353                      zclGpResponse_t cmd;
    354                      
    355                      uint8 responseLen;
    356          
    357                      osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   000234                ; Setup parameters for call to function osal_memcpy
   \   000234   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000237   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00023A   7C01         MOV       R4,#0x1
   \   00023C   7D00         MOV       R5,#0x0
   \   00023E   740C         MOV       A,#0xc
   \   000240   12....       LCALL     ?XSTACK_DISP0_8
   \   000243   AA82         MOV       R2,DPL
   \   000245   AB83         MOV       R3,DPH
   \   000247   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00024A   12....       LCALL     ?DEALLOC_XSTACK8
    358                      pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   00024D   85..82       MOV       DPL,?V4
   \   000250   85..83       MOV       DPH,?V5
   \   000253   E0           MOVX      A,@DPTR
   \   000254   2401         ADD       A,#0x1
   \   000256   FA           MOV       R2,A
   \   000257   A3           INC       DPTR
   \   000258   E0           MOVX      A,@DPTR
   \   000259   3400         ADDC      A,#0x0
   \   00025B   FB           MOV       R3,A
   \   00025C   85..82       MOV       DPL,?V4
   \   00025F   85..83       MOV       DPH,?V5
   \   000262   EA           MOV       A,R2
   \   000263   F0           MOVX      @DPTR,A
   \   000264   A3           INC       DPTR
   \   000265   EB           MOV       A,R3
   \   000266   F0           MOVX      @DPTR,A
    359                      
    360                      cmd.tempMasterShortAddr = osal_build_uint16(pInMsg->pData);
   \   000267                ; Setup parameters for call to function osal_build_uint16
   \   000267   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00026A   740A         MOV       A,#0xa
   \   00026C   12....       LCALL     ?XSTACK_DISP0_8
   \   00026F   12....       LCALL     ?Subroutine33 & 0xFFFF
    361                      pInMsg->pData += sizeof(cmd.tempMasterShortAddr);  // Move data pointer after tempMaster field
   \                     ??CrossCallReturnLabel_47:
   \   000272   2402         ADD       A,#0x2
   \   000274   F5..         MOV       ?V8,A
   \   000276   A3           INC       DPTR
   \   000277   E0           MOVX      A,@DPTR
   \   000278   3400         ADDC      A,#0x0
   \   00027A   F5..         MOV       ?V9,A
   \   00027C   85..82       MOV       DPL,?V4
   \   00027F   85..83       MOV       DPH,?V5
   \   000282   E5..         MOV       A,?V8
   \   000284   F0           MOVX      @DPTR,A
   \   000285   A3           INC       DPTR
   \   000286   E5..         MOV       A,?V9
   \   000288   F0           MOVX      @DPTR,A
    362                      
    363                      osal_memcpy( &cmd.tempMasterTxChannel, (void*)pInMsg->pData, sizeof(cmd.tempMasterTxChannel) );
   \   000289                ; Setup parameters for call to function osal_memcpy
   \   000289   78..         MOV       R0,#?V8
   \   00028B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00028E   7C01         MOV       R4,#0x1
   \   000290   7D00         MOV       R5,#0x0
   \   000292   740F         MOV       A,#0xf
   \   000294   12....       LCALL     ?XSTACK_DISP0_8
   \   000297   AA82         MOV       R2,DPL
   \   000299   AB83         MOV       R3,DPH
   \   00029B   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00029E   12....       LCALL     ?DEALLOC_XSTACK8
    364                      pInMsg->pData += sizeof(cmd.tempMasterTxChannel);  // Move data pointer after options field
   \   0002A1   12....       LCALL     ?Subroutine6 & 0xFFFF
    365                      
    366                      cmd.dstAddr = pInMsg->msg->macDestAddr;  
   \                     ??CrossCallReturnLabel_63:
   \   0002A4   8E82         MOV       DPL,R6
   \   0002A6   8F83         MOV       DPH,R7
   \   0002A8   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0002AB   C8           XCH       A,R0
   \   0002AC   2412         ADD       A,#0x12
   \   0002AE   F582         MOV       DPL,A
   \   0002B0   E4           CLR       A
   \   0002B1   38           ADDC      A,R0
   \   0002B2   F583         MOV       DPH,A
   \   0002B4   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0002B7   7407         MOV       A,#0x7
   \   0002B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BC   12....       LCALL     ?Subroutine22 & 0xFFFF
    367                            
    368                      responseLen = pInMsg->pDataLen - sizeof(cmd.tempMasterTxChannel) 
    369                                             - sizeof(cmd.tempMasterShortAddr) 
    370                                             - sizeof(cmd.options);
   \                     ??CrossCallReturnLabel_24:
   \   0002BF   85..82       MOV       DPL,?V12
   \   0002C2   85..83       MOV       DPH,?V13
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   24FC         ADD       A,#-0x4
   \   0002C8   F8           MOV       R0,A
    371                      cmd.pData = osal_mem_alloc( responseLen );
   \   0002C9   FE           MOV       R6,A
   \   0002CA                ; Setup parameters for call to function osal_mem_alloc
   \   0002CA   FA           MOV       R2,A
   \   0002CB   7B00         MOV       R3,#0x0
   \   0002CD   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0002D0   740D         MOV       A,#0xd
   \   0002D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D5   12....       LCALL     ?Subroutine13 & 0xFFFF
    372                      
    373                      osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
   \                     ??CrossCallReturnLabel_9:
   \   0002D8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002DB   EE           MOV       A,R6
   \   0002DC   FC           MOV       R4,A
   \   0002DD   7D00         MOV       R5,#0x0
   \   0002DF   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0002E2   12....       LCALL     ?DEALLOC_XSTACK8
    374          
    375                      pCBs->pfnGpResponseCommand( &cmd ); 
   \   0002E5                ; Setup parameters for indirect call
   \   0002E5   7407         MOV       A,#0x7
   \                     ??zclGp_ProcessInProxyBasic_8:
   \   0002E7   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??zclGp_ProcessInProxyBasic_11:
   \   0002EA   85..82       MOV       DPL,?V0
   \   0002ED   85..83       MOV       DPH,?V1
    376                    }
    377                  break;
    378              }
    379            }
   \   0002F0   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0002F3   12....       LCALL     ?CALL_IND
    380          
    381            return ( ZSuccess );
   \                     ??zclGp_ProcessInProxyBasic_1:
   \   0002F6   7900         MOV       R1,#0x0
   \                     ??zclGp_ProcessInProxyBasic_7:
   \   0002F8   7416         MOV       A,#0x16
   \   0002FA                REQUIRE ?Subroutine2
   \   0002FA                ; // Fall through to label ?Subroutine2
    382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV       R7,#0xe
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   F5..         MOV       ?V4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   75..00       MOV       ?V6,#0x0
   \   00000C   78..         MOV       R0,#?V4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   85..82       MOV       DPL,?V4
   \   000008   85..83       MOV       DPH,?V5
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   90....       MOV       DPTR,#zcl_InSeqNum
   \   00000A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   2406         ADD       A,#0x6
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   3400         ADDC      A,#0x0
   \   000015   F9           MOV       R1,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                REQUIRE ??Subroutine36_0
   \   000005                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V8,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V9,A
   \   00000D   75..00       MOV       ?V10,#0x0
   \   000010   78..         MOV       R0,#?V8
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2401         ADD       A,#0x1
   \   000009                REQUIRE ??Subroutine37_0
   \   000009                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   85..82       MOV       DPL,?V4
   \   000009   85..83       MOV       DPH,?V5
   \   00000C   E8           MOV       A,R0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    383          
    384          /*********************************************************************
    385           * @fn      zclGp_SendGpNotificationCommand
    386           *
    387           * @brief   Send the Green Power Notification Command to a device
    388           *
    389           * @param   pCmd - Pointer to GP Notification Struct
    390           *          secNum - Sequence number given by the GPDF  
    391           *
    392           * @return  ZStatus_t
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          ZStatus_t zclGp_SendGpNotificationCommand( gpNotificationCmd_t *pCmd, uint8 secNum )
   \                     zclGp_SendGpNotificationCommand:
    395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   89..         MOV       ?V14,R1
    396            uint8 *buf = NULL;
    397            uint8 *pBuf = NULL;
    398            uint8 *pGpdId = NULL;
   \   00000B   75..00       MOV       ?V8,#0x0
   \   00000E   75..00       MOV       ?V9,#0x0
    399            uint8 appId;
    400            ZStatus_t status;
    401            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   000011   75..0B       MOV       ?V2,#0xb
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   E0           MOVX      A,@DPTR
   \   000019   5407         ANL       A,#0x7
   \   00001B   F8           MOV       R0,A
   \   00001C   7005         JNZ       ??zclGp_SendGpNotificationCommand_0
    402            gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    403            
    404            // Check some stuff to calculate the packet len
    405            // If Application Id bitfield is 0b000
    406            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    407            {
    408              len += 4;  // GPD ID
   \   00001E   75..0F       MOV       ?V2,#0xf
   \   000021   8008         SJMP      ??zclGp_SendGpNotificationCommand_1
    409            }
    410            // If Application Id bitfield is 0b010
    411            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_0:
   \   000023   7402         MOV       A,#0x2
   \   000025   68           XRL       A,R0
   \   000026   7003         JNZ       ??zclGp_SendGpNotificationCommand_1
    412            {
    413              len += 9;  // IEEE addr + EP
   \   000028   75..14       MOV       ?V2,#0x14
    414            }
    415            
    416            // Length of the command payload
    417            len += pCmd->payloadLen;
   \                     ??zclGp_SendGpNotificationCommand_1:
   \   00002B   EA           MOV       A,R2
   \   00002C   2414         ADD       A,#0x14
   \   00002E   F5..         MOV       ?V10,A
   \   000030   E4           CLR       A
   \   000031   35..         ADDC      A,?V1
   \   000033   F5..         MOV       ?V11,A
   \   000035   85..82       MOV       DPL,?V10
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F8           MOV       R0,A
   \   00003C   E5..         MOV       A,?V2
   \   00003E   28           ADD       A,R0
   \   00003F   F5..         MOV       ?V2,A
   \   000041   E4           CLR       A
   \   000042   3400         ADDC      A,#0x0
    418          
    419            buf = zcl_mem_alloc( len );
   \   000044                ; Setup parameters for call to function osal_mem_alloc
   \   000044   AA..         MOV       R2,?V2
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV       ?V12,R2
   \   00004C   8B..         MOV       ?V13,R3
    420            if ( buf )
   \   00004E   EA           MOV       A,R2
   \   00004F   4B           ORL       A,R3
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??zclGp_SendGpNotificationCommand_2 & 0xFFFF
    421            {
    422              pBuf = buf;
    423              
    424              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   85....       MOV       ?V4,?V0
   \   000058   85....       MOV       ?V5,?V1
   \   00005B   75..00       MOV       ?V6,#0x0
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   7C02         MOV       R4,#0x2
   \   000065   7D00         MOV       R5,#0x0
   \   000067   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
    425              pBuf += sizeof ( uint16 );
   \   00006D   E5..         MOV       A,?V12
   \   00006F   2402         ADD       A,#0x2
   \   000071   FE           MOV       R6,A
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V13
   \   000075   FF           MOV       R7,A
   \   000076   85..82       MOV       DPL,?V0
   \   000079   85..83       MOV       DPH,?V1
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   5407         ANL       A,#0x7
   \   00007F   F8           MOV       R0,A
   \   000080   7018         JNZ       ??zclGp_SendGpNotificationCommand_3
    426              
    427              // If Application Id bitfield is 0b000
    428              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    429              {
    430                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
   \   000082   E5..         MOV       A,?V0
   \   000084   2402         ADD       A,#0x2
   \   000086   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
    431                pGpdId = ( uint8* )&pCmd->gpdId;
    432                appId = GP_OPT_APP_ID_GPD;
   \   000092   75..00       MOV       ?V7,#0x0
    433                pBuf += sizeof ( uint32 );
   \   000095   EE           MOV       A,R6
   \   000096   2404         ADD       A,#0x4
   \   000098   8026         SJMP      ??CrossCallReturnLabel_6
    434              }
    435              // If Application Id bitfield is 0b010
    436              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_3:
   \   00009A   7402         MOV       A,#0x2
   \   00009C   68           XRL       A,R0
   \   00009D   7025         JNZ       ??zclGp_SendGpNotificationCommand_4
    437              {
    438                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
   \   00009F   E5..         MOV       A,?V0
   \   0000A1   2406         ADD       A,#0x6
   \   0000A3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A9   7C08         MOV       R4,#0x8
   \   0000AB   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000AE   12....       LCALL     ?DEALLOC_XSTACK8
    439                pGpdId = pCmd->gpdIEEE;
    440                appId = GP_OPT_APP_ID_IEEE;
   \   0000B1   75..02       MOV       ?V7,#0x2
    441                pBuf += Z_EXTADDR_LEN;
    442                *pBuf++ = pCmd->ep;
   \   0000B4   E5..         MOV       A,?V0
   \   0000B6   240E         ADD       A,#0xe
   \   0000B8   F582         MOV       DPL,A
   \   0000BA   E4           CLR       A
   \   0000BB   35..         ADDC      A,?V1
   \   0000BD   12....       LCALL     ?Subroutine12 & 0xFFFF
    443              }
   \                     ??CrossCallReturnLabel_6:
   \   0000C0   FE           MOV       R6,A
   \   0000C1   5001         JNC       ??zclGp_SendGpNotificationCommand_4
   \   0000C3   0F           INC       R7
    444              
    445              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpNotificationCommand_4:
   \   0000C4                ; Setup parameters for call to function osal_memcpy
   \   0000C4   E5..         MOV       A,?V0
   \   0000C6   240F         ADD       A,#0xf
   \   0000C8   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CE   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
    446              pBuf += sizeof ( uint32 );
    447          
    448              *pBuf++ = pCmd->cmdId;
   \   0000D4   E5..         MOV       A,?V0
   \   0000D6   2413         ADD       A,#0x13
   \   0000D8   F582         MOV       DPL,A
   \   0000DA   E4           CLR       A
   \   0000DB   35..         ADDC      A,?V1
   \   0000DD   12....       LCALL     ?Subroutine7 & 0xFFFF
    449              
    450              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_0:
   \   0000E0   5001         JNC       ??zclGp_SendGpNotificationCommand_5
   \   0000E2   0F           INC       R7
    451              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpNotificationCommand_5:
   \   0000E3   85..82       MOV       DPL,?V10
   \   0000E6   85..83       MOV       DPH,?V11
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   6015         JZ        ??CrossCallReturnLabel_14
    452              {
    453                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   0000ED                ; Setup parameters for call to function osal_memcpy
   \   0000ED   E5..         MOV       A,?V0
   \   0000EF   2415         ADD       A,#0x15
   \   0000F1   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F7   E9           MOV       A,R1
   \   0000F8   FC           MOV       R4,A
   \   0000F9   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
    454                pBuf += pCmd->payloadLen;
   \   0000FF   12....       LCALL     ?Subroutine19 & 0xFFFF
    455              }
    456              
    457              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_14:
   \   000102                ; Setup parameters for call to function osal_memcpy
   \   000102   E5..         MOV       A,?V0
   \   000104   2417         ADD       A,#0x17
   \   000106   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010C   7C02         MOV       R4,#0x2
   \   00010E   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
    458              pBuf += sizeof ( uint16 );
    459              
    460              *pBuf++ = pCmd->gppGpdLink;
   \   000114   E5..         MOV       A,?V0
   \   000116   2419         ADD       A,#0x19
   \   000118   F582         MOV       DPL,A
   \   00011A   E4           CLR       A
   \   00011B   35..         ADDC      A,?V1
   \   00011D   12....       LCALL     ?Subroutine20 & 0xFFFF
    461              
    462              pCmdPayloadMsgCurr = gp_AddCmdPayloadMsgNode ( &pCmdPayloadMsgHead, buf, len );
   \                     ??CrossCallReturnLabel_16:
   \   000120                ; Setup parameters for call to function gp_AddCmdPayloadMsgNode
   \   000120   A9..         MOV       R1,?V2
   \   000122   AC..         MOV       R4,?V12
   \   000124   AD..         MOV       R5,?V13
   \   000126   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000128   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   00012A   12....       LCALL     `??gp_AddCmdPayloadMsgNode::?relay`; Banked call to: gp_AddCmdPayloadMsgNode
   \   00012D   8A82         MOV       DPL,R2
   \   00012F   8B83         MOV       DPH,R3
    463              
    464              pCmdPayloadMsgCurr->secNum = secNum;
   \   000131   E5..         MOV       A,?V14
   \   000133   F0           MOVX      @DPTR,A
    465                    
    466              if ( pCmdPayloadMsgCurr != NULL )
   \   000134   E582         MOV       A,DPL
   \   000136   4583         ORL       A,DPH
   \   000138   6029         JZ        ??zclGp_SendGpNotificationCommand_6
    467              {
    468                gp_addPairedSinksToMsgQueue( appId, pGpdId, pCmdPayloadMsgCurr );
   \   00013A                ; Setup parameters for call to function gp_addPairedSinksToMsgQueue
   \   00013A   AC82         MOV       R4,DPL
   \   00013C   AD83         MOV       R5,DPH
   \   00013E   AA..         MOV       R2,?V8
   \   000140   AB..         MOV       R3,?V9
   \   000142   A9..         MOV       R1,?V7
   \   000144   12....       LCALL     `??gp_addPairedSinksToMsgQueue::?relay`; Banked call to: gp_addPairedSinksToMsgQueue
    469                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   000147                ; Setup parameters for call to function osal_start_timerEx
   \   000147   90....       MOV       DPTR,#__Constant_32
   \   00014A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00014D   7A20         MOV       R2,#0x20
   \   00014F   7B00         MOV       R3,#0x0
   \   000151   90....       MOV       DPTR,#zcl_TaskID
   \   000154   E0           MOVX      A,@DPTR
   \   000155   F9           MOV       R1,A
   \   000156   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000159   7404         MOV       A,#0x4
   \   00015B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015E   8003         SJMP      ??zclGp_SendGpNotificationCommand_6
    470              }
    471          
    472            }
    473            else
    474              status = ZMemError;
   \                     ??zclGp_SendGpNotificationCommand_2:
   \   000160   75..10       MOV       ?V15,#0x10
    475          
    476            return ( status );
   \                     ??zclGp_SendGpNotificationCommand_6:
   \   000163   A9..         MOV       R1,?V15
   \   000165   7F10         MOV       R7,#0x10
   \   000167   02....       LJMP      ?BANKED_LEAVE_XDATA
    477          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F5..         MOV       ?V5,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F5..         MOV       ?V8,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F5..         MOV       ?V9,A
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007   85....       MOV       ?V4,?V8
   \   00000A   F5..         MOV       ?V5,A
   \   00000C   78..         MOV       R0,#?V4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV       DPL,?V10
   \   000003   85..83       MOV       DPH,?V11
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   EE           MOV       A,R6
   \   000009   28           ADD       A,R0
   \   00000A   FE           MOV       R6,A
   \   00000B   E4           CLR       A
   \   00000C   3F           ADDC      A,R7
   \   00000D   FF           MOV       R7,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   F0           MOVX      @DPTR,A
   \   000009   EE           MOV       A,R6
   \   00000A   2409         ADD       A,#0x9
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000005   F0           MOVX      @DPTR,A
   \   000006   85..82       MOV       DPL,?V10
   \   000009   85..83       MOV       DPH,?V11
   \   00000C   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   EE           MOV       A,R6
   \   000011   2406         ADD       A,#0x6
   \   000013   FE           MOV       R6,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7C04         MOV       R4,#0x4
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   EE           MOV       A,R6
   \   000003   FA           MOV       R2,A
   \   000004   EF           MOV       A,R7
   \   000005                REQUIRE ??Subroutine39_0
   \   000005                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0
    478            
    479          /*********************************************************************
    480           * @fn      zclGp_SendGpCommissioningNotificationCommand
    481           *
    482           * @brief   Send the Green Power Commissioning Notification Command to a device
    483           *
    484           * @param   pCmd - Pointer to GP Commissioning Notification Struct
    485           *
    486           * @return  ZStatus_t
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          ZStatus_t zclGp_SendGpCommissioningNotificationCommand( gpCommissioningNotificationCmd_t *pCmd )
   \                     zclGp_SendGpCommissioningNotificationCommand:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
    490            uint8 *buf = NULL;
    491            uint8 *pBuf = NULL;
    492            ZStatus_t status;
    493            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   00000E   75..0B       MOV       ?V0,#0xb
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   F8           MOV       R0,A
   \   000019   7005         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_0
    494            
    495            // Check some stuff to calculate the packet len
    496            // If Application Id bitfield is 0b000
    497            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    498            {
    499              len += 4;  // GPD ID
   \   00001B   75..0F       MOV       ?V0,#0xf
   \   00001E   8008         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_1
    500            }
    501            // If Application Id bitfield is 0b010
    502            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_0:
   \   000020   7402         MOV       A,#0x2
   \   000022   68           XRL       A,R0
   \   000023   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_1
    503            {
    504              len += 9;  // IEEE addr + EP
   \   000025   75..14       MOV       ?V0,#0x14
    505            }
    506            
    507            // Length of the command payload
    508            len += pCmd->payloadLen;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_1:
   \   000028   EA           MOV       A,R2
   \   000029   2414         ADD       A,#0x14
   \   00002B   F5..         MOV       ?V10,A
   \   00002D   E4           CLR       A
   \   00002E   35..         ADDC      A,?V3
   \   000030   F5..         MOV       ?V11,A
   \   000032   85..82       MOV       DPL,?V10
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   E5..         MOV       A,?V0
   \   00003B   28           ADD       A,R0
   \   00003C   F5..         MOV       ?V0,A
   \   00003E   E4           CLR       A
   \   00003F   3400         ADDC      A,#0x0
   \   000041   F5..         MOV       ?V1,A
    509          
    510            buf = zcl_mem_alloc( len );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   AA..         MOV       R2,?V0
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV       ?V8,R2
   \   00004B   8B..         MOV       ?V9,R3
    511            if ( buf )
   \   00004D   EA           MOV       A,R2
   \   00004E   4B           ORL       A,R3
   \   00004F   7003         JNZ       $+5
   \   000051   02....       LJMP      ??zclGp_SendGpCommissioningNotificationCommand_2 & 0xFFFF
    512            {
    513              pBuf = buf;
    514              
    515              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000054                ; Setup parameters for call to function osal_memcpy
   \   000054   85....       MOV       ?V4,?V2
   \   000057   85....       MOV       ?V5,?V3
   \   00005A   75..00       MOV       ?V6,#0x0
   \   00005D   78..         MOV       R0,#?V4
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000062   7C02         MOV       R4,#0x2
   \   000064   7D00         MOV       R5,#0x0
   \   000066   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
    516              pBuf += sizeof ( uint16 );
   \   00006C   E5..         MOV       A,?V8
   \   00006E   2402         ADD       A,#0x2
   \   000070   FE           MOV       R6,A
   \   000071   E4           CLR       A
   \   000072   35..         ADDC      A,?V9
   \   000074   FF           MOV       R7,A
   \   000075   85..82       MOV       DPL,?V2
   \   000078   85..83       MOV       DPH,?V3
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   5407         ANL       A,#0x7
   \   00007E   F8           MOV       R0,A
   \   00007F   701A         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_3
    517              
    518              // If Application Id bitfield is 0b000
    519              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    520              {
    521                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A982         MOV       R1,DPL
   \   000085   AA83         MOV       R2,DPH
   \   000087   89..         MOV       ?V4,R1
   \   000089   8A..         MOV       ?V5,R2
   \   00008B   78..         MOV       R0,#?V4
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000090   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
    522                pBuf += sizeof ( uint32 );
   \   000096   EE           MOV       A,R6
   \   000097   2404         ADD       A,#0x4
   \   000099   8023         SJMP      ??CrossCallReturnLabel_7
    523              }
    524              // If Application Id bitfield is 0b010
    525              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_3:
   \   00009B   7402         MOV       A,#0x2
   \   00009D   68           XRL       A,R0
   \   00009E   7022         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_4
    526              {
    527                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
   \   0000A0                ; Setup parameters for call to function osal_memcpy
   \   0000A0   E5..         MOV       A,?V2
   \   0000A2   2406         ADD       A,#0x6
   \   0000A4   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000AA   7C08         MOV       R4,#0x8
   \   0000AC   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000AF   12....       LCALL     ?DEALLOC_XSTACK8
    528                pBuf += Z_EXTADDR_LEN;
    529                *pBuf++ = pCmd->ep;
   \   0000B2   E5..         MOV       A,?V2
   \   0000B4   240E         ADD       A,#0xe
   \   0000B6   F582         MOV       DPL,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V3
   \   0000BB   12....       LCALL     ?Subroutine12 & 0xFFFF
    530              }
   \                     ??CrossCallReturnLabel_7:
   \   0000BE   FE           MOV       R6,A
   \   0000BF   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_4
   \   0000C1   0F           INC       R7
    531              
    532              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_4:
   \   0000C2                ; Setup parameters for call to function osal_memcpy
   \   0000C2   E5..         MOV       A,?V2
   \   0000C4   240F         ADD       A,#0xf
   \   0000C6   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CC   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
    533              pBuf += sizeof ( uint32 );
    534          
    535              *pBuf++ = pCmd->cmdId;
   \   0000D2   E5..         MOV       A,?V2
   \   0000D4   2413         ADD       A,#0x13
   \   0000D6   F582         MOV       DPL,A
   \   0000D8   E4           CLR       A
   \   0000D9   35..         ADDC      A,?V3
   \   0000DB   12....       LCALL     ?Subroutine7 & 0xFFFF
    536              
    537              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_1:
   \   0000DE   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_5
   \   0000E0   0F           INC       R7
    538              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_5:
   \   0000E1   85..82       MOV       DPL,?V10
   \   0000E4   85..83       MOV       DPH,?V11
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   F9           MOV       R1,A
   \   0000E9   6015         JZ        ??CrossCallReturnLabel_15
    539              {
    540                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   0000EB                ; Setup parameters for call to function osal_memcpy
   \   0000EB   E5..         MOV       A,?V2
   \   0000ED   2415         ADD       A,#0x15
   \   0000EF   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F5   E9           MOV       A,R1
   \   0000F6   FC           MOV       R4,A
   \   0000F7   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000FA   12....       LCALL     ?DEALLOC_XSTACK8
    541                pBuf += pCmd->payloadLen;
   \   0000FD   12....       LCALL     ?Subroutine19 & 0xFFFF
    542              }
    543              
    544              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_15:
   \   000100                ; Setup parameters for call to function osal_memcpy
   \   000100   E5..         MOV       A,?V2
   \   000102   2417         ADD       A,#0x17
   \   000104   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010A   7C02         MOV       R4,#0x2
   \   00010C   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
    545              pBuf += sizeof ( uint16 );
    546              
    547              *pBuf++ = pCmd->gppGpdLink;
   \   000112   E5..         MOV       A,?V2
   \   000114   2419         ADD       A,#0x19
   \   000116   F582         MOV       DPL,A
   \   000118   E4           CLR       A
   \   000119   35..         ADDC      A,?V3
   \   00011B   12....       LCALL     ?Subroutine20 & 0xFFFF
    548              
    549              afAddrType_t addr;
    550              addr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??CrossCallReturnLabel_17:
   \   00011E   7409         MOV       A,#0x9
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ?Subroutine16 & 0xFFFF
    551              addr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_116:
   \   000126   740A         MOV       A,#0xa
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   12....       LCALL     ?Subroutine22 & 0xFFFF
    552              addr.addr.shortAddr = gp_commissionerAddress; 
   \                     ??CrossCallReturnLabel_25:
   \   00012E   90....       MOV       DPTR,#gp_commissionerAddress
   \   000131   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000134   12....       LCALL     ?Subroutine22 & 0xFFFF
    553                  
    554              if ( gp_commissionerAddress == 0xFFFF )
   \                     ??CrossCallReturnLabel_26:
   \   000137   90....       MOV       DPTR,#gp_commissionerAddress
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F4           CPL       A
   \   00013C   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_6
   \   00013E   A3           INC       DPTR
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F4           CPL       A
   \                     ??zclGp_SendGpCommissioningNotificationCommand_6:
   \   000141   7009         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_7
    555              {
    556                addr.addrMode = afAddrBroadcast;
   \   000143   7408         MOV       A,#0x8
   \   000145   12....       LCALL     ?XSTACK_DISP0_8
   \   000148   740F         MOV       A,#0xf
   \   00014A   8007         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_8
    557              }
    558              else
    559              {
    560                addr.addrMode = afAddr16Bit;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_7:
   \   00014C   7408         MOV       A,#0x8
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   7402         MOV       A,#0x2
   \                     ??zclGp_SendGpCommissioningNotificationCommand_8:
   \   000153   F0           MOVX      @DPTR,A
    561              }
    562                  
    563              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &addr, ZCL_CLUSTER_ID_GREEN_POWER,
    564                                COMMAND_GP_COMMISSIONING_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    565                                TRUE, 0,  bdb_getZCLFrameCounter(), len, buf ); 
   \   000154                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000154   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   000157   E9           MOV       A,R1
   \   000158   F9           MOV       R1,A
   \   000159                ; Setup parameters for call to function zcl_SendCommand
   \   000159   78..         MOV       R0,#?V8
   \   00015B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015E   78..         MOV       R0,#?V0
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000163   E9           MOV       A,R1
   \   000164   F5..         MOV       ?V0,A
   \   000166   78..         MOV       R0,#?V0
   \   000168   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016B   E4           CLR       A
   \   00016C   F5..         MOV       ?V0,A
   \   00016E   F5..         MOV       ?V1,A
   \   000170   78..         MOV       R0,#?V0
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000175   75..01       MOV       ?V0,#0x1
   \   000178   78..         MOV       R0,#?V0
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017D   75..00       MOV       ?V0,#0x0
   \   000180   78..         MOV       R0,#?V0
   \   000182   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000185   75..01       MOV       ?V0,#0x1
   \   000188   78..         MOV       R0,#?V0
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018D   75..04       MOV       ?V0,#0x4
   \   000190   78..         MOV       R0,#?V0
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000195   7C21         MOV       R4,#0x21
   \   000197   7D00         MOV       R5,#0x0
   \   000199   740B         MOV       A,#0xb
   \   00019B   12....       LCALL     ?XSTACK_DISP101_8
   \   00019E   79F2         MOV       R1,#-0xe
   \   0001A0   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001A3   740B         MOV       A,#0xb
   \   0001A5   12....       LCALL     ?DEALLOC_XSTACK8
    566                
    567              zcl_mem_free( buf );
   \   0001A8                ; Setup parameters for call to function osal_mem_free
   \   0001A8   AA..         MOV       R2,?V8
   \   0001AA   AB..         MOV       R3,?V9
   \   0001AC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001AF   8003         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_9
    568            }
    569            else
    570              status = ZMemError;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_2:
   \   0001B1   75..10       MOV       ?V7,#0x10
    571          
    572            return ( status );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_9:
   \   0001B4   A9..         MOV       R1,?V7
   \   0001B6   740C         MOV       A,#0xc
   \   0001B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BB   7F0C         MOV       R7,#0xc
   \   0001BD   02....       LJMP      ?BANKED_LEAVE_XDATA
    573          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005   F5..         MOV       ?V5,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   74F2         MOV       A,#-0xe
   \   000002   F0           MOVX      @DPTR,A
   \   000003   90....       MOV       DPTR,#_NIB + 33
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0
    574          /*********************************************************************
    575           * @fn      zclGp_SendGpProxyTableResponse
    576           *
    577           * @brief   Send the Green Power Proxy Table Response to a device
    578           *
    579           * @param   dstAddr - where to send the request
    580           * @param   groupID - pointer to the group structure
    581           * @param   groupName - pointer to Group Name.  This is a Zigbee
    582           *          string data type, so the first byte is the length of the
    583           *          name (in bytes), then the name.
    584           *
    585           * @return  ZStatus_t
    586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          ZStatus_t zclGp_SendGpProxyTableResponse( afAddrType_t *dstAddr, zclGpProxyTableResponse_t *rsp, 
   \                     zclGp_SendGpProxyTableResponse:
    588                                                    uint8 seqNum )
    589          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V11,R1
    590            uint8 *buf = NULL;
    591            uint8 *pBuf = NULL;
    592            uint8 *pEntry = NULL;
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   75..00       MOV       ?V3,#0x0
    593            
    594            ZStatus_t status;
    595            uint16 entryLen = 0;
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   E4           CLR       A
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   F0           MOVX      @DPTR,A
    596            uint16 len;
    597            
    598            if ( rsp->proxyTableEntry != NULL )
   \   000024   EC           MOV       A,R4
   \   000025   2404         ADD       A,#0x4
   \   000027   F5..         MOV       ?V6,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V7,A
   \   00002D   85..82       MOV       DPL,?V6
   \   000030   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000033   6029         JZ        ??zclGp_SendGpProxyTableResponse_0
    599            {
    600              pEntry = rsp->proxyTableEntry;
   \   000035   88..         MOV       ?V2,R0
   \   000037   89..         MOV       ?V3,R1
    601              zcl_memcpy( &entryLen, pEntry, sizeof ( uint16 ) );
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039   88..         MOV       ?V8,R0
   \   00003B   89..         MOV       ?V9,R1
   \   00003D   75..00       MOV       ?V10,#0x0
   \   000040   78..         MOV       R0,#?V8
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000045   7C02         MOV       R4,#0x2
   \   000047   7D00         MOV       R5,#0x0
   \   000049   7403         MOV       A,#0x3
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
    602              pEntry += sizeof ( uint16 );
   \   000054   E5..         MOV       A,?V2
   \   000056   2402         ADD       A,#0x2
   \   000058   F5..         MOV       ?V2,A
   \   00005A   5002         JNC       ??zclGp_SendGpProxyTableResponse_0
   \   00005C   05..         INC       ?V3
    603            }
    604            
    605            len = entryLen + 4;
   \                     ??zclGp_SendGpProxyTableResponse_0:
   \   00005E   85..82       MOV       DPL,?XSP + 0
   \   000061   85..83       MOV       DPH,?XSP + 1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   2404         ADD       A,#0x4
   \   000067   F5..         MOV       ?V4,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   3400         ADDC      A,#0x0
   \   00006D   F5..         MOV       ?V5,A
    606          
    607            buf = zcl_mem_alloc( len );
   \   00006F                ; Setup parameters for call to function osal_mem_alloc
   \   00006F   AA..         MOV       R2,?V4
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000075   8A..         MOV       ?V0,R2
   \   000077   8B..         MOV       ?V1,R3
    608            if ( buf )
   \   000079   EA           MOV       A,R2
   \   00007A   4B           ORL       A,R3
   \   00007B   7003         JNZ       $+5
   \   00007D   02....       LJMP      ??zclGp_SendGpProxyTableResponse_1 & 0xFFFF
    609            {
    610              pBuf = buf;
    611              *pBuf++ = rsp->status;
   \   000080   8E82         MOV       DPL,R6
   \   000082   8F83         MOV       DPH,R7
   \   000084   E0           MOVX      A,@DPTR
   \   000085   8A82         MOV       DPL,R2
   \   000087   8B83         MOV       DPH,R3
   \   000089   12....       LCALL     ?Subroutine34 & 0xFFFF
    612              *pBuf++ = rsp->tableEntriesTotal;
   \                     ??CrossCallReturnLabel_50:
   \   00008C   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00008F   12....       LCALL     ?Subroutine34 & 0xFFFF
    613              *pBuf++ = rsp->startIndex;
   \                     ??CrossCallReturnLabel_51:
   \   000092   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000095   A3           INC       DPTR
   \   000096   12....       LCALL     ?Subroutine34 & 0xFFFF
    614              *pBuf++ = rsp->entriesCount;
   \                     ??CrossCallReturnLabel_52:
   \   000099   A3           INC       DPTR
   \   00009A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   F0           MOVX      @DPTR,A
    615              if ( rsp->proxyTableEntry != NULL )
   \   0000A0   85..82       MOV       DPL,?V6
   \   0000A3   85..83       MOV       DPH,?V7
   \   0000A6   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000A9   6025         JZ        ??zclGp_SendGpProxyTableResponse_2
    616              {
    617                zcl_memcpy( pBuf, pEntry, entryLen );
   \   0000AB                ; Setup parameters for call to function osal_memcpy
   \   0000AB   85....       MOV       ?V8,?V2
   \   0000AE   85....       MOV       ?V9,?V3
   \   0000B1   75..00       MOV       ?V10,#0x0
   \   0000B4   78..         MOV       R0,#?V8
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B9   7403         MOV       A,#0x3
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   FC           MOV       R4,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   FD           MOV       R5,A
   \   0000C3   EA           MOV       A,R2
   \   0000C4   2404         ADD       A,#0x4
   \   0000C6   FA           MOV       R2,A
   \   0000C7   E4           CLR       A
   \   0000C8   35..         ADDC      A,?V1
   \   0000CA   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    618              }
   \                     ??CrossCallReturnLabel_74:
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
    619          
    620              status = zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, dstAddr, ZCL_CLUSTER_ID_GREEN_POWER,
    621                                        COMMAND_GP_PROXY_TABLE_RESPONSE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    622                                        TRUE, 0, seqNum, len, buf );
   \                     ??zclGp_SendGpProxyTableResponse_2:
   \   0000D0                ; Setup parameters for call to function zcl_SendCommand
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   78..         MOV       R0,#?V4
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   E5..         MOV       A,?V11
   \   0000DC   F5..         MOV       ?V2,A
   \   0000DE   78..         MOV       R0,#?V2
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E3   E4           CLR       A
   \   0000E4   F5..         MOV       ?V2,A
   \   0000E6   F5..         MOV       ?V3,A
   \   0000E8   78..         MOV       R0,#?V2
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   75..01       MOV       ?V2,#0x1
   \   0000F0   78..         MOV       R0,#?V2
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F5   75..00       MOV       ?V2,#0x0
   \   0000F8   78..         MOV       R0,#?V2
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FD   75..01       MOV       ?V2,#0x1
   \   000100   78..         MOV       R0,#?V2
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000105   75..0B       MOV       ?V2,#0xb
   \   000108   78..         MOV       R0,#?V2
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010D   7C21         MOV       R4,#0x21
   \   00010F   7D00         MOV       R5,#0x0
   \   000111   AA..         MOV       R2,?V12
   \   000113   AB..         MOV       R3,?V13
   \   000115   79F2         MOV       R1,#-0xe
   \   000117   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00011A   740B         MOV       A,#0xb
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011F   E9           MOV       A,R1
   \   000120   FE           MOV       R6,A
    623              zcl_mem_free( buf );
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   AA..         MOV       R2,?V0
   \   000123   AB..         MOV       R3,?V1
   \   000125   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000128   8002         SJMP      ??zclGp_SendGpProxyTableResponse_3
    624            }
    625            else
    626              status = ZMemError;
   \                     ??zclGp_SendGpProxyTableResponse_1:
   \   00012A   7E10         MOV       R6,#0x10
    627          
    628            return ( status );
   \                     ??zclGp_SendGpProxyTableResponse_3:
   \   00012C   EE           MOV       A,R6
   \   00012D   F9           MOV       R1,A
   \   00012E   7402         MOV       A,#0x2
   \   000130   02....       LJMP      ?Subroutine2 & 0xFFFF
    629          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0
    630          
    631           /*********************************************************************
    632           * @fn          gp_addPairedSinksToMsgQueue
    633           *
    634           * @brief       General function to add Notification Msg to Queue for all 
    635           *              Sinks paired to the given GPD
    636           *
    637           * @param       nvIndex - NV Id of proxy table
    638           *              pEntry  - pointer to PROXY_TBL_ENTRY_LEN array
    639           *
    640           * @return      
    641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg )
   \                     gp_addPairedSinksToMsgQueue:
    643          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 87
   \   000005   74A9         MOV       A,#-0x57
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8C..         MOV       ?V8,R4
   \   00000E   8D..         MOV       ?V9,R5
    644            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000010   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000013   744D         MOV       A,#0x4d
   \   000015   12....       LCALL     ?XSTACK_DISP102_8
   \   000018   740A         MOV       A,#0xa
   \   00001A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    645            uint8 status;
    646            uint8 i;
    647            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001D   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   000020   740C         MOV       A,#0xc
   \   000022   12....       LCALL     ?XSTACK_DISP102_8
   \   000025   7441         MOV       A,#0x41
   \   000027   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    648            afAddrType_t dstAddr = {0};
   \   00002A   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   00002D   AC..         MOV       R4,?XSP + 0
   \   00002F   AD..         MOV       R5,?XSP + 1
   \   000031   740C         MOV       A,#0xc
   \   000033   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    649            gpNotificationMsg_t *pNotificationMsgCurr = NULL;
    650          
    651              
    652            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000036   7E00         MOV       R6,#0x0
   \   000038   8A..         MOV       ?V0,R2
   \   00003A   8B..         MOV       ?V1,R3
   \   00003C   F5..         MOV       ?V2,A
    653            {
    654              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
   \                     ??gp_addPairedSinksToMsgQueue_0:
   \   00003E                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00003E   740C         MOV       A,#0xc
   \   000040   12....       LCALL     ?XSTACK_DISP102_8
   \   000043   EE           MOV       A,R6
   \   000044   2410         ADD       A,#0x10
   \   000046   FA           MOV       R2,A
   \   000047   E4           CLR       A
   \   000048   3403         ADDC      A,#0x3
   \   00004A   FB           MOV       R3,A
   \   00004B   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00004E   E9           MOV       A,R1
   \   00004F   FF           MOV       R7,A
    655          
    656              if ( status == NV_OPER_FAILED )
   \   000050   740A         MOV       A,#0xa
   \   000052   6F           XRL       A,R7
   \   000053   6074         JZ        ??gp_addPairedSinksToMsgQueue_1
    657              {
    658                break;
    659              }
    660              
    661              // if the entry is empty
    662              if ( status == NV_INVALID_DATA )
   \   000055   740D         MOV       A,#0xd
   \   000057   6F           XRL       A,R7
   \   000058   7009         JNZ       ??gp_addPairedSinksToMsgQueue_2
    663              {
    664                if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \   00005A   EE           MOV       A,R6
   \   00005B   C3           CLR       C
   \   00005C   9405         SUBB      A,#0x5
   \   00005E   405F         JC        ??gp_addPairedSinksToMsgQueue_3
   \   000060   02....       LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
    665                {
    666                  return status;
    667                }
    668                continue;
    669              }
    670              
    671              if ( PROXY_TBL_COMP_APPLICTION_ID( appId, currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_addPairedSinksToMsgQueue_2:
   \   000063   7407         MOV       A,#0x7
   \   000065   55..         ANL       A,?V3
   \   000067   F8           MOV       R0,A
   \   000068   740C         MOV       A,#0xc
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   5407         ANL       A,#0x7
   \   000070   68           XRL       A,R0
   \   000071   704C         JNZ       ??gp_addPairedSinksToMsgQueue_3
    672              {
    673                if ( appId == GP_OPT_APP_ID_GPD )
   \   000073   E5..         MOV       A,?V3
   \   000075   7022         JNZ       ??gp_addPairedSinksToMsgQueue_5
    674                {
    675                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
   \   000077                ; Setup parameters for call to function osal_memcmp
   \   000077   7412         MOV       A,#0x12
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   A982         MOV       R1,DPL
   \   00007E   AA83         MOV       R2,DPH
   \   000080   89..         MOV       ?V4,R1
   \   000082   8A..         MOV       ?V5,R2
   \   000084   75..00       MOV       ?V6,#0x0
   \   000087   78..         MOV       R0,#?V4
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008C   7C04         MOV       R4,#0x4
   \   00008E   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    676                  {
    677                    // Entry found
    678                    break;
    679                  }
    680                }
   \                     ??CrossCallReturnLabel_95:
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   \   000094   E9           MOV       A,R1
   \   000095   7032         JNZ       ??gp_addPairedSinksToMsgQueue_1
   \   000097   8026         SJMP      ??gp_addPairedSinksToMsgQueue_3
    681                else if ( appId == GP_OPT_APP_ID_IEEE )
   \                     ??gp_addPairedSinksToMsgQueue_5:
   \   000099   7402         MOV       A,#0x2
   \   00009B   65..         XRL       A,?V3
   \   00009D   7020         JNZ       ??gp_addPairedSinksToMsgQueue_3
    682                {
    683                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
   \   00009F                ; Setup parameters for call to function osal_memcmp
   \   00009F   740E         MOV       A,#0xe
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   A982         MOV       R1,DPL
   \   0000A6   AA83         MOV       R2,DPH
   \   0000A8   89..         MOV       ?V4,R1
   \   0000AA   8A..         MOV       ?V5,R2
   \   0000AC   75..00       MOV       ?V6,#0x0
   \   0000AF   78..         MOV       R0,#?V4
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B4   7C08         MOV       R4,#0x8
   \   0000B6   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    684                  {
    685                    // Entry found
    686                    break;
    687                  }
    688                }
    689              }
    690            }
   \                     ??CrossCallReturnLabel_96:
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   700A         JNZ       ??gp_addPairedSinksToMsgQueue_1
   \                     ??gp_addPairedSinksToMsgQueue_3:
   \   0000BF   0E           INC       R6
   \   0000C0   EE           MOV       A,R6
   \   0000C1   C3           CLR       C
   \   0000C2   9406         SUBB      A,#0x6
   \   0000C4   5003         JNC       $+5
   \   0000C6   02....       LJMP      ??gp_addPairedSinksToMsgQueue_0 & 0xFFFF
    691            
    692            dstAddr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??gp_addPairedSinksToMsgQueue_1:
   \   0000C9   7409         MOV       A,#0x9
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL     ?Subroutine16 & 0xFFFF
    693            dstAddr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_117:
   \   0000D1   740A         MOV       A,#0xa
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL     ?Subroutine22 & 0xFFFF
    694            
    695            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??CrossCallReturnLabel_27:
   \   0000D9   740C         MOV       A,#0xc
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000E1   4003         JC        $+5
   \   0000E3   02....       LJMP      ??gp_addPairedSinksToMsgQueue_6 & 0xFFFF
    696            {
    697              dstAddr.addrMode = afAddr16Bit;
   \   0000E6   7408         MOV       A,#0x8
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   7402         MOV       A,#0x2
   \   0000ED   F0           MOVX      @DPTR,A
    698              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000EE   744D         MOV       A,#0x4d
   \   0000F0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F3   88..         MOV       ?V0,R0
   \   0000F5   89..         MOV       ?V1,R1
   \   0000F7                ; Setup parameters for call to function osal_memcmp
   \   0000F7   742E         MOV       A,#0x2e
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   A982         MOV       R1,DPL
   \   0000FE   AA83         MOV       R2,DPH
   \   000100   89..         MOV       ?V4,R1
   \   000102   8A..         MOV       ?V5,R2
   \   000104   75..00       MOV       ?V6,#0x0
   \   000107   78..         MOV       R0,#?V4
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010C   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   E9           MOV       A,R1
   \   000113   7043         JNZ       ??gp_addPairedSinksToMsgQueue_7
    699              {
    700                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );
   \   000115                ; Setup parameters for call to function osal_memcpy
   \   000115   7436         MOV       A,#0x36
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   A982         MOV       R1,DPL
   \   00011C   AA83         MOV       R2,DPH
   \   00011E   89..         MOV       ?V4,R1
   \   000120   8A..         MOV       ?V5,R2
   \   000122   78..         MOV       R0,#?V4
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000127   7C02         MOV       R4,#0x2
   \   000129   7D00         MOV       R5,#0x0
   \   00012B   7403         MOV       A,#0x3
   \   00012D   12....       LCALL     ?XSTACK_DISP101_8
   \   000130   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000133   12....       LCALL     ?DEALLOC_XSTACK8
    701                
    702                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000136                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000136   AC..         MOV       R4,?V8
   \   000138   AD..         MOV       R5,?V9
   \   00013A   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   00013C   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   00013E   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000141   8A..         MOV       ?V4,R2
   \   000143   8B..         MOV       ?V5,R3
   \   000145   AC..         MOV       R4,?V4
   \   000147   AD..         MOV       R5,?V5
    703                if ( pNotificationMsgCurr != NULL )
   \   000149   EA           MOV       A,R2
   \   00014A   4D           ORL       A,R5
   \   00014B   600B         JZ        ??gp_addPairedSinksToMsgQueue_7
    704                {
    705                  pNotificationMsgCurr->addr = dstAddr;
   \   00014D   85..82       MOV       DPL,?XSP + 0
   \   000150   85..83       MOV       DPH,?XSP + 1
   \   000153   740C         MOV       A,#0xc
   \   000155   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    706                }
    707              }
    708              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??gp_addPairedSinksToMsgQueue_7:
   \   000158                ; Setup parameters for call to function osal_memcmp
   \   000158   7438         MOV       A,#0x38
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   A982         MOV       R1,DPL
   \   00015F   AA83         MOV       R2,DPH
   \   000161   89..         MOV       ?V4,R1
   \   000163   8A..         MOV       ?V5,R2
   \   000165   78..         MOV       R0,#?V4
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016A   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000170   E9           MOV       A,R1
   \   000171   7031         JNZ       ??gp_addPairedSinksToMsgQueue_6
    709              {
    710                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );   
   \   000173                ; Setup parameters for call to function osal_memcpy
   \   000173   7440         MOV       A,#0x40
   \   000175   12....       LCALL     ?XSTACK_DISP0_8
   \   000178   A982         MOV       R1,DPL
   \   00017A   AA83         MOV       R2,DPH
   \   00017C   89..         MOV       ?V0,R1
   \   00017E   8A..         MOV       ?V1,R2
   \   000180   78..         MOV       R0,#?V0
   \   000182   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000185   7C02         MOV       R4,#0x2
   \   000187   7D00         MOV       R5,#0x0
   \   000189   7403         MOV       A,#0x3
   \   00018B   12....       LCALL     ?XSTACK_DISP101_8
   \   00018E   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000191   12....       LCALL     ?DEALLOC_XSTACK8
    711                
    712                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000194                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000194   12....       LCALL     ?Subroutine28 & 0xFFFF
    713                if ( pNotificationMsgCurr != NULL )
   \                     ??CrossCallReturnLabel_40:
   \   000197   600B         JZ        ??gp_addPairedSinksToMsgQueue_6
    714                {
    715                  pNotificationMsgCurr->addr = dstAddr;
   \   000199   85..82       MOV       DPL,?XSP + 0
   \   00019C   85..83       MOV       DPH,?XSP + 1
   \   00019F   740C         MOV       A,#0xc
   \   0001A1   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    716                }
    717              }
    718            }
    719               
    720            if ( PROXY_TBL_GET_DGROUP( currEntry[PROXY_TBL_ENTRY_OPT] ) || PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??gp_addPairedSinksToMsgQueue_6:
   \   0001A4   740C         MOV       A,#0xc
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   A2E7         MOV       C,0xE0 /* A   */.7
   \   0001AC   400A         JC        ??gp_addPairedSinksToMsgQueue_8
   \   0001AE   740D         MOV       A,#0xd
   \   0001B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001B6   507E         JNC       ??gp_addPairedSinksToMsgQueue_4
    721            {
    722              dstAddr.addrMode = afAddrGroup;
   \                     ??gp_addPairedSinksToMsgQueue_8:
   \   0001B8   7408         MOV       A,#0x8
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   7401         MOV       A,#0x1
   \   0001BF   F0           MOVX      @DPTR,A
    723              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   0001C0   7442         MOV       A,#0x42
   \   0001C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001C8   5031         JNC       ??gp_addPairedSinksToMsgQueue_9
    724              {
    725                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) );   
   \   0001CA                ; Setup parameters for call to function osal_memcpy
   \   0001CA   7443         MOV       A,#0x43
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   A982         MOV       R1,DPL
   \   0001D1   AA83         MOV       R2,DPH
   \   0001D3   89..         MOV       ?V0,R1
   \   0001D5   8A..         MOV       ?V1,R2
   \   0001D7   78..         MOV       R0,#?V0
   \   0001D9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001DC   7C02         MOV       R4,#0x2
   \   0001DE   7D00         MOV       R5,#0x0
   \   0001E0   7403         MOV       A,#0x3
   \   0001E2   12....       LCALL     ?XSTACK_DISP101_8
   \   0001E5   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0001E8   12....       LCALL     ?DEALLOC_XSTACK8
    726                
    727                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   0001EB                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   0001EB   12....       LCALL     ?Subroutine28 & 0xFFFF
    728                if ( pNotificationMsgCurr != NULL )
   \                     ??CrossCallReturnLabel_41:
   \   0001EE   600B         JZ        ??gp_addPairedSinksToMsgQueue_9
    729                {
    730                  pNotificationMsgCurr->addr = dstAddr;
   \   0001F0   85..82       MOV       DPL,?XSP + 0
   \   0001F3   85..83       MOV       DPH,?XSP + 1
   \   0001F6   740C         MOV       A,#0xc
   \   0001F8   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    731                }
    732              }
    733              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??gp_addPairedSinksToMsgQueue_9:
   \   0001FB   7442         MOV       A,#0x42
   \   0001FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000200   E0           MOVX      A,@DPTR
   \   000201   A2E1         MOV       C,0xE0 /* A   */.1
   \   000203   5031         JNC       ??gp_addPairedSinksToMsgQueue_4
    734              {
    735                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) );   
   \   000205                ; Setup parameters for call to function osal_memcpy
   \   000205   7447         MOV       A,#0x47
   \   000207   12....       LCALL     ?XSTACK_DISP0_8
   \   00020A   A982         MOV       R1,DPL
   \   00020C   AA83         MOV       R2,DPH
   \   00020E   89..         MOV       ?V0,R1
   \   000210   8A..         MOV       ?V1,R2
   \   000212   78..         MOV       R0,#?V0
   \   000214   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000217   7C02         MOV       R4,#0x2
   \   000219   7D00         MOV       R5,#0x0
   \   00021B   7403         MOV       A,#0x3
   \   00021D   12....       LCALL     ?XSTACK_DISP101_8
   \   000220   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000223   12....       LCALL     ?DEALLOC_XSTACK8
    736                
    737                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000226                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000226   12....       LCALL     ?Subroutine28 & 0xFFFF
    738                if ( pNotificationMsgCurr != NULL )
   \                     ??CrossCallReturnLabel_42:
   \   000229   600B         JZ        ??gp_addPairedSinksToMsgQueue_4
    739                {
    740                  pNotificationMsgCurr->addr = dstAddr;
   \   00022B   85..82       MOV       DPL,?XSP + 0
   \   00022E   85..83       MOV       DPH,?XSP + 1
   \   000231   740C         MOV       A,#0xc
   \   000233   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    741                }
    742              }
    743            }
    744          
    745            return status;
   \                     ??gp_addPairedSinksToMsgQueue_4:
   \   000236   EF           MOV       A,R7
   \   000237   F9           MOV       R1,A
   \   000238   7457         MOV       A,#0x57
   \   00023A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00023D   7F0A         MOV       R7,#0xa
   \   00023F   02....       LJMP      ?BANKED_LEAVE_XDATA
    746          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   7C0A         MOV       R4,#0xa
   \   000002                REQUIRE ??Subroutine42_0
   \   000002                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   A9..         MOV       R1,?V0
   \   000004   AA..         MOV       R2,?V1
   \   000006   AB..         MOV       R3,?V2
   \   000008   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00000B   7403         MOV       A,#0x3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   AC..         MOV       R4,?V8
   \   000002   AD..         MOV       R5,?V9
   \   000004   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   000006   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   000008   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   00000B   8A..         MOV       ?V0,R2
   \   00000D   8B..         MOV       ?V1,R3
   \   00000F   AC..         MOV       R4,?V0
   \   000011   AD..         MOV       R5,?V1
   \   000013   EA           MOV       A,R2
   \   000014   4D           ORL       A,R5
   \   000015   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00000000     DB 0, 0, 0, 0
    747          
    748          /*********************************************************************
    749           * @fn      gp_CreateNotificationMsgList
    750           *
    751           * @brief   Create Notification Msg List for paired sinks if empty
    752           *
    753           * @param   pHead - pointer to a pointer of the list head
    754           *
    755           * @return  none
    756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    757          void gp_CreateNotificationMsgList( gpNotificationMsg_t **pHead )
   \                     gp_CreateNotificationMsgList:
    758          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
    759          
    760            // Create the list if empty
    761            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_102:
   \   000008   7017         JNZ       ??gp_CreateNotificationMsgList_0
    762            {
    763              *pHead = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A11         MOV       R2,#0x11
   \   00000C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00000F   F0           MOVX      @DPTR,A
    764              
    765              if ( *pHead != NULL )
   \   000010   EA           MOV       A,R2
   \   000011   49           ORL       A,R1
   \   000012   600D         JZ        ??gp_CreateNotificationMsgList_0
    766              {
    767                (*pHead)->pNext = NULL;
   \   000014   EA           MOV       A,R2
   \   000015   240F         ADD       A,#0xf
   \   000017   F582         MOV       DPL,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   F583         MOV       DPH,A
   \   00001D   E4           CLR       A
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   F0           MOVX      @DPTR,A
    768              }
    769            }
    770            return;
   \                     ??gp_CreateNotificationMsgList_0:
   \   000021                REQUIRE ?Subroutine3
   \   000021                ; // Fall through to label ?Subroutine3
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8B..         MOV       ?V1,R3
   \   000007   A9..         MOV       R1,?V1
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   EA           MOV       A,R2
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   EB           MOV       A,R3
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   8A82         MOV       DPL,R2
   \   000002                REQUIRE ??Subroutine45_0
   \   000002                ; // Fall through to label ??Subroutine45_0
    772          
    773          /*********************************************************************
    774           * @fn      gp_CreateCmdPayloadMsgList
    775           *
    776           * @brief   Create Notification Msg List for paired sinks if empty
    777           *
    778           * @param   pHead - pointer to a pointer of the list head
    779           *
    780           * @return  none
    781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    782          void gp_CreateCmdPayloadMsgList( gpCmdPayloadMsg_t **pHead )
   \                     gp_CreateCmdPayloadMsgList:
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
    784          
    785            // Create the list if empty
    786            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_103:
   \   000008   701C         JNZ       ??gp_CreateCmdPayloadMsgList_0
    787            {
    788              *pHead = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A06         MOV       R2,#0x6
   \   00000C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00000F   12....       LCALL     ?Subroutine21 & 0xFFFF
    789              ( ( gpCmdPayloadMsg_t* )*pHead )->pMsg = NULL;
   \                     ??CrossCallReturnLabel_20:
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    790              
    791              if ( *pHead != NULL )
   \   000016   EA           MOV       A,R2
   \   000017   49           ORL       A,R1
   \   000018   600C         JZ        ??gp_CreateCmdPayloadMsgList_0
    792              {
    793                (*pHead)->pNext = NULL;
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
    794              }
    795            }
    796            return;
   \                     ??gp_CreateCmdPayloadMsgList_0:
   \   000026   80..         SJMP      ?Subroutine3
    797          }
    798          
    799          /*********************************************************************
    800           * @fn      gp_AddNotificationMsgNode
    801           *
    802           * @brief   Add node to Notification Msg list
    803           *
    804           * @param   pHead - pointer to a pointer of the list head
    805           *
    806           * @return  pointer to new node
    807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          gpNotificationMsg_t* gp_AddNotificationMsgNode( gpNotificationMsg_t **pHead, gpCmdPayloadMsg_t *pMsg )
   \                     gp_AddNotificationMsgNode:
    809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    810            gpNotificationMsg_t **pCurr;
    811            
    812              // Create respondent list if empty
    813            if ( *pHead == NULL )
   \   00000D   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000010   7005         JNZ       ??gp_AddNotificationMsgNode_0
    814            {
    815              gp_CreateNotificationMsgList( pHead );
   \   000012                ; Setup parameters for call to function gp_CreateNotificationMsgList
   \   000012   12....       LCALL     `??gp_CreateNotificationMsgList::?relay`; Banked call to: gp_CreateNotificationMsgList
    816              ( ( gpNotificationMsg_t* ) *pHead )->pMsg = ( uint8* )pMsg;
   \   000015   8042         SJMP      ??gp_AddNotificationMsgNode_1
    817              return *pHead;
    818            }
    819            
    820            pCurr = &((*pHead)->pNext);
   \                     ??gp_AddNotificationMsgNode_0:
   \   000017   E8           MOV       A,R0
   \   000018   240F         ADD       A,#0xf
   \   00001A   FE           MOV       R6,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   8008         SJMP      ??gp_AddNotificationMsgNode_2
    821            
    822            while ( *pCurr != NULL )
    823            {
    824              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddNotificationMsgNode_3:
   \   00001F   E8           MOV       A,R0
   \   000020   240F         ADD       A,#0xf
   \   000022   5001         JNC       ??gp_AddNotificationMsgNode_4
   \   000024   09           INC       R1
   \                     ??gp_AddNotificationMsgNode_4:
   \   000025   FE           MOV       R6,A
   \   000026   E9           MOV       A,R1
   \                     ??gp_AddNotificationMsgNode_2:
   \   000027   FF           MOV       R7,A
    825            }
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00002F   70EE         JNZ       ??gp_AddNotificationMsgNode_3
    826          
    827            *pCurr = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   7A11         MOV       R2,#0x11
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000038   8B..         MOV       ?V3,R3
   \   00003A   A9..         MOV       R1,?V3
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   EA           MOV       A,R2
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   EB           MOV       A,R3
   \   000044   F0           MOVX      @DPTR,A
    828              
    829            if ( (*pCurr)->pNext != NULL )
   \   000045   EA           MOV       A,R2
   \   000046   240F         ADD       A,#0xf
   \   000048   F8           MOV       R0,A
   \   000049   5001         JNC       ??gp_AddNotificationMsgNode_5
   \   00004B   09           INC       R1
   \                     ??gp_AddNotificationMsgNode_5:
   \   00004C   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00004F   6008         JZ        ??gp_AddNotificationMsgNode_1
    830            {
    831              (*pCurr)->pNext = NULL;
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   E4           CLR       A
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   F0           MOVX      @DPTR,A
    832            }
    833            ( ( gpNotificationMsg_t* ) *pCurr )->pMsg = ( uint8* )pMsg;
   \                     ??gp_AddNotificationMsgNode_1:
   \   000059   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00005C   EA           MOV       A,R2
   \   00005D   240D         ADD       A,#0xd
   \   00005F   F582         MOV       DPL,A
   \   000061   E4           CLR       A
   \   000062   3B           ADDC      A,R3
   \   000063   F583         MOV       DPH,A
   \   000065   E5..         MOV       A,?V0
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   E5..         MOV       A,?V1
   \   00006B   F0           MOVX      @DPTR,A
    834            return *pCurr;
   \   00006C   02....       LJMP      ?Subroutine0 & 0xFFFF
    835          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F582         MOV       DPL,A
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine43_0
   \   000004                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    836          
    837          /*********************************************************************
    838           * @fn      gp_AddCmdPayloadMsgNode
    839           *
    840           * @brief   Add node to Notification Msg list
    841           *
    842           * @param   pHead - pointer to a pointer of the list head
    843           *
    844           * @return  pointer to new node
    845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          gpCmdPayloadMsg_t* gp_AddCmdPayloadMsgNode( gpCmdPayloadMsg_t **pHead, uint8* pBuf, uint8 len )
   \                     gp_AddCmdPayloadMsgNode:
    847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    848            gpCmdPayloadMsg_t **pCurr;
    849            
    850              // Create respondent list if empty
    851            if ( *pHead == NULL )
   \   00000F   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000012   701F         JNZ       ??gp_AddCmdPayloadMsgNode_0
    852            {
    853              gp_CreateCmdPayloadMsgList( pHead );
   \   000014                ; Setup parameters for call to function gp_CreateCmdPayloadMsgList
   \   000014   12....       LCALL     `??gp_CreateCmdPayloadMsgList::?relay`; Banked call to: gp_CreateCmdPayloadMsgList
    854              
    855              if ( pHead != NULL )
   \   000017   EE           MOV       A,R6
   \   000018   4F           ORL       A,R7
   \   000019   6013         JZ        ??gp_AddCmdPayloadMsgNode_1
    856              {
    857                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->lenght ) = len;
   \   00001B   12....       LCALL     ?Subroutine11 & 0xFFFF
    858                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->pMsg ) = ( uint8* )pBuf;
    859              }
   \                     ??CrossCallReturnLabel_4:
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F583         MOV       DPH,A
   \   000023   8882         MOV       DPL,R0
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E5..         MOV       A,?V0
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   E5..         MOV       A,?V1
   \   00002D   F0           MOVX      @DPTR,A
    860              return *pHead;
   \                     ??gp_AddCmdPayloadMsgNode_1:
   \   00002E   12....       LCALL     ?Subroutine17 & 0xFFFF
    861            }
   \                     ??CrossCallReturnLabel_132:
   \   000031   804C         SJMP      ??gp_AddCmdPayloadMsgNode_2
    862            
    863            pCurr = &((*pHead)->pNext);
    864            
    865            while ( *pCurr != NULL )
    866            {
    867              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddCmdPayloadMsgNode_0:
   \   000033   E8           MOV       A,R0
   \   000034   2404         ADD       A,#0x4
   \   000036   FE           MOV       R6,A
   \   000037   E4           CLR       A
   \   000038   39           ADDC      A,R1
   \   000039   FF           MOV       R7,A
    868            }
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000041   70F0         JNZ       ??gp_AddCmdPayloadMsgNode_0
    869          
    870            *pCurr = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A06         MOV       R2,#0x6
   \   000045   7B00         MOV       R3,#0x0
   \   000047   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   A9..         MOV       R1,?V5
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   EA           MOV       A,R2
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   EB           MOV       A,R3
   \   000056   F0           MOVX      @DPTR,A
    871              
    872            if ( (*pCurr)->pNext != NULL )
   \   000057   EA           MOV       A,R2
   \   000058   2404         ADD       A,#0x4
   \   00005A   F8           MOV       R0,A
   \   00005B   5001         JNC       ??gp_AddCmdPayloadMsgNode_3
   \   00005D   09           INC       R1
   \                     ??gp_AddCmdPayloadMsgNode_3:
   \   00005E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000061   6008         JZ        ??gp_AddCmdPayloadMsgNode_4
    873            {
    874              (*pCurr)->pNext = NULL;
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   A3           INC       DPTR
   \   00006A   F0           MOVX      @DPTR,A
    875            }
    876            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->lenght ) = len;
   \                     ??gp_AddCmdPayloadMsgNode_4:
   \   00006B   12....       LCALL     ?Subroutine11 & 0xFFFF
    877            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg ) = ( uint8* )pBuf;
   \                     ??CrossCallReturnLabel_5:
   \   00006E   FA           MOV       R2,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   FB           MOV       R3,A
   \   000072   8A82         MOV       DPL,R2
   \   000074   F583         MOV       DPH,A
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E5..         MOV       A,?V0
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   A3           INC       DPTR
   \   00007C   E5..         MOV       A,?V1
   \   00007E   F0           MOVX      @DPTR,A
    878            
    879            return *pCurr;
   \                     ??gp_AddCmdPayloadMsgNode_2:
   \   00007F   7F06         MOV       R7,#0x6
   \   000081   02....       LJMP      ?BANKED_LEAVE_XDATA
    880          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V2
   \   00000A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET
    881          
    882          /*********************************************************************
    883           * @fn      gp_GetHeadNotificationMsg
    884           *
    885           * @brief   Returns head pointer for  finding and binding respondent list
    886           *
    887           * @param   none
    888           *
    889           * @return  pointer to head
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          gpNotificationMsg_t* gp_GetHeadNotificationMsg(void)
   \                     gp_GetHeadNotificationMsg:
    892          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    893            return ( pNotificationMsgHead );
   \   000004   90....       MOV       DPTR,#pNotificationMsgHead
   \   000007                REQUIRE ?Subroutine4
   \   000007                ; // Fall through to label ?Subroutine4
    894          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   D083         POP       DPH
   \   000005   D082         POP       DPL
   \   000007   02....       LJMP      ?BRET
    895          
    896          /*********************************************************************
    897           * @fn      gp_GetPHeadNotification
    898           *
    899           * @brief   Returns head pointer for  finding and binding respondent list
    900           *
    901           * @param   none
    902           *
    903           * @return  pointer to head
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          gpNotificationMsg_t** gp_GetPHeadNotification(void)
   \                     gp_GetPHeadNotification:
    906          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    907            return ( &pNotificationMsgHead );
   \   000000   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    908          }
    909          
    910          /*********************************************************************
    911           * @fn      gp_GetHeadCmdPayloadMsg
    912           *
    913           * @brief   Returns head pointer for  finding and binding respondent list
    914           *
    915           * @param   none
    916           *
    917           * @return  pointer to head
    918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    919          gpCmdPayloadMsg_t* gp_GetHeadCmdPayloadMsg(void)
   \                     gp_GetHeadCmdPayloadMsg:
    920          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    921            return ( pCmdPayloadMsgHead );
   \   000004   90....       MOV       DPTR,#pCmdPayloadMsgHead
   \   000007   80..         SJMP      ?Subroutine4
    922          }
    923          
    924          /*********************************************************************
    925           * @fn      gp_GetHeadCmdPayloadMsg
    926           *
    927           * @brief   Returns head pointer for  finding and binding respondent list
    928           *
    929           * @param   none
    930           *
    931           * @return  pointer to head
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          gpCmdPayloadMsg_t** gp_GetPHeadCmdPayload(void)
   \                     gp_GetPHeadCmdPayload:
    934          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    935            return ( &pCmdPayloadMsgHead );
   \   000000   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    936          }
    937          
    938          /*********************************************************************
    939           * @fn      gp_NotificationMsgClean
    940           *
    941           * @brief   This function free reserved memory for respondent list
    942           *
    943           * @param   pHead - begin of the Notification Msg list
    944           *
    945           * @return  status
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void gp_NotificationMsgClean( gpNotificationMsg_t **pHead )
   \                     gp_NotificationMsgClean:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine5 & 0xFFFF
    949            gpNotificationMsg_t **pCurr;
    950            gpNotificationMsg_t **pNext;
    951            
    952            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_104:
   \   000008   6060         JZ        ??CrossCallReturnLabel_28
    953            {
    954              return;
    955            }
    956            
    957            pCurr = pHead;
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    958            
    959            if( *pCurr != NULL )
   \   00000E   E8           MOV       A,R0
   \   00000F   49           ORL       A,R1
   \   000010   6048         JZ        ??gp_NotificationMsgClean_0
    960            {
    961              pNext = &((*pCurr)->pNext);
   \   000012   E8           MOV       A,R0
   \   000013   240F         ADD       A,#0xf
   \   000015   F5..         MOV       ?V2,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F5..         MOV       ?V3,A
    962              if ( ( ( gpNotificationMsg_t* ) *pCurr )->pMsg != ( ( gpNotificationMsg_t* ) *pNext )->pMsg )
   \   00001B   E8           MOV       A,R0
   \   00001C   240D         ADD       A,#0xd
   \   00001E   F582         MOV       DPL,A
   \   000020   E4           CLR       A
   \   000021   39           ADDC      A,R1
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000027   85..82       MOV       DPL,?V2
   \   00002A   85..83       MOV       DPH,?V3
   \   00002D   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000030   C8           XCH       A,R0
   \   000031   240D         ADD       A,#0xd
   \   000033   F582         MOV       DPL,A
   \   000035   E4           CLR       A
   \   000036   38           ADDC      A,R0
   \   000037   F583         MOV       DPH,A
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   6A           XRL       A,R2
   \   00003B   7003         JNZ       ??gp_NotificationMsgClean_1
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6B           XRL       A,R3
   \                     ??gp_NotificationMsgClean_1:
   \   000040   6007         JZ        ??gp_NotificationMsgClean_2
    963              {
    964                gp_CmdPayloadMsgClean( gp_GetPHeadCmdPayload( ) );
   \   000042                ; Setup parameters for call to function gp_CmdPayloadMsgClean
   \   000042   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000044   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000046   12....       LCALL     `??gp_CmdPayloadMsgClean::?relay`; Banked call to: gp_CmdPayloadMsgClean
    965              }
    966              osal_mem_free( *pCurr );
   \                     ??gp_NotificationMsgClean_2:
   \   000049                ; Setup parameters for call to function osal_mem_free
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ?Subroutine14 & 0xFFFF
    967              *pCurr = ( gpNotificationMsg_t* )NULL;
   \                     ??CrossCallReturnLabel_10:
   \   000050   E4           CLR       A
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   F0           MOVX      @DPTR,A
    968              pCurr = pNext;
   \   000054   85....       MOV       ?V0,?V2
   \   000057   85....       MOV       ?V1,?V3
    969            }
    970            *pHead = *pCurr;
   \                     ??gp_NotificationMsgClean_0:
   \   00005A   85..82       MOV       DPL,?V0
   \   00005D   85..83       MOV       DPH,?V1
   \   000060   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   12....       LCALL     ?Subroutine22 & 0xFFFF
    971          }
   \                     ??CrossCallReturnLabel_28:
   \   00006A   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   22           RET
    972          
    973          /*********************************************************************
    974           * @fn      gp_NotificationMsgClean
    975           *
    976           * @brief   This function free reserved memory for respondent list
    977           *
    978           * @param   pHead - begin of the Notification Msg list
    979           *
    980           * @return
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void gp_CmdPayloadMsgClean( gpCmdPayloadMsg_t **pHead )
   \                     gp_CmdPayloadMsgClean:
    983          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    984            gpCmdPayloadMsg_t **pCurr;
    985            gpCmdPayloadMsg_t **pNext;
    986            
    987            if ( *pHead == NULL )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   601D         JZ        ??gp_CmdPayloadMsgClean_0
    988            {
    989              return;
    990            }
    991            
    992            pCurr = pHead;
    993            
    994            if( *pCurr != NULL )
    995            {
    996              pNext = &((*pCurr)->pNext);
    997              osal_mem_free ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg );
   \   00001A                ; Setup parameters for call to function osal_mem_free
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ?Subroutine14 & 0xFFFF
    998              ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg = NULL;
   \                     ??CrossCallReturnLabel_11:
   \   00001F   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000022   8A82         MOV       DPL,R2
   \   000024   F583         MOV       DPH,A
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    999              osal_mem_free( *pCurr );
   \   00002C                ; Setup parameters for call to function osal_mem_free
   \   00002C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1000              *pCurr = ( gpCmdPayloadMsg_t* )NULL;
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
   1001              pCurr = pNext;
   1002            }
   1003            pHead = pCurr;
   1004          }
   \                     ??gp_CmdPayloadMsgClean_0:
   \   000037   02....       LJMP      ?Subroutine1 & 0xFFFF
   1005          
   1006          /*********************************************************************
   1007           * @fn      gp_ResetProxyBasicTblEntry
   1008           *
   1009           * @brief   This function removes data of the given entry
   1010           *
   1011           * @param   pHead - begin of the Notification Msg list
   1012           *
   1013           * @return
   1014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1015          void gp_ResetProxyBasicTblEntry( uint8* entry )
   \                     gp_ResetProxyBasicTblEntry:
   1016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV       A,#-0x41
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1017            uint8 emptyEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7441         MOV       A,#0x41
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1018            
   1019            osal_memcpy( entry, emptyEntry, PROXY_TBL_ENTRY_LEN );
   \   000016                ; Setup parameters for call to function osal_memcpy
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   F5..         MOV       ?V2,A
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000025   7C41         MOV       R4,#0x41
   \   000027   7D00         MOV       R5,#0x0
   \   000029   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   1020          }
   \   00002F   7441         MOV       A,#0x41
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   7F03         MOV       R7,#0x3
   \   000036   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_RegisterCmdCallbacks::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_ProcessInProxyBasic::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_ProcessInProxyBasic

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpNotificationCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpCommissioningNotificationCommand:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpCommissioningNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpProxyTableResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpProxyTableResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_addPairedSinksToMsgQueue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_addPairedSinksToMsgQueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateNotificationMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateNotificationMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateCmdPayloadMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateCmdPayloadMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddNotificationMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddNotificationMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddCmdPayloadMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddCmdPayloadMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadNotificationMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadNotificationMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadNotification::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadCmdPayloadMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadCmdPayloadMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadCmdPayload::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadCmdPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_NotificationMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_NotificationMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CmdPayloadMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CmdPayloadMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ResetProxyBasicTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ResetProxyBasicTblEntry

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50
   1021          
   1022          #endif
   1023          /***************************************************************************
   1024          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     38   gp_AddCmdPayloadMsgNode
        0     14   -> gp_CreateCmdPayloadMsgList
        0     14   -> osal_mem_alloc
      0    117   gp_AddNotificationMsgNode
        0     12   -> gp_CreateNotificationMsgList
        0     12   -> osal_mem_alloc
      0     21   gp_CmdPayloadMsgClean
        0      9   -> osal_mem_free
      0     24   gp_CreateCmdPayloadMsgList
        0     10   -> osal_mem_alloc
      0     22   gp_CreateNotificationMsgList
        0     10   -> osal_mem_alloc
      2      0   gp_GetHeadCmdPayloadMsg
      2      0   gp_GetHeadNotificationMsg
      0      0   gp_GetPHeadCmdPayload
      0      0   gp_GetPHeadNotification
      0     12   gp_NotificationMsgClean
        0     12   -> gp_CmdPayloadMsgClean
        0     12   -> osal_mem_free
      0     79   gp_ResetProxyBasicTblEntry
        0     79   -> osal_memcpy
      0    132   gp_addPairedSinksToMsgQueue
        0    105   -> gp_AddNotificationMsgNode
        0    105   -> gp_getProxyTableByIndex
        0    108   -> osal_memcmp
        0    108   -> osal_memcpy
      0      9   zclGp_HdlIncoming
        0      9   -> zclGp_ProcessInProxyBasic
      1     60   zclGp_ProcessInProxyBasic
        0     44   -> osal_build_uint16
        0     44   -> osal_mem_alloc
        0     47   -> osal_memcpy
        0     51   -> zcl_SendDefaultRspCmd
      1     14   zclGp_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      1     43   zclGp_SendGpCommissioningNotificationCommand
        0     32   -> bdb_getZCLFrameCounter
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     35   -> osal_memcpy
        0     43   -> zcl_SendCommand
      1     28   zclGp_SendGpNotificationCommand
        0     24   -> gp_AddCmdPayloadMsgNode
        0     24   -> gp_addPairedSinksToMsgQueue
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
        0     28   -> osal_start_timerEx
      1     35   zclGp_SendGpProxyTableResponse
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     35   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_2
      12  ?<Constant {{0}}>
      19  ??Subroutine36_0
      18  ??Subroutine37_0
       5  ??Subroutine38_0
       1  ??Subroutine39_0
       6  ??Subroutine40_0
       8  ??Subroutine41_0
      14  ??Subroutine42_0
       8  ??Subroutine43_0
       2  ??Subroutine44_0
       2  ??Subroutine45_0
       7  ??Subroutine46_0
       5  ??Subroutine47_0
       6  ??Subroutine48_0
       5  ?Subroutine0
       5  ?Subroutine1
      23  ?Subroutine10
      15  ?Subroutine11
      13  ?Subroutine12
      15  ?Subroutine13
      13  ?Subroutine14
      11  ?Subroutine15
       6  ?Subroutine16
       4  ?Subroutine17
       1  ?Subroutine18
      15  ?Subroutine19
       8  ?Subroutine2
      11  ?Subroutine20
       8  ?Subroutine21
       6  ?Subroutine22
      18  ?Subroutine23
       2  ?Subroutine24
      10  ?Subroutine25
      15  ?Subroutine26
      10  ?Subroutine27
      22  ?Subroutine28
       2  ?Subroutine29
       5  ?Subroutine3
       5  ?Subroutine30
       9  ?Subroutine31
       5  ?Subroutine32
      13  ?Subroutine33
       6  ?Subroutine34
      10  ?Subroutine35
      10  ?Subroutine4
       4  ?Subroutine5
       9  ?Subroutine6
      21  ?Subroutine7
       5  ?Subroutine8
       4  ?Subroutine9
       4  __Constant_32
     132  gp_AddCmdPayloadMsgNode
       6  gp_AddCmdPayloadMsgNode::?relay
     111  gp_AddNotificationMsgNode
       6  gp_AddNotificationMsgNode::?relay
      58  gp_CmdPayloadMsgClean
       6  gp_CmdPayloadMsgClean::?relay
      40  gp_CreateCmdPayloadMsgList
       6  gp_CreateCmdPayloadMsgList::?relay
      33  gp_CreateNotificationMsgList
       6  gp_CreateNotificationMsgList::?relay
       9  gp_GetHeadCmdPayloadMsg
       6  gp_GetHeadCmdPayloadMsg::?relay
       7  gp_GetHeadNotificationMsg
       6  gp_GetHeadNotificationMsg::?relay
       7  gp_GetPHeadCmdPayload
       6  gp_GetPHeadCmdPayload::?relay
       7  gp_GetPHeadNotification
       6  gp_GetPHeadNotification::?relay
     109  gp_NotificationMsgClean
       6  gp_NotificationMsgClean::?relay
      57  gp_ResetProxyBasicTblEntry
       6  gp_ResetProxyBasicTblEntry::?relay
     578  gp_addPairedSinksToMsgQueue
       6  gp_addPairedSinksToMsgQueue::?relay
       2  pCmdPayloadMsgHead
       2  pNotificationMsgHead
       2  zclGpCBs
       1  zclGpPluginRegisted
     110  zclGp_HdlIncoming
       6  zclGp_HdlIncoming::?relay
     762  zclGp_ProcessInProxyBasic
       6  zclGp_ProcessInProxyBasic::?relay
     133  zclGp_RegisterCmdCallbacks
       6  zclGp_RegisterCmdCallbacks::?relay
     448  zclGp_SendGpCommissioningNotificationCommand
       6  zclGp_SendGpCommissioningNotificationCommand::?relay
     362  zclGp_SendGpNotificationCommand
       6  zclGp_SendGpNotificationCommand::?relay
     307  zclGp_SendGpProxyTableResponse
       6  zclGp_SendGpProxyTableResponse::?relay

 
 3 715 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
   156 bytes in segment XDATA_ROM_C
     7 bytes in segment XDATA_Z
 
   108 bytes of CODE     memory
   152 bytes of CONST    memory (+ 4 bytes shared)
 3 715 bytes of HUGECODE memory
     7 bytes of XDATA    memory

Errors: none
Warnings: none
