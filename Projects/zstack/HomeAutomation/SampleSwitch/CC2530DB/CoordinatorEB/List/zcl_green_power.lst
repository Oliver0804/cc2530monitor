###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               08/Feb/2022  22:10:22
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\zcl\zcl_green_power.c
#    Command line       =  
#        -f C:\usertemp\AppData\Local\Temp\EWA25F.tmp ("I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\zcl\zcl_green_power.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D
#        ZCL_REPORT -D HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D
#        HAL_UART=TRUE -D INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D
#        xHAL_LCD_OLED12864 -D HAL_ADC=TRUE -D HAL_UART=TRUE -D
#        INT_HEAP_LEN=2048 -lC "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_green_power.lst
#    Object file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_green_power.r51
#
###############################################################################

I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\zcl\zcl_green_power.c
      1          /**************************************************************************************************
      2            Filename:       zcl_green_power.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "ZGlobals.h"  
     48          #include "ZComDef.h"
     49          #include "zcl.h"
     50          #include "zcl_green_power.h"
     51          #include "stub_aps.h"
     52          #include "gp_common.h"
     53          #include "bdb_interface.h"
     54             
     55          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     56          
     57          /*********************************************************************
     58           * MACROS
     59           */
     60          
     61          /*********************************************************************
     62           * CONSTANTS
     63           */
     64          
     65          /*********************************************************************
     66           * TYPEDEFS
     67           */
     68          
     69          typedef struct zclGpCBRec
     70          {
     71            struct zclGpCBRec        *next;
     72            uint8                     endpoint; // Used to link it into the endpoint descriptor
     73            zclGp_AppCallbacks_t     *CBs;      // Pointer to Callback function
     74          } zclGpCBRec_t;
     75          
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * GLOBAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          static zclGpCBRec_t *zclGpCBs = (zclGpCBRec_t *)NULL;
   \                     zclGpCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint8 zclGpPluginRegisted = FALSE;
   \                     zclGpPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          static gpNotificationMsg_t *pNotificationMsgHead = NULL;
   \                     pNotificationMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          static gpCmdPayloadMsg_t *pCmdPayloadMsgHead = NULL;
   \                     pCmdPayloadMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     92          
     93          //static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
     94          
     95          
     96          /*********************************************************************
     97           * LOCAL FUNCTIONS
     98           */
     99          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg );
    100          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    101          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint );
    102          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg );
    103          
    104          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg, zclGp_AppCallbacks_t *pCBs );
    105          
    106          
    107          /*********************************************************************
    108           * @fn      zclGp_RegisterCmdCallbacks
    109           *
    110           * @brief   Register an applications command callbacks
    111           *
    112           * @param   endpoint - application's endpoint
    113           * @param   callbacks - pointer to the callback record.
    114           *
    115           * @return  ZMemError if not able to allocate
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          ZStatus_t zclGp_RegisterCmdCallbacks( uint8 endpoint, zclGp_AppCallbacks_t *callbacks )
   \                     zclGp_RegisterCmdCallbacks:
    118          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    119            zclGpCBRec_t *pNewItem;
    120            zclGpCBRec_t *pLoop;
    121          
    122            // Register as a ZCL Plugin
    123            if ( zclGpPluginRegisted == FALSE )
   \   00000B   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclGp_RegisterCmdCallbacks_0
    124            {
    125              zcl_registerPlugin( ZCL_CLUSTER_ID_GREEN_POWER,
    126                                  ZCL_CLUSTER_ID_GREEN_POWER,
    127                                  zclGp_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclGp_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclGp_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C21         MOV       R4,#0x21
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A21         MOV       R2,#0x21
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    128          
    129              zclGpPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    130            }
    131          
    132            // Fill in the new profile list
    133            pNewItem = zcl_mem_alloc( sizeof( zclGpCBRec_t ) );
   \                     ??zclGp_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    134            if ( pNewItem == NULL )
   \   000041   EA           MOV       A,R2
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclGp_RegisterCmdCallbacks_1
    135              return (ZMemError);
   \   000045   7910         MOV       R1,#0x10
   \   000047   803C         SJMP      ??zclGp_RegisterCmdCallbacks_2
    136          
    137            pNewItem->next = (zclGpCBRec_t *)NULL;
   \                     ??zclGp_RegisterCmdCallbacks_1:
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine33 & 0xFFFF
    138            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_41:
   \   000053   E5..         MOV       A,?V0
   \   000055   12....       LCALL     ?Subroutine33 & 0xFFFF
    139            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_42:
   \   000058   A3           INC       DPTR
   \   000059   EE           MOV       A,R6
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   EF           MOV       A,R7
   \   00005D   F0           MOVX      @DPTR,A
    140          
    141            // Find spot in list
    142            if (  zclGpCBs == NULL )
   \   00005E   90....       MOV       DPTR,#zclGpCBs
   \   000061   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000064   90....       MOV       DPTR,#zclGpCBs
   \   000067   6017         JZ        ??zclGp_RegisterCmdCallbacks_3
    143            {
    144              zclGpCBs = pNewItem;
    145            }
    146            else
    147            {
    148              // Look for end of list
    149              pLoop = zclGpCBs;
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FC           MOV       R4,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   8003         SJMP      ??zclGp_RegisterCmdCallbacks_4
    150              while ( pLoop->next != NULL )
    151                pLoop = pLoop->next;
   \                     ??zclGp_RegisterCmdCallbacks_5:
   \   00006F   EA           MOV       A,R2
   \   000070   FC           MOV       R4,A
   \   000071   EB           MOV       A,R3
   \                     ??zclGp_RegisterCmdCallbacks_4:
   \   000072   FD           MOV       R5,A
   \   000073   8C82         MOV       DPL,R4
   \   000075   8D83         MOV       DPH,R5
   \   000077   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00007A   70F3         JNZ       ??zclGp_RegisterCmdCallbacks_5
    152          
    153              // Put new item at end of list
    154              pLoop->next = pNewItem;
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
    155            }
   \                     ??zclGp_RegisterCmdCallbacks_3:
   \   000080   12....       LCALL     ?Subroutine32 & 0xFFFF
    156          
    157            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_29:
   \   000083   7900         MOV       R1,#0x0
   \                     ??zclGp_RegisterCmdCallbacks_2:
   \   000085                REQUIRE ?Subroutine0
   \   000085                ; // Fall through to label ?Subroutine0
    158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    159          
    160          /*********************************************************************
    161           * @fn      zclGp_FindCallbacks
    162           *
    163           * @brief   Find the callbacks for an endpoint
    164           *
    165           * @param   endpoint - endpoint to find the application callbacks for
    166           *
    167           * @return  pointer to the callbacks
    168           */
    169          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint )
    170          {
    171            zclGpCBRec_t *pCBs;
    172          
    173            pCBs = zclGpCBs;
    174            while ( pCBs )
    175            {
    176              if ( pCBs->endpoint == endpoint )
    177                return ( pCBs->CBs );
    178              pCBs = pCBs->next;
    179            }
    180            return ( (zclGp_AppCallbacks_t *)NULL );
    181          }
    182          
    183          /*********************************************************************
    184           * @fn      zclGp_HdlIncoming
    185           *
    186           * @brief   Callback from ZCL to process incoming Commands specific
    187           *          to this cluster library or Profile commands for attributes
    188           *          that aren't in the attribute list
    189           *
    190           *
    191           * @param   pInMsg - pointer to the incoming message
    192           *
    193           * @return  ZStatus_t
    194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGp_HdlIncoming:
    196          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    197            ZStatus_t stat = ZSuccess;
    198          
    199          #if defined ( INTER_PAN )
    200            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
    201              return ( stat ); // Cluster not supported thru Inter-PAN
    202          #endif
    203            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   5403         ANL       A,#0x3
   \   00000F   6401         XRL       A,#0x1
   \   000011   7038         JNZ       ??zclGp_HdlIncoming_0
    204            {
    205              // Is this a manufacturer specific command?
    206              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000013   E8           MOV       A,R0
   \   000014   5404         ANL       A,#0x4
   \   000016   7033         JNZ       ??zclGp_HdlIncoming_0
    207              {
    208                stat = zclGp_HdlInSpecificCommands( pInMsg );
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    209              }
    210              else
    211              {
    212                // We don't support any manufacturer specific command.
    213                stat = ZFailure;
    214              }
    215            }
   \                     ??CrossCallReturnLabel_79:
   \   00001F   E8           MOV       A,R0
   \   000020   FE           MOV       R6,A
   \   000021   E9           MOV       A,R1
   \   000022   FF           MOV       R7,A
   \   000023   E8           MOV       A,R0
   \   000024   2414         ADD       A,#0x14
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3F           ADDC      A,R7
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   90....       MOV       DPTR,#zclGpCBs
   \                     ??zclGp_HdlIncoming_1:
   \   000031   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000034   6015         JZ        ??zclGp_HdlIncoming_0
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6C           XRL       A,R4
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   70ED         JNZ       ??zclGp_HdlIncoming_1
   \   000044   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000047   EC           MOV       A,R4
   \   000048   4D           ORL       A,R5
   \   000049   7004         JNZ       ??zclGp_HdlIncoming_2
   \                     ??zclGp_HdlIncoming_0:
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   801A         SJMP      ??zclGp_HdlIncoming_3
   \                     ??zclGp_HdlIncoming_2:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6421         XRL       A,#0x21
   \   00005A   7002         JNZ       ??zclGp_HdlIncoming_4
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \                     ??zclGp_HdlIncoming_4:
   \   00005E   7006         JNZ       ??zclGp_HdlIncoming_5
   \   000060                ; Setup parameters for call to function zclGp_ProcessInProxyBasic
   \   000060   12....       LCALL     `??zclGp_ProcessInProxyBasic::?relay`; Banked call to: zclGp_ProcessInProxyBasic
   \   000063   E9           MOV       A,R1
   \   000064   8002         SJMP      ??zclGp_HdlIncoming_6
   \                     ??zclGp_HdlIncoming_5:
   \   000066   7401         MOV       A,#0x1
   \                     ??zclGp_HdlIncoming_6:
   \   000068   F9           MOV       R1,A
    216            else
    217            {
    218              // Handle all the normal (Read, Write...) commands -- should never get here
    219              stat = ZFailure;
    220            }
    221            return ( stat );
   \                     ??zclGp_HdlIncoming_3:
   \   000069                REQUIRE ?Subroutine1
   \   000069                ; // Fall through to label ?Subroutine1
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine63_0
   \   000003                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    223          
    224          /*********************************************************************
    225           * @fn      zclGp_HdlInSpecificCommands
    226           *
    227           * @brief   Callback from ZCL to process incoming Commands specific
    228           *          to this cluster library
    229          
    230           * @param   pInMsg - pointer to the incoming message
    231           *
    232           * @return  ZStatus_t
    233           */
    234          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    235          {
    236            ZStatus_t stat;
    237            zclGp_AppCallbacks_t *pCBs;
    238          
    239            // make sure endpoint exists
    240            pCBs = zclGp_FindCallbacks( pInMsg->msg->endPoint );
    241            if ( pCBs == NULL )
    242              return ( ZFailure );
    243          
    244            switch ( pInMsg->msg->clusterId )
    245            {
    246              case ZCL_CLUSTER_ID_GREEN_POWER:
    247                // Proxy Basic handler
    248                stat = zclGp_ProcessInProxyBasic( pInMsg, pCBs );
    249                break;
    250          
    251              default:
    252                stat = ZFailure;
    253                break;
    254            }
    255          
    256            return ( stat );
    257          }
    258          
    259          /*********************************************************************
    260           * @fn      zclGp_ProcessInProxyBasic
    261           *
    262           * @brief   Process in the received client commands for the Proxy Basic.
    263           *
    264           * @param   pInMsg - pointer to the incoming message
    265           *
    266           * @return  ZStatus_t
    267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    268          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg,
   \                     zclGp_ProcessInProxyBasic:
    269                                                    zclGp_AppCallbacks_t *pCBs )
    270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000013   7402         MOV       A,#0x2
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   EC           MOV       A,R4
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   ED           MOV       A,R5
   \   00001C   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    271            // Server side command handler
    272            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??CrossCallReturnLabel_85:
   \   00001F   2406         ADD       A,#0x6
   \   000021   FE           MOV       R6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   3400         ADDC      A,#0x0
   \   000026   FF           MOV       R7,A
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   2407         ADD       A,#0x7
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   3400         ADDC      A,#0x0
   \   000035   F9           MOV       R1,A
   \   000036   740B         MOV       A,#0xb
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00003E   2402         ADD       A,#0x2
   \   000040   F5..         MOV       ?V0,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   3400         ADDC      A,#0x0
   \   000046   F5..         MOV       ?V1,A
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   5408         ANL       A,#0x8
   \   000050   707C         JNZ       ??zclGp_ProcessInProxyBasic_0
    273            {
    274              // Server side command handling is not supported
    275              zclDefaultRspCmd_t defaultRspCmd;
    276          
    277              defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \   000052   740B         MOV       A,#0xb
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00005A   C0E0         PUSH      A
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   D0E0         POP       A
   \   000063   F0           MOVX      @DPTR,A
    278              defaultRspCmd.statusCode = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \   000064   7405         MOV       A,#0x5
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   7481         MOV       A,#-0x7f
   \   00006B   F0           MOVX      @DPTR,A
    279              zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
    280                                     pInMsg->msg->clusterId, &defaultRspCmd,
    281                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   00006C   12....       LCALL     ?Subroutine15 & 0xFFFF
    282            }
   \                     ??CrossCallReturnLabel_112:
   \   00006F   F5..         MOV       ?V2,A
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F5..         MOV       ?V3,A
   \   000075                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F5..         MOV       ?V4,A
   \   00007C   78..         MOV       R0,#?V4
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000081   E4           CLR       A
   \   000082   F5..         MOV       ?V4,A
   \   000084   F5..         MOV       ?V5,A
   \   000086   78..         MOV       R0,#?V4
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008B   75..01       MOV       ?V4,#0x1
   \   00008E   78..         MOV       R0,#?V4
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   78..         MOV       R0,#?V4
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000098   7409         MOV       A,#0x9
   \   00009A   12....       LCALL     ?XSTACK_DISP100_8
   \   00009D   88..         MOV       ?V4,R0
   \   00009F   89..         MOV       ?V5,R1
   \   0000A1   78..         MOV       R0,#?V4
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   A3           INC       DPTR
   \   0000AD   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000B0   E5..         MOV       A,?V2
   \   0000B2   2406         ADD       A,#0x6
   \   0000B4   FA           MOV       R2,A
   \   0000B5   E4           CLR       A
   \   0000B6   35..         ADDC      A,?V3
   \   0000B8   FB           MOV       R3,A
   \   0000B9   E5..         MOV       A,?V2
   \   0000BB   2414         ADD       A,#0x14
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E4           CLR       A
   \   0000C0   35..         ADDC      A,?V3
   \   0000C2   F583         MOV       DPH,A
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F9           MOV       R1,A
   \   0000C6   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0000C9   7407         MOV       A,#0x7
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
    283            // Client side command handler
    284            if ( zcl_ClientCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGp_ProcessInProxyBasic_0:
   \   0000CE   85..82       MOV       DPL,?V0
   \   0000D1   85..83       MOV       DPH,?V1
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   5408         ANL       A,#0x8
   \   0000D7   7003         JNZ       $+5
   \   0000D9   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    285            {
    286              switch ( pInMsg->hdr.commandID )
   \   0000DC   85..82       MOV       DPL,?XSP + 0
   \   0000DF   85..83       MOV       DPH,?XSP + 1
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   240A         ADD       A,#0xa
   \   0000E5   F8           MOV       R0,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   3400         ADDC      A,#0x0
   \   0000EA   F9           MOV       R1,A
   \   0000EB   7404         MOV       A,#0x4
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000F3   2408         ADD       A,#0x8
   \   0000F5   F5..         MOV       ?V0,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   3400         ADDC      A,#0x0
   \   0000FB   F5..         MOV       ?V1,A
   \   0000FD   740B         MOV       A,#0xb
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000105   14           DEC       A
   \   000106   6014         JZ        ??zclGp_ProcessInProxyBasic_2
   \   000108   14           DEC       A
   \   000109   7003         JNZ       $+5
   \   00010B   02....       LJMP      ??zclGp_ProcessInProxyBasic_3 & 0xFFFF
   \   00010E   24FC         ADD       A,#-0x4
   \   000110   7003         JNZ       $+5
   \   000112   02....       LJMP      ??zclGp_ProcessInProxyBasic_4 & 0xFFFF
   \   000115   24FB         ADD       A,#-0x5
   \   000117   6067         JZ        ??zclGp_ProcessInProxyBasic_5
   \   000119   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    287              {
    288                case COMMAND_GP_PAIRING:
    289                  if ( pCBs->pfnGpPairingCmd )
   \                     ??zclGp_ProcessInProxyBasic_2:
   \   00011C   7402         MOV       A,#0x2
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000124   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000127   7003         JNZ       $+5
   \   000129   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    290                  {
    291                    zclGpPairing_t cmd;
    292                    
    293                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   00012C   12....       LCALL     ?Subroutine11 & 0xFFFF
    294                    
    295                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_5:
   \   00012F   7415         MOV       A,#0x15
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   12....       LCALL     ?Subroutine10 & 0xFFFF
    296                    osal_memcpy( cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_62:
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013A   7C03         MOV       R4,#0x3
   \   00013C   7D00         MOV       R5,#0x0
   \   00013E   741A         MOV       A,#0x1a
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   AA82         MOV       R2,DPL
   \   000145   AB83         MOV       R3,DPH
   \   000147   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
    297                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   00014D   85..82       MOV       DPL,?V0
   \   000150   85..83       MOV       DPH,?V1
   \   000153   E0           MOVX      A,@DPTR
   \   000154   2403         ADD       A,#0x3
   \   000156   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    298                              
    299                    if ( cmd.pData == NULL )
   \                     ??CrossCallReturnLabel_66:
   \   000159   741A         MOV       A,#0x1a
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000161   7005         JNZ       ??zclGp_ProcessInProxyBasic_6
    300                    {
    301                      return ZFailure;
   \   000163   7901         MOV       R1,#0x1
   \   000165   02....       LJMP      ??zclGp_ProcessInProxyBasic_7 & 0xFFFF
    302                    }
    303                    
    304                    cmd.pData = pInMsg->pData;
   \                     ??zclGp_ProcessInProxyBasic_6:
   \   000168   741A         MOV       A,#0x1a
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   12....       LCALL     ?Subroutine32 & 0xFFFF
    305                    pCBs->pfnGpPairingCmd( &cmd );
   \                     ??CrossCallReturnLabel_30:
   \   000170                ; Setup parameters for indirect call
   \   000170   7415         MOV       A,#0x15
   \   000172   12....       LCALL     ?XSTACK_DISP101_8
   \   000175   7402         MOV       A,#0x2
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   12....       LCALL     ??Subroutine59_0 & 0xFFFF
    306          
    307                  }
   \                     ??CrossCallReturnLabel_99:
   \   00017D   02....       LJMP      ??zclGp_ProcessInProxyBasic_8 & 0xFFFF
    308                  break;
    309                  
    310                case COMMAND_GP_PROXY_TABLE_REQUEST:
    311                  if ( pCBs->pfnGpProxyTableReqCmd )
   \                     ??zclGp_ProcessInProxyBasic_5:
   \   000180   7402         MOV       A,#0x2
   \   000182   12....       LCALL     ?XSTACK_DISP0_8
   \   000185   E0           MOVX      A,@DPTR
   \   000186   2402         ADD       A,#0x2
   \   000188   F5..         MOV       ?V2,A
   \   00018A   A3           INC       DPTR
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   3400         ADDC      A,#0x0
   \   00018E   F5..         MOV       ?V3,A
   \   000190   85..82       MOV       DPL,?V2
   \   000193   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000196   7003         JNZ       $+5
   \   000198   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    312                  {
    313                    zclGpProxyTableRequest_t cmd;
    314                    
    315                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   00019B   12....       LCALL     ?Subroutine11 & 0xFFFF
    316                    
    317                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_6:
   \   00019E   7406         MOV       A,#0x6
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   12....       LCALL     ?Subroutine10 & 0xFFFF
    318                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_63:
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A9   7C01         MOV       R4,#0x1
   \   0001AB   7D00         MOV       R5,#0x0
   \   0001AD   740B         MOV       A,#0xb
   \   0001AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B2   AA82         MOV       R2,DPL
   \   0001B4   AB83         MOV       R3,DPH
   \   0001B6   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0001B9   12....       LCALL     ?DEALLOC_XSTACK8
    319                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   0001BC   12....       LCALL     ?Subroutine7 & 0xFFFF
    320                    
    321                    
    322                    cmd.pData = (void*)pInMsg->pData;
   \                     ??CrossCallReturnLabel_68:
   \   0001BF   7409         MOV       A,#0x9
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   12....       LCALL     ?Subroutine32 & 0xFFFF
    323                    pCBs->pfnGpProxyTableReqCmd( &cmd );
   \                     ??CrossCallReturnLabel_31:
   \   0001C7                ; Setup parameters for indirect call
   \   0001C7   7406         MOV       A,#0x6
   \   0001C9   12....       LCALL     ?XSTACK_DISP101_8
   \   0001CC   85..82       MOV       DPL,?V2
   \   0001CF   85..83       MOV       DPH,?V3
   \   0001D2   02....       LJMP      ??zclGp_ProcessInProxyBasic_8 & 0xFFFF
    324          
    325                  }
   \                     ??zclGp_ProcessInProxyBasic_3:
   \   0001D5   7402         MOV       A,#0x2
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001DD   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0001E0   7003         JNZ       $+5
   \   0001E2   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    326                  break;
    327                case COMMAND_GP_PROXY_COMMISSIONING_MODE:
    328                  if(pCBs->pfnGpProxyCommissioningModeCmd)
    329                  {
    330                    zclGpProxyCommissioningMode_t cmd;
    331          
    332                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   0001E5                ; Setup parameters for call to function osal_memcpy
   \   0001E5   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0001E8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001EB   7C01         MOV       R4,#0x1
   \   0001ED   7D00         MOV       R5,#0x0
   \   0001EF   740B         MOV       A,#0xb
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   AA82         MOV       R2,DPL
   \   0001F6   AB83         MOV       R3,DPH
   \   0001F8   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0001FB   12....       LCALL     ?DEALLOC_XSTACK8
    333                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   0001FE   12....       LCALL     ?Subroutine7 & 0xFFFF
    334          
    335                    // alloc for data after options field
    336                    uint8 responseLen = pInMsg->pDataLen - sizeof(cmd.options); 
   \                     ??CrossCallReturnLabel_69:
   \   000201   7404         MOV       A,#0x4
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000209   14           DEC       A
    337                   
    338                    cmd.pData = osal_mem_alloc( responseLen );
   \   00020A   FE           MOV       R6,A
   \   00020B                ; Setup parameters for call to function osal_mem_alloc
   \   00020B   FA           MOV       R2,A
   \   00020C   7B00         MOV       R3,#0x0
   \   00020E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000211   7409         MOV       A,#0x9
   \   000213   12....       LCALL     ?XSTACK_DISP0_8
   \   000216   12....       LCALL     ?Subroutine19 & 0xFFFF
    339                    osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
   \                     ??CrossCallReturnLabel_15:
   \   000219   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00021C   EE           MOV       A,R6
   \   00021D   FC           MOV       R4,A
   \   00021E   7D00         MOV       R5,#0x0
   \   000220   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000223   12....       LCALL     ?DEALLOC_XSTACK8
    340          
    341                    if(pInMsg->msg->srcAddr.addrMode == afAddr16Bit)
   \   000226   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000229   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00022C   E8           MOV       A,R0
   \   00022D   240E         ADD       A,#0xe
   \   00022F   F582         MOV       DPL,A
   \   000231   E4           CLR       A
   \   000232   39           ADDC      A,R1
   \   000233   F583         MOV       DPH,A
   \   000235   E0           MOVX      A,@DPTR
   \   000236   6402         XRL       A,#0x2
   \   000238   7015         JNZ       ??CrossCallReturnLabel_32
    342                    {
    343                      cmd.srcAddr = pInMsg->msg->srcAddr.addr.shortAddr;
   \   00023A   8882         MOV       DPL,R0
   \   00023C   8983         MOV       DPH,R1
   \   00023E   A3           INC       DPTR
   \   00023F   A3           INC       DPTR
   \   000240   A3           INC       DPTR
   \   000241   A3           INC       DPTR
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    344                    }
   \                     ??CrossCallReturnLabel_81:
   \   000247   7406         MOV       A,#0x6
   \   000249   12....       LCALL     ?XSTACK_DISP0_8
   \   00024C   12....       LCALL     ?Subroutine32 & 0xFFFF
    345                    
    346                    pCBs->pfnGpProxyCommissioningModeCmd( &cmd );
   \                     ??CrossCallReturnLabel_32:
   \   00024F                ; Setup parameters for indirect call
   \   00024F   7406         MOV       A,#0x6
   \   000251   12....       LCALL     ?XSTACK_DISP101_8
   \   000254   7402         MOV       A,#0x2
   \   000256   12....       LCALL     ?XSTACK_DISP0_8
   \   000259   12....       LCALL     ?Subroutine18 & 0xFFFF
    347                  }
   \                     ??CrossCallReturnLabel_14:
   \   00025C   02....       LJMP      ??zclGp_ProcessInProxyBasic_8 & 0xFFFF
   \                     ??zclGp_ProcessInProxyBasic_4:
   \   00025F   7402         MOV       A,#0x2
   \   000261   12....       LCALL     ?XSTACK_DISP0_8
   \   000264   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000267   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00026A   7003         JNZ       $+5
   \   00026C   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    348                  break;
    349                  case COMMAND_GP_RESPONSE:
    350                    
    351                    if(pCBs->pfnGpResponseCommand)
    352                    {
    353                      zclGpResponse_t cmd;
    354                      
    355                      uint8 responseLen;
    356          
    357                      osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   00026F                ; Setup parameters for call to function osal_memcpy
   \   00026F   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000272   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000275   7C01         MOV       R4,#0x1
   \   000277   7D00         MOV       R5,#0x0
   \   000279   7412         MOV       A,#0x12
   \   00027B   12....       LCALL     ?XSTACK_DISP0_8
   \   00027E   AA82         MOV       R2,DPL
   \   000280   AB83         MOV       R3,DPH
   \   000282   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000285   12....       LCALL     ?DEALLOC_XSTACK8
    358                      pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   000288   85..82       MOV       DPL,?V0
   \   00028B   85..83       MOV       DPH,?V1
   \   00028E   E0           MOVX      A,@DPTR
   \   00028F   2401         ADD       A,#0x1
   \   000291   FA           MOV       R2,A
   \   000292   A3           INC       DPTR
   \   000293   E0           MOVX      A,@DPTR
   \   000294   3400         ADDC      A,#0x0
   \   000296   FB           MOV       R3,A
   \   000297   85..82       MOV       DPL,?V0
   \   00029A   85..83       MOV       DPH,?V1
   \   00029D   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    359                      
    360                      cmd.tempMasterShortAddr = osal_build_uint16(pInMsg->pData);
   \                     ??CrossCallReturnLabel_129:
   \   0002A0                ; Setup parameters for call to function osal_build_uint16
   \   0002A0   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0002A3   7410         MOV       A,#0x10
   \   0002A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A8   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    361                      pInMsg->pData += sizeof(cmd.tempMasterShortAddr);  // Move data pointer after tempMaster field
   \                     ??CrossCallReturnLabel_130:
   \   0002AB   85..82       MOV       DPL,?V0
   \   0002AE   85..83       MOV       DPH,?V1
   \   0002B1   E0           MOVX      A,@DPTR
   \   0002B2   2402         ADD       A,#0x2
   \   0002B4   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    362                      
    363                      osal_memcpy( &cmd.tempMasterTxChannel, (void*)pInMsg->pData, sizeof(cmd.tempMasterTxChannel) );
   \                     ??CrossCallReturnLabel_67:
   \   0002B7                ; Setup parameters for call to function osal_memcpy
   \   0002B7   88..         MOV       ?V4,R0
   \   0002B9   89..         MOV       ?V5,R1
   \   0002BB   78..         MOV       R0,#?V4
   \   0002BD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002C0   7C01         MOV       R4,#0x1
   \   0002C2   7D00         MOV       R5,#0x0
   \   0002C4   7415         MOV       A,#0x15
   \   0002C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C9   AA82         MOV       R2,DPL
   \   0002CB   AB83         MOV       R3,DPH
   \   0002CD   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0002D0   12....       LCALL     ?DEALLOC_XSTACK8
    364                      pInMsg->pData += sizeof(cmd.tempMasterTxChannel);  // Move data pointer after options field
   \   0002D3   12....       LCALL     ?Subroutine7 & 0xFFFF
    365                      
    366                      cmd.dstAddr = pInMsg->msg->macDestAddr;  
   \                     ??CrossCallReturnLabel_70:
   \   0002D6   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0002D9   F8           MOV       R0,A
   \   0002DA   A3           INC       DPTR
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   C8           XCH       A,R0
   \   0002DD   2412         ADD       A,#0x12
   \   0002DF   F582         MOV       DPL,A
   \   0002E1   E4           CLR       A
   \   0002E2   38           ADDC      A,R0
   \   0002E3   F583         MOV       DPH,A
   \   0002E5   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0002E8   740D         MOV       A,#0xd
   \   0002EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002ED   12....       LCALL     ?Subroutine32 & 0xFFFF
    367                            
    368                      responseLen = pInMsg->pDataLen - sizeof(cmd.tempMasterTxChannel) 
    369                                             - sizeof(cmd.tempMasterShortAddr) 
    370                                             - sizeof(cmd.options);
   \                     ??CrossCallReturnLabel_33:
   \   0002F0   7404         MOV       A,#0x4
   \   0002F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F5   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0002F8   24FC         ADD       A,#-0x4
   \   0002FA   F8           MOV       R0,A
    371                      cmd.pData = osal_mem_alloc( responseLen );
   \   0002FB   FE           MOV       R6,A
   \   0002FC                ; Setup parameters for call to function osal_mem_alloc
   \   0002FC   FA           MOV       R2,A
   \   0002FD   7B00         MOV       R3,#0x0
   \   0002FF   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000302   7413         MOV       A,#0x13
   \   000304   12....       LCALL     ?XSTACK_DISP0_8
   \   000307   12....       LCALL     ?Subroutine19 & 0xFFFF
    372                      
    373                      osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
   \                     ??CrossCallReturnLabel_16:
   \   00030A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00030D   EE           MOV       A,R6
   \   00030E   FC           MOV       R4,A
   \   00030F   7D00         MOV       R5,#0x0
   \   000311   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000314   12....       LCALL     ?DEALLOC_XSTACK8
    374          
    375                      pCBs->pfnGpResponseCommand( &cmd ); 
   \   000317                ; Setup parameters for indirect call
   \   000317   740D         MOV       A,#0xd
   \   000319   12....       LCALL     ?XSTACK_DISP101_8
   \   00031C   7402         MOV       A,#0x2
   \   00031E   12....       LCALL     ?XSTACK_DISP0_8
   \   000321   12....       LCALL     ?Subroutine22 & 0xFFFF
    376                    }
    377                  break;
    378              }
    379            }
   \                     ??CrossCallReturnLabel_20:
   \   000324   F583         MOV       DPH,A
   \                     ??zclGp_ProcessInProxyBasic_8:
   \   000326   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000329   12....       LCALL     ?CALL_IND
    380          
    381            return ( ZSuccess );
   \                     ??zclGp_ProcessInProxyBasic_1:
   \   00032C   7900         MOV       R1,#0x0
   \                     ??zclGp_ProcessInProxyBasic_7:
   \   00032E   741C         MOV       A,#0x1c
   \   000330                REQUIRE ?Subroutine2
   \   000330                ; // Fall through to label ?Subroutine2
    382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   C8           XCH       A,R0
   \   000004   2406         ADD       A,#0x6
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V1,A
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   78..         MOV       R0,#?V0
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   90....       MOV       DPTR,#zcl_InSeqNum
   \   000008   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00000B   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00000E   2406         ADD       A,#0x6
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   3400         ADDC      A,#0x0
   \   000015   F9           MOV       R1,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                REQUIRE ??Subroutine53_0
   \   000005                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V5,A
   \   00000D   75..00       MOV       ?V6,#0x0
   \   000010   78..         MOV       R0,#?V4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2401         ADD       A,#0x1
   \   000009                REQUIRE ??Subroutine54_0
   \   000009                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   85..82       MOV       DPL,?V0
   \   000009   85..83       MOV       DPH,?V1
   \   00000C   E8           MOV       A,R0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine57_0
   \   000004                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine59_0
   \   000006                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine61_0
   \   000006                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET
    383          
    384          /*********************************************************************
    385           * @fn      zclGp_SendGpNotificationCommand
    386           *
    387           * @brief   Send the Green Power Notification Command to a device
    388           *
    389           * @param   pCmd - Pointer to GP Notification Struct
    390           *          secNum - Sequence number given by the GPDF  
    391           *
    392           * @return  ZStatus_t
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          ZStatus_t zclGp_SendGpNotificationCommand( gpNotificationCmd_t *pCmd, uint8 secNum )
   \                     zclGp_SendGpNotificationCommand:
    395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7405         MOV       A,#0x5
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   8A..         MOV       ?V6,R2
   \   000013   8B..         MOV       ?V7,R3
    396            uint8 *buf = NULL;
    397            uint8 *pBuf = NULL;
    398            uint8 *pGpdId = NULL;
   \   000015   7403         MOV       A,#0x3
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    399            uint8 appId;
    400            ZStatus_t status;
    401            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   00001E   75..0B       MOV       ?V4,#0xb
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F8           MOV       R0,A
   \   000029   7005         JNZ       ??zclGp_SendGpNotificationCommand_0
    402            gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    403            
    404            // Check some stuff to calculate the packet len
    405            // If Application Id bitfield is 0b000
    406            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    407            {
    408              len += 4;  // GPD ID
   \   00002B   75..0F       MOV       ?V4,#0xf
   \   00002E   8008         SJMP      ??zclGp_SendGpNotificationCommand_1
    409            }
    410            // If Application Id bitfield is 0b010
    411            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_0:
   \   000030   7402         MOV       A,#0x2
   \   000032   68           XRL       A,R0
   \   000033   7003         JNZ       ??zclGp_SendGpNotificationCommand_1
    412            {
    413              len += 9;  // IEEE addr + EP
   \   000035   75..14       MOV       ?V4,#0x14
    414            }
   \                     ??zclGp_SendGpNotificationCommand_1:
   \   000038   12....       LCALL     ?Subroutine25 & 0xFFFF
    415            
    416            // Length of the command payload
    417            len += pCmd->payloadLen;
    418          
    419            buf = zcl_mem_alloc( len );
   \                     ??CrossCallReturnLabel_21:
   \   00003B                ; Setup parameters for call to function osal_mem_alloc
   \   00003B   AA..         MOV       R2,?V4
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    420            if ( buf )
   \                     ??CrossCallReturnLabel_131:
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??zclGp_SendGpNotificationCommand_2 & 0xFFFF
    421            {
    422              pBuf = buf;
    423              
    424              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000056                ; Setup parameters for call to function osal_memcpy
   \   000056   85....       MOV       ?V0,?V6
   \   000059   85....       MOV       ?V1,?V7
   \   00005C   75..00       MOV       ?V2,#0x0
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C02         MOV       R4,#0x2
   \   000066   7D00         MOV       R5,#0x0
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
    425              pBuf += sizeof ( uint16 );
   \   000073   7401         MOV       A,#0x1
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00007B   702E         JNZ       ??zclGp_SendGpNotificationCommand_3
   \   00007D                ; Setup parameters for call to function osal_memcpy
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A982         MOV       R1,DPL
   \   000081   AA83         MOV       R2,DPH
   \   000083   89..         MOV       ?V0,R1
   \   000085   8A..         MOV       ?V1,R2
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008C   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
    426              
    427              // If Application Id bitfield is 0b000
    428              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    429              {
    430                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
    431                pGpdId = ( uint8* )&pCmd->gpdId;
   \   000092   E5..         MOV       A,?V6
   \   000094   2402         ADD       A,#0x2
   \   000096   F8           MOV       R0,A
   \   000097   E4           CLR       A
   \   000098   35..         ADDC      A,?V7
   \   00009A   F9           MOV       R1,A
   \   00009B   7403         MOV       A,#0x3
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL     ?Subroutine32 & 0xFFFF
    432                appId = GP_OPT_APP_ID_GPD;
   \                     ??CrossCallReturnLabel_34:
   \   0000A3   75..00       MOV       ?V3,#0x0
    433                pBuf += sizeof ( uint32 );
   \   0000A6   EE           MOV       A,R6
   \   0000A7   2404         ADD       A,#0x4
   \   0000A9   802A         SJMP      ??CrossCallReturnLabel_11
    434              }
    435              // If Application Id bitfield is 0b010
    436              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_3:
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   68           XRL       A,R0
   \   0000AE   7029         JNZ       ??zclGp_SendGpNotificationCommand_4
   \   0000B0                ; Setup parameters for call to function osal_memcpy
   \   0000B0   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B6   7C08         MOV       R4,#0x8
   \   0000B8   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
    437              {
    438                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
    439                pGpdId = pCmd->gpdIEEE;
   \   0000BE   E5..         MOV       A,?V6
   \   0000C0   2406         ADD       A,#0x6
   \   0000C2   F8           MOV       R0,A
   \   0000C3   E4           CLR       A
   \   0000C4   35..         ADDC      A,?V7
   \   0000C6   F9           MOV       R1,A
   \   0000C7   7403         MOV       A,#0x3
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ?Subroutine32 & 0xFFFF
    440                appId = GP_OPT_APP_ID_IEEE;
   \                     ??CrossCallReturnLabel_35:
   \   0000CF   75..02       MOV       ?V3,#0x2
    441                pBuf += Z_EXTADDR_LEN;
    442                *pBuf++ = pCmd->ep;
   \   0000D2   12....       LCALL     ?Subroutine17 & 0xFFFF
    443              }
   \                     ??CrossCallReturnLabel_11:
   \   0000D5   FE           MOV       R6,A
   \   0000D6   5001         JNC       ??zclGp_SendGpNotificationCommand_4
   \   0000D8   0F           INC       R7
    444              
    445              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpNotificationCommand_4:
   \   0000D9                ; Setup parameters for call to function osal_memcpy
   \   0000D9   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DF   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000E2   12....       LCALL     ?DEALLOC_XSTACK8
    446              pBuf += sizeof ( uint32 );
    447          
    448              *pBuf++ = pCmd->cmdId;
   \   0000E5   12....       LCALL     ?Subroutine9 & 0xFFFF
    449              
    450              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_3:
   \   0000E8   5001         JNC       ??zclGp_SendGpNotificationCommand_5
   \   0000EA   0F           INC       R7
    451              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpNotificationCommand_5:
   \   0000EB   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000EE   6015         JZ        ??CrossCallReturnLabel_25
    452              {
    453                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   0000F0                ; Setup parameters for call to function osal_memcpy
   \   0000F0   E5..         MOV       A,?V6
   \   0000F2   2415         ADD       A,#0x15
   \   0000F4   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FA   E9           MOV       A,R1
   \   0000FB   FC           MOV       R4,A
   \   0000FC   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
    454                pBuf += pCmd->payloadLen;
   \   000102   12....       LCALL     ?Subroutine29 & 0xFFFF
    455              }
    456              
    457              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_25:
   \   000105                ; Setup parameters for call to function osal_memcpy
   \   000105   E5..         MOV       A,?V6
   \   000107   2417         ADD       A,#0x17
   \   000109   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010F   7C02         MOV       R4,#0x2
   \   000111   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
    458              pBuf += sizeof ( uint16 );
    459              
    460              *pBuf++ = pCmd->gppGpdLink;
   \   000117   12....       LCALL     ?Subroutine30 & 0xFFFF
    461              
    462              pCmdPayloadMsgCurr = gp_AddCmdPayloadMsgNode ( &pCmdPayloadMsgHead, buf, len );
   \                     ??CrossCallReturnLabel_27:
   \   00011A                ; Setup parameters for call to function gp_AddCmdPayloadMsgNode
   \   00011A   A9..         MOV       R1,?V4
   \   00011C   7401         MOV       A,#0x1
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000124   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000126   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000128   12....       LCALL     `??gp_AddCmdPayloadMsgNode::?relay`; Banked call to: gp_AddCmdPayloadMsgNode
   \   00012B   8A..         MOV       ?V0,R2
   \   00012D   8B..         MOV       ?V1,R3
   \   00012F   AC..         MOV       R4,?V0
   \   000131   AD..         MOV       R5,?V1
    463              
    464              pCmdPayloadMsgCurr->secNum = secNum;
   \   000133   7405         MOV       A,#0x5
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00013B   F0           MOVX      @DPTR,A
    465                    
    466              if ( pCmdPayloadMsgCurr != NULL )
   \   00013C   EA           MOV       A,R2
   \   00013D   4D           ORL       A,R5
   \   00013E   602F         JZ        ??zclGp_SendGpNotificationCommand_6
    467              {
    468                gp_addPairedSinksToMsgQueue( appId, pGpdId, pCmdPayloadMsgCurr );
   \   000140                ; Setup parameters for call to function gp_addPairedSinksToMsgQueue
   \   000140   7403         MOV       A,#0x3
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000148   A9..         MOV       R1,?V3
   \   00014A   12....       LCALL     `??gp_addPairedSinksToMsgQueue::?relay`; Banked call to: gp_addPairedSinksToMsgQueue
    469                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   00014D                ; Setup parameters for call to function osal_start_timerEx
   \   00014D   90....       MOV       DPTR,#__Constant_32
   \   000150   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000153   7A20         MOV       R2,#0x20
   \   000155   7B00         MOV       R3,#0x0
   \   000157   90....       MOV       DPTR,#zcl_TaskID
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F9           MOV       R1,A
   \   00015C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00015F   7404         MOV       A,#0x4
   \   000161   12....       LCALL     ?DEALLOC_XSTACK8
   \   000164   8009         SJMP      ??zclGp_SendGpNotificationCommand_6
    470              }
    471          
    472            }
    473            else
    474              status = ZMemError;
   \                     ??zclGp_SendGpNotificationCommand_2:
   \   000166   85..82       MOV       DPL,?XSP + 0
   \   000169   85..83       MOV       DPH,?XSP + 1
   \   00016C   7410         MOV       A,#0x10
   \   00016E   F0           MOVX      @DPTR,A
    475          
    476            return ( status );
   \                     ??zclGp_SendGpNotificationCommand_6:
   \   00016F   85..82       MOV       DPL,?XSP + 0
   \   000172   85..83       MOV       DPH,?XSP + 1
   \   000175   E0           MOVX      A,@DPTR
   \   000176   F9           MOV       R1,A
   \   000177   7406         MOV       A,#0x6
   \   000179                REQUIRE ?Subroutine3
   \   000179                ; // Fall through to label ?Subroutine3
    477          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E5..         MOV       A,?V6
   \   000002   240F         ADD       A,#0xf
   \   000004                REQUIRE ??Subroutine55_0
   \   000004                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V7
   \   000005   F5..         MOV       ?V1,A
   \   000007   78..         MOV       R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV       A,?V6
   \   000002   2406         ADD       A,#0x6
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F5..         MOV       ?V1,A
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E5..         MOV       A,?V6
   \   000002   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E5..         MOV       A,?V6
   \   000002   2419         ADD       A,#0x19
   \   000004   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E5..         MOV       A,?V6
   \   000002   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000005   EE           MOV       A,R6
   \   000006   28           ADD       A,R0
   \   000007   FE           MOV       R6,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   FF           MOV       R7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000006   7403         MOV       A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000004   E5..         MOV       A,?V4
   \   000006   28           ADD       A,R0
   \   000007   F5..         MOV       ?V4,A
   \   000009   E4           CLR       A
   \   00000A   3400         ADDC      A,#0x0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   F8           MOV       R0,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E5..         MOV       A,?V6
   \   000002   240E         ADD       A,#0xe
   \   000004   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   EE           MOV       A,R6
   \   00000C   2409         ADD       A,#0x9
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FF           MOV       R7,A
   \   000009   85..82       MOV       DPL,?V6
   \   00000C   85..83       MOV       DPH,?V7
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   5407         ANL       A,#0x7
   \   000012   F8           MOV       R0,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E5..         MOV       A,?V6
   \   000002   2413         ADD       A,#0x13
   \   000004   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   E5..         MOV       A,?V6
   \   00000C   2414         ADD       A,#0x14
   \   00000E   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EE           MOV       A,R6
   \   000013   2406         ADD       A,#0x6
   \   000015   FE           MOV       R6,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V7
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   7C04         MOV       R4,#0x4
   \   000002                REQUIRE ??Subroutine70_0
   \   000002                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   EE           MOV       A,R6
   \   000003   FA           MOV       R2,A
   \   000004   EF           MOV       A,R7
   \   000005                REQUIRE ??Subroutine71_0
   \   000005                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine72_0
   \   000001                ; // Fall through to label ??Subroutine72_0
    478            
    479          /*********************************************************************
    480           * @fn      zclGp_SendGpCommissioningNotificationCommand
    481           *
    482           * @brief   Send the Green Power Commissioning Notification Command to a device
    483           *
    484           * @param   pCmd - Pointer to GP Commissioning Notification Struct
    485           *
    486           * @return  ZStatus_t
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          ZStatus_t zclGp_SendGpCommissioningNotificationCommand( gpCommissioningNotificationCmd_t *pCmd )
   \                     zclGp_SendGpCommissioningNotificationCommand:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
    490            uint8 *buf = NULL;
    491            uint8 *pBuf = NULL;
    492            ZStatus_t status;
    493            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   00000E   75..0B       MOV       ?V4,#0xb
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   F8           MOV       R0,A
   \   000019   7005         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_0
    494            
    495            // Check some stuff to calculate the packet len
    496            // If Application Id bitfield is 0b000
    497            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    498            {
    499              len += 4;  // GPD ID
   \   00001B   75..0F       MOV       ?V4,#0xf
   \   00001E   8008         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_1
    500            }
    501            // If Application Id bitfield is 0b010
    502            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_0:
   \   000020   7402         MOV       A,#0x2
   \   000022   68           XRL       A,R0
   \   000023   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_1
    503            {
    504              len += 9;  // IEEE addr + EP
   \   000025   75..14       MOV       ?V4,#0x14
    505            }
   \                     ??zclGp_SendGpCommissioningNotificationCommand_1:
   \   000028   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00002B   F5..         MOV       ?V5,A
    506            
    507            // Length of the command payload
    508            len += pCmd->payloadLen;
    509          
    510            buf = zcl_mem_alloc( len );
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   AA..         MOV       R2,?V4
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   12....       LCALL     ?Subroutine34 & 0xFFFF
    511            if ( buf )
   \                     ??CrossCallReturnLabel_44:
   \   00003C   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??zclGp_SendGpCommissioningNotificationCommand_2 & 0xFFFF
    512            {
    513              pBuf = buf;
    514              
    515              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000044                ; Setup parameters for call to function osal_memcpy
   \   000044   85....       MOV       ?V0,?V6
   \   000047   85....       MOV       ?V1,?V7
   \   00004A   75..00       MOV       ?V2,#0x0
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   7C02         MOV       R4,#0x2
   \   000054   7D00         MOV       R5,#0x0
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
    516              pBuf += sizeof ( uint16 );
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00006A   701A         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_3
    517              
    518              // If Application Id bitfield is 0b000
    519              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    520              {
    521                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
   \   00006C                ; Setup parameters for call to function osal_memcpy
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A982         MOV       R1,DPL
   \   000070   AA83         MOV       R2,DPH
   \   000072   89..         MOV       ?V0,R1
   \   000074   8A..         MOV       ?V1,R2
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007B   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
    522                pBuf += sizeof ( uint32 );
   \   000081   EE           MOV       A,R6
   \   000082   2404         ADD       A,#0x4
   \   000084   8016         SJMP      ??CrossCallReturnLabel_12
    523              }
    524              // If Application Id bitfield is 0b010
    525              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_3:
   \   000086   7402         MOV       A,#0x2
   \   000088   68           XRL       A,R0
   \   000089   7015         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_4
    526              {
    527                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000091   7C08         MOV       R4,#0x8
   \   000093   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
    528                pBuf += Z_EXTADDR_LEN;
    529                *pBuf++ = pCmd->ep;
   \   000099   12....       LCALL     ?Subroutine17 & 0xFFFF
    530              }
   \                     ??CrossCallReturnLabel_12:
   \   00009C   FE           MOV       R6,A
   \   00009D   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_4
   \   00009F   0F           INC       R7
    531              
    532              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_4:
   \   0000A0                ; Setup parameters for call to function osal_memcpy
   \   0000A0   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A6   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
    533              pBuf += sizeof ( uint32 );
    534          
    535              *pBuf++ = pCmd->cmdId;
   \   0000AC   12....       LCALL     ?Subroutine9 & 0xFFFF
    536              
    537              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_4:
   \   0000AF   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_5
   \   0000B1   0F           INC       R7
    538              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_5:
   \   0000B2   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000B5   6015         JZ        ??CrossCallReturnLabel_26
    539              {
    540                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   0000B7                ; Setup parameters for call to function osal_memcpy
   \   0000B7   E5..         MOV       A,?V6
   \   0000B9   2415         ADD       A,#0x15
   \   0000BB   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C1   E9           MOV       A,R1
   \   0000C2   FC           MOV       R4,A
   \   0000C3   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000C6   12....       LCALL     ?DEALLOC_XSTACK8
    541                pBuf += pCmd->payloadLen;
   \   0000C9   12....       LCALL     ?Subroutine29 & 0xFFFF
    542              }
    543              
    544              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_26:
   \   0000CC                ; Setup parameters for call to function osal_memcpy
   \   0000CC   E5..         MOV       A,?V6
   \   0000CE   2417         ADD       A,#0x17
   \   0000D0   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D6   7C02         MOV       R4,#0x2
   \   0000D8   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
    545              pBuf += sizeof ( uint16 );
    546              
    547              *pBuf++ = pCmd->gppGpdLink;
   \   0000DE   12....       LCALL     ?Subroutine30 & 0xFFFF
    548              
    549              afAddrType_t addr;
    550              addr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??CrossCallReturnLabel_28:
   \   0000E1   740B         MOV       A,#0xb
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL     ?Subroutine14 & 0xFFFF
    551              addr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_77:
   \   0000E9   740C         MOV       A,#0xc
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL     ?Subroutine32 & 0xFFFF
    552              addr.addr.shortAddr = gp_commissionerAddress; 
   \                     ??CrossCallReturnLabel_36:
   \   0000F1   90....       MOV       DPTR,#gp_commissionerAddress
   \   0000F4   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000F7   7402         MOV       A,#0x2
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL     ?Subroutine32 & 0xFFFF
    553                  
    554              if ( gp_commissionerAddress == 0xFFFF )
   \                     ??CrossCallReturnLabel_37:
   \   0000FF   90....       MOV       DPTR,#gp_commissionerAddress
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F4           CPL       A
   \   000104   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_6
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   F4           CPL       A
   \                     ??zclGp_SendGpCommissioningNotificationCommand_6:
   \   000109   7009         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_7
    555              {
    556                addr.addrMode = afAddrBroadcast;
   \   00010B   740A         MOV       A,#0xa
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   740F         MOV       A,#0xf
   \   000112   8007         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_8
    557              }
    558              else
    559              {
    560                addr.addrMode = afAddr16Bit;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_7:
   \   000114   740A         MOV       A,#0xa
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   7402         MOV       A,#0x2
   \                     ??zclGp_SendGpCommissioningNotificationCommand_8:
   \   00011B   F0           MOVX      @DPTR,A
    561              }
    562                  
    563              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &addr, ZCL_CLUSTER_ID_GREEN_POWER,
    564                                COMMAND_GP_COMMISSIONING_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    565                                TRUE, 0,  bdb_getZCLFrameCounter(), len, buf ); 
   \   00011C                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   00011C   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   00011F   E9           MOV       A,R1
   \   000120   F9           MOV       R1,A
   \   000121                ; Setup parameters for call to function zcl_SendCommand
   \   000121   85..82       MOV       DPL,?XSP + 0
   \   000124   85..83       MOV       DPH,?XSP + 1
   \   000127   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00012A   78..         MOV       R0,#?V4
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012F   E9           MOV       A,R1
   \   000130   F5..         MOV       ?V0,A
   \   000132   78..         MOV       R0,#?V0
   \   000134   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000137   E4           CLR       A
   \   000138   F5..         MOV       ?V0,A
   \   00013A   F5..         MOV       ?V1,A
   \   00013C   78..         MOV       R0,#?V0
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000141   75..01       MOV       ?V0,#0x1
   \   000144   78..         MOV       R0,#?V0
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000149   75..00       MOV       ?V0,#0x0
   \   00014C   78..         MOV       R0,#?V0
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000151   75..01       MOV       ?V0,#0x1
   \   000154   78..         MOV       R0,#?V0
   \   000156   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000159   75..04       MOV       ?V0,#0x4
   \   00015C   78..         MOV       R0,#?V0
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000161   7C21         MOV       R4,#0x21
   \   000163   7D00         MOV       R5,#0x0
   \   000165   740D         MOV       A,#0xd
   \   000167   12....       LCALL     ?XSTACK_DISP101_8
   \   00016A   79F2         MOV       R1,#-0xe
   \   00016C   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00016F   740B         MOV       A,#0xb
   \   000171   12....       LCALL     ?DEALLOC_XSTACK8
    566                
    567              zcl_mem_free( buf );
   \   000174                ; Setup parameters for call to function osal_mem_free
   \   000174   85..82       MOV       DPL,?XSP + 0
   \   000177   85..83       MOV       DPH,?XSP + 1
   \   00017A   12....       LCALL     ??Subroutine69_0 & 0xFFFF
    568            }
   \                     ??CrossCallReturnLabel_163:
   \   00017D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000180   8003         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_9
    569            else
    570              status = ZMemError;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_2:
   \   000182   75..10       MOV       ?V3,#0x10
    571          
    572            return ( status );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_9:
   \   000185   A9..         MOV       R1,?V3
   \   000187   740E         MOV       A,#0xe
   \   000189   02....       LJMP      ?Subroutine3 & 0xFFFF
    573          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   74F2         MOV       A,#-0xe
   \   000002   F0           MOVX      @DPTR,A
   \   000003   90....       MOV       DPTR,#_NIB + 33
   \   000006                REQUIRE ??Subroutine56_0
   \   000006                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000007   22           RET
    574          /*********************************************************************
    575           * @fn      zclGp_SendGpProxyTableResponse
    576           *
    577           * @brief   Send the Green Power Proxy Table Response to a device
    578           *
    579           * @param   dstAddr - where to send the request
    580           * @param   groupID - pointer to the group structure
    581           * @param   groupName - pointer to Group Name.  This is a Zigbee
    582           *          string data type, so the first byte is the length of the
    583           *          name (in bytes), then the name.
    584           *
    585           * @return  ZStatus_t
    586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          ZStatus_t zclGp_SendGpProxyTableResponse( afAddrType_t *dstAddr, zclGpProxyTableResponse_t *rsp, 
   \                     zclGp_SendGpProxyTableResponse:
    588                                                    uint8 seqNum )
    589          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7406         MOV       A,#0x6
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   \   000017   89..         MOV       ?V7,R1
    590            uint8 *buf = NULL;
    591            uint8 *pBuf = NULL;
    592            uint8 *pEntry = NULL;
   \   000019   75..00       MOV       ?V0,#0x0
   \   00001C   75..00       MOV       ?V1,#0x0
    593            
    594            ZStatus_t status;
    595            uint16 entryLen = 0;
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    596            uint16 len;
    597            
    598            if ( rsp->proxyTableEntry != NULL )
   \                     ??CrossCallReturnLabel_86:
   \   00002A   2404         ADD       A,#0x4
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   3400         ADDC      A,#0x0
   \   000031   F9           MOV       R1,A
   \   000032   7404         MOV       A,#0x4
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000042   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000045   6029         JZ        ??zclGp_SendGpProxyTableResponse_0
    599            {
    600              pEntry = rsp->proxyTableEntry;
   \   000047   88..         MOV       ?V0,R0
   \   000049   89..         MOV       ?V1,R1
    601              zcl_memcpy( &entryLen, pEntry, sizeof ( uint16 ) );
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   88..         MOV       ?V4,R0
   \   00004D   89..         MOV       ?V5,R1
   \   00004F   75..00       MOV       ?V6,#0x0
   \   000052   78..         MOV       R0,#?V4
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000057   7C02         MOV       R4,#0x2
   \   000059   7D00         MOV       R5,#0x0
   \   00005B   7405         MOV       A,#0x5
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
    602              pEntry += sizeof ( uint16 );
   \   000066   E5..         MOV       A,?V0
   \   000068   2402         ADD       A,#0x2
   \   00006A   F5..         MOV       ?V0,A
   \   00006C   5002         JNC       ??zclGp_SendGpProxyTableResponse_0
   \   00006E   05..         INC       ?V1
    603            }
    604            
    605            len = entryLen + 4;
   \                     ??zclGp_SendGpProxyTableResponse_0:
   \   000070   7402         MOV       A,#0x2
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   2404         ADD       A,#0x4
   \   000078   FE           MOV       R6,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   3400         ADDC      A,#0x0
   \   00007D   FF           MOV       R7,A
    606          
    607            buf = zcl_mem_alloc( len );
   \   00007E                ; Setup parameters for call to function osal_mem_alloc
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   FB           MOV       R3,A
   \   000082   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000085   8A..         MOV       ?V4,R2
   \   000087   8B..         MOV       ?V5,R3
    608            if ( buf )
   \   000089   EA           MOV       A,R2
   \   00008A   4B           ORL       A,R3
   \   00008B   7003         JNZ       $+5
   \   00008D   02....       LJMP      ??zclGp_SendGpProxyTableResponse_1 & 0xFFFF
    609            {
    610              pBuf = buf;
    611              *pBuf++ = rsp->status;
   \   000090   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000093   8A82         MOV       DPL,R2
   \   000095   8B83         MOV       DPH,R3
   \   000097   F0           MOVX      @DPTR,A
    612              *pBuf++ = rsp->tableEntriesTotal;
   \   000098   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00009B   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00009E   12....       LCALL     ?Subroutine23 & 0xFFFF
    613              *pBuf++ = rsp->startIndex;
   \                     ??CrossCallReturnLabel_105:
   \   0000A1   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000A4   A3           INC       DPTR
   \   0000A5   12....       LCALL     ?Subroutine23 & 0xFFFF
    614              *pBuf++ = rsp->entriesCount;
   \                     ??CrossCallReturnLabel_106:
   \   0000A8   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   F0           MOVX      @DPTR,A
    615              if ( rsp->proxyTableEntry != NULL )
   \   0000AF   7404         MOV       A,#0x4
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000B7   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000BA   601D         JZ        ??zclGp_SendGpProxyTableResponse_2
    616              {
    617                zcl_memcpy( pBuf, pEntry, entryLen );
   \   0000BC                ; Setup parameters for call to function osal_memcpy
   \   0000BC   75..00       MOV       ?V2,#0x0
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C4   7405         MOV       A,#0x5
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ??Subroutine63_0 & 0xFFFF
    618              }
   \                     ??CrossCallReturnLabel_124:
   \   0000CC   EA           MOV       A,R2
   \   0000CD   2404         ADD       A,#0x4
   \   0000CF   FA           MOV       R2,A
   \   0000D0   E4           CLR       A
   \   0000D1   35..         ADDC      A,?V5
   \   0000D3   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
    619          
    620              status = zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, dstAddr, ZCL_CLUSTER_ID_GREEN_POWER,
    621                                        COMMAND_GP_PROXY_TABLE_RESPONSE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    622                                        TRUE, 0, seqNum, len, buf );
   \                     ??zclGp_SendGpProxyTableResponse_2:
   \   0000D9                ; Setup parameters for call to function zcl_SendCommand
   \   0000D9   78..         MOV       R0,#?V4
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   8E..         MOV       ?V0,R6
   \   0000E0   8F..         MOV       ?V1,R7
   \   0000E2   78..         MOV       R0,#?V0
   \   0000E4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E7   E5..         MOV       A,?V7
   \   0000E9   F5..         MOV       ?V0,A
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F0   E4           CLR       A
   \   0000F1   F5..         MOV       ?V0,A
   \   0000F3   F5..         MOV       ?V1,A
   \   0000F5   78..         MOV       R0,#?V0
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FA   75..01       MOV       ?V0,#0x1
   \   0000FD   78..         MOV       R0,#?V0
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000102   75..00       MOV       ?V0,#0x0
   \   000105   78..         MOV       R0,#?V0
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010A   75..01       MOV       ?V0,#0x1
   \   00010D   78..         MOV       R0,#?V0
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   75..0B       MOV       ?V0,#0xb
   \   000115   78..         MOV       R0,#?V0
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011A   7C21         MOV       R4,#0x21
   \   00011C   7D00         MOV       R5,#0x0
   \   00011E   7411         MOV       A,#0x11
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000126   79F2         MOV       R1,#-0xe
   \   000128   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00012B   740B         MOV       A,#0xb
   \   00012D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000130   E9           MOV       A,R1
   \   000131   FE           MOV       R6,A
    623              zcl_mem_free( buf );
   \   000132                ; Setup parameters for call to function osal_mem_free
   \   000132   AA..         MOV       R2,?V4
   \   000134   AB..         MOV       R3,?V5
   \   000136   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000139   8002         SJMP      ??zclGp_SendGpProxyTableResponse_3
    624            }
    625            else
    626              status = ZMemError;
   \                     ??zclGp_SendGpProxyTableResponse_1:
   \   00013B   7E10         MOV       R6,#0x10
    627          
    628            return ( status );
   \                     ??zclGp_SendGpProxyTableResponse_3:
   \   00013D   EE           MOV       A,R6
   \   00013E   F9           MOV       R1,A
   \   00013F   7408         MOV       A,#0x8
   \   000141   02....       LJMP      ?Subroutine3 & 0xFFFF
    629          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine58_0
   \   000001                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000004                REQUIRE ??Subroutine60_0
   \   000004                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    630          
    631           /*********************************************************************
    632           * @fn          gp_addPairedSinksToMsgQueue
    633           *
    634           * @brief       General function to add Notification Msg to Queue for all 
    635           *              Sinks paired to the given GPD
    636           *
    637           * @param       nvIndex - NV Id of proxy table
    638           *              pEntry  - pointer to PROXY_TBL_ENTRY_LEN array
    639           *
    640           * @return      
    641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg )
   \                     gp_addPairedSinksToMsgQueue:
    643          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 89
   \   000005   74A7         MOV       A,#-0x59
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V3,R1
    644            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000017   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00001A   744F         MOV       A,#0x4f
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   740A         MOV       A,#0xa
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    645            uint8 status;
    646            uint8 i;
    647            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000024   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   000027   740E         MOV       A,#0xe
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   7441         MOV       A,#0x41
   \   00002E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    648            afAddrType_t dstAddr = {0};
   \   000031   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   740C         MOV       A,#0xc
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    649            gpNotificationMsg_t *pNotificationMsgCurr = NULL;
    650          
    651              
    652            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00003E   7E00         MOV       R6,#0x0
   \   000040   8A..         MOV       ?V0,R2
   \   000042   8B..         MOV       ?V1,R3
   \   000044   F5..         MOV       ?V2,A
    653            {
    654              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
   \                     ??gp_addPairedSinksToMsgQueue_0:
   \   000046                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000046   740E         MOV       A,#0xe
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   EE           MOV       A,R6
   \   00004C   2410         ADD       A,#0x10
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   3403         ADDC      A,#0x3
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000056   E9           MOV       A,R1
   \   000057   FF           MOV       R7,A
    655          
    656              if ( status == NV_OPER_FAILED )
   \   000058   740A         MOV       A,#0xa
   \   00005A   6F           XRL       A,R7
   \   00005B   6074         JZ        ??gp_addPairedSinksToMsgQueue_1
    657              {
    658                break;
    659              }
    660              
    661              // if the entry is empty
    662              if ( status == NV_INVALID_DATA )
   \   00005D   740D         MOV       A,#0xd
   \   00005F   6F           XRL       A,R7
   \   000060   7009         JNZ       ??gp_addPairedSinksToMsgQueue_2
    663              {
    664                if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \   000062   EE           MOV       A,R6
   \   000063   C3           CLR       C
   \   000064   9405         SUBB      A,#0x5
   \   000066   405F         JC        ??gp_addPairedSinksToMsgQueue_3
   \   000068   02....       LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
    665                {
    666                  return status;
    667                }
    668                continue;
    669              }
    670              
    671              if ( PROXY_TBL_COMP_APPLICTION_ID( appId, currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_addPairedSinksToMsgQueue_2:
   \   00006B   7407         MOV       A,#0x7
   \   00006D   55..         ANL       A,?V3
   \   00006F   F8           MOV       R0,A
   \   000070   740E         MOV       A,#0xe
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   5407         ANL       A,#0x7
   \   000078   68           XRL       A,R0
   \   000079   704C         JNZ       ??gp_addPairedSinksToMsgQueue_3
    672              {
    673                if ( appId == GP_OPT_APP_ID_GPD )
   \   00007B   E5..         MOV       A,?V3
   \   00007D   7022         JNZ       ??gp_addPairedSinksToMsgQueue_5
    674                {
    675                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
   \   00007F                ; Setup parameters for call to function osal_memcmp
   \   00007F   7414         MOV       A,#0x14
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   A982         MOV       R1,DPL
   \   000086   AA83         MOV       R2,DPH
   \   000088   89..         MOV       ?V4,R1
   \   00008A   8A..         MOV       ?V5,R2
   \   00008C   75..00       MOV       ?V6,#0x0
   \   00008F   78..         MOV       R0,#?V4
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000094   7C04         MOV       R4,#0x4
   \   000096   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    676                  {
    677                    // Entry found
    678                    break;
    679                  }
    680                }
   \                     ??CrossCallReturnLabel_121:
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009C   E9           MOV       A,R1
   \   00009D   7032         JNZ       ??gp_addPairedSinksToMsgQueue_1
   \   00009F   8026         SJMP      ??gp_addPairedSinksToMsgQueue_3
    681                else if ( appId == GP_OPT_APP_ID_IEEE )
   \                     ??gp_addPairedSinksToMsgQueue_5:
   \   0000A1   7402         MOV       A,#0x2
   \   0000A3   65..         XRL       A,?V3
   \   0000A5   7020         JNZ       ??gp_addPairedSinksToMsgQueue_3
    682                {
    683                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
   \   0000A7                ; Setup parameters for call to function osal_memcmp
   \   0000A7   7410         MOV       A,#0x10
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   A982         MOV       R1,DPL
   \   0000AE   AA83         MOV       R2,DPH
   \   0000B0   89..         MOV       ?V4,R1
   \   0000B2   8A..         MOV       ?V5,R2
   \   0000B4   75..00       MOV       ?V6,#0x0
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BC   7C08         MOV       R4,#0x8
   \   0000BE   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    684                  {
    685                    // Entry found
    686                    break;
    687                  }
    688                }
    689              }
    690            }
   \                     ??CrossCallReturnLabel_122:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV       A,R1
   \   0000C5   700A         JNZ       ??gp_addPairedSinksToMsgQueue_1
   \                     ??gp_addPairedSinksToMsgQueue_3:
   \   0000C7   0E           INC       R6
   \   0000C8   EE           MOV       A,R6
   \   0000C9   C3           CLR       C
   \   0000CA   9406         SUBB      A,#0x6
   \   0000CC   5003         JNC       $+5
   \   0000CE   02....       LJMP      ??gp_addPairedSinksToMsgQueue_0 & 0xFFFF
    691            
    692            dstAddr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??gp_addPairedSinksToMsgQueue_1:
   \   0000D1   740B         MOV       A,#0xb
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL     ?Subroutine14 & 0xFFFF
    693            dstAddr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_78:
   \   0000D9   740C         MOV       A,#0xc
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL     ?Subroutine32 & 0xFFFF
    694            
    695            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??CrossCallReturnLabel_39:
   \   0000E1   740E         MOV       A,#0xe
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000E9   4003         JC        $+5
   \   0000EB   02....       LJMP      ??gp_addPairedSinksToMsgQueue_6 & 0xFFFF
    696            {
    697              dstAddr.addrMode = afAddr16Bit;
   \   0000EE   740A         MOV       A,#0xa
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   7402         MOV       A,#0x2
   \   0000F5   F0           MOVX      @DPTR,A
    698              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000F6   744F         MOV       A,#0x4f
   \   0000F8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FB   88..         MOV       ?V0,R0
   \   0000FD   89..         MOV       ?V1,R1
   \   0000FF                ; Setup parameters for call to function osal_memcmp
   \   0000FF   7430         MOV       A,#0x30
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   A982         MOV       R1,DPL
   \   000106   AA83         MOV       R2,DPH
   \   000108   89..         MOV       ?V4,R1
   \   00010A   8A..         MOV       ?V5,R2
   \   00010C   75..00       MOV       ?V6,#0x0
   \   00010F   78..         MOV       R0,#?V4
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000114   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000117   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011A   E9           MOV       A,R1
   \   00011B   7047         JNZ       ??gp_addPairedSinksToMsgQueue_7
    699              {
    700                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );
   \   00011D                ; Setup parameters for call to function osal_memcpy
   \   00011D   7438         MOV       A,#0x38
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   A982         MOV       R1,DPL
   \   000124   AA83         MOV       R2,DPH
   \   000126   89..         MOV       ?V4,R1
   \   000128   8A..         MOV       ?V5,R2
   \   00012A   78..         MOV       R0,#?V4
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012F   7C02         MOV       R4,#0x2
   \   000131   7D00         MOV       R5,#0x0
   \   000133   7405         MOV       A,#0x5
   \   000135   12....       LCALL     ?XSTACK_DISP101_8
   \   000138   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
    701                
    702                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   00013E                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   00013E   85..82       MOV       DPL,?XSP + 0
   \   000141   85..83       MOV       DPH,?XSP + 1
   \   000144   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000147   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   000149   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   00014B   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   00014E   8A..         MOV       ?V4,R2
   \   000150   8B..         MOV       ?V5,R3
   \   000152   AC..         MOV       R4,?V4
   \   000154   AD..         MOV       R5,?V5
    703                if ( pNotificationMsgCurr != NULL )
   \   000156   EA           MOV       A,R2
   \   000157   4D           ORL       A,R5
   \   000158   600A         JZ        ??gp_addPairedSinksToMsgQueue_7
    704                {
    705                  pNotificationMsgCurr->addr = dstAddr;
   \   00015A   7402         MOV       A,#0x2
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   740C         MOV       A,#0xc
   \   000161   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    706                }
    707              }
    708              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??gp_addPairedSinksToMsgQueue_7:
   \   000164                ; Setup parameters for call to function osal_memcmp
   \   000164   743A         MOV       A,#0x3a
   \   000166   12....       LCALL     ?XSTACK_DISP0_8
   \   000169   A982         MOV       R1,DPL
   \   00016B   AA83         MOV       R2,DPH
   \   00016D   89..         MOV       ?V4,R1
   \   00016F   8A..         MOV       ?V5,R2
   \   000171   78..         MOV       R0,#?V4
   \   000173   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000176   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000179   12....       LCALL     ?DEALLOC_XSTACK8
   \   00017C   E9           MOV       A,R1
   \   00017D   7030         JNZ       ??gp_addPairedSinksToMsgQueue_6
    709              {
    710                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );   
   \   00017F                ; Setup parameters for call to function osal_memcpy
   \   00017F   7442         MOV       A,#0x42
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   A982         MOV       R1,DPL
   \   000186   AA83         MOV       R2,DPH
   \   000188   89..         MOV       ?V0,R1
   \   00018A   8A..         MOV       ?V1,R2
   \   00018C   78..         MOV       R0,#?V0
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000191   7C02         MOV       R4,#0x2
   \   000193   7D00         MOV       R5,#0x0
   \   000195   7405         MOV       A,#0x5
   \   000197   12....       LCALL     ?XSTACK_DISP101_8
   \   00019A   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00019D   12....       LCALL     ?DEALLOC_XSTACK8
    711                
    712                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   0001A0                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   0001A0   12....       LCALL     ?Subroutine8 & 0xFFFF
    713                if ( pNotificationMsgCurr != NULL )
   \                     ??CrossCallReturnLabel_0:
   \   0001A3   600A         JZ        ??gp_addPairedSinksToMsgQueue_6
    714                {
    715                  pNotificationMsgCurr->addr = dstAddr;
   \   0001A5   7402         MOV       A,#0x2
   \   0001A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AA   740C         MOV       A,#0xc
   \   0001AC   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    716                }
    717              }
    718            }
    719               
    720            if ( PROXY_TBL_GET_DGROUP( currEntry[PROXY_TBL_ENTRY_OPT] ) || PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??gp_addPairedSinksToMsgQueue_6:
   \   0001AF   740E         MOV       A,#0xe
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   A2E7         MOV       C,0xE0 /* A   */.7
   \   0001B7   400A         JC        ??gp_addPairedSinksToMsgQueue_8
   \   0001B9   740F         MOV       A,#0xf
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001C1   507C         JNC       ??gp_addPairedSinksToMsgQueue_4
    721            {
    722              dstAddr.addrMode = afAddrGroup;
   \                     ??gp_addPairedSinksToMsgQueue_8:
   \   0001C3   740A         MOV       A,#0xa
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   7401         MOV       A,#0x1
   \   0001CA   F0           MOVX      @DPTR,A
    723              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   0001CB   7444         MOV       A,#0x44
   \   0001CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001D3   5030         JNC       ??gp_addPairedSinksToMsgQueue_9
    724              {
    725                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) );   
   \   0001D5                ; Setup parameters for call to function osal_memcpy
   \   0001D5   7445         MOV       A,#0x45
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   A982         MOV       R1,DPL
   \   0001DC   AA83         MOV       R2,DPH
   \   0001DE   89..         MOV       ?V0,R1
   \   0001E0   8A..         MOV       ?V1,R2
   \   0001E2   78..         MOV       R0,#?V0
   \   0001E4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E7   7C02         MOV       R4,#0x2
   \   0001E9   7D00         MOV       R5,#0x0
   \   0001EB   7405         MOV       A,#0x5
   \   0001ED   12....       LCALL     ?XSTACK_DISP101_8
   \   0001F0   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0001F3   12....       LCALL     ?DEALLOC_XSTACK8
    726                
    727                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   0001F6                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   0001F6   12....       LCALL     ?Subroutine8 & 0xFFFF
    728                if ( pNotificationMsgCurr != NULL )
   \                     ??CrossCallReturnLabel_1:
   \   0001F9   600A         JZ        ??gp_addPairedSinksToMsgQueue_9
    729                {
    730                  pNotificationMsgCurr->addr = dstAddr;
   \   0001FB   7402         MOV       A,#0x2
   \   0001FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000200   740C         MOV       A,#0xc
   \   000202   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    731                }
    732              }
    733              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??gp_addPairedSinksToMsgQueue_9:
   \   000205   7444         MOV       A,#0x44
   \   000207   12....       LCALL     ?XSTACK_DISP0_8
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00020D   5030         JNC       ??gp_addPairedSinksToMsgQueue_4
    734              {
    735                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) );   
   \   00020F                ; Setup parameters for call to function osal_memcpy
   \   00020F   7449         MOV       A,#0x49
   \   000211   12....       LCALL     ?XSTACK_DISP0_8
   \   000214   A982         MOV       R1,DPL
   \   000216   AA83         MOV       R2,DPH
   \   000218   89..         MOV       ?V0,R1
   \   00021A   8A..         MOV       ?V1,R2
   \   00021C   78..         MOV       R0,#?V0
   \   00021E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000221   7C02         MOV       R4,#0x2
   \   000223   7D00         MOV       R5,#0x0
   \   000225   7405         MOV       A,#0x5
   \   000227   12....       LCALL     ?XSTACK_DISP101_8
   \   00022A   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00022D   12....       LCALL     ?DEALLOC_XSTACK8
    736                
    737                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000230                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000230   12....       LCALL     ?Subroutine8 & 0xFFFF
    738                if ( pNotificationMsgCurr != NULL )
   \                     ??CrossCallReturnLabel_2:
   \   000233   600A         JZ        ??gp_addPairedSinksToMsgQueue_4
    739                {
    740                  pNotificationMsgCurr->addr = dstAddr;
   \   000235   7402         MOV       A,#0x2
   \   000237   12....       LCALL     ?XSTACK_DISP0_8
   \   00023A   740C         MOV       A,#0xc
   \   00023C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    741                }
    742              }
    743            }
    744          
    745            return status;
   \                     ??gp_addPairedSinksToMsgQueue_4:
   \   00023F   EF           MOV       A,R7
   \   000240   F9           MOV       R1,A
   \   000241   7459         MOV       A,#0x59
   \   000243   02....       LJMP      ?Subroutine2 & 0xFFFF
    746          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   7C0A         MOV       R4,#0xa
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   A9..         MOV       R1,?V0
   \   000004   AA..         MOV       R2,?V1
   \   000006   AB..         MOV       R3,?V2
   \   000008   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00000B   7403         MOV       A,#0x3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   00000D   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   00000F   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   AC..         MOV       R4,?V0
   \   000018   AD..         MOV       R5,?V1
   \   00001A   EA           MOV       A,R2
   \   00001B   4D           ORL       A,R5
   \   00001C   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00000000     DB 0, 0, 0, 0
    747          
    748          /*********************************************************************
    749           * @fn      gp_CreateNotificationMsgList
    750           *
    751           * @brief   Create Notification Msg List for paired sinks if empty
    752           *
    753           * @param   pHead - pointer to a pointer of the list head
    754           *
    755           * @return  none
    756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    757          void gp_CreateNotificationMsgList( gpNotificationMsg_t **pHead )
   \                     gp_CreateNotificationMsgList:
    758          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine6 & 0xFFFF
    759          
    760            // Create the list if empty
    761            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_140:
   \   000008   701F         JNZ       ??gp_CreateNotificationMsgList_0
    762            {
    763              *pHead = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A11         MOV       R2,#0x11
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   8B..         MOV       ?V1,R3
   \   000013   A9..         MOV       R1,?V1
   \   000015   12....       LCALL     ?Subroutine35 & 0xFFFF
    764              
    765              if ( *pHead != NULL )
   \                     ??CrossCallReturnLabel_132:
   \   000018   EA           MOV       A,R2
   \   000019   49           ORL       A,R1
   \   00001A   600D         JZ        ??gp_CreateNotificationMsgList_0
    766              {
    767                (*pHead)->pNext = NULL;
   \   00001C   EA           MOV       A,R2
   \   00001D   240F         ADD       A,#0xf
   \   00001F   F582         MOV       DPL,A
   \   000021   E4           CLR       A
   \   000022   39           ADDC      A,R1
   \   000023   F583         MOV       DPH,A
   \   000025   E4           CLR       A
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
    768              }
    769            }
    770            return;
   \                     ??gp_CreateNotificationMsgList_0:
   \   000029                REQUIRE ?Subroutine4
   \   000029                ; // Fall through to label ?Subroutine4
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine64_0
   \   000004                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                REQUIRE ??Subroutine66_0
   \   000004                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   8A82         MOV       DPL,R2
   \   000002                REQUIRE ??Subroutine67_0
   \   000002                ; // Fall through to label ??Subroutine67_0
    772          
    773          /*********************************************************************
    774           * @fn      gp_CreateCmdPayloadMsgList
    775           *
    776           * @brief   Create Notification Msg List for paired sinks if empty
    777           *
    778           * @param   pHead - pointer to a pointer of the list head
    779           *
    780           * @return  none
    781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    782          void gp_CreateCmdPayloadMsgList( gpCmdPayloadMsg_t **pHead )
   \                     gp_CreateCmdPayloadMsgList:
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine6 & 0xFFFF
    784          
    785            // Create the list if empty
    786            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_141:
   \   000008   702A         JNZ       ??gp_CreateCmdPayloadMsgList_0
    787            {
    788              *pHead = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A06         MOV       R2,#0x6
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   8B..         MOV       ?V1,R3
   \   000013   A9..         MOV       R1,?V1
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   EA           MOV       A,R2
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   EB           MOV       A,R3
   \   00001D   12....       LCALL     ?Subroutine33 & 0xFFFF
    789              ( ( gpCmdPayloadMsg_t* )*pHead )->pMsg = NULL;
   \                     ??CrossCallReturnLabel_43:
   \   000020   E4           CLR       A
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   F0           MOVX      @DPTR,A
    790              
    791              if ( *pHead != NULL )
   \   000024   EA           MOV       A,R2
   \   000025   49           ORL       A,R1
   \   000026   600C         JZ        ??gp_CreateCmdPayloadMsgList_0
    792              {
    793                (*pHead)->pNext = NULL;
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
    794              }
    795            }
    796            return;
   \                     ??gp_CreateCmdPayloadMsgList_0:
   \   000034   80..         SJMP      ?Subroutine4
    797          }
    798          
    799          /*********************************************************************
    800           * @fn      gp_AddNotificationMsgNode
    801           *
    802           * @brief   Add node to Notification Msg list
    803           *
    804           * @param   pHead - pointer to a pointer of the list head
    805           *
    806           * @return  pointer to new node
    807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          gpNotificationMsg_t* gp_AddNotificationMsgNode( gpNotificationMsg_t **pHead, gpCmdPayloadMsg_t *pMsg )
   \                     gp_AddNotificationMsgNode:
    809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    810            gpNotificationMsg_t **pCurr;
    811            
    812              // Create respondent list if empty
    813            if ( *pHead == NULL )
   \   00000D   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000010   7005         JNZ       ??gp_AddNotificationMsgNode_0
    814            {
    815              gp_CreateNotificationMsgList( pHead );
   \   000012                ; Setup parameters for call to function gp_CreateNotificationMsgList
   \   000012   12....       LCALL     `??gp_CreateNotificationMsgList::?relay`; Banked call to: gp_CreateNotificationMsgList
    816              ( ( gpNotificationMsg_t* ) *pHead )->pMsg = ( uint8* )pMsg;
   \   000015   8032         SJMP      ??gp_AddNotificationMsgNode_1
    817              return *pHead;
    818            }
    819            
    820            pCurr = &((*pHead)->pNext);
    821            
    822            while ( *pCurr != NULL )
    823            {
    824              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddNotificationMsgNode_0:
   \   000017   E8           MOV       A,R0
   \   000018   240F         ADD       A,#0xf
   \   00001A   FE           MOV       R6,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   FF           MOV       R7,A
    825            }
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000025   70F0         JNZ       ??gp_AddNotificationMsgNode_0
    826          
    827            *pCurr = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   7A11         MOV       R2,#0x11
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8B..         MOV       ?V3,R3
   \   000030   A9..         MOV       R1,?V3
   \   000032   12....       LCALL     ?Subroutine35 & 0xFFFF
    828              
    829            if ( (*pCurr)->pNext != NULL )
   \                     ??CrossCallReturnLabel_133:
   \   000035   EA           MOV       A,R2
   \   000036   240F         ADD       A,#0xf
   \   000038   F8           MOV       R0,A
   \   000039   5001         JNC       ??gp_AddNotificationMsgNode_2
   \   00003B   09           INC       R1
   \                     ??gp_AddNotificationMsgNode_2:
   \   00003C   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00003F   6008         JZ        ??gp_AddNotificationMsgNode_1
    830            {
    831              (*pCurr)->pNext = NULL;
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
    832            }
    833            ( ( gpNotificationMsg_t* ) *pCurr )->pMsg = ( uint8* )pMsg;
   \                     ??gp_AddNotificationMsgNode_1:
   \   000049   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00004C   EA           MOV       A,R2
   \   00004D   240D         ADD       A,#0xd
   \   00004F   F582         MOV       DPL,A
   \   000051   E4           CLR       A
   \   000052   3B           ADDC      A,R3
   \   000053   F583         MOV       DPH,A
   \   000055   E5..         MOV       A,?V0
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   E5..         MOV       A,?V1
   \   00005B   F0           MOVX      @DPTR,A
    834            return *pCurr;
   \   00005C   02....       LJMP      ?Subroutine0 & 0xFFFF
    835          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F582         MOV       DPL,A
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine65_0
   \   000004                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine69_0
   \   000004                ; // Fall through to label ??Subroutine69_0
    836          
    837          /*********************************************************************
    838           * @fn      gp_AddCmdPayloadMsgNode
    839           *
    840           * @brief   Add node to Notification Msg list
    841           *
    842           * @param   pHead - pointer to a pointer of the list head
    843           *
    844           * @return  pointer to new node
    845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          gpCmdPayloadMsg_t* gp_AddCmdPayloadMsgNode( gpCmdPayloadMsg_t **pHead, uint8* pBuf, uint8 len )
   \                     gp_AddCmdPayloadMsgNode:
    847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    848            gpCmdPayloadMsg_t **pCurr;
    849            
    850              // Create respondent list if empty
    851            if ( *pHead == NULL )
   \   00000F   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000012   7019         JNZ       ??gp_AddCmdPayloadMsgNode_0
    852            {
    853              gp_CreateCmdPayloadMsgList( pHead );
   \   000014                ; Setup parameters for call to function gp_CreateCmdPayloadMsgList
   \   000014   12....       LCALL     `??gp_CreateCmdPayloadMsgList::?relay`; Banked call to: gp_CreateCmdPayloadMsgList
    854              
    855              if ( pHead != NULL )
   \   000017   EE           MOV       A,R6
   \   000018   4F           ORL       A,R7
   \   000019   600D         JZ        ??gp_AddCmdPayloadMsgNode_1
    856              {
    857                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->lenght ) = len;
   \   00001B   12....       LCALL     ?Subroutine16 & 0xFFFF
    858                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->pMsg ) = ( uint8* )pBuf;
    859              }
   \                     ??CrossCallReturnLabel_9:
   \   00001E   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000021   E5..         MOV       A,?V0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E5..         MOV       A,?V1
   \   000027   F0           MOVX      @DPTR,A
    860              return *pHead;
   \                     ??gp_AddCmdPayloadMsgNode_1:
   \   000028   12....       LCALL     ?Subroutine27 & 0xFFFF
    861            }
   \                     ??CrossCallReturnLabel_169:
   \   00002B   8046         SJMP      ??gp_AddCmdPayloadMsgNode_2
    862            
    863            pCurr = &((*pHead)->pNext);
    864            
    865            while ( *pCurr != NULL )
    866            {
    867              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddCmdPayloadMsgNode_0:
   \   00002D   E8           MOV       A,R0
   \   00002E   2404         ADD       A,#0x4
   \   000030   FE           MOV       R6,A
   \   000031   E4           CLR       A
   \   000032   39           ADDC      A,R1
   \   000033   FF           MOV       R7,A
    868            }
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00003B   70F0         JNZ       ??gp_AddCmdPayloadMsgNode_0
    869          
    870            *pCurr = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   7A06         MOV       R2,#0x6
   \   00003F   7B00         MOV       R3,#0x0
   \   000041   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8B..         MOV       ?V5,R3
   \   000046   A9..         MOV       R1,?V5
   \   000048   12....       LCALL     ?Subroutine35 & 0xFFFF
    871              
    872            if ( (*pCurr)->pNext != NULL )
   \                     ??CrossCallReturnLabel_134:
   \   00004B   EA           MOV       A,R2
   \   00004C   2404         ADD       A,#0x4
   \   00004E   F8           MOV       R0,A
   \   00004F   5001         JNC       ??gp_AddCmdPayloadMsgNode_3
   \   000051   09           INC       R1
   \                     ??gp_AddCmdPayloadMsgNode_3:
   \   000052   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000055   6008         JZ        ??gp_AddCmdPayloadMsgNode_4
    873            {
    874              (*pCurr)->pNext = NULL;
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   F0           MOVX      @DPTR,A
    875            }
    876            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->lenght ) = len;
   \                     ??gp_AddCmdPayloadMsgNode_4:
   \   00005F   12....       LCALL     ?Subroutine16 & 0xFFFF
    877            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg ) = ( uint8* )pBuf;
   \                     ??CrossCallReturnLabel_10:
   \   000062   FA           MOV       R2,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FB           MOV       R3,A
   \   000066   8A82         MOV       DPL,R2
   \   000068   F583         MOV       DPH,A
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E5..         MOV       A,?V0
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   E5..         MOV       A,?V1
   \   000072   F0           MOVX      @DPTR,A
    878            
    879            return *pCurr;
   \                     ??gp_AddCmdPayloadMsgNode_2:
   \   000073   7F06         MOV       R7,#0x6
   \   000075   02....       LJMP      ?BANKED_LEAVE_XDATA
    880          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000007   E5..         MOV       A,?V2
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   22           RET
    881          
    882          /*********************************************************************
    883           * @fn      gp_GetHeadNotificationMsg
    884           *
    885           * @brief   Returns head pointer for  finding and binding respondent list
    886           *
    887           * @param   none
    888           *
    889           * @return  pointer to head
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          gpNotificationMsg_t* gp_GetHeadNotificationMsg(void)
   \                     gp_GetHeadNotificationMsg:
    892          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    893            return ( pNotificationMsgHead );
   \   000004   90....       MOV       DPTR,#pNotificationMsgHead
   \   000007                REQUIRE ?Subroutine5
   \   000007                ; // Fall through to label ?Subroutine5
    894          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   D083         POP       DPH
   \   000005   D082         POP       DPL
   \   000007   02....       LJMP      ?BRET
    895          
    896          /*********************************************************************
    897           * @fn      gp_GetPHeadNotification
    898           *
    899           * @brief   Returns head pointer for  finding and binding respondent list
    900           *
    901           * @param   none
    902           *
    903           * @return  pointer to head
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          gpNotificationMsg_t** gp_GetPHeadNotification(void)
   \                     gp_GetPHeadNotification:
    906          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    907            return ( &pNotificationMsgHead );
   \   000000   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    908          }
    909          
    910          /*********************************************************************
    911           * @fn      gp_GetHeadCmdPayloadMsg
    912           *
    913           * @brief   Returns head pointer for  finding and binding respondent list
    914           *
    915           * @param   none
    916           *
    917           * @return  pointer to head
    918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    919          gpCmdPayloadMsg_t* gp_GetHeadCmdPayloadMsg(void)
   \                     gp_GetHeadCmdPayloadMsg:
    920          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    921            return ( pCmdPayloadMsgHead );
   \   000004   90....       MOV       DPTR,#pCmdPayloadMsgHead
   \   000007   80..         SJMP      ?Subroutine5
    922          }
    923          
    924          /*********************************************************************
    925           * @fn      gp_GetHeadCmdPayloadMsg
    926           *
    927           * @brief   Returns head pointer for  finding and binding respondent list
    928           *
    929           * @param   none
    930           *
    931           * @return  pointer to head
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          gpCmdPayloadMsg_t** gp_GetPHeadCmdPayload(void)
   \                     gp_GetPHeadCmdPayload:
    934          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    935            return ( &pCmdPayloadMsgHead );
   \   000000   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    936          }
    937          
    938          /*********************************************************************
    939           * @fn      gp_NotificationMsgClean
    940           *
    941           * @brief   This function free reserved memory for respondent list
    942           *
    943           * @param   pHead - begin of the Notification Msg list
    944           *
    945           * @return  status
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void gp_NotificationMsgClean( gpNotificationMsg_t **pHead )
   \                     gp_NotificationMsgClean:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    949            gpNotificationMsg_t **pCurr;
    950            gpNotificationMsg_t **pNext;
    951            
    952            if ( *pHead == NULL )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000010   605E         JZ        ??CrossCallReturnLabel_40
    953            {
    954              return;
    955            }
    956            
    957            pCurr = pHead;
   \   000012   AE..         MOV       R6,?V0
   \   000014   AF..         MOV       R7,?V1
    958            
    959            if( *pCurr != NULL )
   \   000016   E8           MOV       A,R0
   \   000017   49           ORL       A,R1
   \   000018   6046         JZ        ??gp_NotificationMsgClean_0
    960            {
    961              pNext = &((*pCurr)->pNext);
   \   00001A   E8           MOV       A,R0
   \   00001B   240F         ADD       A,#0xf
   \   00001D   F5..         MOV       ?V2,A
   \   00001F   E4           CLR       A
   \   000020   39           ADDC      A,R1
   \   000021   F5..         MOV       ?V3,A
    962              if ( ( ( gpNotificationMsg_t* ) *pCurr )->pMsg != ( ( gpNotificationMsg_t* ) *pNext )->pMsg )
   \   000023   E8           MOV       A,R0
   \   000024   240D         ADD       A,#0xd
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   39           ADDC      A,R1
   \   00002A   F583         MOV       DPH,A
   \   00002C   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00002F   85..82       MOV       DPL,?V2
   \   000032   85..83       MOV       DPH,?V3
   \   000035   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000038   C8           XCH       A,R0
   \   000039   240D         ADD       A,#0xd
   \   00003B   F582         MOV       DPL,A
   \   00003D   E4           CLR       A
   \   00003E   38           ADDC      A,R0
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   6A           XRL       A,R2
   \   000043   7003         JNZ       ??gp_NotificationMsgClean_1
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6B           XRL       A,R3
   \                     ??gp_NotificationMsgClean_1:
   \   000048   6007         JZ        ??gp_NotificationMsgClean_2
    963              {
    964                gp_CmdPayloadMsgClean( gp_GetPHeadCmdPayload( ) );
   \   00004A                ; Setup parameters for call to function gp_CmdPayloadMsgClean
   \   00004A   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   00004C   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   00004E   12....       LCALL     `??gp_CmdPayloadMsgClean::?relay`; Banked call to: gp_CmdPayloadMsgClean
    965              }
    966              osal_mem_free( *pCurr );
   \                     ??gp_NotificationMsgClean_2:
   \   000051                ; Setup parameters for call to function osal_mem_free
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   12....       LCALL     ?Subroutine20 & 0xFFFF
    967              *pCurr = ( gpNotificationMsg_t* )NULL;
   \                     ??CrossCallReturnLabel_17:
   \   000058   E4           CLR       A
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   F0           MOVX      @DPTR,A
    968              pCurr = pNext;
   \   00005C   AE..         MOV       R6,?V2
   \   00005E   AF..         MOV       R7,?V3
    969            }
    970            *pHead = *pCurr;
   \                     ??gp_NotificationMsgClean_0:
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \   000064   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000067   85..82       MOV       DPL,?V0
   \   00006A   85..83       MOV       DPH,?V1
   \   00006D   12....       LCALL     ?Subroutine32 & 0xFFFF
    971          }
   \                     ??CrossCallReturnLabel_40:
   \   000070   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   8E82         MOV       DPL,R6
   \   000008   8F83         MOV       DPH,R7
   \   00000A   22           RET
    972          
    973          /*********************************************************************
    974           * @fn      gp_NotificationMsgClean
    975           *
    976           * @brief   This function free reserved memory for respondent list
    977           *
    978           * @param   pHead - begin of the Notification Msg list
    979           *
    980           * @return
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void gp_CmdPayloadMsgClean( gpCmdPayloadMsg_t **pHead )
   \                     gp_CmdPayloadMsgClean:
    983          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    984            gpCmdPayloadMsg_t **pCurr;
    985            gpCmdPayloadMsg_t **pNext;
    986            
    987            if ( *pHead == NULL )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   601D         JZ        ??gp_CmdPayloadMsgClean_0
    988            {
    989              return;
    990            }
    991            
    992            pCurr = pHead;
    993            
    994            if( *pCurr != NULL )
    995            {
    996              pNext = &((*pCurr)->pNext);
    997              osal_mem_free ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg );
   \   00001A                ; Setup parameters for call to function osal_mem_free
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ?Subroutine20 & 0xFFFF
    998              ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg = NULL;
   \                     ??CrossCallReturnLabel_18:
   \   00001F   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000022   8A82         MOV       DPL,R2
   \   000024   F583         MOV       DPH,A
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    999              osal_mem_free( *pCurr );
   \   00002C                ; Setup parameters for call to function osal_mem_free
   \   00002C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1000              *pCurr = ( gpCmdPayloadMsg_t* )NULL;
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
   1001              pCurr = pNext;
   1002            }
   1003            pHead = pCurr;
   1004          }
   \                     ??gp_CmdPayloadMsgClean_0:
   \   000037   02....       LJMP      ?Subroutine1 & 0xFFFF
   1005          
   1006          /*********************************************************************
   1007           * @fn      gp_ResetProxyBasicTblEntry
   1008           *
   1009           * @brief   This function removes data of the given entry
   1010           *
   1011           * @param   pHead - begin of the Notification Msg list
   1012           *
   1013           * @return
   1014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1015          void gp_ResetProxyBasicTblEntry( uint8* entry )
   \                     gp_ResetProxyBasicTblEntry:
   1016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV       A,#-0x41
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1017            uint8 emptyEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7441         MOV       A,#0x41
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1018            
   1019            osal_memcpy( entry, emptyEntry, PROXY_TBL_ENTRY_LEN );
   \   000016                ; Setup parameters for call to function osal_memcpy
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   F5..         MOV       ?V2,A
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000025   7C41         MOV       R4,#0x41
   \   000027   7D00         MOV       R5,#0x0
   \   000029   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   1020          }
   \   00002F   7441         MOV       A,#0x41
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   7F03         MOV       R7,#0x3
   \   000036   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_RegisterCmdCallbacks::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_ProcessInProxyBasic::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_ProcessInProxyBasic

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpNotificationCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpCommissioningNotificationCommand:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpCommissioningNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpProxyTableResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpProxyTableResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_addPairedSinksToMsgQueue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_addPairedSinksToMsgQueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateNotificationMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateNotificationMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateCmdPayloadMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateCmdPayloadMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddNotificationMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddNotificationMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddCmdPayloadMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddCmdPayloadMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadNotificationMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadNotificationMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadNotification::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadCmdPayloadMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadCmdPayloadMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadCmdPayload::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadCmdPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_NotificationMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_NotificationMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CmdPayloadMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CmdPayloadMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ResetProxyBasicTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ResetProxyBasicTblEntry

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50
   1021          
   1022          #endif
   1023          /***************************************************************************
   1024          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     36   gp_AddCmdPayloadMsgNode
        0     14   -> gp_CreateCmdPayloadMsgList
        0     14   -> osal_mem_alloc
      0    116   gp_AddNotificationMsgNode
        0     12   -> gp_CreateNotificationMsgList
        0     12   -> osal_mem_alloc
      0     21   gp_CmdPayloadMsgClean
        0      9   -> osal_mem_free
      0     24   gp_CreateCmdPayloadMsgList
        0     10   -> osal_mem_alloc
      0     22   gp_CreateNotificationMsgList
        0     10   -> osal_mem_alloc
      2      0   gp_GetHeadCmdPayloadMsg
      2      0   gp_GetHeadNotificationMsg
      0      0   gp_GetPHeadCmdPayload
      0      0   gp_GetPHeadNotification
      0     12   gp_NotificationMsgClean
        0     12   -> gp_CmdPayloadMsgClean
        0     12   -> osal_mem_free
      0     79   gp_ResetProxyBasicTblEntry
        0     79   -> osal_memcpy
      0    129   gp_addPairedSinksToMsgQueue
        0    104   -> gp_AddNotificationMsgNode
        0    104   -> gp_getProxyTableByIndex
        0    107   -> osal_memcmp
        0    107   -> osal_memcpy
      0      9   zclGp_HdlIncoming
        0      9   -> zclGp_ProcessInProxyBasic
      1     59   zclGp_ProcessInProxyBasic
        0     43   -> osal_build_uint16
        0     43   -> osal_mem_alloc
        0     46   -> osal_memcpy
        0     50   -> zcl_SendDefaultRspCmd
      1     14   zclGp_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      1     41   zclGp_SendGpCommissioningNotificationCommand
        0     30   -> bdb_getZCLFrameCounter
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     33   -> osal_memcpy
        0     41   -> zcl_SendCommand
      1     26   zclGp_SendGpNotificationCommand
        0     22   -> gp_AddCmdPayloadMsgNode
        0     22   -> gp_addPairedSinksToMsgQueue
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     26   -> osal_start_timerEx
      1     35   zclGp_SendGpProxyTableResponse
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     35   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_2
      12  ?<Constant {{0}}>
      19  ??Subroutine53_0
      18  ??Subroutine54_0
      10  ??Subroutine55_0
       5  ??Subroutine56_0
       4  ??Subroutine57_0
       6  ??Subroutine58_0
       8  ??Subroutine59_0
      10  ??Subroutine60_0
       4  ??Subroutine61_0
      14  ??Subroutine62_0
       6  ??Subroutine63_0
       6  ??Subroutine64_0
       6  ??Subroutine65_0
       2  ??Subroutine66_0
       2  ??Subroutine67_0
       7  ??Subroutine68_0
       4  ??Subroutine69_0
       5  ??Subroutine70_0
       1  ??Subroutine71_0
       6  ??Subroutine72_0
       5  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine10
      23  ?Subroutine11
       4  ?Subroutine12
      20  ?Subroutine13
       6  ?Subroutine14
       6  ?Subroutine15
      16  ?Subroutine16
      15  ?Subroutine17
       7  ?Subroutine18
      24  ?Subroutine19
       8  ?Subroutine2
      11  ?Subroutine20
       3  ?Subroutine21
      11  ?Subroutine22
       4  ?Subroutine23
       6  ?Subroutine24
      13  ?Subroutine25
       9  ?Subroutine26
       4  ?Subroutine27
       1  ?Subroutine28
      12  ?Subroutine29
       8  ?Subroutine3
       9  ?Subroutine30
       4  ?Subroutine31
       6  ?Subroutine32
       8  ?Subroutine33
       8  ?Subroutine34
       4  ?Subroutine35
       7  ?Subroutine36
      14  ?Subroutine37
       2  ?Subroutine38
       4  ?Subroutine39
       5  ?Subroutine4
       2  ?Subroutine40
       7  ?Subroutine41
       5  ?Subroutine42
       5  ?Subroutine43
       6  ?Subroutine44
       5  ?Subroutine45
       5  ?Subroutine46
       5  ?Subroutine47
       4  ?Subroutine48
       9  ?Subroutine49
      10  ?Subroutine5
       8  ?Subroutine50
      11  ?Subroutine51
      15  ?Subroutine52
       4  ?Subroutine6
       9  ?Subroutine7
      29  ?Subroutine8
      23  ?Subroutine9
       4  __Constant_32
     120  gp_AddCmdPayloadMsgNode
       6  gp_AddCmdPayloadMsgNode::?relay
      95  gp_AddNotificationMsgNode
       6  gp_AddNotificationMsgNode::?relay
      58  gp_CmdPayloadMsgClean
       6  gp_CmdPayloadMsgClean::?relay
      54  gp_CreateCmdPayloadMsgList
       6  gp_CreateCmdPayloadMsgList::?relay
      41  gp_CreateNotificationMsgList
       6  gp_CreateNotificationMsgList::?relay
       9  gp_GetHeadCmdPayloadMsg
       6  gp_GetHeadCmdPayloadMsg::?relay
       7  gp_GetHeadNotificationMsg
       6  gp_GetHeadNotificationMsg::?relay
       7  gp_GetPHeadCmdPayload
       6  gp_GetPHeadCmdPayload::?relay
       7  gp_GetPHeadNotification
       6  gp_GetPHeadNotification::?relay
     115  gp_NotificationMsgClean
       6  gp_NotificationMsgClean::?relay
      57  gp_ResetProxyBasicTblEntry
       6  gp_ResetProxyBasicTblEntry::?relay
     582  gp_addPairedSinksToMsgQueue
       6  gp_addPairedSinksToMsgQueue::?relay
       2  pCmdPayloadMsgHead
       2  pNotificationMsgHead
       2  zclGpCBs
       1  zclGpPluginRegisted
     105  zclGp_HdlIncoming
       6  zclGp_HdlIncoming::?relay
     816  zclGp_ProcessInProxyBasic
       6  zclGp_ProcessInProxyBasic::?relay
     133  zclGp_RegisterCmdCallbacks
       6  zclGp_RegisterCmdCallbacks::?relay
     396  zclGp_SendGpCommissioningNotificationCommand
       6  zclGp_SendGpCommissioningNotificationCommand::?relay
     377  zclGp_SendGpNotificationCommand
       6  zclGp_SendGpNotificationCommand::?relay
     324  zclGp_SendGpProxyTableResponse
       6  zclGp_SendGpProxyTableResponse::?relay

 
 3 905 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
   156 bytes in segment XDATA_ROM_C
     7 bytes in segment XDATA_Z
 
   108 bytes of CODE     memory
   152 bytes of CONST    memory (+ 4 bytes shared)
 3 905 bytes of HUGECODE memory
     7 bytes of XDATA    memory

Errors: none
Warnings: none
