///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.20.1.5333 for 8051              08/Feb/2022  22:10:21
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Components\stack\zcl\zcl_general.c
//    Command line       =  
//        -f C:\usertemp\AppData\Local\Temp\EW9F04.tmp ("I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Components\stack\zcl\zcl_general.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D
//        ZCL_REPORT -D HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D
//        HAL_UART=TRUE -D INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D
//        xHAL_LCD_OLED12864 -D HAL_ADC=TRUE -D HAL_UART=TRUE -D
//        INT_HEAP_LEN=2048 -lC "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        -lA "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_general.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_general

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V1
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclGeneral_AddGroup::?relay`,0203H
        FUNCTION `??zclGeneral_HdlInSpecificCommands::?relay`,0203H
        FUNCTION `??zclGeneral_HdlIncoming::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInGroupsClient::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInGroupsServer::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInIdentity::?relay`,0203H
        PUBLIC `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,0203H
        PUBLIC `??zclGeneral_SendAddGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendAddGroupRequest::?relay`,0203H
        PUBLIC `??zclGeneral_SendGroupGetMembershipRequest::?re`
        FUNCTION `??zclGeneral_SendGroupGetMembershipRequest::?re`,0203H
        PUBLIC `??zclGeneral_SendGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendGroupRequest::?relay`,0203H
        PUBLIC `??zclGeneral_SendGroupResponse::?relay`
        FUNCTION `??zclGeneral_SendGroupResponse::?relay`,0203H
        PUBLIC `??zclGeneral_SendGroupViewResponse::?relay`
        FUNCTION `??zclGeneral_SendGroupViewResponse::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentify::?relay`
        FUNCTION `??zclGeneral_SendIdentify::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyEZModeInvoke::?relay`
        FUNCTION `??zclGeneral_SendIdentifyEZModeInvoke::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyQueryResponse::?relay`
        FUNCTION `??zclGeneral_SendIdentifyQueryResponse::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyUpdateCommState::?rela`
        FUNCTION `??zclGeneral_SendIdentifyUpdateCommState::?rela`,0203H
        FUNCTION zclGeneral_AddGroup,0a1203H
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION zclGeneral_HdlInSpecificCommands,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclGeneral_HdlIncoming,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGeneral_ProcessInGroupsClient,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 51, STACK
        FUNCTION zclGeneral_ProcessInGroupsServer,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 78, STACK
        FUNCTION zclGeneral_ProcessInIdentity,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclGeneral_SendAddGroupRequest
        FUNCTION zclGeneral_SendAddGroupRequest,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC zclGeneral_SendGroupGetMembershipRequest
        FUNCTION zclGeneral_SendGroupGetMembershipRequest,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC zclGeneral_SendGroupRequest
        FUNCTION zclGeneral_SendGroupRequest,0a1203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC zclGeneral_SendGroupResponse
        FUNCTION zclGeneral_SendGroupResponse,0a1203H
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclGeneral_SendGroupViewResponse
        FUNCTION zclGeneral_SendGroupViewResponse,0a1203H
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC zclGeneral_SendIdentify
        FUNCTION zclGeneral_SendIdentify,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zclGeneral_SendIdentifyEZModeInvoke
        FUNCTION zclGeneral_SendIdentifyEZModeInvoke,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC zclGeneral_SendIdentifyQueryResponse
        FUNCTION zclGeneral_SendIdentifyQueryResponse,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zclGeneral_SendIdentifyUpdateCommState
        FUNCTION zclGeneral_SendIdentifyUpdateCommState,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
aps_AddGroup        SYMBOL "aps_AddGroup"
`??aps_AddGroup::?relay` SYMBOL "?relay", aps_AddGroup
aps_CountAllGroups  SYMBOL "aps_CountAllGroups"
`??aps_CountAllGroups::?relay` SYMBOL "?relay", aps_CountAllGroups
aps_FindAllGroupsForEndpoint SYMBOL "aps_FindAllGroupsForEndpoint"
`??aps_FindAllGroupsForEndpoint::?relay` SYMBOL "?relay", aps_FindAllGroupsForEndpoint
aps_FindGroup       SYMBOL "aps_FindGroup"
`??aps_FindGroup::?relay` SYMBOL "?relay", aps_FindGroup
aps_RemoveAllGroup  SYMBOL "aps_RemoveAllGroup"
`??aps_RemoveAllGroup::?relay` SYMBOL "?relay", aps_RemoveAllGroup
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
`??aps_RemoveGroup::?relay` SYMBOL "?relay", aps_RemoveGroup
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_ZclIdentifyQueryCmdInd SYMBOL "bdb_ZclIdentifyQueryCmdInd"
`??bdb_ZclIdentifyQueryCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyQueryCmdInd
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
zcl_ReadAttrData    SYMBOL "zcl_ReadAttrData"
`??zcl_ReadAttrData::?relay` SYMBOL "?relay", zcl_ReadAttrData
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
`??zcl_SendDefaultRspCmd::?relay` SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGeneral_SendAddGroupRequest SYMBOL "zclGeneral_SendAddGroupRequest"
`??zclGeneral_SendAddGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendAddGroupRequest
zclGeneral_SendGroupGetMembershipRequest SYMBOL "zclGeneral_SendGroupGetMembershipRequest"
`??zclGeneral_SendGroupGetMembershipRequest::?re` SYMBOL "?relay", zclGeneral_SendGroupGetMembershipRequest
zclGeneral_SendGroupRequest SYMBOL "zclGeneral_SendGroupRequest"
`??zclGeneral_SendGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendGroupRequest
zclGeneral_SendGroupResponse SYMBOL "zclGeneral_SendGroupResponse"
`??zclGeneral_SendGroupResponse::?relay` SYMBOL "?relay", zclGeneral_SendGroupResponse
zclGeneral_SendGroupViewResponse SYMBOL "zclGeneral_SendGroupViewResponse"
`??zclGeneral_SendGroupViewResponse::?relay` SYMBOL "?relay", zclGeneral_SendGroupViewResponse
zclGeneral_SendIdentify SYMBOL "zclGeneral_SendIdentify"
`??zclGeneral_SendIdentify::?relay` SYMBOL "?relay", zclGeneral_SendIdentify
zclGeneral_SendIdentifyEZModeInvoke SYMBOL "zclGeneral_SendIdentifyEZModeInvoke"
`??zclGeneral_SendIdentifyEZModeInvoke::?relay` SYMBOL "?relay", zclGeneral_SendIdentifyEZModeInvoke
zclGeneral_SendIdentifyQueryResponse SYMBOL "zclGeneral_SendIdentifyQueryResponse"
`??zclGeneral_SendIdentifyQueryResponse::?relay` SYMBOL "?relay", zclGeneral_SendIdentifyQueryResponse
zclGeneral_SendIdentifyUpdateCommState SYMBOL "zclGeneral_SendIdentifyUpdateCommState"
`??zclGeneral_SendIdentifyUpdateCommState::?rela` SYMBOL "?relay", zclGeneral_SendIdentifyUpdateCommState

        EXTERN `??aps_AddGroup::?relay`
        FUNCTION `??aps_AddGroup::?relay`,00H
        EXTERN `??aps_CountAllGroups::?relay`
        FUNCTION `??aps_CountAllGroups::?relay`,00H
        EXTERN `??aps_FindAllGroupsForEndpoint::?relay`
        FUNCTION `??aps_FindAllGroupsForEndpoint::?relay`,00H
        EXTERN `??aps_FindGroup::?relay`
        FUNCTION `??aps_FindGroup::?relay`,00H
        EXTERN `??aps_RemoveAllGroup::?relay`
        FUNCTION `??aps_RemoveAllGroup::?relay`,00H
        EXTERN `??aps_RemoveGroup::?relay`
        FUNCTION `??aps_RemoveGroup::?relay`,00H
        EXTERN `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,00H
        EXTERN `??bdb_ZclIdentifyQueryCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyQueryCmdInd::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??zcl_ReadAttrData::?relay`
        FUNCTION `??zcl_ReadAttrData::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_SendDefaultRspCmd::?relay`
        FUNCTION `??zcl_SendDefaultRspCmd::?relay`,00H
        EXTERN `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,00H
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_CountAllGroups
        FUNCTION aps_CountAllGroups,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindAllGroupsForEndpoint
        FUNCTION aps_FindAllGroupsForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveAllGroup
        FUNCTION aps_RemoveAllGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZclIdentifyQueryCmdInd
        FUNCTION bdb_ZclIdentifyQueryCmdInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_ReadAttrData
        FUNCTION zcl_ReadAttrData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\zcl\zcl_general.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_general.c
//    3   Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
//    4   Revision:       $Revision: 44493 $
//    5 
//    6   Description:    Zigbee Cluster Library - General.  This application receives all
//    7                   ZCL messages and initially parses them before passing to application.
//    8 
//    9 
//   10   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 #include "ZComDef.h"
//   45 #include "zcl.h"
//   46 #include "zcl_general.h"
//   47 //#include "ZDApp.h"
//   48 
//   49 #if defined ( INTER_PAN )
//   50   #include "stub_aps.h"
//   51 #endif
//   52 #include "bdb.h"
//   53 
//   54 /*********************************************************************
//   55  * MACROS
//   56  */
//   57 #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
//   58 #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
//   59 #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
//   60 
//   61 #ifdef ZCL_SCENES
//   62 #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
//   63 #endif // ZCL_SCENES
//   64 
//   65 /*********************************************************************
//   66  * CONSTANTS
//   67  */
//   68 
//   69 /*********************************************************************
//   70  * TYPEDEFS
//   71  */
//   72 typedef struct zclGenCBRec
//   73 {
//   74   struct zclGenCBRec        *next;
//   75   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   76   zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
//   77 } zclGenCBRec_t;
//   78 
//   79 typedef struct zclGenSceneItem
//   80 {
//   81   struct zclGenSceneItem    *next;
//   82   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   83   zclGeneral_Scene_t        scene;    // Scene info
//   84 } zclGenSceneItem_t;
//   85 
//   86 typedef struct zclGenAlarmItem
//   87 {
//   88   struct zclGenAlarmItem    *next;
//   89   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   90   zclGeneral_Alarm_t        alarm;    // Alarm info
//   91 } zclGenAlarmItem_t;
//   92 
//   93 // Scene NV types
//   94 typedef struct
//   95 {
//   96   uint16                    numRecs;
//   97 } nvGenScenesHdr_t;
//   98 
//   99 typedef struct zclGenSceneNVItem
//  100 {
//  101   uint8                     endpoint;
//  102   zclGeneral_Scene_t        scene;
//  103 } zclGenSceneNVItem_t;
//  104 
//  105 /*********************************************************************
//  106  * GLOBAL VARIABLES
//  107  */
//  108 
//  109 /*********************************************************************
//  110  * GLOBAL FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * LOCAL VARIABLES
//  115  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
zclGenCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  117 static uint8 zclGenPluginRegisted = FALSE;
zclGenPluginRegisted:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  118 
//  119 #if defined( ZCL_SCENES )
//  120   #if !defined ( ZCL_STANDALONE )
//  121     static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
//  122   #endif
//  123 #endif // ZCL_SCENES
//  124 
//  125 #ifdef ZCL_ALARMS
//  126 static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
//  127 #endif // ZCL_ALARMS
//  128 
//  129 /*********************************************************************
//  130  * LOCAL FUNCTIONS
//  131  */
//  132 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
//  133 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
//  134 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
//  135 
//  136 // Device Configuration and Installation clusters
//  137 #ifdef ZCL_BASIC
//  138 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  139 #endif // ZCL_BASIC
//  140 
//  141 #ifdef ZCL_IDENTIFY
//  142 static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  143 #endif // ZCL_IDENTIFY
//  144 
//  145 // Groups and Scenes clusters
//  146 #ifdef ZCL_GROUPS
//  147 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
//  148 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  149 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
//  150 #endif // ZCL_GROUPS
//  151 
//  152 #ifdef ZCL_SCENES
//  153 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  154 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  155 #endif // ZCL_SCENES
//  156 
//  157 // On/Off and Level Control Configuration clusters
//  158 #ifdef ZCL_ON_OFF
//  159 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  160 #endif // ZCL_ONOFF
//  161 
//  162 #ifdef ZCL_LEVEL_CTRL
//  163 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  164 #endif // ZCL_LEVEL_CTRL
//  165 
//  166 // Alarms cluster
//  167 #ifdef ZCL_ALARMS
//  168 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  169 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  170 #endif // ZCL_ALARMS
//  171 
//  172 // Location cluster
//  173 #ifdef ZCL_LOCATION
//  174 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  175 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  176 #endif // ZCL_LOCATION
//  177 
//  178 #ifdef ZCL_SCENES
//  179   #if !defined ( ZCL_STANDALONE )
//  180     static uint8 zclGeneral_ScenesInitNV( void );
//  181     static void zclGeneral_ScenesSetDefaultNV( void );
//  182     static void zclGeneral_ScenesWriteNV( void );
//  183     static uint16 zclGeneral_ScenesRestoreFromNV( void );
//  184   #endif
//  185 #endif // ZCL_SCENES
//  186 
//  187 /*********************************************************************
//  188  * @fn      zclGeneral_RegisterCmdCallbacks
//  189  *
//  190  * @brief   Register an applications command callbacks
//  191  *
//  192  * @param   endpoint - application's endpoint
//  193  * @param   callbacks - pointer to the callback record.
//  194  *
//  195  * @return  ZMemError if not able to allocate
//  196  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  197 ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
zclGeneral_RegisterCmdCallbacks:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
        CODE
//  198 {
        FUNCALL zclGeneral_RegisterCmdCallbacks, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_RegisterCmdCallbacks, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  199   zclGenCBRec_t *pNewItem;
//  200   zclGenCBRec_t *pLoop;
//  201 
//  202   // Register as a ZCL Plugin
//  203   if ( zclGenPluginRegisted == FALSE )
        MOV       DPTR,#zclGenPluginRegisted
        MOVX      A,@DPTR
        JNZ       ??zclGeneral_RegisterCmdCallbacks_0
//  204   {
//  205     zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
//  206                         ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
//  207                         zclGeneral_HdlIncoming );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV       ?V2,#`??zclGeneral_HdlIncoming::?relay` & 0xff
        MOV       ?V3,#(`??zclGeneral_HdlIncoming::?relay` >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  208 
//  209 #ifdef ZCL_SCENES
//  210     // Initialize the Scenes Table
//  211     zclGeneral_ScenesInit();
//  212 #endif // ZCL_SCENES
//  213 
//  214     zclGenPluginRegisted = TRUE;
        MOV       DPTR,#zclGenPluginRegisted
        MOV       A,#0x1
        MOVX      @DPTR,A
//  215   }
//  216 
//  217   // Fill in the new profile list
//  218   pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
??zclGeneral_RegisterCmdCallbacks_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  219   if ( pNewItem == NULL )
        MOV       A,R2
        ORL       A,R1
        JNZ       ??zclGeneral_RegisterCmdCallbacks_1
//  220     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??zclGeneral_RegisterCmdCallbacks_2
//  221 
//  222   pNewItem->next = (zclGenCBRec_t *)NULL;
??zclGeneral_RegisterCmdCallbacks_1:
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  223   pNewItem->endpoint = endpoint;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
//  224   pNewItem->CBs = callbacks;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  225 
//  226   // Find spot in list
//  227   if (  zclGenCBs == NULL )
        MOV       DPTR,#zclGenCBs
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV       A,R2
        ORL       A,R3
        MOV       DPTR,#zclGenCBs
        JZ        ??zclGeneral_RegisterCmdCallbacks_3
//  228   {
//  229     zclGenCBs = pNewItem;
//  230   }
//  231   else
//  232   {
//  233     // Look for end of list
//  234     pLoop = zclGenCBs;
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_54:
        SJMP      ??zclGeneral_RegisterCmdCallbacks_4
//  235     while ( pLoop->next != NULL )
//  236       pLoop = pLoop->next;
??zclGeneral_RegisterCmdCallbacks_5:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
??zclGeneral_RegisterCmdCallbacks_4:
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zclGeneral_RegisterCmdCallbacks_5
//  237 
//  238     // Put new item at end of list
//  239     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
//  240   }
??zclGeneral_RegisterCmdCallbacks_3:
        LCALL     ?Subroutine26 & 0xFFFF
//  241 
//  242   return ( ZSuccess );
??CrossCallReturnLabel_127:
        MOV       R1,#0x0
??zclGeneral_RegisterCmdCallbacks_2:
        LJMP      ??Subroutine47_0 & 0xFFFF
//  243 }
          CFI EndBlock cfiBlock0
//  244 
//  245 #ifdef ZCL_IDENTIFY
//  246 /*********************************************************************
//  247  * @fn      zclGeneral_SendIdentify
//  248  *
//  249  * @brief   Call to send out an Identify Command
//  250  *
//  251  * @param   srcEP - Sending application's endpoint
//  252  * @param   dstAddr - where you want the message to go
//  253  * @param   identifyTime - how long the device will continue to identify itself (in seconds)
//  254  * @param   seqNum - identification number for the transaction
//  255  *
//  256  * @return  ZStatus_t
//  257  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  258 ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentify:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
        CODE
//  259                                    uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
//  260 {
        FUNCALL zclGeneral_SendIdentify, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
//  261   uint8 buf[2];
//  262 
//  263   buf[0] = LO_UINT16( identifyTime );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  264   buf[1] = HI_UINT16( identifyTime );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
//  265 
//  266   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  267                           COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  268                           disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_92:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x1
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  269 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock2
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV       A,R5
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclGeneral_SendGroupResponse
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclGeneral_SendIdentify
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  270 
//  271 /*********************************************************************
//  272  * @fn      zclGeneral_SendIdentifyEZModeInvoke
//  273  *
//  274  * @brief   Call to send out an Identify EZ-Mode Invoke Command
//  275  *
//  276  * @param   srcEP - Sending application's endpoint
//  277  * @param   dstAddr - where you want the message to go
//  278  * @param   action - describes the EZ-Mode action to be performed
//  279  * @param   seqNum - identification number for the transaction
//  280  *
//  281  * @return  ZStatus_t
//  282  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  283 ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyEZModeInvoke:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyEZModeInvoke
        CODE
//  284                                                uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
//  285 {
        FUNCALL zclGeneral_SendIdentifyEZModeInvoke, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  286   uint8 buf[1];
//  287 
//  288   buf[0] = action;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine25 & 0xFFFF
//  289 
//  290   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  291                           COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  292                           disableDefaultRsp, 0, seqNum, 1, buf );
??CrossCallReturnLabel_66:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R5
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x2
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0x1
        LJMP      ?Subroutine0 & 0xFFFF
//  293 }
          CFI EndBlock cfiBlock12
//  294 
//  295 /*********************************************************************
//  296  * @fn      zclGeneral_SendIdentifyUpdateCommState
//  297  *
//  298  * @brief   Call to send out an Identify Update Commission State Command
//  299  *
//  300  * @param   srcEP - Sending application's endpoint
//  301  * @param   dstAddr - where you want the message to go
//  302  * @param   action - describes the EZ-Mode action to be performed
//  303  * @param   commissionStateMask - updates the device's commission state
//  304  * @param   seqNum - identification number for the transaction
//  305  *
//  306  * @return  ZStatus_t
//  307  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  308 ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyUpdateCommState:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyUpdateCommState
        CODE
//  309                                                   uint8 action, uint8 commissionStateMask,
//  310                                                   uint8 disableDefaultRsp, uint8 seqNum )
//  311 {
        FUNCALL zclGeneral_SendIdentifyUpdateCommState, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,R1
//  312   uint8 buf[2];
//  313 
//  314   buf[0] = action;
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  315   buf[1] = commissionStateMask;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        LCALL     ?Subroutine25 & 0xFFFF
//  316 
//  317   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  318                           COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  319                           disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_67:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,#0x2
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x3
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       R1,?V0
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x2
        LJMP      ?Subroutine0 & 0xFFFF
//  320 }
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyEZModeInvoke
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclGeneral_SendIdentifyUpdateCommState
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
//  321 
//  322 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  323 /*********************************************************************
//  324  * @fn      zclGeneral_SendIdentifyTriggerEffect
//  325  *
//  326  * @brief   Call to send out a Trigger Effect Command
//  327  *
//  328  * @param   srcEP - Sending application's endpoint
//  329  * @param   dstAddr - where you want the message to go
//  330  * @param   effectId - identify effect to use
//  331  * @param   effectVariant - which variant of effect to be triggered
//  332  * @param   disableDefaultRsp - whether to disable the Default Response command
//  333  * @param   seqNum - identification number for the transaction
//  334  *
//  335  * @return  ZStatus_t
//  336  */
//  337 ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  338                                                 uint8 effectId, uint8 effectVariant,
//  339                                                 uint8 disableDefaultRsp, uint8 seqNum )
//  340 {
//  341   uint8 buf[2];
//  342 
//  343   buf[0] = effectId;
//  344   buf[1] = effectVariant;
//  345 
//  346   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  347                           COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  348                           disableDefaultRsp, 0, seqNum, 2, buf );
//  349 }
//  350 #endif // ZCL_LIGHT_LINK_ENHANCE
//  351 
//  352 /*********************************************************************
//  353  * @fn      zclGeneral_SendIdentifyQueryResponse
//  354  *
//  355  * @brief   Call to send out an Identify Query Response Command
//  356  *
//  357  * @param   srcEP - Sending application's endpoint
//  358  * @param   dstAddr - where you want the message to go
//  359  * @param   timeout - how long the device will continue to identify itself (in seconds)
//  360  * @param   seqNum - identification number for the transaction
//  361  *
//  362  * @return  ZStatus_t
//  363  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  364 ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyQueryResponse:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyQueryResponse
        CODE
//  365                                                 uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
//  366 {
        FUNCALL zclGeneral_SendIdentifyQueryResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
//  367   uint8 buf[2];
//  368 
//  369   buf[0] = LO_UINT16( timeout );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  370   buf[1] = HI_UINT16( timeout );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
//  371 
//  372   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  373                           COMMAND_IDENTIFY_QUERY_RSP, TRUE,
//  374                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_93:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        LJMP      ?Subroutine1 & 0xFFFF
//  375 }
          CFI EndBlock cfiBlock17
//  376 #endif // ZCL_IDENTIFY
//  377 
//  378 #ifdef ZCL_GROUPS
//  379 /*********************************************************************
//  380  * @fn      zclGeneral_SendGroupRequest
//  381  *
//  382  * @brief   Send a Group Request to a device.  You can also use the
//  383  *          appropriate macro.
//  384  *
//  385  * @param   srcEP - Sending Apps endpoint
//  386  * @param   dstAddr - where to send the request
//  387  * @param   cmd - one of the following:
//  388  *              COMMAND_GROUP_VIEW
//  389  *              COMMAND_GROUP_REMOVE
//  390  * @param   groupID -
//  391  *
//  392  * @return  ZStatus_t
//  393  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  394 ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupRequest:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
        CODE
//  395                                        uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  396 {
        FUNCALL zclGeneral_SendGroupRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R7,A
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
//  397   uint8 buf[2];
//  398 
//  399   buf[0] = LO_UINT16( groupID );
??CrossCallReturnLabel_43:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  400   buf[1] = HI_UINT16( groupID );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        LCALL     ??Subroutine42_0 & 0xFFFF
//  401 
//  402   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  403                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  404                             disableDefaultRsp, 0, seqNum, 2, buf ) );
??CrossCallReturnLabel_94:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R5
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R4
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R7
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0x2
          CFI EndBlock cfiBlock18
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  405 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Valid
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
//  406 
//  407 /*********************************************************************
//  408  * @fn      zclGeneral_SendAddGroupRequest
//  409  *
//  410  * @brief   Send the Add Group Request to a device
//  411  *
//  412  * @param   srcEP - Sending Apps endpoint
//  413  * @param   dstAddr - where to send the request
//  414  * @param   cmd - one of the following:
//  415  *                COMMAND_GROUP_ADD
//  416  *                COMMAND_GROUP_ADD_IF_IDENTIFYING
//  417  * @param   groupID - pointer to the group structure
//  418  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  419  *          string data type, so the first byte is the length of the
//  420  *          name (in bytes), then the name.
//  421  *
//  422  * @return  ZStatus_t
//  423  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  424 ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendAddGroupRequest:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
        CODE
//  425                                           uint8 cmd, uint16 groupID, uint8 *groupName,
//  426                                           uint8 disableDefaultRsp, uint8 seqNum )
//  427 {
        FUNCALL zclGeneral_SendAddGroupRequest, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendAddGroupRequest, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendAddGroupRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendAddGroupRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       ?V3,R1
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
//  428   uint8 *buf;
//  429   uint8 *pBuf;
//  430   uint8 len;
//  431   ZStatus_t status;
//  432 
//  433   len = 2;    // Group ID
//  434   len += groupName[0] + 1;  // String + 1 for length
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#0x3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  435 
//  436   buf = zcl_mem_alloc( len );
        LCALL     ?Subroutine27 & 0xFFFF
//  437   if ( buf )
??CrossCallReturnLabel_68:
        JNZ       $+5
        LJMP      ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
//  438   {
//  439     pBuf = buf;
//  440     *pBuf++ = LO_UINT16( groupID );
??CrossCallReturnLabel_44:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  441     *pBuf++ = HI_UINT16( groupID );
        MOV       A,R1
        INC       DPTR
        LCALL     ?Subroutine38 & 0xFFFF
//  442     *pBuf++ = groupName[0]; // string length
??CrossCallReturnLabel_89:
        LCALL     ?Subroutine21 & 0xFFFF
//  443     zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
??CrossCallReturnLabel_60:
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  444 
//  445     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  446                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  447                               disableDefaultRsp, 0, seqNum, len, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V0,R6
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV       R1,?V3
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_106:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        MOV       R6,A
//  448     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_SendAddGroupRequest_1
//  449   }
//  450   else
//  451     status = ZMemError;
??zclGeneral_SendAddGroupRequest_0:
        MOV       R6,#0x10
//  452 
//  453   return ( status );
??zclGeneral_SendAddGroupRequest_1:
        LJMP      ?Subroutine3 & 0xFFFF
//  454 }
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclGeneral_AddGroup
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,?V4
        ADD       A,#0x3
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function zclGeneral_SendGroupViewResponse
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclGeneral_AddGroup
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclGeneral_SendIdentify
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zclGeneral_SendGroupRequest
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclGeneral_SendGroupResponse
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zclGeneral_SendGroupResponse
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
//  455 
//  456 /*********************************************************************
//  457  * @fn      zclGeneral_SendGroupGetMembershipRequest
//  458  *
//  459  * @brief   Send a Get Group Membership (Resposne) Command to a device
//  460  *
//  461  * @param   srcEP - Sending Apps endpoint
//  462  * @param   dstAddr - where to send the request
//  463  * @param   cmd - one of the following:
//  464  *                COMMAND_GROUP_GET_MEMBERSHIP
//  465  *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
//  466  * @param   groupID - pointer to the group structure
//  467  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  468  *          string data type, so the first byte is the length of the
//  469  *          name (in bytes), then the name.
//  470  *
//  471  * @return  ZStatus_t
//  472  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  473 ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupGetMembershipRequest:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function zclGeneral_SendGroupGetMembershipRequest
        CODE
//  474                                                     uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
//  475                                                     uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
//  476 {
        FUNCALL zclGeneral_SendGroupGetMembershipRequest, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupGetMembershipRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupGetMembershipRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV       ?V3,R5
//  477   uint8 *buf;
//  478   uint8 *pBuf;
//  479   uint8 len = 0;
        MOV       R0,#0x0
//  480   uint8 i;
//  481   ZStatus_t status;
//  482 
//  483   if ( rspCmd )
        MOV       A,R5
        JZ        ??zclGeneral_SendGroupGetMembershipRequest_0
//  484     len++;  // Capacity
        MOV       R0,#0x1
??zclGeneral_SendGroupGetMembershipRequest_0:
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
//  485 
//  486   len++;  // Group Count
//  487   len += sizeof ( uint16 ) * grpCnt;  // Group List
        CLR       C
        RLC       A
        INC       A
        ADD       A,R0
//  488 
//  489   buf = zcl_mem_alloc( len );
        MOV       R6,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     ?Subroutine28 & 0xFFFF
//  490   if ( buf )
??CrossCallReturnLabel_70:
        JNZ       $+5
        LJMP      ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
//  491   {
//  492     pBuf = buf;
        MOV       R0,?V0
        MOV       R1,?V1
//  493     if ( rspCmd )
        MOV       A,?V3
        JZ        ??zclGeneral_SendGroupGetMembershipRequest_2
//  494       *pBuf++ = capacity;
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_76:
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
//  495 
//  496     *pBuf++ = grpCnt;
??zclGeneral_SendGroupGetMembershipRequest_2:
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
//  497     for ( i = 0; i < grpCnt; i++ )
        MOV       R2,#0x0
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV       R5,A
        SJMP      ??zclGeneral_SendGroupGetMembershipRequest_3
//  498     {
//  499       *pBuf++ = LO_UINT16( grpList[i] );
??zclGeneral_SendGroupGetMembershipRequest_4:
        MOV       A,R2
        ADD       A,0xE0 /* A   */
        MOV       ?V4,A
        CLR       A
        RLC       A
        MOV       ?V5,A
        MOV       A,R4
        ADD       A,?V4
        MOV       ?V6,A
        MOV       A,R5
        ADDC      A,?V5
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine38 & 0xFFFF
//  500       *pBuf++ = HI_UINT16( grpList[i] );
//  501     }
??CrossCallReturnLabel_90:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??zclGeneral_SendGroupGetMembershipRequest_5
        INC       R1
??zclGeneral_SendGroupGetMembershipRequest_5:
        INC       R2
??zclGeneral_SendGroupGetMembershipRequest_3:
        MOV       A,R2
        CLR       C
        SUBB      A,?V2
        JC        ??zclGeneral_SendGroupGetMembershipRequest_4
//  502 
//  503     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  504                               cmd, TRUE, direction,
//  505                               disableDefaultRsp, 0, seqNum, len, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V4,R6
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        CLR       A
        MOV       ?V4,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        MOV       R6,A
//  506     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_SendGroupGetMembershipRequest_6
//  507   }
//  508   else
//  509     status = ZMemError;
??zclGeneral_SendGroupGetMembershipRequest_1:
        MOV       R6,#0x10
//  510 
//  511   return ( status );
??zclGeneral_SendGroupGetMembershipRequest_6:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x4
        SJMP      ??Subroutine44_0
//  512 }
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_64
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_65
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function zclGeneral_SendGroupGetMembershipRequest
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x5
          CFI EndBlock cfiBlock53
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock54
//  513 
//  514 /*********************************************************************
//  515  * @fn      zclGeneral_SendGroupResponse
//  516  *
//  517  * @brief   Send Group Response (not Group View Response)
//  518  *
//  519  * @param   srcEP - Sending application's endpoint
//  520  * @param   dstAddr - where you want the message to go
//  521  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  522  * @param   status - group command status
//  523  * @param   groupID - what group
//  524  *
//  525  * @return  ZStatus_t
//  526  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  527 ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupResponse:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function zclGeneral_SendGroupResponse
        CODE
//  528                                         uint8 cmd, uint8 status, uint16 groupID,
//  529                                         uint8 disableDefaultRsp, uint8 seqNum )
//  530 {
        FUNCALL zclGeneral_SendGroupResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R7,A
        MOV       A,R5
//  531   uint8 buf[3];
//  532 
//  533   buf[0] = status;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV       R1,A
//  534   buf[1] = LO_UINT16( groupID );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  535   buf[2] = HI_UINT16( groupID );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        LCALL     ??Subroutine42_0 & 0xFFFF
//  536 
//  537   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  538                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  539                           disableDefaultRsp, 0, seqNum, 3, buf );
??CrossCallReturnLabel_95:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x3
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R4
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R7
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x3
        LJMP      ?Subroutine2 & 0xFFFF
//  540 }
          CFI EndBlock cfiBlock55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zclGeneral_SendIdentifyEZModeInvoke
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       A,R6
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zclGeneral_SendGroupResponse
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zclGeneral_SendIdentify
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclGeneral_SendIdentifyEZModeInvoke
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOV       R1,A
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyUpdateCommState
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclGeneral_SendGroupRequest
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zclGeneral_SendGroupResponse
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclGeneral_SendIdentify
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zclGeneral_SendIdentifyEZModeInvoke
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77
//  541 
//  542 /*********************************************************************
//  543  * @fn      zclGeneral_SendGroupViewResponse
//  544  *
//  545  * @brief   Call to send Group Response Command
//  546  *
//  547  * @param   srcEP - Sending application's endpoint
//  548  * @param   dstAddr - where you want the message to go
//  549  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  550  * @param   status - group command status
//  551  * @param   grp - group info
//  552  *
//  553  * @return  ZStatus_t
//  554  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  555 ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupViewResponse:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function zclGeneral_SendGroupViewResponse
        CODE
//  556                                             uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
//  557 {
        FUNCALL zclGeneral_SendGroupViewResponse, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupViewResponse, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupViewResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupViewResponse, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
//  558   uint8 *buf;
//  559   uint8 len;
//  560   ZStatus_t stat;
//  561 
//  562   len = 1 + 2 + 1; // Status + Group ID + name length
        MOV       R0,#0x4
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
//  563 
//  564   if ( status == ZCL_STATUS_SUCCESS )
??CrossCallReturnLabel_47:
        MOV       A,?V0
        ADD       A,#0x2
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V7,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??zclGeneral_SendGroupViewResponse_0
//  565   {
//  566     len += grp->name[0];  // String length
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
//  567   }
//  568 
//  569   buf = zcl_mem_alloc( len );
??zclGeneral_SendGroupViewResponse_0:
        MOV       A,R0
        LCALL     ?Subroutine27 & 0xFFFF
//  570   if ( buf )
??CrossCallReturnLabel_69:
        JNZ       $+5
        LJMP      ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
//  571   {
//  572     buf[0] = status;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_77:
        MOVX      @DPTR,A
//  573     buf[1] = LO_UINT16( grp->ID );
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_78:
        INC       DPTR
        LCALL     ?Subroutine29 & 0xFFFF
//  574     buf[2] = HI_UINT16( grp->ID );
??CrossCallReturnLabel_72:
        LCALL     ?Subroutine21 & 0xFFFF
//  575 
//  576     if ( status == ZCL_STATUS_SUCCESS )
??CrossCallReturnLabel_61:
        MOV       A,R2
        ADD       A,#0x3
        MOV       R0,A
        CLR       A
        ADDC      A,?V5
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??zclGeneral_SendGroupViewResponse_2
//  577     {
//  578       buf[3] = grp->name[0]; // string length
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine29 & 0xFFFF
//  579       zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
//  580     }
??CrossCallReturnLabel_73:
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,?V4
        ADD       A,#0x4
        LCALL     ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        SJMP      ??zclGeneral_SendGroupViewResponse_3
//  581     else //ZCL_STATUS_NOT_FOUND
//  582     {
//  583       buf[3] = 0;
??zclGeneral_SendGroupViewResponse_2:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
//  584     }
//  585 
//  586     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  587                             COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  588                             disableDefaultRsp, 0, seqNum, len, buf );
??zclGeneral_SendGroupViewResponse_3:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V0,R6
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        MOV       R6,A
//  589     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_SendGroupViewResponse_4
//  590   }
//  591   else
//  592   {
//  593     stat = ZMemError;
??zclGeneral_SendGroupViewResponse_1:
        MOV       R6,#0x10
//  594   }
//  595 
//  596   return ( stat );
??zclGeneral_SendGroupViewResponse_4:
        LJMP      ?Subroutine3 & 0xFFFF
//  597 }
          CFI EndBlock cfiBlock78

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function zclGeneral_SendGroupGetMembershipRequest
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_60
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_61
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-4
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker84 Using cfiCommon1
          CFI (cfiPicker84) NoFunction
          CFI (cfiPicker84) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function zclGeneral_SendGroupViewResponse
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOV       R6,A
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function zclGeneral_SendGroupGetMembershipRequest
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond94 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_79:
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zclGeneral_RegisterCmdCallbacks
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
//  598 #endif // ZCL_GROUPS
//  599 
//  600 #ifdef ZCL_SCENES
//  601 /*********************************************************************
//  602  * @fn      zclGeneral_SendAddSceneRequest
//  603  *
//  604  * @brief   Send the (Enhanced) Add Scene Request to a device. You can
//  605  *           also use the appropriate macro.
//  606  *
//  607  * @param   srcEP - Sending Apps endpoint
//  608  * @param   dstAddr - where to send the request
//  609  * @param   scene - pointer to the scene structure
//  610  * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
//  611  * @param   disableDefaultRsp - whether to disable the Default Response command
//  612  * @param   seqNum - sequence number
//  613  *
//  614  * @return  ZStatus_t
//  615  */
//  616 ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  617                                           uint8 cmd, zclGeneral_Scene_t *scene,
//  618                                           uint8 disableDefaultRsp, uint8 seqNum )
//  619 {
//  620   uint8 *buf;
//  621   uint8 *pBuf;
//  622   uint8 len;
//  623   ZStatus_t status;
//  624 
//  625   len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
//  626   len += scene->name[0] + 1; // String + 1 for length
//  627 
//  628   // Add something for the extension field length
//  629   len += scene->extLen;
//  630 
//  631   buf = zcl_mem_alloc( len );
//  632   if ( buf )
//  633   {
//  634     pBuf = buf;
//  635     *pBuf++ = LO_UINT16( scene->groupID );
//  636     *pBuf++ = HI_UINT16( scene->groupID );
//  637     *pBuf++ = scene->ID;
//  638     *pBuf++ = LO_UINT16( scene->transTime );
//  639     *pBuf++ = HI_UINT16( scene->transTime );
//  640     *pBuf++ = scene->name[0]; // string length
//  641     zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  642     pBuf += scene->name[0]; // move pass name
//  643 
//  644     // Add the extension fields
//  645     if ( scene->extLen > 0 )
//  646       zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  647 
//  648     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  649                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  650                               disableDefaultRsp, 0, seqNum, len, buf );
//  651     zcl_mem_free( buf );
//  652   }
//  653   else
//  654     status = ZMemError;
//  655 
//  656   return ( status );
//  657 }
//  658 
//  659 /*********************************************************************
//  660  * @fn      zclGeneral_SendSceneRequest
//  661  *
//  662  * @brief   Send a Scene Request to a device.  You can also use the
//  663  *          appropriate macro.
//  664  *
//  665  * @param   srcEP - Sending Apps endpoint
//  666  * @param   dstAddr - where to send the request
//  667  * @param   cmd - one of the following:
//  668  *              COMMAND_SCENE_VIEW
//  669  *              COMMAND_SCENE_REMOVE
//  670  *              COMMAND_SCENE_REMOVE_ALL
//  671  *              COMMAND_SCENE_STORE
//  672  *              COMMAND_SCENE_RECALL
//  673  *              COMMAND_SCENE_GET_MEMBERSHIP
//  674  *              COMMAND_SCENE_ENHANCED_VIEW
//  675  * @param   groupID - group ID
//  676  * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
//  677  *                    COMMAND_SCENE_GET_MEMBERSHIP)
//  678  * @param   disableDefaultRsp - whether to disable the Default Response command
//  679  * @param   seqNum - sequence number
//  680  * @return  ZStatus_t
//  681  */
//  682 ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  683                                        uint8 cmd, uint16 groupID, uint8 sceneID,
//  684                                        uint8 disableDefaultRsp, uint8 seqNum )
//  685 {
//  686   uint8 buf[3];
//  687   uint8 len = 2;
//  688 
//  689   buf[0] = LO_UINT16( groupID );
//  690   buf[1] = HI_UINT16( groupID );
//  691 
//  692   if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
//  693   {
//  694     buf[2] = sceneID;
//  695     len++;
//  696   }
//  697 
//  698   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  699                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  700                             disableDefaultRsp, 0, seqNum, len, buf ) );
//  701 }
//  702 
//  703 /*********************************************************************
//  704  * @fn      zclGeneral_SendSceneResponse
//  705  *
//  706  * @brief   Send Group Response (not Group View Response)
//  707  *
//  708  * @param   srcEP - Sending application's endpoint
//  709  * @param   dstAddr - where you want the message to go
//  710  * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
//  711  *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
//  712  * @param   status - scene command status
//  713  * @param   groupID - what group
//  714  * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
//  715  *
//  716  * @return  ZStatus_t
//  717  */
//  718 ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  719                                         uint8 cmd, uint8 status, uint16 groupID,
//  720                                         uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
//  721 {
//  722   uint8 buf[4];
//  723   uint8 len = 1 + 2; // Status + Group ID
//  724 
//  725   buf[0] = status;
//  726   buf[1] = LO_UINT16( groupID );
//  727   buf[2] = HI_UINT16( groupID );
//  728 
//  729   if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
//  730   {
//  731     buf[3] = sceneID;
//  732     len++;
//  733   }
//  734 
//  735   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  736                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  737                           disableDefaultRsp, 0, seqNum, len, buf );
//  738 }
//  739 
//  740 /*********************************************************************
//  741  * @fn      zclGeneral_SendSceneViewResponse
//  742  *
//  743  * @brief   Call to send Scene (Enahced) View Response Command. You can
//  744  *           also use the appropriate macro.
//  745  *
//  746  * @param   srcEP - Sending application's endpoint
//  747  * @param   dstAddr - where you want the message to go
//  748  * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
//  749  * @param   status - scene command status
//  750  * @param   scene - scene info
//  751  *
//  752  * @return  ZStatus_t
//  753  */
//  754 ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
//  755                                        uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
//  756                                        uint8 disableDefaultRsp, uint8 seqNum )
//  757 {
//  758   uint8 *buf;
//  759   uint8 *pBuf;
//  760   uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
//  761   ZStatus_t stat;
//  762 
//  763   if ( status == ZCL_STATUS_SUCCESS )
//  764   {
//  765     len += 2; // Transition Time
//  766     len += scene->name[0] + 1; // string + 1 for length
//  767 
//  768     // Add something for the extension field length
//  769     len += scene->extLen;
//  770   }
//  771 
//  772   buf = zcl_mem_alloc( len );
//  773   if ( buf )
//  774   {
//  775     pBuf = buf;
//  776     *pBuf++ = status;
//  777     *pBuf++ = LO_UINT16( scene->groupID );
//  778     *pBuf++ = HI_UINT16( scene->groupID );
//  779     *pBuf++ = scene->ID;
//  780     if ( status == ZCL_STATUS_SUCCESS )
//  781     {
//  782       uint16 transTime = scene->transTime;
//  783       if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
//  784       {
//  785         // Transition time is in 1/10s
//  786         transTime *= 10;
//  787         transTime += scene->transTime100ms;
//  788       }
//  789 
//  790       *pBuf++ = LO_UINT16( transTime );
//  791       *pBuf++ = HI_UINT16( transTime );
//  792       *pBuf++ = scene->name[0]; // string length
//  793       if ( scene->name[0] != 0 )
//  794       {
//  795         zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  796         pBuf += scene->name[0]; // move pass name
//  797       }
//  798 
//  799       // Add the extension fields
//  800       if ( scene->extLen > 0 )
//  801         zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  802     }
//  803 
//  804     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  805                             cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  806                             disableDefaultRsp, 0, seqNum, len, buf );
//  807     zcl_mem_free( buf );
//  808   }
//  809   else
//  810     stat = ZMemError;
//  811 
//  812   return ( stat );
//  813 }
//  814 
//  815 /*********************************************************************
//  816  * @fn      zclGeneral_SendSceneGetMembershipResponse
//  817  *
//  818  * @brief   Call to send Scene Get Membership Response Command
//  819  *
//  820  * @param   srcEP - Sending application's endpoint
//  821  * @param   dstAddr - where you want the message to go
//  822  * @param   status - scene command status
//  823  * @param   capacity - remaining capacity of the scene table
//  824  * @param   sceneCnt - number of scenes in the scene list
//  825  * @param   sceneList - list of scene IDs
//  826  * @param   groupID - group ID that scene belongs to
//  827  * @param   seqNum - sequence number
//  828  *
//  829  * @return  ZStatus_t
//  830  */
//  831 ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  832                                                      uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
//  833                                                      uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  834 {
//  835   uint8 *buf;
//  836   uint8 *pBuf;
//  837   uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
//  838   uint8 i;
//  839   ZStatus_t stat;
//  840 
//  841   if ( status == ZCL_STATUS_SUCCESS )
//  842   {
//  843     len++; // Scene Count
//  844     len += sceneCnt; // Scene List (Scene ID is a single octet)
//  845   }
//  846 
//  847   buf = zcl_mem_alloc( len );
//  848   if ( buf )
//  849   {
//  850     pBuf = buf;
//  851     *pBuf++ = status;
//  852     *pBuf++ = capacity;
//  853     *pBuf++ = LO_UINT16( groupID );
//  854     *pBuf++ = HI_UINT16( groupID );
//  855     if ( status == ZCL_STATUS_SUCCESS )
//  856     {
//  857       *pBuf++ = sceneCnt;
//  858       for ( i = 0; i < sceneCnt; i++ )
//  859         *pBuf++ = sceneList[i];
//  860     }
//  861 
//  862     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  863                             COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
//  864                             ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
//  865     zcl_mem_free( buf );
//  866   }
//  867   else
//  868     stat = ZMemError;
//  869 
//  870   return ( stat );
//  871 }
//  872 
//  873 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  874 /*********************************************************************
//  875  * @fn      zclGeneral_SendSceneCopy
//  876  *
//  877  * @brief   Send Scene Copy Request to a device
//  878  *
//  879  * @param   srcEP - sending application's endpoint
//  880  * @param   dstAddr - where to send the request
//  881  * @param   mode - how scene copy is to proceed
//  882  * @param   groupIDFrom - group from which scene to be copied
//  883  * @param   sceneIDFrom - scene from which scene to be copied
//  884  * @param   groupIDTo - group to which scene to be copied
//  885  * @param   sceneIDTo - scene to which scene to be copied
//  886  * @param   disableDefaultRsp - disable Default Response command
//  887  * @param   seqNum - the identification number for the transaction
//  888  *
//  889  * @return  ZStatus_t
//  890  */
//  891 ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
//  892                                     uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
//  893                                     uint16 groupIDTo, uint8 sceneIDTo,
//  894                                     uint8 disableDefaultRsp, uint8 seqNum )
//  895 {
//  896   uint8 buf[7];
//  897 
//  898   buf[0] = mode;
//  899   buf[1] = LO_UINT16( groupIDFrom );
//  900   buf[2] = HI_UINT16( groupIDFrom );
//  901   buf[3] = sceneIDFrom;
//  902   buf[4] = LO_UINT16( groupIDTo );
//  903   buf[5] = HI_UINT16( groupIDTo );
//  904   buf[6] = sceneIDTo;
//  905 
//  906   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  907                             COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  908                             disableDefaultRsp, 0, seqNum, 7, buf ) );
//  909 }
//  910 
//  911 /*********************************************************************
//  912  * @fn      zclGeneral_SendSceneCopyResponse
//  913  *
//  914  * @brief   Send Scene Copy Response to a device
//  915  *
//  916  * @param   srcEP - sending application's endpoint
//  917  * @param   dstAddr - where to send the request
//  918  * @param   status - status of copy scene attemp
//  919  * @param   groupIDFrom - group from which scene was copied
//  920  * @param   sceneIDFrom - scene from which scene was copied
//  921  * @param   disableDefaultRsp - disable Default Response command
//  922  * @param   seqNum - the identification number for the transaction
//  923  *
//  924  * @return  ZStatus_t
//  925  */
//  926 ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  927                                             uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
//  928                                             uint8 disableDefaultRsp, uint8 seqNum )
//  929 {
//  930   uint8 buf[4];
//  931 
//  932   buf[0] = status;
//  933   buf[1] = LO_UINT16( groupIDFrom );
//  934   buf[2] = HI_UINT16( groupIDFrom );
//  935   buf[3] = sceneIDFrom;
//  936 
//  937   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  938                             COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  939                             disableDefaultRsp, 0, seqNum, 4, buf ) );
//  940 }
//  941 #endif // ZCL_LIGHT_LINK_ENHANCE
//  942 #endif // ZCL_SCENES
//  943 
//  944 #ifdef ZCL_ON_OFF
//  945 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  946 /*********************************************************************
//  947  * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
//  948  *
//  949  * @brief   Call to send out an Off with Effect Command.
//  950  *
//  951  * @param   srcEP - Sending application's endpoint
//  952  * @param   dstAddr - where you want the message to go
//  953  * @param   effectId - fading effect to use when switching light off
//  954  * @param   effectVariant - which variant of effect to be triggered
//  955  * @param   disableDefaultRsp - whether to disable the Default Response command
//  956  * @param   seqNum - sequence number
//  957  *
//  958  * @return  ZStatus_t
//  959  */
//  960 ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  961                                                  uint8 effectId, uint8 effectVariant,
//  962                                                  uint8 disableDefaultRsp, uint8 seqNum )
//  963 {
//  964   uint8 buf[2];
//  965 
//  966   buf[0] = effectId;
//  967   buf[1] = effectVariant;
//  968 
//  969   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
//  970                           COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  971                           disableDefaultRsp, 0, seqNum, 2, buf );
//  972 }
//  973 
//  974 /*********************************************************************
//  975  * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
//  976  *
//  977  * @brief   Call to send out an On with Timed Off Command.
//  978  *
//  979  * @param   srcEP - Sending application's endpoint
//  980  * @param   dstAddr - where you want the message to go
//  981  * @param   onOffCtrl - how the lamp is to be operated
//  982  * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
//  983  * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
//  984  * @param   disableDefaultRsp - whether to disable the Default Response command
//  985  * @param   seqNum - sequence number
//  986  *
//  987  * @return  ZStatus_t
//  988  */
//  989 ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
//  990                                                    zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
//  991                                                    uint8 disableDefaultRsp, uint8 seqNum )
//  992 {
//  993   uint8 buf[5];
//  994 
//  995   buf[0] = onOffCtrl.byte;
//  996   buf[1] = LO_UINT16( onTime );
//  997   buf[2] = HI_UINT16( onTime );
//  998   buf[3] = LO_UINT16( offWaitTime );
//  999   buf[4] = HI_UINT16( offWaitTime );
// 1000 
// 1001   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
// 1002                           COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1003                           disableDefaultRsp, 0, seqNum, 5, buf );
// 1004 }
// 1005 #endif // ZCL_LIGHT_LINK_ENHANCE
// 1006 #endif // ZCL_ON_OFF
// 1007 
// 1008 #ifdef ZCL_LEVEL_CTRL
// 1009 /*********************************************************************
// 1010  * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
// 1011  *
// 1012  * @brief   Call to send out a Level Control Request. You can also use
// 1013  *          the appropriate macro.
// 1014  *
// 1015  * @param   srcEP - Sending application's endpoint
// 1016  * @param   dstAddr - where you want the message to go
// 1017  * @param   cmd - one of the following:
// 1018  *              COMMAND_LEVEL_MOVE_TO_LEVEL or
// 1019  *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
// 1020  * @param   level - what level to move to
// 1021  * @param   transitionTime - how long to take to get to the level (in seconds)
// 1022  *
// 1023  * @return  ZStatus_t
// 1024  */
// 1025 ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1026                                                          uint8 cmd, uint8 level, uint16 transTime,
// 1027                                                          uint8 disableDefaultRsp, uint8 seqNum )
// 1028 {
// 1029   uint8 buf[3];
// 1030 
// 1031   buf[0] = level;
// 1032   buf[1] = LO_UINT16( transTime );
// 1033   buf[2] = HI_UINT16( transTime );
// 1034 
// 1035   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1036                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1037                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1038 }
// 1039 
// 1040 /*********************************************************************
// 1041  * @fn      zclGeneral_SendLevelControlMoveRequest
// 1042  *
// 1043  * @brief   Call to send out a Level Control Request. You can also use
// 1044  *          the appropriate macro.
// 1045  *
// 1046  * @param   srcEP - Sending application's endpoint
// 1047  * @param   dstAddr - where you want the message to go
// 1048  * @param   cmd - one of the following:
// 1049  *              COMMAND_LEVEL_MOVE or
// 1050  *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
// 1051  * @param   moveMode - LEVEL_MOVE_UP or
// 1052  *                     LEVEL_MOVE_DOWN
// 1053  * @param   rate - number of steps to take per second
// 1054  *
// 1055  * @return  ZStatus_t
// 1056  */
// 1057 ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1058                                                   uint8 cmd, uint8 moveMode, uint8 rate,
// 1059                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1060 {
// 1061   uint8 buf[2];
// 1062 
// 1063   buf[0] = moveMode;
// 1064   buf[1] = rate;
// 1065 
// 1066   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1067                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1068                           disableDefaultRsp, 0, seqNum, 2, buf );
// 1069 }
// 1070 
// 1071 /*********************************************************************
// 1072  * @fn      zclGeneral_SendLevelControlStepRequest
// 1073  *
// 1074  * @brief   Call to send out a Level Control Request. You can also use
// 1075  *          the appropriate macro.
// 1076  *
// 1077  * @param   srcEP - Sending application's endpoint
// 1078  * @param   dstAddr - where you want the message to go
// 1079  * @param   cmd - one of the following:
// 1080  *              COMMAND_LEVEL_STEP
// 1081  *              COMMAND_LEVEL_STEP_WITH_ON_OFF
// 1082  * @param   stepMode - LEVEL_STEP_UP or
// 1083  *                     LEVEL_STEP_DOWN
// 1084  * @param   amount - number of levels to step
// 1085  * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
// 1086  *
// 1087  * @return  ZStatus_t
// 1088  */
// 1089 ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1090                                                   uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
// 1091                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1092 {
// 1093   uint8 buf[4];
// 1094 
// 1095   buf[0] = stepMode;
// 1096   buf[1] = stepSize;
// 1097   buf[2] = LO_UINT16( transTime );
// 1098   buf[3] = HI_UINT16( transTime );
// 1099 
// 1100   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1101                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1102                           disableDefaultRsp, 0, seqNum, 4, buf );
// 1103 }
// 1104 
// 1105 /*********************************************************************
// 1106  * @fn      zclGeneral_SendLevelControlStepRequest
// 1107  *
// 1108  * @brief   Call to send out a Level Control Request. You can also use
// 1109  *          the appropriate macro.
// 1110  *
// 1111  * @param   srcEP - Sending application's endpoint
// 1112  * @param   dstAddr - where you want the message to go
// 1113  * @param   cmd - one of the following:
// 1114  *              COMMAND_LEVEL_STOP
// 1115  *              COMMAND_LEVEL_STOP_WITH_ON_OFF
// 1116  *
// 1117  * @return  ZStatus_t
// 1118  */
// 1119 ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1120                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1121 {
// 1122   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1123                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1124                           disableDefaultRsp, 0, seqNum, 0, NULL );
// 1125 }
// 1126 #endif // ZCL_LEVEL_CTRL
// 1127 
// 1128 #ifdef ZCL_ALARMS
// 1129 /*********************************************************************
// 1130  * @fn      zclGeneral_SendAlarm
// 1131  *
// 1132  * @brief   Call to send out an Alarm Request Command
// 1133  *
// 1134  * @param   srcEP - Sending application's endpoint
// 1135  * @param   dstAddr - where you want the message to go
// 1136  * @param   cmd - COMMAND_ALARMS_ALARM
// 1137  * @param   alarmCode - code for the cause of the alarm
// 1138  * @param   clusterID - cluster whose attribute generate the alarm
// 1139  *
// 1140  * @return  ZStatus_t
// 1141  */
// 1142 ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
// 1143                                 uint8 alarmCode, uint16 clusterID,
// 1144                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1145 {
// 1146   uint8 buf[3];
// 1147 
// 1148   buf[0] = alarmCode;
// 1149   buf[1] = LO_UINT16( clusterID );
// 1150   buf[2] = HI_UINT16( clusterID );
// 1151 
// 1152   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1153                           COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1154                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1155 }
// 1156 
// 1157 /*********************************************************************
// 1158  * @fn      zclGeneral_SendAlarmReset
// 1159  *
// 1160  * @brief   Call to send out an Alarm Reset Command
// 1161  *
// 1162  * @param   srcEP - Sending application's endpoint
// 1163  * @param   dstAddr - where you want the message to go
// 1164  * @param   alarmCode - code for the cause of the alarm
// 1165  * @param   clusterID - cluster whose attribute generate the alarm
// 1166  *
// 1167  * @return  ZStatus_t
// 1168 */
// 1169 ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
// 1170                                      uint8 alarmCode, uint16 clusterID,
// 1171                                      uint8 disableDefaultRsp, uint8 seqNum )
// 1172 {
// 1173   uint8 buf[3];
// 1174 
// 1175   buf[0] = alarmCode;
// 1176   buf[1] = LO_UINT16( clusterID );
// 1177   buf[2] = HI_UINT16( clusterID );
// 1178 
// 1179   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1180                           COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1181                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1182 }
// 1183 
// 1184 /*********************************************************************
// 1185  * @fn      zclGeneral_SendAlarmGetResponse
// 1186  *
// 1187  * @brief   Call to send out an Alarm Get Response Command
// 1188  *
// 1189  * @param   srcEP - Sending application's endpoint
// 1190  * @param   dstAddr - where you want the message to go
// 1191  * @param   status - SUCCESS or NOT_FOUND
// 1192  * @param   alarmCode - code for the cause of the alarm
// 1193  * @param   clusterID - cluster whose attribute generate the alarm
// 1194  * @param   timeStamp - time at which the alarm occured
// 1195  *
// 1196  * @return  ZStatus_t
// 1197  */
// 1198 ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1199                                            uint8 status, uint8 alarmCode, uint16 clusterID,
// 1200                                            uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
// 1201 {
// 1202   uint8 buf[8];
// 1203   uint8 len = 1; // Status
// 1204 
// 1205   buf[0] = status;
// 1206   if ( status == ZCL_STATUS_SUCCESS )
// 1207   {
// 1208     len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
// 1209     buf[1] = alarmCode;
// 1210     buf[2] = LO_UINT16( clusterID );
// 1211     buf[3] = HI_UINT16( clusterID );
// 1212     zcl_buffer_uint32( &buf[4], timeStamp );
// 1213   }
// 1214 
// 1215   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1216                           COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1217                           disableDefaultRsp, 0, seqNum, len, buf );
// 1218 }
// 1219 
// 1220 #ifdef SE_UK_EXT
// 1221 /*********************************************************************
// 1222  * @fn      zclGeneral_SendAlarmGetEventLog
// 1223  *
// 1224  * @brief   Call to send out an Alarm Get Event Log Command
// 1225  *
// 1226  * @param   srcEP - Sending application's endpoint
// 1227  * @param   dstAddr - where you want the message to go
// 1228  * @param   pEventLog - pointer to Get Event Log Command
// 1229  * @param   disableDefaultRsp - disable default response
// 1230  * @param   seqNum - ZCL sequence number
// 1231  *
// 1232  * @return  ZStatus_t
// 1233  */
// 1234 ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1235                                            zclGetEventLog_t *pEventLog,
// 1236                                            uint8 disableDefaultRsp, uint8 seqNum )
// 1237 {
// 1238   uint8 buf[10];
// 1239 
// 1240   buf[0] = pEventLog->logID;
// 1241   zcl_buffer_uint32( &buf[1], pEventLog->startTime );
// 1242   zcl_buffer_uint32( &buf[5], pEventLog->endTime );
// 1243   buf[9] = pEventLog->numEvents;
// 1244 
// 1245   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1246                           COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1247                           disableDefaultRsp, 0, seqNum, 10, buf );
// 1248 }
// 1249 
// 1250 /*********************************************************************
// 1251  * @fn      zclGeneral_SendAlarmPublishEventLog
// 1252  *
// 1253  * @brief   Call to send out an Alarm Publish Event Log Command
// 1254  *
// 1255  * @param   srcEP - Sending application's endpoint
// 1256  * @param   dstAddr - where you want the message to go
// 1257  * @param   pEventLog - pointer to Publish Event Log Command
// 1258  * @param   disableDefaultRsp - disable default response
// 1259  * @param   seqNum - ZCL sequence number
// 1260  *
// 1261  * @return  ZStatus_t
// 1262  */
// 1263 ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1264                                                zclPublishEventLog_t *pEventLog,
// 1265                                                uint8 disableDefaultRsp, uint8 seqNum )
// 1266 {
// 1267   uint8 *buf;
// 1268   uint8 *pBuf;
// 1269   uint8 bufLen;
// 1270 
// 1271   // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
// 1272   bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
// 1273 
// 1274   buf = zcl_mem_alloc( bufLen );
// 1275   if ( buf == NULL )
// 1276   {
// 1277     return (ZMemError);
// 1278   }
// 1279 
// 1280   pBuf = buf;
// 1281   *pBuf++ = pEventLog->logID;
// 1282   *pBuf++ = pEventLog->cmdIndex;
// 1283   *pBuf++ = pEventLog->totalCmds;
// 1284 
// 1285   for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
// 1286   {
// 1287     zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
// 1288 
// 1289     *pBuf++ = pLogs->eventId;
// 1290     pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
// 1291   }
// 1292 
// 1293   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1294                           COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1295                           disableDefaultRsp, 0, seqNum, bufLen, buf );
// 1296 }
// 1297 #endif // SE_UK_EXT
// 1298 #endif // ZCL_ALARMS
// 1299 
// 1300 #ifdef ZCL_LOCATION
// 1301 /*********************************************************************
// 1302  * @fn      zclGeneral_SendLocationSetAbsolute
// 1303  *
// 1304  * @brief   Call to send out a Set Absolute Location Command
// 1305  *
// 1306  * @param   srcEP - Sending application's endpoint
// 1307  * @param   dstAddr - where you want the message to go
// 1308  * @param   absLoc - absolute location info
// 1309  *
// 1310  * @return  ZStatus_t
// 1311  */
// 1312 ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
// 1313                                               zclLocationAbsolute_t *absLoc,
// 1314                                               uint8 disableDefaultRsp, uint8 seqNum )
// 1315 {
// 1316    uint8 buf[10]; // 5 fields (2 octects each)
// 1317 
// 1318    buf[0] = LO_UINT16( absLoc->coordinate1 );
// 1319    buf[1] = HI_UINT16( absLoc->coordinate1 );
// 1320    buf[2] = LO_UINT16( absLoc->coordinate2 );
// 1321    buf[3] = HI_UINT16( absLoc->coordinate2 );
// 1322    buf[4] = LO_UINT16( absLoc->coordinate3 );
// 1323    buf[5] = HI_UINT16( absLoc->coordinate3 );
// 1324    buf[6] = LO_UINT16( absLoc->power );
// 1325    buf[7] = HI_UINT16( absLoc->power );
// 1326    buf[8] = LO_UINT16( absLoc->pathLossExponent );
// 1327    buf[9] = HI_UINT16( absLoc->pathLossExponent );
// 1328 
// 1329    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1330                            COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
// 1331                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
// 1332 }
// 1333 
// 1334 /*********************************************************************
// 1335  * @fn      zclGeneral_SendLocationSetDevCfg
// 1336  *
// 1337  * @brief   Call to send out a Set Device Configuration Command
// 1338  *
// 1339  * @param   srcEP - Sending application's endpoint
// 1340  * @param   dstAddr - where you want the message to go
// 1341  * @param   devCfg - device configuration info
// 1342  *
// 1343  * @return  ZStatus_t
// 1344  */
// 1345 ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1346                                             zclLocationDevCfg_t *devCfg,
// 1347                                             uint8 disableDefaultRsp, uint8 seqNum )
// 1348 {
// 1349    uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
// 1350 
// 1351    buf[0] = LO_UINT16( devCfg->power );
// 1352    buf[1] = HI_UINT16( devCfg->power );
// 1353    buf[2] = LO_UINT16( devCfg->pathLossExponent );
// 1354    buf[3] = HI_UINT16( devCfg->pathLossExponent );
// 1355    buf[4] = LO_UINT16( devCfg->calcPeriod );
// 1356    buf[5] = HI_UINT16( devCfg->calcPeriod );
// 1357    buf[6] = devCfg->numMeasurements;
// 1358    buf[7] = LO_UINT16( devCfg->reportPeriod );
// 1359    buf[8] = HI_UINT16( devCfg->reportPeriod );
// 1360 
// 1361    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1362                            COMMAND_LOCATION_SET_DEV_CFG, TRUE,
// 1363                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
// 1364 }
// 1365 
// 1366 /*********************************************************************
// 1367  * @fn      zclGeneral_SendLocationGetDevCfg
// 1368  *
// 1369  * @brief   Call to send out a Get Device Configuration Command
// 1370  *
// 1371  * @param   srcEP - Sending application's endpoint
// 1372  * @param   dstAddr - where you want the message to go
// 1373  * @param   targetAddr - device for which location parameters are being requested
// 1374  *
// 1375  * @return  ZStatus_t
// 1376  */
// 1377 ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1378                                             uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
// 1379 {
// 1380   uint8 buf[8];
// 1381 
// 1382   zcl_memcpy( buf, targetAddr, 8 );
// 1383 
// 1384   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1385                           COMMAND_LOCATION_GET_DEV_CFG, TRUE,
// 1386                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
// 1387 }
// 1388 
// 1389 /*********************************************************************
// 1390  * @fn      zclGeneral_SendLocationGetData
// 1391  *
// 1392  * @brief   Call to send out a Get Location Data Command
// 1393  *
// 1394  * @param   srcEP - Sending application's endpoint
// 1395  * @param   dstAddr - where you want the message to go
// 1396  * @param   locaData - location information and channel parameters that are requested.
// 1397  *
// 1398  * @return  ZStatus_t
// 1399  */
// 1400 ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
// 1401                                           zclLocationGetData_t *locData,
// 1402                                           uint8 disableDefaultRsp, uint8 seqNum )
// 1403 {
// 1404   uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
// 1405   uint8 *pBuf = buf;
// 1406   uint8 len = 2; // bitmap + number responses
// 1407 
// 1408   *pBuf  = locData->absoluteOnly;
// 1409   *pBuf |= locData->recalculate << 1;
// 1410   *pBuf |= locData->brdcastIndicator << 2;
// 1411   *pBuf |= locData->brdcastResponse << 3;
// 1412   *pBuf |= locData->compactResponse << 4;
// 1413   pBuf++;  // move past the bitmap field
// 1414 
// 1415   *pBuf++ = locData->numResponses;
// 1416 
// 1417   if ( locData->brdcastIndicator == 0 )
// 1418   {
// 1419     zcl_memcpy( pBuf, locData->targetAddr, 8 );
// 1420     len += 8; // ieee addr
// 1421   }
// 1422 
// 1423   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1424                           COMMAND_LOCATION_GET_DATA, TRUE,
// 1425                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1426 }
// 1427 
// 1428 /*********************************************************************
// 1429  * @fn      zclGeneral_SendLocationDevCfgResponse
// 1430  *
// 1431  * @brief   Call to send out a Device Configuration Response Command
// 1432  *
// 1433  * @param   srcEP - Sending application's endpoint
// 1434  * @param   dstAddr - where you want the message to go
// 1435  * @param   devCfg - device's location parameters that are requested
// 1436  *
// 1437  * @return  ZStatus_t
// 1438  */
// 1439 ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1440                                                  zclLocationDevCfgRsp_t *devCfg,
// 1441                                                  uint8 disableDefaultRsp, uint8 seqNum )
// 1442 {
// 1443   uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
// 1444   uint8 len = 1; // Status
// 1445 
// 1446   buf[0] = devCfg->status;
// 1447   if ( devCfg->status == ZCL_STATUS_SUCCESS )
// 1448   {
// 1449     buf[1] = LO_UINT16( devCfg->data.power );
// 1450     buf[2] = HI_UINT16( devCfg->data.power );
// 1451     buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
// 1452     buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
// 1453     buf[5] = LO_UINT16( devCfg->data.calcPeriod );
// 1454     buf[6] = HI_UINT16( devCfg->data.calcPeriod );
// 1455     buf[7] = devCfg->data.numMeasurements;
// 1456     buf[8] = LO_UINT16( devCfg->data.reportPeriod );
// 1457     buf[9] = HI_UINT16( devCfg->data.reportPeriod );
// 1458     len += 9;
// 1459   }
// 1460 
// 1461   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1462                           COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
// 1463                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1464 }
// 1465 
// 1466 /*********************************************************************
// 1467  * @fn      zclGeneral_SendLocationData
// 1468  *
// 1469  * @brief   Call to send out location data
// 1470  *
// 1471  * @param   srcEP - Sending application's endpoint
// 1472  * @param   dstAddr - where you want the message to go
// 1473  * @param   status - indicates whether response to request was successful or not
// 1474  * @param   locData - location information and channel parameters being sent
// 1475  *
// 1476  * @return  ZStatus_t
// 1477  */
// 1478 ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1479                                        uint8 status, zclLocationData_t *locData,
// 1480                                        uint8 disableDefaultRsp, uint8 seqNum )
// 1481 {
// 1482   uint8 buf[16];
// 1483   uint8 *pBuf = buf;
// 1484   uint8 len = 0;
// 1485 
// 1486   if ( cmd == COMMAND_LOCATION_DATA_RSP )
// 1487   {
// 1488     // Only response command includes a status field
// 1489     *pBuf++ = status;
// 1490     len++;
// 1491   }
// 1492 
// 1493   if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
// 1494   {
// 1495     // Notification or Response with successful status
// 1496     *pBuf++ = locData->type;
// 1497     *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
// 1498     *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
// 1499     *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
// 1500     *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
// 1501     len += 5;
// 1502 
// 1503     if ( locationType2D(locData->type) == 0 )
// 1504     {
// 1505       // 2D location doesn't have coordinate 3
// 1506       *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
// 1507       *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
// 1508       len += 2;
// 1509     }
// 1510 
// 1511     if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1512     {
// 1513       // Compact notification doesn't include these fields
// 1514       *pBuf++ = LO_UINT16( locData->absLoc.power );
// 1515       *pBuf++ = HI_UINT16( locData->absLoc.power );
// 1516       *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
// 1517       *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
// 1518       len += 4;
// 1519     }
// 1520 
// 1521     if ( locationTypeAbsolute(locData->type) == 0 )
// 1522     {
// 1523       // Absolute location doesn't include these fields
// 1524       if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1525       {
// 1526         // Compact notification doesn't include this field
// 1527         *pBuf++ = locData->calcLoc.locationMethod;
// 1528         len++;
// 1529       }
// 1530 
// 1531       *pBuf++ = locData->calcLoc.qualityMeasure;
// 1532       *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
// 1533       *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
// 1534       len += 3;
// 1535     }
// 1536   }
// 1537 
// 1538   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1539                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1540                           disableDefaultRsp, 0, seqNum, len, buf );
// 1541 }
// 1542 #endif // ZCL_LOCATION
// 1543 
// 1544 /*********************************************************************
// 1545  * @fn      zclGeneral_FindCallbacks
// 1546  *
// 1547  * @brief   Find the callbacks for an endpoint
// 1548  *
// 1549  * @param   endpoint - endpoint to find the application callbacks for
// 1550  *
// 1551  * @return  pointer to the callbacks
// 1552  */
// 1553 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
// 1554 {
// 1555   zclGenCBRec_t *pCBs;
// 1556 
// 1557   pCBs = zclGenCBs;
// 1558   while ( pCBs )
// 1559   {
// 1560     if ( pCBs->endpoint == endpoint )
// 1561       return ( pCBs->CBs );
// 1562     pCBs = pCBs->next;
// 1563   }
// 1564   return ( (zclGeneral_AppCallbacks_t *)NULL );
// 1565 }
// 1566 
// 1567 /*********************************************************************
// 1568  * @fn      zclGeneral_HdlIncoming
// 1569  *
// 1570  * @brief   Callback from ZCL to process incoming Commands specific
// 1571  *          to this cluster library or Profile commands for attributes
// 1572  *          that aren't in the attribute list
// 1573  *
// 1574  *
// 1575  * @param   pInMsg - pointer to the incoming message
// 1576  *
// 1577  * @return  ZStatus_t
// 1578  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1579 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
zclGeneral_HdlIncoming:
          CFI Block cfiBlock105 Using cfiCommon0
          CFI Function zclGeneral_HdlIncoming
        CODE
// 1580 {
        FUNCALL zclGeneral_HdlIncoming, zclGeneral_HdlInSpecificCommands
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1581   ZStatus_t stat = ZSuccess;
// 1582 
// 1583 #if defined ( INTER_PAN )
// 1584   if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
// 1585     return ( stat ); // Cluster not supported thru Inter-PAN
// 1586 #endif
// 1587   if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x1
        JNZ       ??zclGeneral_HdlIncoming_0
// 1588   {
// 1589     // Is this a manufacturer specific command?
// 1590     if ( pInMsg->hdr.fc.manuSpecific == 0 )
// 1591     {
// 1592       stat = zclGeneral_HdlInSpecificCommands( pInMsg );
        ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
        LCALL     `??zclGeneral_HdlInSpecificCommands::?relay`; Banked call to: zclGeneral_HdlInSpecificCommands
        MOV       A,R1
        MOV       R1,A
        SJMP      ??zclGeneral_HdlIncoming_1
// 1593     }
// 1594     else
// 1595     {
// 1596       // We don't support any manufacturer specific command.
// 1597       stat = ZFailure;
// 1598     }
// 1599   }
// 1600   else
// 1601   {
// 1602     // Handle all the normal (Read, Write...) commands -- should never get here
// 1603     stat = ZFailure;
??zclGeneral_HdlIncoming_0:
        MOV       R1,#0x1
// 1604   }
// 1605   return ( stat );
??zclGeneral_HdlIncoming_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1606 }
          CFI EndBlock cfiBlock105
// 1607 
// 1608 /*********************************************************************
// 1609  * @fn      zclGeneral_HdlInSpecificCommands
// 1610  *
// 1611  * @brief   Callback from ZCL to process incoming Commands specific
// 1612  *          to this cluster library
// 1613 
// 1614  * @param   pInMsg - pointer to the incoming message
// 1615  *
// 1616  * @return  ZStatus_t
// 1617  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1618 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
zclGeneral_HdlInSpecificCommands:
          CFI Block cfiBlock106 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
        CODE
// 1619 {
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInIdentity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInGroupsServer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInGroupsClient
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1620   ZStatus_t stat;
// 1621   zclGeneral_AppCallbacks_t *pCBs;
// 1622 
// 1623   // make sure endpoint exists
// 1624   pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       A,R0
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_120:
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPTR,#zclGenCBs
??zclGeneral_HdlInSpecificCommands_0:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_40:
        JZ        ??zclGeneral_HdlInSpecificCommands_1
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R4
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??zclGeneral_HdlInSpecificCommands_0
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV       R5,A
// 1625   if ( pCBs == NULL )
        MOV       A,R4
        ORL       A,R5
        JZ        ??zclGeneral_HdlInSpecificCommands_1
// 1626     return ( ZFailure );
// 1627 
// 1628   switch ( pInMsg->msg->clusterId )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_5
        CODE
// 1629   {
// 1630 #ifdef ZCL_BASIC
// 1631     case ZCL_CLUSTER_ID_GEN_BASIC:
// 1632       stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       ??zclGeneral_HdlInSpecificCommands_6
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??zclGeneral_HdlInSpecificCommands_7
??zclGeneral_HdlInSpecificCommands_1:
        MOV       R1,#0x1
        SJMP      ??zclGeneral_HdlInSpecificCommands_8
??zclGeneral_HdlInSpecificCommands_7:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_38:
        JZ        ??zclGeneral_HdlInSpecificCommands_6
        ; Setup parameters for indirect call
        LCALL     ?CALL_IND
??zclGeneral_HdlInSpecificCommands_6:
        MOV       R1,#0x0
        SJMP      ??zclGeneral_HdlInSpecificCommands_8
// 1633       break;
// 1634 #endif // ZCL_BASIC
// 1635 
// 1636 #ifdef ZCL_IDENTIFY
// 1637     case ZCL_CLUSTER_ID_GEN_IDENTIFY:
// 1638       stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_3:
        ; Setup parameters for call to function zclGeneral_ProcessInIdentity
        LCALL     `??zclGeneral_ProcessInIdentity::?relay`; Banked call to: zclGeneral_ProcessInIdentity
        SJMP      ??zclGeneral_HdlInSpecificCommands_9
// 1639       break;
// 1640 #endif // ZCL_IDENTIFY
// 1641 
// 1642 #ifdef ZCL_GROUPS
// 1643     case ZCL_CLUSTER_ID_GEN_GROUPS:
// 1644       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
??zclGeneral_HdlInSpecificCommands_4:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       ??zclGeneral_HdlInSpecificCommands_10
// 1645         stat = zclGeneral_ProcessInGroupsServer( pInMsg );
        ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
        LCALL     `??zclGeneral_ProcessInGroupsServer::?relay`; Banked call to: zclGeneral_ProcessInGroupsServer
        SJMP      ??zclGeneral_HdlInSpecificCommands_9
// 1646       else
// 1647         stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_10:
        ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
        LCALL     `??zclGeneral_ProcessInGroupsClient::?relay`; Banked call to: zclGeneral_ProcessInGroupsClient
??zclGeneral_HdlInSpecificCommands_9:
        MOV       A,R1
        SJMP      ??zclGeneral_HdlInSpecificCommands_11
// 1648       break;
// 1649 #endif // ZCL_GROUPS
// 1650 
// 1651 #ifdef ZCL_SCENES
// 1652     case ZCL_CLUSTER_ID_GEN_SCENES:
// 1653       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1654         stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
// 1655       else
// 1656         stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
// 1657       break;
// 1658 #endif // ZCL_SCENES
// 1659 
// 1660 #ifdef ZCL_ON_OFF
// 1661     case ZCL_CLUSTER_ID_GEN_ON_OFF:
// 1662       stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_5:
        MOV       R6,#0x0
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       ??zclGeneral_HdlInSpecificCommands_12
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        JZ        ??zclGeneral_HdlInSpecificCommands_13
        DEC       A
        JZ        ??zclGeneral_HdlInSpecificCommands_13
        DEC       A
        JNZ       ??zclGeneral_HdlInSpecificCommands_14
??zclGeneral_HdlInSpecificCommands_13:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_39:
        JZ        ??zclGeneral_HdlInSpecificCommands_12
        ; Setup parameters for indirect call
        MOV       A,R2
        MOV       R1,A
        LCALL     ?CALL_IND
        SJMP      ??zclGeneral_HdlInSpecificCommands_12
??zclGeneral_HdlInSpecificCommands_14:
        MOV       R6,#0x1
??zclGeneral_HdlInSpecificCommands_12:
        MOV       A,R6
??zclGeneral_HdlInSpecificCommands_11:
        MOV       R1,A
// 1663       break;
// 1664 #endif // ZCL_ON_OFF
// 1665 
// 1666 #ifdef ZCL_LEVEL_CTRL
// 1667     case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1668       stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
// 1669       break;
// 1670 #endif // ZCL_LEVEL_CTRL
// 1671 
// 1672 #ifdef ZCL_ALARMS
// 1673     case ZCL_CLUSTER_ID_GEN_ALARMS:
// 1674       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1675         stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
// 1676       else
// 1677         stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
// 1678       break;
// 1679 #endif // ZCL_ALARMS
// 1680 
// 1681 #ifdef ZCL_LOCATION
// 1682     case ZCL_CLUSTER_ID_GEN_LOCATION:
// 1683       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1684         stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
// 1685       else
// 1686         stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
// 1687       break;
// 1688 #endif // ZCL_LOCATION
// 1689 
// 1690     case ZCL_CLUSTER_ID_GEN_POWER_CFG:
// 1691     case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
// 1692     case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
// 1693     case ZCL_CLUSTER_ID_GEN_TIME:
// 1694     default:
// 1695       stat = ZFailure;
// 1696       break;
// 1697   }
// 1698 
// 1699   return ( stat );
??zclGeneral_HdlInSpecificCommands_8:
        LJMP      ??Subroutine41_0 & 0xFFFF
// 1700 }
          CFI EndBlock cfiBlock106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function zclGeneral_SendGroupViewResponse
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_86:
        MOV       R1,A
        MOV       A,R0
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker125 Using cfiCommon1
          CFI (cfiPicker125) NoFunction
          CFI (cfiPicker125) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiPicker125
// 1701 
// 1702 #ifdef ZCL_BASIC
// 1703 /*********************************************************************
// 1704  * @fn      zclGeneral_ProcessInBasic
// 1705  *
// 1706  * @brief   Process in the received Basic Command.
// 1707  *
// 1708  * @param   pInMsg - pointer to the incoming message
// 1709  *
// 1710  * @return  ZStatus_t
// 1711  */
// 1712 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
// 1713                                             zclGeneral_AppCallbacks_t *pCBs )
// 1714 {
// 1715   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1716   {
// 1717     if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
// 1718       return ( ZFailure );   // Error ignore the command
// 1719 
// 1720     if ( pCBs->pfnBasicReset )
// 1721       pCBs->pfnBasicReset();
// 1722   }
// 1723   // no Client command
// 1724 
// 1725   return ( ZSuccess );
// 1726 }
// 1727 #endif // ZCL_BASIC
// 1728 
// 1729 #ifdef ZCL_IDENTIFY
// 1730 /*********************************************************************
// 1731  * @fn      zclGeneral_ProcessInIdentity
// 1732  *
// 1733  * @brief   Process in the received Identity Command.
// 1734  *
// 1735  * @param   pInMsg - pointer to the incoming message
// 1736  *
// 1737  * @return  ZStatus_t
// 1738  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1739 static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
zclGeneral_ProcessInIdentity:
          CFI Block cfiBlock126 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
        CODE
// 1740                                                zclGeneral_AppCallbacks_t *pCBs )
// 1741 {
        FUNCALL zclGeneral_ProcessInIdentity, bdb_ZclIdentifyCmdInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInIdentity, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInIdentity, zclGeneral_SendIdentifyQueryResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInIdentity, bdb_ZclIdentifyQueryCmdInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1742   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JZ        $+5
        LJMP      ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
// 1743   {
// 1744     if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
        MOV       A,R0
        JNZ       ??zclGeneral_ProcessInIdentity_1
// 1745     {
// 1746       uint16 identifyTime;
// 1747       
// 1748       identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1749       
// 1750       bdb_ZclIdentifyCmdInd( identifyTime, pInMsg->msg->endPoint);
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine17 & 0xFFFF
// 1751     }
??CrossCallReturnLabel_46:
        MOV       R2,A
        MOV       A,R1
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV       R3,A
        MOV       A,R4
        MOV       R2,A
        LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
        LJMP      ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
// 1752     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
??zclGeneral_ProcessInIdentity_1:
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??zclGeneral_ProcessInIdentity_3
// 1753     {
// 1754       uint16 identifyTime = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1755 
// 1756       // Retrieve Identify Time
// 1757       zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 1758                         ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV       ?V0,R0
        MOV       ?V1,A
        ; Setup parameters for call to function zcl_ReadAttrData
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1759 
// 1760       // Is device identifying itself?
// 1761       if ( identifyTime > 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_41:
        JZ        ??zclGeneral_ProcessInIdentity_2
// 1762       {
// 1763         zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1764                                               identifyTime, true, pInMsg->hdr.transSeqNum );
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     `??zclGeneral_SendIdentifyQueryResponse::?relay`; Banked call to: zclGeneral_SendIdentifyQueryResponse
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1765         return ( ZCL_STATUS_CMD_HAS_RSP );
        MOV       R1,#-0x1
        SJMP      ??zclGeneral_ProcessInIdentity_4
// 1766       }
// 1767     }
// 1768 
// 1769 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 1770     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
// 1771     {
// 1772       if ( pCBs->pfnIdentifyTriggerEffect )
// 1773       {
// 1774         zclIdentifyTriggerEffect_t cmd;
// 1775 
// 1776         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 1777         cmd.effectId = pInMsg->pData[0];
// 1778         cmd.effectVariant = pInMsg->pData[1];
// 1779 
// 1780         pCBs->pfnIdentifyTriggerEffect( &cmd );
// 1781       }
// 1782     }
// 1783 #endif //ZCL_LIGHT_LINK_ENHANCE
// 1784     else
// 1785     {
// 1786       return ( ZFailure );   // Error ignore the command
// 1787     }
// 1788   }
// 1789   else // Client Command
// 1790   {
// 1791     if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
??zclGeneral_ProcessInIdentity_0:
        MOV       A,R0
        JZ        ??zclGeneral_ProcessInIdentity_5
// 1792       return ( ZFailure );   // Error ignore the command
??zclGeneral_ProcessInIdentity_3:
        MOV       R1,#0x1
        SJMP      ??zclGeneral_ProcessInIdentity_4
// 1793 
// 1794     zclIdentifyQueryRsp_t rsp;
// 1795     
// 1796     rsp.srcAddr = &(pInMsg->msg->srcAddr);
??zclGeneral_ProcessInIdentity_5:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
// 1797     rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
??CrossCallReturnLabel_128:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV       R1,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        LCALL     ??Subroutine50_0 & 0xFFFF
// 1798     
// 1799     bdb_ZclIdentifyQueryCmdInd( &rsp );
??CrossCallReturnLabel_124:
        ; Setup parameters for call to function bdb_ZclIdentifyQueryCmdInd
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??bdb_ZclIdentifyQueryCmdInd::?relay`; Banked call to: bdb_ZclIdentifyQueryCmdInd
// 1800   }
// 1801   return ( ZSuccess );
??zclGeneral_ProcessInIdentity_2:
        MOV       R1,#0x0
??zclGeneral_ProcessInIdentity_4:
        MOV       A,#0x6
          CFI EndBlock cfiBlock126
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
// 1802 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock127 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock127
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiBlock128 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock128

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function zclGeneral_SendGroupResponse
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclGeneral_SendGroupRequest
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_43
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_44
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_45
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_46
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_38
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_39
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-4
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_40
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_41
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_42
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_29
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_30
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_109
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        MOV       R3,A
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150
        ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond151 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 75)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker155 Using cfiCommon1
          CFI (cfiPicker155) NoFunction
          CFI (cfiPicker155) Picker
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_114:
        RET
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiPicker155
// 1803 #endif // ZCL_IDENTIFY
// 1804 
// 1805 #ifdef ZCL_GROUPS
// 1806 
// 1807 /*********************************************************************
// 1808  * @fn      zclGeneral_AddGroup
// 1809  *
// 1810  * @brief   Add a Group.
// 1811  *
// 1812  * @param   endPoint - application endpoint
// 1813  * @param   group - group to be added
// 1814  * @param   pData - pointer to the group info
// 1815  *
// 1816  * @return  ZStatus_t
// 1817  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1818 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
zclGeneral_AddGroup:
          CFI Block cfiBlock156 Using cfiCommon0
          CFI Function zclGeneral_AddGroup
        CODE
// 1819 {
        FUNCALL zclGeneral_AddGroup, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_AddGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_AddGroup, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       R7,A
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 1820   uint8 nameLen;
// 1821   uint8 nameSupport = FALSE;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 1822 
// 1823   pData += 2;   // Move past group ID
// 1824   nameLen = *pData++;
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
// 1825 
// 1826   // Retrieve Name Support attribute
// 1827   zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
// 1828                     ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
        ; Setup parameters for call to function zcl_ReadAttrData
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       A,R7
        MOV       R1,A
        LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 1829 
// 1830   if ( nameSupport )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??zclGeneral_AddGroup_0
// 1831   {
// 1832     if ( nameLen > (APS_GROUP_NAME_LEN-1) )
        MOV       A,R6
        CLR       C
        SUBB      A,#0x10
        JC        ??zclGeneral_AddGroup_1
// 1833        nameLen = (APS_GROUP_NAME_LEN-1);
        MOV       R6,#0xf
// 1834     group->name[0] = nameLen;
??zclGeneral_AddGroup_1:
        MOV       A,R6
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 1835     zcl_memcpy( &(group->name[1]), pData, nameLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R6
        LCALL     ?Subroutine32 & 0xFFFF
// 1836   }
??CrossCallReturnLabel_97:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 1837 
// 1838   return ( aps_AddGroup( endPoint, group ) );
??zclGeneral_AddGroup_0:
        ; Setup parameters for call to function aps_AddGroup
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       A,R7
        MOV       R1,A
        LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 1839 }
          CFI EndBlock cfiBlock156
// 1840 
// 1841 /*********************************************************************
// 1842  * @fn      zclGeneral_ProcessInGroupsServer
// 1843  *
// 1844  * @brief   Process in the received Groups Command.
// 1845  *
// 1846  * @param   pInMsg - pointer to the incoming message
// 1847  *
// 1848  * @return  ZStatus_t
// 1849  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1850 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
zclGeneral_ProcessInGroupsServer:
          CFI Block cfiBlock157 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
        CODE
// 1851 {
        FUNCALL zclGeneral_ProcessInGroupsServer, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupViewResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindAllGroupsForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_CountAllGroups
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupGetMembershipRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindAllGroupsForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_RemoveAllGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 55
        MOV       A,#-0x37
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1852   aps_Group_t group;
// 1853   aps_Group_t *pGroup;
// 1854   uint8 *pData;
// 1855   uint8 status;
// 1856   uint8 grpCnt;
// 1857   uint8 grpRspCnt = 0;
        MOV       ?V1,#0x0
// 1858   uint16 *grpList;
// 1859   uint16 identifyTime = 0;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1860   uint8 i;
// 1861   ZStatus_t stat = ZSuccess;
        MOV       ?V0,#0x0
// 1862 
// 1863   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x12
        MOV       R5,A
        MOV       R1,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1864 
// 1865   pData = pInMsg->pData;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
// 1866   group.ID = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,?V2
        MOV       DPH,A
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPL,?V2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??zclGeneral_ProcessInGroupsServer_0
        DEC       A
        JZ        ??zclGeneral_ProcessInGroupsServer_1
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
        LJMP      ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
// 1867   switch ( pInMsg->hdr.commandID )
// 1868   {
// 1869     case COMMAND_GROUP_ADD:
// 1870       status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
??zclGeneral_ProcessInGroupsServer_0:
        ; Setup parameters for call to function zclGeneral_AddGroup
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV       A,R1
        MOV       R4,A
// 1871       if ( status != ZSuccess )
        JZ        ??zclGeneral_ProcessInGroupsServer_7
// 1872       {
// 1873         if ( status == ZApsDuplicateEntry )
        MOV       A,#-0x48
        XRL       A,R4
        JNZ       ??zclGeneral_ProcessInGroupsServer_8
// 1874         {
// 1875           status = ZCL_STATUS_DUPLICATE_EXISTS;
        MOV       R4,#-0x76
        SJMP      ??zclGeneral_ProcessInGroupsServer_7
// 1876         }
// 1877         else
// 1878         {
// 1879           status = ZCL_STATUS_INSUFFICIENT_SPACE;
??zclGeneral_ProcessInGroupsServer_8:
        MOV       R4,#-0x77
// 1880         }
// 1881       }
// 1882 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1883       if ( UNICAST_MSG( pInMsg->msg ) )
// 1884 #endif
// 1885       {
// 1886         zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1887                                          status, group.ID, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_7:
        LCALL     ?Subroutine4 & 0xFFFF
// 1888         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1889       }
??CrossCallReturnLabel_1:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       A,R4
        MOV       R5,A
        MOV       R4,#0x0
        LJMP      ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 71)
// 1890       break;
// 1891 
// 1892     case COMMAND_GROUP_VIEW:
// 1893 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1894       if ( UNICAST_MSG( pInMsg->msg ) )
// 1895 #endif
// 1896       {
// 1897         pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
??zclGeneral_ProcessInGroupsServer_1:
        ; Setup parameters for call to function aps_FindGroup
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1898         if ( pGroup )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclGeneral_ProcessInGroupsServer_10
// 1899         {
// 1900           status = ZCL_STATUS_SUCCESS;
        MOV       R4,#0x0
        SJMP      ??zclGeneral_ProcessInGroupsServer_11
// 1901         }
// 1902         else
// 1903         {
// 1904           // Group not found
// 1905           status = ZCL_STATUS_NOT_FOUND;
??zclGeneral_ProcessInGroupsServer_10:
        MOV       R4,#-0x75
// 1906           pGroup = &group;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
// 1907         }
// 1908         zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1909                                           status, pGroup, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_11:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_49:
        ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 74)
        MOV       R5,#0x1
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL     `??zclGeneral_SendGroupViewResponse::?relay`; Banked call to: zclGeneral_SendGroupViewResponse
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 71)
// 1910         stat = ZCL_STATUS_CMD_HAS_RSP;
        LJMP      ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
// 1911       }
// 1912       break;
// 1913 
// 1914     case COMMAND_GROUP_GET_MEMBERSHIP:
// 1915 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1916       if ( UNICAST_MSG( pInMsg->msg ) )
// 1917 #endif
// 1918       {
// 1919         grpCnt = *pData++;
??zclGeneral_ProcessInGroupsServer_2:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 1920 
// 1921         // Allocate space for the group list
// 1922         grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x20
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V6,R2
        MOV       ?V7,R3
// 1923         if ( grpList != NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
// 1924         {
// 1925           if ( grpCnt == 0 )
        MOV       A,?V0
        JNZ       ??zclGeneral_ProcessInGroupsServer_14
// 1926           {
// 1927             // Find out all the groups of which the endpoint is a member.
// 1928             grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
        ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
        LCALL     ?Subroutine11 & 0xFFFF
// 1929           }
??CrossCallReturnLabel_27:
        MOV       ?V1,A
        SJMP      ??zclGeneral_ProcessInGroupsServer_15
// 1930           else
// 1931           {
// 1932             // Find out the groups (in the list) of which the endpoint is a member.
// 1933             for ( i = 0; i < grpCnt; i++ )
??zclGeneral_ProcessInGroupsServer_14:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
// 1934             {
// 1935               group.ID = BUILD_UINT16( pData[0], pData[1] );
??zclGeneral_ProcessInGroupsServer_16:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        LCALL     ??Subroutine50_0 & 0xFFFF
// 1936               pData += 2;
??CrossCallReturnLabel_125:
        MOV       A,?V2
        ADD       A,#0x2
        MOV       ?V2,A
        JNC       ??zclGeneral_ProcessInGroupsServer_17
        INC       ?V3
// 1937 
// 1938               if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
??zclGeneral_ProcessInGroupsServer_17:
        ; Setup parameters for call to function aps_FindGroup
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclGeneral_ProcessInGroupsServer_18
// 1939                 grpList[grpRspCnt++] = group.ID;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
// 1940             }
??CrossCallReturnLabel_37:
        MOV       R0,?V1
        MOV       A,R0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,?V6
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V7
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        INC       ?V1
??zclGeneral_ProcessInGroupsServer_18:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
        JNZ       ??zclGeneral_ProcessInGroupsServer_16
        MOV       A,?V1
        JZ        ??zclGeneral_ProcessInGroupsServer_19
// 1941           }
// 1942 
// 1943           if ( grpCnt == 0 ||  grpRspCnt != 0 )
// 1944           {
// 1945             zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1946                                                        aps_GroupsRemaingCapacity(), grpRspCnt,
// 1947                                                        grpList, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_15:
        ; Setup parameters for call to function aps_CountAllGroups
        LCALL     `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
        MOV       A,R1
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine6 & 0xFFFF
// 1948           }
??CrossCallReturnLabel_18:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       A,?V1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       A,#0x10
        CLR       C
        SUBB      A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       R5,#0x1
        MOV       R4,#0x2
        MOV       A,?V2
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V3
        MOV       R3,A
        MOV       A,?V2
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_121:
        ADDC      A,?V3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 71)
// 1949 
// 1950           zcl_mem_free( grpList );
??zclGeneral_ProcessInGroupsServer_19:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LJMP      ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
// 1951         }
// 1952         else
// 1953         {
// 1954           // Couldn't allocate space for the group list -- send a Default Response command back.
// 1955           zclDefaultRspCmd_t defaultRspCmd;
// 1956 
// 1957           defaultRspCmd.commandID = pInMsg->hdr.commandID;
??zclGeneral_ProcessInGroupsServer_13:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1958           defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x77
        MOVX      @DPTR,A
// 1959           zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 1960                                  pInMsg->msg->clusterId, &defaultRspCmd,
// 1961                                  ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
        LCALL     ?Subroutine4 & 0xFFFF
// 1962         }
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 72)
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 74)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 71)
// 1963 
// 1964         stat = ZCL_STATUS_CMD_HAS_RSP;
        SJMP      ??zclGeneral_ProcessInGroupsServer_12
// 1965       }
// 1966       break;
// 1967 
// 1968     case COMMAND_GROUP_REMOVE:
// 1969 #if defined ( ZCL_SCENES )
// 1970       zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
// 1971 #endif
// 1972       if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
??zclGeneral_ProcessInGroupsServer_3:
        ; Setup parameters for call to function aps_RemoveGroup
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
        MOV       A,R1
        JZ        ??zclGeneral_ProcessInGroupsServer_20
// 1973       {
// 1974         status = ZCL_STATUS_SUCCESS;
        MOV       R4,#0x0
        SJMP      ??zclGeneral_ProcessInGroupsServer_21
// 1975       }
// 1976       else
// 1977       {
// 1978         status = ZCL_STATUS_NOT_FOUND;
??zclGeneral_ProcessInGroupsServer_20:
        MOV       R4,#-0x75
// 1979       }
// 1980 
// 1981 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1982       if ( UNICAST_MSG( pInMsg->msg ) )
// 1983 #endif
// 1984       {
// 1985         zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1986                                             status, group.ID, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_21:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       A,R4
        MOV       R5,A
        MOV       R4,#0x3
??zclGeneral_ProcessInGroupsServer_9:
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL     `??zclGeneral_SendGroupResponse::?relay`; Banked call to: zclGeneral_SendGroupResponse
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 71)
// 1987         stat = ZCL_STATUS_CMD_HAS_RSP;
??zclGeneral_ProcessInGroupsServer_12:
        MOV       ?V0,#-0x1
// 1988       }
// 1989       break;
        SJMP      ??zclGeneral_ProcessInGroupsServer_22
// 1990 
// 1991     case COMMAND_GROUP_REMOVE_ALL:
// 1992       {
// 1993         uint8 numGroups;
// 1994         uint16 groupList[APS_MAX_GROUPS];
// 1995 
// 1996         if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
??zclGeneral_ProcessInGroupsServer_4:
        ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_28:
        JZ        ??zclGeneral_ProcessInGroupsServer_22
// 1997         {
// 1998           for ( i = 0; i < numGroups; i++ )
// 1999           {
// 2000 #if defined ( ZCL_SCENES )
// 2001             zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
// 2002 #endif
// 2003           }
// 2004 
// 2005           aps_RemoveAllGroup( pInMsg->msg->endPoint );
        ; Setup parameters for call to function aps_RemoveAllGroup
        LCALL     ??Subroutine48_0 & 0xFFFF
// 2006         }
// 2007       }
??CrossCallReturnLabel_107:
        LCALL     `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
        SJMP      ??zclGeneral_ProcessInGroupsServer_22
// 2008       break;
// 2009 
// 2010     case COMMAND_GROUP_ADD_IF_IDENTIFYING:
// 2011       // Retrieve Identify Time
// 2012       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2013                         ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
??zclGeneral_ProcessInGroupsServer_5:
        ; Setup parameters for call to function zcl_ReadAttrData
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 71)
// 2014 
// 2015       // Is device identifying itself?
// 2016       if ( identifyTime > 0 )
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_42:
        JZ        ??zclGeneral_ProcessInGroupsServer_22
// 2017       {
// 2018         zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
        ; Setup parameters for call to function zclGeneral_AddGroup
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine10 & 0xFFFF
// 2019       }
??CrossCallReturnLabel_26:
        SJMP      ??zclGeneral_ProcessInGroupsServer_22
// 2020       break;
// 2021 
// 2022     default:
// 2023       stat = ZFailure;
??zclGeneral_ProcessInGroupsServer_6:
        MOV       ?V0,#0x1
// 2024       break;
// 2025   }
// 2026 
// 2027   return ( stat );
??zclGeneral_ProcessInGroupsServer_22:
        MOV       R1,?V0
        MOV       A,#0x37
        LJMP      ??Subroutine44_0 & 0xFFFF
// 2028 }
          CFI EndBlock cfiBlock157

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 75)
          CFI Block cfiPicker160 Using cfiCommon1
          CFI (cfiPicker160) NoFunction
          CFI (cfiPicker160) Picker
        MOV       A,?V0
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiPicker160
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond161 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 75)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_119:
        RET
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL     `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
        MOV       A,R1
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond168 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL     `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
        RET
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_111:
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_109
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_107
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-4
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 75)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_27
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-4
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_28
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_25
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_26
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-4
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_19
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-4
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_20
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-4
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_122:
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond185 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_120
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_109
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-6
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-6
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_107
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-6
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-6
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 75)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_27
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-6
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_28
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-6
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_25
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-6
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_26
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-6
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_19
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-6
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_20
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-6
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_116
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-6
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_117
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-6
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 75)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_115
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-6
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_4
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-6
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_5
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-6
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker202 Using cfiCommon1
          CFI (cfiPicker202) NoFunction
          CFI (cfiPicker202) Picker
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        RET
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiPicker202

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond203 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,?V0
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_118:
        RET
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_117
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-4
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 75)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_115
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-4
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_4
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-4
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_5
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-4
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        MOV       A,?V0
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_123:
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiPicker216 Using cfiCommon1
          CFI (cfiPicker216) NoFunction
          CFI (cfiPicker216) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
        ; Setup parameters for call to function zclGeneral_SendGroupResponse
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        ; Setup parameters for call to function zclGeneral_SendGroupResponse
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiPicker216
// 2029 
// 2030 /*********************************************************************
// 2031  * @fn      zclGeneral_ProcessInGroupsClient
// 2032  *
// 2033  * @brief   Process in the received Groups Command.
// 2034  *
// 2035  * @param   pInMsg - pointer to the incoming message
// 2036  *
// 2037  * @return  ZStatus_t
// 2038  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2039 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
zclGeneral_ProcessInGroupsClient:
          CFI Block cfiBlock217 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
        CODE
// 2040                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2041 {
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 32
        MOV       A,#-0x20
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2042   aps_Group_t group;
// 2043   uint8 *pData = pInMsg->pData;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_82:
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 2044   uint8 grpCnt;
// 2045   uint8 nameLen;
// 2046   zclGroupRsp_t rsp;
// 2047   uint8 i;
// 2048   ZStatus_t stat = ZSuccess;
        MOV       ?V3,#0x0
// 2049 
// 2050   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x12
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2051   zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2052 
// 2053   switch ( pInMsg->hdr.commandID )
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x7
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??zclGeneral_ProcessInGroupsClient_0
        DEC       A
        JZ        ??zclGeneral_ProcessInGroupsClient_0
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_1 & 0xFFFF
        DEC       A
        JZ        $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
// 2054   {
// 2055     case COMMAND_GROUP_ADD_RSP:
// 2056     case COMMAND_GROUP_VIEW_RSP:
// 2057     case COMMAND_GROUP_REMOVE_RSP:
// 2058       rsp.status = *pData++;
??zclGeneral_ProcessInGroupsClient_0:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        MOV       A,R1
        MOV       R7,A
// 2059       group.ID = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        LCALL     ??Subroutine50_0 & 0xFFFF
// 2060 
// 2061       if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
??CrossCallReturnLabel_126:
        MOV       A,R4
        JNZ       ??CrossCallReturnLabel_129
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_129
// 2062       {
// 2063         pData += 2;   // Move past ID
// 2064         nameLen = *pData++;
        MOV       DPL,R0
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInGroupsClient_3
        INC       R7
// 2065         if ( nameLen > (APS_GROUP_NAME_LEN-1) )
??zclGeneral_ProcessInGroupsClient_3:
        MOV       A,R1
        CLR       C
        SUBB      A,#0x10
        JC        ??zclGeneral_ProcessInGroupsClient_4
// 2066           nameLen = (APS_GROUP_NAME_LEN-1);
        MOV       R1,#0xf
// 2067         group.name[0] = nameLen;
??zclGeneral_ProcessInGroupsClient_4:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2068         zcl_memcpy( &(group.name[1]), pData, nameLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R6
        MOV       ?V1,R7
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 2069         rsp.grpName = group.name;
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
// 2070       }
// 2071 
// 2072       if ( pCBs->pfnGroupRsp )
??CrossCallReturnLabel_129:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_23:
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_5 & 0xFFFF
// 2073       {
// 2074         rsp.srcAddr = &(pInMsg->msg->srcAddr);
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 2075         rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_64:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2076         rsp.grpCnt = 1;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2077         rsp.grpList = &group.ID;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
// 2078         rsp.capacity = 0;
??CrossCallReturnLabel_130:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2079 
// 2080         pCBs->pfnGroupRsp( &rsp );
        ; Setup parameters for indirect call
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine8 & 0xFFFF
// 2081       }
??CrossCallReturnLabel_21:
        LCALL     ?CALL_IND
        LJMP      ??zclGeneral_ProcessInGroupsClient_5 & 0xFFFF
// 2082       break;
// 2083 
// 2084     case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
// 2085       {
// 2086         uint16 *grpList = NULL;
??zclGeneral_ProcessInGroupsClient_1:
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
// 2087         rsp.capacity = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2088         grpCnt = *pData++;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       R6
        INC       R6
        MOV       A,R3
        MOV       R7,A
// 2089 
// 2090         if ( grpCnt > 0 )
        MOV       A,?V2
        JZ        ??zclGeneral_ProcessInGroupsClient_6
// 2091         {
// 2092           // Allocate space for the group list
// 2093           grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
        ; Setup parameters for call to function osal_mem_alloc
        ADD       A,0xE0 /* A   */
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        LCALL     ?Subroutine28 & 0xFFFF
// 2094           if ( grpList != NULL )
??CrossCallReturnLabel_71:
        JZ        ??zclGeneral_ProcessInGroupsClient_6
// 2095           {
// 2096             rsp.grpCnt = grpCnt;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V2
        MOVX      @DPTR,A
// 2097             for ( i = 0; i < grpCnt; i++ )
        MOV       R2,#0x0
        SJMP      ??zclGeneral_ProcessInGroupsClient_7
// 2098             {
// 2099               grpList[i] = BUILD_UINT16( pData[0], pData[1] );
??zclGeneral_ProcessInGroupsClient_8:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R4
        ADD       A,R0
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       A,R2
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,?V0
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2100               pData += 2;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInGroupsClient_9
        INC       R7
// 2101             }
??zclGeneral_ProcessInGroupsClient_9:
        INC       R2
??zclGeneral_ProcessInGroupsClient_7:
        MOV       A,R2
        CLR       C
        SUBB      A,?V2
        JC        ??zclGeneral_ProcessInGroupsClient_8
// 2102           }
// 2103         }
// 2104 
// 2105         if ( pCBs->pfnGroupRsp )
??zclGeneral_ProcessInGroupsClient_6:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        JZ        ??zclGeneral_ProcessInGroupsClient_10
// 2106         {
// 2107           rsp.srcAddr = &(pInMsg->msg->srcAddr);
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 2108           rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_65:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2109           rsp.grpList = grpList;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 2110 
// 2111           pCBs->pfnGroupRsp( &rsp );
        ; Setup parameters for indirect call
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine8 & 0xFFFF
// 2112         }
??CrossCallReturnLabel_22:
        LCALL     ?CALL_IND
// 2113 
// 2114         if ( grpList != NULL )
??zclGeneral_ProcessInGroupsClient_10:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??zclGeneral_ProcessInGroupsClient_5
// 2115         {
// 2116           zcl_mem_free( grpList );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_ProcessInGroupsClient_5
// 2117         }
// 2118       }
// 2119       break;
// 2120 
// 2121     default:
// 2122       stat = ZFailure;
??zclGeneral_ProcessInGroupsClient_2:
        MOV       ?V3,#0x1
// 2123       break;
// 2124   }
// 2125 
// 2126   return ( stat );
??zclGeneral_ProcessInGroupsClient_5:
        MOV       R1,?V3
        MOV       A,#0x20
        LJMP      ??Subroutine44_0 & 0xFFFF
// 2127 }
          CFI EndBlock cfiBlock217

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function zclGeneral_SendGroupGetMembershipRequest
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker220 Using cfiCommon1
          CFI (cfiPicker220) NoFunction
          CFI (cfiPicker220) Picker
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiPicker220

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond221 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker225 Using cfiCommon1
          CFI (cfiPicker225) NoFunction
          CFI (cfiPicker225) Picker
        MOV       A,R0
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiPicker225
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond226 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function zclGeneral_RegisterCmdCallbacks
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker233 Using cfiCommon1
          CFI (cfiPicker233) NoFunction
          CFI (cfiPicker233) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiPicker233

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond234 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker236 Using cfiCommon1
          CFI (cfiPicker236) NoFunction
          CFI (cfiPicker236) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_91:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiPicker236

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond237 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker239 Using cfiCommon1
          CFI (cfiPicker239) NoFunction
          CFI (cfiPicker239) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiPicker239

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond240 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_29
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-4
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_30
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-4
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker243 Using cfiCommon1
          CFI (cfiPicker243) NoFunction
          CFI (cfiPicker243) Picker
        MOVX      A,@DPTR
        ADD       A,#0x6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        RET
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiPicker243

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond244 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker246 Using cfiCommon1
          CFI (cfiPicker246) NoFunction
          CFI (cfiPicker246) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiPicker246

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond247 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker249 Using cfiCommon1
          CFI (cfiPicker249) NoFunction
          CFI (cfiPicker249) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiPicker249

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond250 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_24
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-4
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_21
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-4
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_22
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-4
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker254 Using cfiCommon1
          CFI (cfiPicker254) NoFunction
          CFI (cfiPicker254) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiPicker254

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_RegisterCmdCallbacks::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_RegisterCmdCallbacks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentify::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyEZModeInvoke::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyEZModeInvoke

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyUpdateCommState::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyUpdateCommState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyQueryResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyQueryResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendAddGroupRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendAddGroupRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupGetMembershipRequest::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupGetMembershipRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupViewResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupViewResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_HdlIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_HdlIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_HdlInSpecificCommands::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_HdlInSpecificCommands

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInIdentity::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInIdentity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_AddGroup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_AddGroup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInGroupsServer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInGroupsServer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInGroupsClient::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInGroupsClient

        END
// 2128 #endif // ZCL_GROUPS
// 2129 
// 2130 #if defined( ZCL_SCENES )
// 2131 #if !defined ( ZCL_STANDALONE )
// 2132 /*********************************************************************
// 2133  * @fn      zclGeneral_AddScene
// 2134  *
// 2135  * @brief   Add a scene for an endpoint
// 2136  *
// 2137  * @param   endpoint -
// 2138  * @param   scene - new scene item
// 2139  *
// 2140  * @return  ZStatus_t
// 2141  */
// 2142 ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
// 2143 {
// 2144   zclGenSceneItem_t *pNewItem;
// 2145   zclGenSceneItem_t *pLoop;
// 2146 
// 2147   // Fill in the new profile list
// 2148   pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
// 2149   if ( pNewItem == NULL )
// 2150     return ( ZMemError );
// 2151 
// 2152   // Fill in the plugin record.
// 2153   pNewItem->next = (zclGenSceneItem_t *)NULL;
// 2154   pNewItem->endpoint = endpoint;
// 2155   zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
// 2156 
// 2157   // Find spot in list
// 2158   if (  zclGenSceneTable == NULL )
// 2159   {
// 2160     zclGenSceneTable = pNewItem;
// 2161   }
// 2162   else
// 2163   {
// 2164     // Look for end of list
// 2165     pLoop = zclGenSceneTable;
// 2166     while ( pLoop->next != NULL )
// 2167       pLoop = pLoop->next;
// 2168 
// 2169     // Put new item at end of list
// 2170     pLoop->next = pNewItem;
// 2171   }
// 2172 
// 2173   // Update NV
// 2174   zclGeneral_ScenesWriteNV();
// 2175 
// 2176   return ( ZSuccess );
// 2177 }
// 2178 #endif // ZCL_STANDALONE
// 2179 
// 2180 #if !defined ( ZCL_STANDALONE )
// 2181 /*********************************************************************
// 2182  * @fn      zclGeneral_FindScene
// 2183  *
// 2184  * @brief   Find a scene with endpoint and sceneID
// 2185  *
// 2186  * @param   endpoint -
// 2187  * @param   groupID - what group the scene belongs to
// 2188  * @param   sceneID - ID to look for scene
// 2189  *
// 2190  * @return  a pointer to the scene information, NULL if not found
// 2191  */
// 2192 zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2193 {
// 2194   zclGenSceneItem_t *pLoop;
// 2195 
// 2196   // Look for end of list
// 2197   pLoop = zclGenSceneTable;
// 2198   while ( pLoop )
// 2199   {
// 2200     if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
// 2201         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2202     {
// 2203       return ( &(pLoop->scene) );
// 2204     }
// 2205     pLoop = pLoop->next;
// 2206   }
// 2207 
// 2208   return ( (zclGeneral_Scene_t *)NULL );
// 2209 }
// 2210 #endif // ZCL_STANDALONE
// 2211 
// 2212 #if !defined ( ZCL_STANDALONE )
// 2213 /*********************************************************************
// 2214  * @fn      zclGeneral_FindAllScenesForGroup
// 2215  *
// 2216  * @brief   Find all the scenes with groupID
// 2217  *
// 2218  * @param   endpoint - endpoint to look for
// 2219  * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
// 2220  *
// 2221  * @return  number of scenes copied to sceneList
// 2222  */
// 2223 uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
// 2224 {
// 2225   zclGenSceneItem_t *pLoop;
// 2226   uint8 cnt = 0;
// 2227 
// 2228   // Look for end of list
// 2229   pLoop = zclGenSceneTable;
// 2230   while ( pLoop )
// 2231   {
// 2232     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2233       sceneList[cnt++] = pLoop->scene.ID;
// 2234     pLoop = pLoop->next;
// 2235   }
// 2236   return ( cnt );
// 2237 }
// 2238 #endif // ZCL_STANDALONE
// 2239 
// 2240 #if !defined ( ZCL_STANDALONE )
// 2241 /*********************************************************************
// 2242  * @fn      zclGeneral_RemoveScene
// 2243  *
// 2244  * @brief   Remove a scene with endpoint and sceneID
// 2245  *
// 2246  * @param   endpoint -
// 2247  * @param   groupID - what group the scene belongs to
// 2248  * @param   sceneID - ID to look for scene
// 2249  *
// 2250  * @return  TRUE if removed, FALSE if not found
// 2251  */
// 2252 uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2253 {
// 2254   zclGenSceneItem_t *pLoop;
// 2255   zclGenSceneItem_t *pPrev;
// 2256 
// 2257   // Look for end of list
// 2258   pLoop = zclGenSceneTable;
// 2259   pPrev = NULL;
// 2260   while ( pLoop )
// 2261   {
// 2262     if ( pLoop->endpoint == endpoint
// 2263         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2264     {
// 2265       if ( pPrev == NULL )
// 2266         zclGenSceneTable = pLoop->next;
// 2267       else
// 2268         pPrev->next = pLoop->next;
// 2269 
// 2270       // Free the memory
// 2271       zcl_mem_free( pLoop );
// 2272 
// 2273       // Update NV
// 2274       zclGeneral_ScenesWriteNV();
// 2275 
// 2276       return ( TRUE );
// 2277     }
// 2278     pPrev = pLoop;
// 2279     pLoop = pLoop->next;
// 2280   }
// 2281 
// 2282   return ( FALSE );
// 2283 }
// 2284 #endif // ZCL_STANDALONE
// 2285 
// 2286 #if !defined ( ZCL_STANDALONE )
// 2287 /*********************************************************************
// 2288  * @fn      zclGeneral_RemoveAllScenes
// 2289  *
// 2290  * @brief   Remove all scenes with endpoint and group Id
// 2291  *
// 2292  * @param   endpoint -
// 2293  * @param   groupID - ID to look for group
// 2294  *
// 2295  * @return  none
// 2296  */
// 2297 void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
// 2298 {
// 2299   zclGenSceneItem_t *pLoop;
// 2300   zclGenSceneItem_t *pPrev;
// 2301   zclGenSceneItem_t *pNext;
// 2302 
// 2303   // Look for end of list
// 2304   pLoop = zclGenSceneTable;
// 2305   pPrev = NULL;
// 2306   while ( pLoop )
// 2307   {
// 2308     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2309     {
// 2310       if ( pPrev == NULL )
// 2311         zclGenSceneTable = pLoop->next;
// 2312       else
// 2313         pPrev->next = pLoop->next;
// 2314       pNext = pLoop->next;
// 2315 
// 2316       // Free the memory
// 2317       zcl_mem_free( pLoop );
// 2318       pLoop = pNext;
// 2319     }
// 2320     else
// 2321     {
// 2322       pPrev = pLoop;
// 2323       pLoop = pLoop->next;
// 2324     }
// 2325   }
// 2326 
// 2327   // Update NV
// 2328   zclGeneral_ScenesWriteNV();
// 2329 }
// 2330 #endif // ZCL_STANDALONE
// 2331 
// 2332 #if !defined ( ZCL_STANDALONE )
// 2333 /*********************************************************************
// 2334  * @fn      zclGeneral_CountScenes
// 2335  *
// 2336  * @brief   Count the number of scenes for an endpoint
// 2337  *
// 2338  * @param   endpoint -
// 2339  *
// 2340  * @return  number of scenes assigned to an endpoint
// 2341  */
// 2342 uint8 zclGeneral_CountScenes( uint8 endpoint )
// 2343 {
// 2344   zclGenSceneItem_t *pLoop;
// 2345   uint8 cnt = 0;
// 2346 
// 2347   // Look for end of list
// 2348   pLoop = zclGenSceneTable;
// 2349   while ( pLoop )
// 2350   {
// 2351     if ( pLoop->endpoint == endpoint  )
// 2352       cnt++;
// 2353     pLoop = pLoop->next;
// 2354   }
// 2355   return ( cnt );
// 2356 }
// 2357 #endif
// 2358 
// 2359 #if !defined ( ZCL_STANDALONE )
// 2360 /*********************************************************************
// 2361  * @fn      zclGeneral_CountAllScenes
// 2362  *
// 2363  * @brief   Count the total number of scenes
// 2364  *
// 2365  * @param   none
// 2366  *
// 2367  * @return  number of scenes
// 2368  */
// 2369 uint8 zclGeneral_CountAllScenes( void )
// 2370 {
// 2371   zclGenSceneItem_t *pLoop;
// 2372   uint8 cnt = 0;
// 2373 
// 2374   // Look for end of list
// 2375   pLoop = zclGenSceneTable;
// 2376   while ( pLoop )
// 2377   {
// 2378     cnt++;
// 2379     pLoop = pLoop->next;
// 2380   }
// 2381   return ( cnt );
// 2382 }
// 2383 #endif // ZCL_STANDALONE
// 2384 
// 2385 /*********************************************************************
// 2386  * @fn      zclGeneral_ReadSceneCountCB
// 2387  *
// 2388  * @brief   Read the number of scenes currently in the device's
// 2389  *          scene table (i.e., the Scene Count attribute).
// 2390  *
// 2391  *          Note: This function gets called only when the pointer
// 2392  *                'dataPtr' to the Scene Count attribute value is
// 2393  *                NULL in the attribute database registered with
// 2394  *                the ZCL.
// 2395  *
// 2396  * @param   clusterId - cluster that attribute belongs to
// 2397  * @param   attrId - attribute to be read or written
// 2398  * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
// 2399  * @param   pValue - pointer to attribute value
// 2400  * @param   pLen - pointer to length of attribute value read
// 2401  *
// 2402  * @return  status
// 2403  */
// 2404 ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
// 2405                                        uint8 oper, uint8 *pValue, uint16 *pLen )
// 2406 {
// 2407   ZStatus_t status = ZCL_STATUS_SUCCESS;
// 2408 
// 2409   // This callback function should only be called for the Scene Count attribute
// 2410   switch ( oper )
// 2411   {
// 2412     case ZCL_OPER_LEN:
// 2413       *pLen = 1; // uint8
// 2414       break;
// 2415 
// 2416     case ZCL_OPER_READ:
// 2417       *pValue = zclGeneral_CountAllScenes();
// 2418 
// 2419       if ( pLen != NULL )
// 2420       {
// 2421         *pLen = 1;
// 2422       }
// 2423       break;
// 2424 
// 2425     case ZCL_OPER_WRITE:
// 2426       // Fall through
// 2427 
// 2428     default:
// 2429       status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
// 2430       break;
// 2431   }
// 2432 
// 2433   return ( status );
// 2434 }
// 2435 
// 2436 /*********************************************************************
// 2437  * @fn      zclGeneral_ProcessInScenesServer
// 2438  *
// 2439  * @brief   Process in the received Scenes Command.
// 2440  *
// 2441  * @param   pInMsg - pointer to the incoming message
// 2442  *
// 2443  * @return  ZStatus_t
// 2444  */
// 2445 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
// 2446                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2447 {
// 2448   zclGeneral_Scene_t scene;
// 2449   zclGeneral_Scene_t *pScene;
// 2450   uint8 *pData = pInMsg->pData;
// 2451   uint8 nameLen;
// 2452   uint8 status;
// 2453   uint8 sceneCnt = 0;
// 2454   uint8 *sceneList = NULL;
// 2455   uint8 sendRsp = TRUE;
// 2456   uint8 nameSupport = FALSE;
// 2457   ZStatus_t stat = ZSuccess;
// 2458 
// 2459   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
// 2460 
// 2461   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
// 2462   pData += 2;   // Move past group ID
// 2463   scene.ID = *pData++;
// 2464 
// 2465   switch ( pInMsg->hdr.commandID )
// 2466   {
// 2467     case COMMAND_SCENE_ADD:
// 2468 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2469     case COMMAND_SCENE_ENHANCED_ADD:
// 2470 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2471       // Parse the rest of the incoming message
// 2472       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
// 2473       pData += 2;
// 2474 
// 2475       if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
// 2476       {
// 2477         // Received transition time is in 1/10 second
// 2478         scene.transTime100ms = scene.transTime % 10;
// 2479         scene.transTime /= 10;
// 2480       }
// 2481 
// 2482       nameLen= *pData++; // Name length
// 2483 
// 2484       // Retrieve Name Support attribute
// 2485       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
// 2486                         ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
// 2487 
// 2488       if ( nameSupport )
// 2489       {
// 2490         if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
// 2491           nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
// 2492         scene.name[0] = nameLen;
// 2493         zcl_memcpy( &(scene.name[1]), pData, nameLen );
// 2494       }
// 2495 
// 2496       pData += nameLen; // move past name, use original length
// 2497 
// 2498       scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
// 2499       if ( scene.extLen > 0 )
// 2500       {
// 2501         // Copy the extention field(s)
// 2502         if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
// 2503         {
// 2504           scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
// 2505         }
// 2506         zcl_memcpy( scene.extField, pData, scene.extLen );
// 2507       }
// 2508 
// 2509       if ( scene.groupID == 0x0000 ||
// 2510            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2511       {
// 2512         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2513         // does and the corresponding Group exits
// 2514         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2515         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2516         {
// 2517           status = ZCL_STATUS_SUCCESS;
// 2518           if ( pScene != NULL )
// 2519           {
// 2520             // The Scene already exists so update it
// 2521             pScene->transTime = scene.transTime;
// 2522             zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
// 2523 
// 2524             // Use the new extention field(s)
// 2525             zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
// 2526             pScene->extLen = scene.extLen;
// 2527 
// 2528             // Save Scenes
// 2529             zclGeneral_ScenesSave();
// 2530           }
// 2531           else
// 2532           {
// 2533             // The Scene doesn't exist so add it
// 2534             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2535           }
// 2536         }
// 2537         else
// 2538         {
// 2539           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2540         }
// 2541       }
// 2542       else
// 2543       {
// 2544         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2545       }
// 2546 
// 2547       if ( UNICAST_MSG( pInMsg->msg ) )
// 2548       {
// 2549         if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
// 2550         {
// 2551           zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2552                                           status, scene.groupID, scene.ID,
// 2553                                           true, pInMsg->hdr.transSeqNum );
// 2554         }
// 2555 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2556         else // COMMAND_SCENE_ENHANCED_ADD
// 2557         {
// 2558           zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2559                                                   status, scene.groupID, scene.ID,
// 2560                                                   true, pInMsg->hdr.transSeqNum );
// 2561         }
// 2562 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2563       }
// 2564       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2565 
// 2566       break;
// 2567 
// 2568     case COMMAND_SCENE_VIEW:
// 2569 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2570     case COMMAND_SCENE_ENHANCED_VIEW:
// 2571 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2572       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2573       if ( pScene != NULL )
// 2574       {
// 2575         status = ZCL_STATUS_SUCCESS;
// 2576       }
// 2577       else
// 2578       {
// 2579         // Scene not found
// 2580         if ( scene.groupID != 0x0000 &&
// 2581              aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2582         {
// 2583           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2584         }
// 2585         else
// 2586         {
// 2587           status = ZCL_STATUS_NOT_FOUND;
// 2588         }
// 2589         pScene = &scene;
// 2590       }
// 2591 
// 2592       if ( UNICAST_MSG( pInMsg->msg ) )
// 2593       {
// 2594         if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
// 2595         {
// 2596           zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2597                                            status, pScene, true, pInMsg->hdr.transSeqNum );
// 2598         }
// 2599 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2600         else
// 2601         {
// 2602           zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2603                                                    status, pScene, true, pInMsg->hdr.transSeqNum );
// 2604         }
// 2605 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2606       }
// 2607       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2608       break;
// 2609 
// 2610     case COMMAND_SCENE_REMOVE:
// 2611       if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
// 2612       {
// 2613         status = ZCL_STATUS_SUCCESS;
// 2614       }
// 2615       else
// 2616       {
// 2617         // Scene not found
// 2618         if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2619         {
// 2620           // The Group is not in the Group Table
// 2621           status = ZCL_STATUS_INVALID_FIELD;
// 2622         }
// 2623         else
// 2624         {
// 2625           status = ZCL_STATUS_NOT_FOUND;
// 2626         }
// 2627       }
// 2628 
// 2629       if ( UNICAST_MSG( pInMsg->msg ) )
// 2630       {
// 2631         // Addressed to this device (not to a group) - send a response back
// 2632         zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2633                                             status, scene.groupID,
// 2634                                             scene.ID, true, pInMsg->hdr.transSeqNum );
// 2635       }
// 2636       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2637       break;
// 2638 
// 2639     case COMMAND_SCENE_REMOVE_ALL:
// 2640       if ( scene.groupID == 0x0000 ||
// 2641            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2642       {
// 2643         zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
// 2644         status = ZCL_STATUS_SUCCESS;
// 2645       }
// 2646       else
// 2647       {
// 2648         status = ZCL_STATUS_INVALID_FIELD;
// 2649       }
// 2650 
// 2651       if ( UNICAST_MSG( pInMsg->msg ) )
// 2652       {
// 2653         // Addressed to this device (not to a group) - send a response back
// 2654         zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2655                                                status, scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2656       }
// 2657       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2658       break;
// 2659 
// 2660     case COMMAND_SCENE_STORE:
// 2661       if ( scene.groupID == 0x0000 ||
// 2662            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2663       {
// 2664         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2665         // does and the corresponding Group exits
// 2666         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2667         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2668         {
// 2669           uint8 sceneChanged = FALSE;
// 2670 
// 2671           status = ZCL_STATUS_SUCCESS;
// 2672           if ( pScene == NULL )
// 2673           {
// 2674             // Haven't been added yet
// 2675             pScene = &scene;
// 2676           }
// 2677 
// 2678           if ( pCBs->pfnSceneStoreReq )
// 2679           {
// 2680             zclSceneReq_t req;
// 2681 
// 2682             req.srcAddr = &(pInMsg->msg->srcAddr);
// 2683             req.scene = pScene;
// 2684 
// 2685             // Get the latest Scene info
// 2686             if ( pCBs->pfnSceneStoreReq( &req ) )
// 2687             {
// 2688               sceneChanged = TRUE;
// 2689             }
// 2690           }
// 2691 
// 2692           if ( pScene == &scene )
// 2693           {
// 2694             // The Scene doesn't exist so add it
// 2695             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2696           }
// 2697           else if ( sceneChanged )
// 2698           {
// 2699             // The Scene already exists so update only NV
// 2700             zclGeneral_ScenesSave();
// 2701           }
// 2702         }
// 2703         else
// 2704         {
// 2705           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2706         }
// 2707       }
// 2708       else
// 2709       {
// 2710         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2711       }
// 2712 
// 2713       if ( UNICAST_MSG( pInMsg->msg ) )
// 2714       {
// 2715         // Addressed to this device (not to a group) - send a response back
// 2716         zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2717                                            status, scene.groupID, scene.ID,
// 2718                                            true, pInMsg->hdr.transSeqNum );
// 2719       }
// 2720       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2721       break;
// 2722 
// 2723     case COMMAND_SCENE_RECALL:
// 2724       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2725       if ( pScene && pCBs->pfnSceneRecallReq )
// 2726       {
// 2727         zclSceneReq_t req;
// 2728 
// 2729         req.srcAddr = &(pInMsg->msg->srcAddr);
// 2730         req.scene = pScene;
// 2731 
// 2732         pCBs->pfnSceneRecallReq( &req );
// 2733       }
// 2734       // No response
// 2735       break;
// 2736 
// 2737     case COMMAND_SCENE_GET_MEMBERSHIP:
// 2738       // Find all the Scenes corresponding to the Group ID
// 2739       if ( scene.groupID == 0x0000 ||
// 2740            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2741       {
// 2742         // Allocate space for the scene list
// 2743         sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
// 2744         if ( sceneList != NULL )
// 2745         {
// 2746           sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2747                                                        scene.groupID, sceneList );
// 2748           status = ZCL_STATUS_SUCCESS;
// 2749           if ( ! UNICAST_MSG( pInMsg->msg ) )
// 2750           {
// 2751             // Addressed to the Group - ONLY send a response if an entry within the
// 2752             // Scene Table corresponds to the Group ID
// 2753             if ( sceneCnt == 0 )
// 2754             {
// 2755               sendRsp = FALSE;
// 2756             }
// 2757           }
// 2758         }
// 2759         else
// 2760         {
// 2761           // Couldn't allocate space for the scene list!
// 2762           status = ZCL_STATUS_INSUFFICIENT_SPACE;
// 2763         }
// 2764       }
// 2765       else
// 2766       {
// 2767         // The Group is not in the Group Table - send a response back
// 2768         status = ZCL_STATUS_INVALID_FIELD;
// 2769       }
// 2770 
// 2771 #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
// 2772       if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
// 2773 #else
// 2774       if ( sendRsp )
// 2775 #endif //ZCL_LIGHT_LINK_ENHANCE
// 2776       {
// 2777         zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2778                                     status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
// 2779                                     scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2780       }
// 2781 
// 2782       if ( sceneList != NULL )
// 2783         zcl_mem_free( sceneList );
// 2784 
// 2785       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2786       break;
// 2787 
// 2788 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2789     case COMMAND_SCENE_COPY:
// 2790       {
// 2791         uint8 mode;
// 2792         uint16 groupIDFrom, groupIDTo;
// 2793         uint8 sceneIDFrom, sceneIDTo;
// 2794 
// 2795         pData = pInMsg->pData; // different payload format
// 2796 
// 2797         mode = *pData++;
// 2798         groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
// 2799         pData += 2;
// 2800         sceneIDFrom = *pData++; // from scene ID
// 2801         groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
// 2802         pData += 2;
// 2803         if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
// 2804         {
// 2805           sceneIDTo = *pData++; // to scene ID
// 2806         }
// 2807 
// 2808         // Make sure the groups exist
// 2809         if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
// 2810              ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
// 2811         {
// 2812           // Allocate space for the scene list
// 2813           sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
// 2814           if ( sceneList == NULL )
// 2815           {
// 2816             status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
// 2817           }
// 2818           else
// 2819           {
// 2820             status = ZCL_STATUS_SUCCESS;
// 2821             if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
// 2822             {
// 2823               sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2824                                                            groupIDFrom, sceneList );
// 2825             }
// 2826             else // Copy single scene
// 2827             {
// 2828               // Make sure the scene exists
// 2829               pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
// 2830               if ( pScene != NULL )
// 2831               {
// 2832                 sceneList[0] = sceneIDFrom;
// 2833                 sceneCnt = 1;
// 2834               }
// 2835               else
// 2836               {
// 2837                 status = ZCL_STATUS_INVALID_FIELD; // Scene not found
// 2838               }
// 2839             }
// 2840           }
// 2841 
// 2842           if ( status == ZCL_STATUS_SUCCESS )
// 2843           {
// 2844             uint8 numScenesToAdd = 0;
// 2845             uint8 i;
// 2846             for ( i = 0; i < sceneCnt; i++ )
// 2847             {
// 2848               if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
// 2849               {
// 2850                 numScenesToAdd++;
// 2851               }
// 2852             }
// 2853             if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
// 2854             {
// 2855               // Copy the scenes
// 2856               for ( i = 0; i < sceneCnt; i++ )
// 2857               {
// 2858                 // Ignore scene ID from and scene ID to fields
// 2859                 pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
// 2860                 if ( pScene != NULL )
// 2861                 {
// 2862                   zclGeneral_Scene_t *pToScene;
// 2863                   scene = *pScene;
// 2864                   scene.groupID = groupIDTo;
// 2865                   scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
// 2866 
// 2867                   pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2868                   if( pToScene != NULL )
// 2869                   {
// 2870                     zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2871                   }
// 2872                   // Add the scene
// 2873                   zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2874                 }
// 2875               }
// 2876             }
// 2877             else
// 2878             {
// 2879               status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2880             }
// 2881           }
// 2882         }
// 2883         else
// 2884         {
// 2885           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2886         }
// 2887 
// 2888         if ( UNICAST_MSG( pInMsg->msg ) )
// 2889         {
// 2890           if ( pScene == NULL )
// 2891           {
// 2892             pScene = &scene;
// 2893           }
// 2894           // Addressed to this device (not to a group) - send a response back
// 2895           zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2896                                             status, pScene->groupID, pScene->ID,
// 2897                                             true, pInMsg->hdr.transSeqNum );
// 2898         }
// 2899 
// 2900         if ( sceneList != NULL )
// 2901         {
// 2902           zcl_mem_free( sceneList );
// 2903         }
// 2904       }
// 2905 
// 2906       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2907       break;
// 2908 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2909 
// 2910     default:
// 2911       stat = ZFailure;
// 2912     break;
// 2913   }
// 2914 
// 2915   return ( stat );
// 2916 }
// 2917 
// 2918 /*********************************************************************
// 2919  * @fn      zclGeneral_ProcessInScenesClient
// 2920  *
// 2921  * @brief   Process in the received Scenes Command.
// 2922  *
// 2923  * @param   pInMsg - pointer to the incoming message
// 2924  *
// 2925  * @return  ZStatus_t
// 2926  */
// 2927 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
// 2928                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2929 {
// 2930   zclGeneral_Scene_t scene;
// 2931   uint8 *pData = pInMsg->pData;
// 2932   uint8 nameLen;
// 2933   zclSceneRsp_t rsp;
// 2934   uint8 i;
// 2935   ZStatus_t stat = ZSuccess;
// 2936 
// 2937   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
// 2938   zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
// 2939 
// 2940   // Get the status field first
// 2941   rsp.status = *pData++;
// 2942 
// 2943   if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
// 2944   {
// 2945     rsp.capacity = *pData++;
// 2946   }
// 2947 
// 2948   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
// 2949   pData += 2;   // Move past group ID
// 2950 
// 2951   switch ( pInMsg->hdr.commandID )
// 2952   {
// 2953     case COMMAND_SCENE_VIEW_RSP:
// 2954       // Parse the rest of the incoming message
// 2955       scene.ID = *pData++; // Not applicable to Remove All Response command
// 2956       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
// 2957       pData += 2;
// 2958       nameLen = *pData++; // Name length
// 2959       if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
// 2960         nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
// 2961 
// 2962       scene.name[0] = nameLen;
// 2963       zcl_memcpy( &(scene.name[1]), pData, nameLen );
// 2964 
// 2965       pData += nameLen; // move past name, use original length
// 2966 
// 2967       //*** Do something with the extension field(s)
// 2968 
// 2969       // Fall through to callback - break is left off intentionally
// 2970 
// 2971     case COMMAND_SCENE_ADD_RSP:
// 2972     case COMMAND_SCENE_REMOVE_RSP:
// 2973     case COMMAND_SCENE_REMOVE_ALL_RSP:
// 2974     case COMMAND_SCENE_STORE_RSP:
// 2975       if ( pCBs->pfnSceneRsp )
// 2976       {
// 2977         if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
// 2978         {
// 2979           scene.ID = *pData++;
// 2980         }
// 2981         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 2982         rsp.cmdID = pInMsg->hdr.commandID;
// 2983         rsp.scene = &scene;
// 2984 
// 2985         pCBs->pfnSceneRsp( &rsp );
// 2986       }
// 2987       break;
// 2988 
// 2989     case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
// 2990       {
// 2991         uint8 *sceneList = NULL;
// 2992 
// 2993         if ( rsp.status == ZCL_STATUS_SUCCESS )
// 2994         {
// 2995           uint8 sceneCnt = *pData++;
// 2996 
// 2997           if ( sceneCnt > 0 )
// 2998           {
// 2999             // Allocate space for the scene list
// 3000             sceneList = zcl_mem_alloc( sceneCnt );
// 3001             if ( sceneList != NULL )
// 3002             {
// 3003               rsp.sceneCnt = sceneCnt;
// 3004               for ( i = 0; i < sceneCnt; i++ )
// 3005                 sceneList[i] = *pData++;
// 3006             }
// 3007           }
// 3008         }
// 3009 
// 3010         if ( pCBs->pfnSceneRsp )
// 3011         {
// 3012           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3013           rsp.cmdID = pInMsg->hdr.commandID;
// 3014           rsp.sceneList = sceneList;
// 3015           rsp.scene = &scene;
// 3016 
// 3017           pCBs->pfnSceneRsp( &rsp);
// 3018         }
// 3019 
// 3020         if ( sceneList != NULL )
// 3021         {
// 3022           zcl_mem_free( sceneList );
// 3023         }
// 3024       }
// 3025       break;
// 3026 
// 3027     default:
// 3028       stat = ZFailure;
// 3029       break;
// 3030   }
// 3031 
// 3032   return ( stat );
// 3033 }
// 3034 #endif // ZCL_SCENES
// 3035 
// 3036 #ifdef ZCL_ON_OFF
// 3037 /*********************************************************************
// 3038  * @fn      zclGeneral_ProcessInCmdOnOff
// 3039  *
// 3040  * @brief   Process in the received On/Off Command.
// 3041  *
// 3042  * @param   pInMsg - pointer to the incoming message
// 3043  *
// 3044  * @return  ZStatus_t
// 3045  */
// 3046 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
// 3047                                             zclGeneral_AppCallbacks_t *pCBs )
// 3048 {
// 3049   ZStatus_t stat = ZSuccess;
// 3050 
// 3051   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3052   {
// 3053     switch ( pInMsg->hdr.commandID )
// 3054     {
// 3055       case COMMAND_OFF:
// 3056       case COMMAND_ON:
// 3057       case COMMAND_TOGGLE:
// 3058         if ( pCBs->pfnOnOff )
// 3059         {
// 3060           pCBs->pfnOnOff( pInMsg->hdr.commandID );
// 3061         }
// 3062         break;
// 3063 
// 3064 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 3065       case COMMAND_OFF_WITH_EFFECT:
// 3066         if ( pCBs->pfnOnOff_OffWithEffect )
// 3067         {
// 3068           zclOffWithEffect_t cmd;
// 3069 
// 3070           cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3071           cmd.effectId = pInMsg->pData[0];
// 3072           cmd.effectVariant = pInMsg->pData[1];
// 3073 
// 3074           pCBs->pfnOnOff_OffWithEffect( &cmd );
// 3075         }
// 3076         break;
// 3077 
// 3078       case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
// 3079         if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
// 3080         {
// 3081           pCBs->pfnOnOff_OnWithRecallGlobalScene();
// 3082         }
// 3083         break;
// 3084 
// 3085       case COMMAND_ON_WITH_TIMED_OFF:
// 3086         if ( pCBs->pfnOnOff_OnWithTimedOff )
// 3087         {
// 3088           zclOnWithTimedOff_t cmd;
// 3089 
// 3090           cmd.onOffCtrl.byte = pInMsg->pData[0];
// 3091           cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3092           cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 3093           pCBs->pfnOnOff_OnWithTimedOff( &cmd );
// 3094         }
// 3095         break;
// 3096 #endif // ZCL_LIGHT_LINK_ENHANCE
// 3097 
// 3098       default:
// 3099         stat = ZFailure;
// 3100         break;
// 3101     }
// 3102   }
// 3103   // no Client command
// 3104 
// 3105   return ( stat );
// 3106 }
// 3107 #endif // ZCL_ON_OFF
// 3108 
// 3109 #ifdef ZCL_LEVEL_CTRL
// 3110 /*********************************************************************
// 3111  * @fn      zclGeneral_ProcessInLevelControl
// 3112  *
// 3113  * @brief   Process in the received Level Control Command.
// 3114  *
// 3115  * @param   pInMsg - pointer to the incoming message
// 3116  *
// 3117  * @return  ZStatus_t
// 3118  */
// 3119 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
// 3120                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3121 {
// 3122   uint8 withOnOff = FALSE;
// 3123   ZStatus_t stat = ZSuccess;
// 3124 
// 3125   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3126   {
// 3127     switch ( pInMsg->hdr.commandID )
// 3128     {
// 3129       case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
// 3130         withOnOff = TRUE;
// 3131         // fall through
// 3132       case COMMAND_LEVEL_MOVE_TO_LEVEL:
// 3133         if ( pCBs->pfnLevelControlMoveToLevel )
// 3134         {
// 3135           zclLCMoveToLevel_t cmd;
// 3136 
// 3137           cmd.level = pInMsg->pData[0];
// 3138 
// 3139           if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
// 3140                ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
// 3141           {
// 3142             cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3143             cmd.withOnOff = withOnOff;
// 3144 
// 3145             pCBs->pfnLevelControlMoveToLevel( &cmd );
// 3146           }
// 3147           else
// 3148           {
// 3149             // level range requested is invalid
// 3150             stat = ZCL_STATUS_INVALID_VALUE;
// 3151           }
// 3152         }
// 3153         break;
// 3154 
// 3155       case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
// 3156         withOnOff = TRUE;
// 3157         // fall through
// 3158       case COMMAND_LEVEL_MOVE:
// 3159         if ( pCBs->pfnLevelControlMove )
// 3160         {
// 3161           zclLCMove_t cmd;
// 3162 
// 3163           cmd.moveMode = pInMsg->pData[0];
// 3164           cmd.rate = pInMsg->pData[1];
// 3165           cmd.withOnOff = withOnOff;
// 3166 
// 3167           pCBs->pfnLevelControlMove( &cmd );
// 3168         }
// 3169         break;
// 3170 
// 3171       case COMMAND_LEVEL_STEP_WITH_ON_OFF:
// 3172         withOnOff = TRUE;
// 3173         // fall through
// 3174       case COMMAND_LEVEL_STEP:
// 3175         if ( pCBs->pfnLevelControlStep )
// 3176         {
// 3177           zclLCStep_t cmd;
// 3178 
// 3179           cmd.stepMode = pInMsg->pData[0];
// 3180           cmd.amount =  pInMsg->pData[1];
// 3181           cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 3182           cmd.withOnOff = withOnOff;
// 3183 
// 3184           pCBs->pfnLevelControlStep( &cmd );
// 3185         }
// 3186         break;
// 3187 
// 3188       case COMMAND_LEVEL_STOP:
// 3189       case COMMAND_LEVEL_STOP_WITH_ON_OFF:
// 3190         // Both Stop commands are identical
// 3191         if ( pCBs->pfnLevelControlStop )
// 3192         {
// 3193           pCBs->pfnLevelControlStop();
// 3194         }
// 3195         break;
// 3196 
// 3197       default:
// 3198         stat = ZFailure;
// 3199         break;
// 3200     }
// 3201   }
// 3202   // no Client command
// 3203 
// 3204   return ( stat );
// 3205 }
// 3206 #endif // ZCL_LEVEL_CTRL
// 3207 
// 3208 #ifdef ZCL_ALARMS
// 3209 /*********************************************************************
// 3210  * @fn      zclGeneral_AddAlarm
// 3211  *
// 3212  * @brief   Add an alarm for a cluster
// 3213  *
// 3214  * @param   endpoint -
// 3215  * @param   alarm - new alarm item
// 3216  *
// 3217  * @return  ZStatus_t
// 3218  */
// 3219 ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
// 3220 {
// 3221   zclGenAlarmItem_t *pNewItem;
// 3222   zclGenAlarmItem_t *pLoop;
// 3223 
// 3224   // Fill in the new profile list
// 3225   pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
// 3226   if ( pNewItem == NULL )
// 3227     return ( ZMemError );
// 3228 
// 3229   // Fill in the plugin record.
// 3230   pNewItem->next = (zclGenAlarmItem_t *)NULL;
// 3231   pNewItem->endpoint =  endpoint;
// 3232   zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
// 3233 
// 3234   // Find spot in list
// 3235   if (  zclGenAlarmTable == NULL )
// 3236   {
// 3237     zclGenAlarmTable = pNewItem;
// 3238   }
// 3239   else
// 3240   {
// 3241     // Look for end of list
// 3242     pLoop = zclGenAlarmTable;
// 3243     while ( pLoop->next != NULL )
// 3244       pLoop = pLoop->next;
// 3245 
// 3246     // Put new item at end of list
// 3247     pLoop->next = pNewItem;
// 3248   }
// 3249 
// 3250   return ( ZSuccess );
// 3251 }
// 3252 
// 3253 /*********************************************************************
// 3254  * @fn      zclGeneral_FindAlarm
// 3255  *
// 3256  * @brief   Find an alarm with alarmCode and clusterID
// 3257  *
// 3258  * @param   endpoint -
// 3259  * @param   groupID - what group the scene belongs to
// 3260  * @param   sceneID - ID to look for scene
// 3261  *
// 3262  * @return  a pointer to the alarm information, NULL if not found
// 3263  */
// 3264 zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3265 {
// 3266   zclGenAlarmItem_t *pLoop;
// 3267 
// 3268   // Look for the alarm
// 3269   pLoop = zclGenAlarmTable;
// 3270   while ( pLoop )
// 3271   {
// 3272     if ( pLoop->endpoint == endpoint &&
// 3273          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3274     {
// 3275       return ( &(pLoop->alarm) );
// 3276     }
// 3277     pLoop = pLoop->next;
// 3278   }
// 3279 
// 3280   return ( (zclGeneral_Alarm_t *)NULL );
// 3281 }
// 3282 
// 3283 /*********************************************************************
// 3284  * @fn      zclGeneral_FindEarliestAlarm
// 3285  *
// 3286  * @brief   Find an alarm with the earliest timestamp
// 3287  *
// 3288  * @param   endpoint -
// 3289  *
// 3290  * @return  a pointer to the alarm information, NULL if not found
// 3291  */
// 3292 zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
// 3293 {
// 3294   zclGenAlarmItem_t *pLoop;
// 3295   zclGenAlarmItem_t earliestAlarm;
// 3296   zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
// 3297 
// 3298   pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
// 3299 
// 3300   // Look for alarm with earliest time
// 3301   pLoop = zclGenAlarmTable;
// 3302   while ( pLoop )
// 3303   {
// 3304     if ( pLoop->endpoint == endpoint &&
// 3305          pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
// 3306     {
// 3307       pEarliestAlarm = pLoop;
// 3308     }
// 3309     pLoop = pLoop->next;
// 3310   }
// 3311 
// 3312   if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
// 3313     return ( &(pEarliestAlarm->alarm) );
// 3314 
// 3315   // No alarm
// 3316   return ( (zclGeneral_Alarm_t *)NULL );
// 3317 }
// 3318 
// 3319 /*********************************************************************
// 3320  * @fn      zclGeneral_ResetAlarm
// 3321  *
// 3322  * @brief   Remove an alarm with alarmCode and clusterID
// 3323  *
// 3324  * @param   endpoint -
// 3325  * @param   alarmCode -
// 3326  * @param   clusterID -
// 3327  *
// 3328  * @return  TRUE if removed, FALSE if not found
// 3329  */
// 3330 void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3331 {
// 3332   zclGenAlarmItem_t *pLoop;
// 3333   zclGenAlarmItem_t *pPrev;
// 3334 
// 3335   // Look for end of list
// 3336   pLoop = zclGenAlarmTable;
// 3337   pPrev = NULL;
// 3338   while ( pLoop )
// 3339   {
// 3340     if ( pLoop->endpoint == endpoint &&
// 3341          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3342     {
// 3343       if ( pPrev == NULL )
// 3344         zclGenAlarmTable = pLoop->next;
// 3345       else
// 3346         pPrev->next = pLoop->next;
// 3347 
// 3348       // Free the memory
// 3349       zcl_mem_free( pLoop );
// 3350 
// 3351       // Notify the Application so that if the alarm condition still active then
// 3352       // a new notification will be generated, and a new alarm record will be
// 3353       // added to the alarm log
// 3354       // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
// 3355       return;
// 3356     }
// 3357     pPrev = pLoop;
// 3358     pLoop = pLoop->next;
// 3359   }
// 3360 }
// 3361 
// 3362 /*********************************************************************
// 3363  * @fn      zclGeneral_ResetAllAlarms
// 3364  *
// 3365  * @brief   Remove all alarms with endpoint
// 3366  *
// 3367  * @param   endpoint -
// 3368  * @param   notifyApp -
// 3369  *
// 3370  * @return  none
// 3371  */
// 3372 void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
// 3373 {
// 3374   zclGenAlarmItem_t *pLoop;
// 3375   zclGenAlarmItem_t *pPrev;
// 3376   zclGenAlarmItem_t *pNext;
// 3377 
// 3378   // Look for end of list
// 3379   pLoop = zclGenAlarmTable;
// 3380   pPrev = NULL;
// 3381   while ( pLoop )
// 3382   {
// 3383     if (  pLoop->endpoint == endpoint )
// 3384     {
// 3385       if ( pPrev == NULL )
// 3386         zclGenAlarmTable = pLoop->next;
// 3387       else
// 3388         pPrev->next = pLoop->next;
// 3389 
// 3390       pNext = pLoop->next;
// 3391 
// 3392       // Free the memory
// 3393       zcl_mem_free( pLoop );
// 3394 
// 3395       pLoop = pNext;
// 3396     }
// 3397     else
// 3398     {
// 3399       pPrev = pLoop;
// 3400       pLoop = pLoop->next;
// 3401     }
// 3402   }
// 3403 
// 3404   if ( notifyApp )
// 3405   {
// 3406     // Notify the Application so that if any alarm conditions still active then
// 3407     // a new notification will be generated, and a new alarm record will be
// 3408     // added to the alarm log
// 3409     // zclGeneral_NotifyResetAll(); // callback function?
// 3410   }
// 3411 }
// 3412 
// 3413 /*********************************************************************
// 3414  * @fn      zclGeneral_ProcessInAlarmsServer
// 3415  *
// 3416  * @brief   Process in the received Alarms Command.
// 3417  *
// 3418  * @param   pInMsg - pointer to the incoming message
// 3419  *
// 3420  * @return  ZStatus_t
// 3421  */
// 3422 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
// 3423                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3424 {
// 3425   zclAlarm_t alarm;
// 3426   zclGeneral_Alarm_t *pAlarm;
// 3427   uint8 *pData = pInMsg->pData;
// 3428   ZStatus_t stat = ZSuccess;
// 3429 
// 3430   switch ( pInMsg->hdr.commandID )
// 3431   {
// 3432     case COMMAND_ALARMS_RESET:
// 3433       if ( pCBs->pfnAlarm )
// 3434       {
// 3435         alarm.cmdID = pInMsg->hdr.commandID;
// 3436         alarm.alarmCode = pData[0];
// 3437         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3438 
// 3439         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3440       }
// 3441       else
// 3442       {
// 3443         stat = ZCL_STATUS_FAILURE;
// 3444       }
// 3445       break;
// 3446 
// 3447     case COMMAND_ALARMS_RESET_ALL:
// 3448       if ( pCBs->pfnAlarm )
// 3449       {
// 3450         alarm.cmdID = pInMsg->hdr.commandID;
// 3451 
// 3452         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3453       }
// 3454       else
// 3455       {
// 3456         stat = ZCL_STATUS_FAILURE;
// 3457       }
// 3458       break;
// 3459 
// 3460     case COMMAND_ALARMS_GET:
// 3461       if ( pCBs->pfnAlarm )
// 3462       {
// 3463         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3464         alarm.cmdID = pInMsg->hdr.commandID;
// 3465 
// 3466         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3467 
// 3468         pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
// 3469         if ( pAlarm )
// 3470         {
// 3471           // Send a response back
// 3472           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3473                                            ZCL_STATUS_SUCCESS, pAlarm->code,
// 3474                                            pAlarm->clusterID, pAlarm->timeStamp,
// 3475                                            true, pInMsg->hdr.transSeqNum );
// 3476           // Remove the entry from the Alarm table
// 3477           zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
// 3478         }
// 3479         else
// 3480         {
// 3481           // Send a response back
// 3482           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3483                                            ZCL_STATUS_NOT_FOUND, 0, 0, 0,
// 3484                                            true, pInMsg->hdr.transSeqNum );
// 3485         }
// 3486         stat = ZCL_STATUS_CMD_HAS_RSP;
// 3487       }
// 3488       else
// 3489       {
// 3490         stat = ZCL_STATUS_FAILURE;
// 3491       }
// 3492       break;
// 3493 
// 3494     case COMMAND_ALARMS_RESET_LOG:
// 3495       if ( pCBs->pfnAlarm )
// 3496       {
// 3497         alarm.cmdID = pInMsg->hdr.commandID;
// 3498 
// 3499         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3500 
// 3501         zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
// 3502       }
// 3503       else
// 3504       {
// 3505         stat = ZCL_STATUS_FAILURE;
// 3506       }
// 3507       break;
// 3508 
// 3509 #ifdef SE_UK_EXT
// 3510     case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
// 3511       if ( pCBs->pfnPublishEventLog )
// 3512       {
// 3513         zclPublishEventLog_t eventLog;
// 3514 
// 3515         eventLog.logID = *pData++;
// 3516         eventLog.cmdIndex = *pData++;
// 3517         eventLog.totalCmds = *pData++;
// 3518 
// 3519         // First try to find out number of Sub Log Payloads
// 3520         eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
// 3521         if ( eventLog.numSubLogs > 0 )
// 3522         {
// 3523           // Try to alloc space for Log Payload
// 3524           eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
// 3525                                                                    eventLog.numSubLogs );
// 3526           if ( eventLog.pLogs != NULL )
// 3527           {
// 3528             // Copy Log Payload
// 3529             for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
// 3530             {
// 3531               eventLog.pLogs[i].eventId = *pData++;
// 3532               eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
// 3533               pData += 4;
// 3534             }
// 3535           }
// 3536           else
// 3537           {
// 3538             stat = ZCL_STATUS_SOFTWARE_FAILURE;
// 3539           }
// 3540         }
// 3541         else
// 3542         {
// 3543           eventLog.pLogs = NULL;
// 3544         }
// 3545 
// 3546         if ( stat == ZSuccess )
// 3547         {
// 3548           pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
// 3549         }
// 3550 
// 3551         if ( eventLog.pLogs != NULL )
// 3552         {
// 3553           zcl_mem_free( eventLog.pLogs );
// 3554         }
// 3555       }
// 3556       break;
// 3557 #endif // SE_UK_EXT
// 3558 
// 3559     default:
// 3560       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3561       break;
// 3562   }
// 3563 
// 3564   return ( stat );
// 3565 }
// 3566 
// 3567 /*********************************************************************
// 3568  * @fn      zclGeneral_ProcessInAlarmsClient
// 3569  *
// 3570  * @brief   Process in the received Alarms Command.
// 3571  *
// 3572  * @param   pInMsg - pointer to the incoming message
// 3573  *
// 3574  * @return  ZStatus_t
// 3575  */
// 3576 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
// 3577                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3578 {
// 3579   uint8 *pData = pInMsg->pData;
// 3580   zclAlarm_t alarm;
// 3581   ZStatus_t stat = ZSuccess;
// 3582 
// 3583   zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
// 3584 
// 3585   switch ( pInMsg->hdr.commandID )
// 3586   {
// 3587     case COMMAND_ALARMS_ALARM:
// 3588       if ( pCBs->pfnAlarm )
// 3589       {
// 3590         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3591         alarm.cmdID = pInMsg->hdr.commandID;
// 3592         alarm.alarmCode = pData[0];
// 3593         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3594 
// 3595         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3596       }
// 3597       else
// 3598       {
// 3599         stat = ZCL_STATUS_FAILURE;
// 3600       }
// 3601       break;
// 3602 
// 3603     case COMMAND_ALARMS_GET_RSP:
// 3604       if ( pCBs->pfnAlarm )
// 3605       {
// 3606         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3607         alarm.cmdID = pInMsg->hdr.commandID;
// 3608         alarm.alarmCode = *pData++;
// 3609         alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
// 3610 
// 3611         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3612       }
// 3613       else
// 3614       {
// 3615         stat = ZCL_STATUS_FAILURE;
// 3616       }
// 3617       break;
// 3618 
// 3619 #ifdef SE_UK_EXT
// 3620     case COMMAND_ALARMS_GET_EVENT_LOG:
// 3621       if ( pCBs->pfnGetEventLog )
// 3622       {
// 3623         zclGetEventLog_t eventLog;
// 3624 
// 3625         eventLog.logID = *pData++;
// 3626         eventLog.startTime = zcl_build_uint32( pData, 4 );
// 3627         pData += 4;
// 3628         eventLog.endTime = zcl_build_uint32( pData, 4 );
// 3629         pData += 4;
// 3630         eventLog.numEvents = *pData;
// 3631 
// 3632         pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 3633                               &eventLog, pInMsg->hdr.transSeqNum );
// 3634       }
// 3635       break;
// 3636 #endif // SE_UK_EXT
// 3637 
// 3638     default:
// 3639       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3640       break;
// 3641   }
// 3642 
// 3643   return ( stat );
// 3644 }
// 3645 #endif // ZCL_ALARMS
// 3646 
// 3647 #ifdef ZCL_LOCATION
// 3648 /*********************************************************************
// 3649  * @fn      zclGeneral_ProcessInLocationServer
// 3650  *
// 3651  * @brief   Process in the received Location Command.
// 3652  *
// 3653  * @param   pInMsg - pointer to the incoming message
// 3654  *
// 3655  * @return  ZStatus_t
// 3656  */
// 3657 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
// 3658                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3659 {
// 3660   uint8 *pData = pInMsg->pData;
// 3661   zclLocation_t cmd;
// 3662   ZStatus_t stat = ZSuccess;
// 3663 
// 3664   zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
// 3665 
// 3666   switch ( pInMsg->hdr.commandID )
// 3667   {
// 3668     case COMMAND_LOCATION_SET_ABSOLUTE:
// 3669       cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3670       pData += 2;
// 3671       cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3672       pData += 2;
// 3673       cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3674       pData += 2;
// 3675       cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3676       pData += 2;
// 3677       cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3678 
// 3679       if ( pCBs->pfnLocation )
// 3680       {
// 3681         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3682         cmd.cmdID = pInMsg->hdr.commandID;
// 3683 
// 3684         // Update the absolute location info
// 3685         pCBs->pfnLocation( &cmd );
// 3686       }
// 3687       break;
// 3688 
// 3689     case COMMAND_LOCATION_SET_DEV_CFG:
// 3690       cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
// 3691       pData += 2;
// 3692       cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3693       pData += 2;
// 3694       cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3695       pData += 2;
// 3696       cmd.un.devCfg.numMeasurements = *pData++;
// 3697       cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3698 
// 3699       if ( pCBs->pfnLocation )
// 3700       {
// 3701         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3702         cmd.cmdID = pInMsg->hdr.commandID;
// 3703 
// 3704         // Update the device configuration info
// 3705         pCBs->pfnLocation( &cmd );
// 3706       }
// 3707       break;
// 3708 
// 3709     case COMMAND_LOCATION_GET_DEV_CFG:
// 3710       cmd.un.ieeeAddr = pData;
// 3711 
// 3712       if ( pCBs->pfnLocation )
// 3713       {
// 3714         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3715         cmd.cmdID = pInMsg->hdr.commandID;
// 3716         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3717 
// 3718         // Retreive the Device Configuration
// 3719         pCBs->pfnLocation( &cmd );
// 3720       }
// 3721       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3722       break;
// 3723 
// 3724     case COMMAND_LOCATION_GET_DATA:
// 3725       cmd.un.loc.bitmap.locByte = *pData++;
// 3726       cmd.un.loc.numResponses = *pData++;
// 3727 
// 3728       if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
// 3729         zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
// 3730 
// 3731       if ( pCBs->pfnLocation )
// 3732       {
// 3733         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3734         cmd.cmdID = pInMsg->hdr.commandID;
// 3735         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3736 
// 3737         // Retreive the Location Data
// 3738         pCBs->pfnLocation( &cmd );
// 3739       }
// 3740       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3741       break;
// 3742 
// 3743     default:
// 3744       stat = ZFailure;
// 3745       break;
// 3746   }
// 3747 
// 3748   return ( stat );
// 3749 }
// 3750 
// 3751 /*********************************************************************
// 3752  * @fn      zclGeneral_ProcessInLocationDataRsp
// 3753  *
// 3754  * @brief   Process in the received Location Command.
// 3755  *
// 3756  * @param   pInMsg - pointer to the incoming message
// 3757  *
// 3758  * @return  ZStatus_t
// 3759  */
// 3760 static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
// 3761                                                  zclGeneral_AppCallbacks_t *pCBs )
// 3762 {
// 3763   uint8 *pData = pInMsg->pData;
// 3764   zclLocationRsp_t rsp;
// 3765 
// 3766   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3767 
// 3768   if ( pCBs->pfnLocationRsp )
// 3769   {
// 3770     if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
// 3771       rsp.un.loc.status = *pData++;
// 3772 
// 3773     if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
// 3774          rsp.un.loc.status == ZCL_STATUS_SUCCESS )
// 3775     {
// 3776       rsp.un.loc.data.type = *pData++;
// 3777       rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3778       pData += 2;
// 3779       rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3780       pData += 2;
// 3781 
// 3782       if ( locationType2D( rsp.un.loc.data.type ) == 0 )
// 3783       {
// 3784         rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3785         pData += 2;
// 3786       }
// 3787 
// 3788       if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3789       {
// 3790         rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3791         pData += 2;
// 3792         rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3793         pData += 2;
// 3794       }
// 3795 
// 3796       if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
// 3797       {
// 3798         if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3799           rsp.un.loc.data.calcLoc.locationMethod = *pData++;
// 3800 
// 3801         rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
// 3802         rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
// 3803       }
// 3804     }
// 3805 
// 3806     rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3807     rsp.cmdID = pInMsg->hdr.commandID;
// 3808 
// 3809     // Notify the Application
// 3810     pCBs->pfnLocationRsp( &rsp );
// 3811   }
// 3812 }
// 3813 
// 3814 /*********************************************************************
// 3815  * @fn      zclGeneral_ProcessInLocationClient
// 3816  *
// 3817  * @brief   Process in the received Location Command.
// 3818  *
// 3819  * @param   pInMsg - pointer to the incoming message
// 3820  *
// 3821  * @return  ZStatus_t
// 3822  */
// 3823 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
// 3824                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3825 {
// 3826   uint8 *pData = pInMsg->pData;
// 3827   zclLocationRsp_t rsp;
// 3828   ZStatus_t stat = ZSuccess;
// 3829 
// 3830   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3831 
// 3832   switch ( pInMsg->hdr.commandID )
// 3833   {
// 3834     case COMMAND_LOCATION_DEV_CFG_RSP:
// 3835       if ( pCBs->pfnLocationRsp )
// 3836       {
// 3837         rsp.un.devCfg.status = *pData++;
// 3838         if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
// 3839         {
// 3840           rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
// 3841           pData += 2;
// 3842           rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3843           pData += 2;
// 3844           rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3845           pData += 2;
// 3846           rsp.un.devCfg.data.numMeasurements = *pData++;
// 3847           rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3848 
// 3849           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3850           rsp.cmdID = pInMsg->hdr.commandID;
// 3851 
// 3852           // Notify the Application
// 3853           pCBs->pfnLocationRsp( &rsp );
// 3854         }
// 3855       }
// 3856       break;
// 3857 
// 3858     case COMMAND_LOCATION_DATA_RSP:
// 3859     case COMMAND_LOCATION_DATA_NOTIF:
// 3860     case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
// 3861       zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
// 3862       break;
// 3863 
// 3864     case COMMAND_LOCATION_RSSI_PING:
// 3865       if ( pCBs->pfnLocationRsp )
// 3866       {
// 3867         rsp.un.locationType = *pData;
// 3868 
// 3869         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3870         rsp.cmdID = pInMsg->hdr.commandID;
// 3871 
// 3872         // Notify the Application
// 3873         pCBs->pfnLocationRsp( &rsp );
// 3874       }
// 3875       break;
// 3876 
// 3877     default:
// 3878       stat = ZFailure;
// 3879       break;
// 3880   }
// 3881 
// 3882   return ( stat );
// 3883 }
// 3884 #endif // ZCL_LOCATION
// 3885 
// 3886 #ifdef ZCL_SCENES
// 3887 #if !defined ( ZCL_STANDALONE )
// 3888 /*********************************************************************
// 3889  * @fn      zclGeneral_ScenesInitNV
// 3890  *
// 3891  * @brief   Initialize the NV Scene Table Items
// 3892  *
// 3893  * @param   none
// 3894  *
// 3895  * @return  number of scenes
// 3896  */
// 3897 static uint8 zclGeneral_ScenesInitNV( void )
// 3898 {
// 3899   uint8  status;
// 3900   uint16 size;
// 3901 
// 3902   size = (uint16)((sizeof ( nvGenScenesHdr_t ))
// 3903                   + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
// 3904 
// 3905   status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
// 3906 
// 3907   if ( status != ZSUCCESS )
// 3908   {
// 3909     zclGeneral_ScenesSetDefaultNV();
// 3910   }
// 3911 
// 3912   return status;
// 3913 }
// 3914 #endif // ZCL_STANDALONE
// 3915 
// 3916 #if !defined ( ZCL_STANDALONE )
// 3917 /*********************************************************************
// 3918  * @fn          zclGeneral_ScenesSetDefaultNV
// 3919  *
// 3920  * @brief       Write the defaults to NV
// 3921  *
// 3922  * @param       none
// 3923  *
// 3924  * @return      none
// 3925  */
// 3926 static void zclGeneral_ScenesSetDefaultNV( void )
// 3927 {
// 3928   nvGenScenesHdr_t hdr;
// 3929 
// 3930   // Initialize the header
// 3931   hdr.numRecs = 0;
// 3932 
// 3933   // Save off the header
// 3934   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 3935 }
// 3936 #endif // ZCL_STANDALONE
// 3937 
// 3938 #if !defined ( ZCL_STANDALONE )
// 3939 /*********************************************************************
// 3940  * @fn          zclGeneral_ScenesWriteNV
// 3941  *
// 3942  * @brief       Save the Scene Table in NV
// 3943  *
// 3944  * @param       none
// 3945  *
// 3946  * @return      none
// 3947  */
// 3948 static void zclGeneral_ScenesWriteNV( void )
// 3949 {
// 3950   nvGenScenesHdr_t hdr;
// 3951   zclGenSceneItem_t *pLoop;
// 3952   zclGenSceneNVItem_t item;
// 3953 
// 3954   hdr.numRecs = 0;
// 3955 
// 3956   // Look for end of list
// 3957   pLoop = zclGenSceneTable;
// 3958   while ( pLoop )
// 3959   {
// 3960     // Build the record
// 3961     item.endpoint = pLoop->endpoint;
// 3962     zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
// 3963 
// 3964     // Save the record to NV
// 3965     zcl_nv_write( ZCD_NV_SCENE_TABLE,
// 3966             (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
// 3967                     sizeof ( zclGenSceneNVItem_t ), &item );
// 3968 
// 3969     hdr.numRecs++;
// 3970 
// 3971     pLoop = pLoop->next;
// 3972   }
// 3973 
// 3974   // Save off the header
// 3975   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 3976 }
// 3977 #endif // ZCL_STANDALONE
// 3978 
// 3979 #if !defined ( ZCL_STANDALONE )
// 3980 /*********************************************************************
// 3981  * @fn          zclGeneral_ScenesRestoreFromNV
// 3982  *
// 3983  * @brief       Restore the Scene table from NV
// 3984  *
// 3985  * @param       none
// 3986  *
// 3987  * @return      Number of entries restored
// 3988  */
// 3989 static uint16 zclGeneral_ScenesRestoreFromNV( void )
// 3990 {
// 3991   uint16 x;
// 3992   nvGenScenesHdr_t hdr;
// 3993 
// 3994   zclGenSceneNVItem_t item;
// 3995   uint16 numAdded = 0;
// 3996 
// 3997   if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
// 3998   {
// 3999     // Read in the device list
// 4000     for ( x = 0; x < hdr.numRecs; x++ )
// 4001     {
// 4002       if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
// 4003                 (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
// 4004                                   sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
// 4005       {
// 4006         // Add the scene
// 4007         if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
// 4008         {
// 4009           numAdded++;
// 4010         }
// 4011       }
// 4012     }
// 4013   }
// 4014 
// 4015   return ( numAdded );
// 4016 }
// 4017 #endif // ZCL_STANDALONE
// 4018 
// 4019 #if !defined ( ZCL_STANDALONE )
// 4020 /*********************************************************************
// 4021  * @fn          zclGeneral_ScenesInit
// 4022  *
// 4023  * @brief       Initialize the scenes table
// 4024  *
// 4025  * @param       none
// 4026  *
// 4027  * @return      none
// 4028  */
// 4029 void zclGeneral_ScenesInit( void )
// 4030 {
// 4031   // Initialize NV items
// 4032   zclGeneral_ScenesInitNV();
// 4033 
// 4034   // Restore the Scene table
// 4035   zclGeneral_ScenesRestoreFromNV();
// 4036 }
// 4037 #endif // ZCL_STANDALONE
// 4038 
// 4039 #if !defined ( ZCL_STANDALONE )
// 4040 /*********************************************************************
// 4041  * @fn          zclGeneral_ScenesSave
// 4042  *
// 4043  * @brief       Save the scenes table
// 4044  *
// 4045  * @param       none
// 4046  *
// 4047  * @return      none
// 4048  */
// 4049 void zclGeneral_ScenesSave( void )
// 4050 {
// 4051   // Update NV
// 4052   zclGeneral_ScenesWriteNV();
// 4053 }
// 4054 #endif // ZCL_STANDALONE
// 4055 
// 4056 #endif // ZCL_SCENES
// 4057 
// 4058 /***************************************************************************
// 4059 ****************************************************************************/
// 
// 4 008 bytes in segment BANKED_CODE
//    96 bytes in segment BANK_RELAYS
//     3 bytes in segment XDATA_Z
// 
//    96 bytes of CODE     memory
// 4 008 bytes of HUGECODE memory
//     3 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
