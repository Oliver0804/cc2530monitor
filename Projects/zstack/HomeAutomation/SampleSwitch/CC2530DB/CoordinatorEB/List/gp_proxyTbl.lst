###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               08/Feb/2022  22:10:10
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\GP\gp_proxyTbl.c
#    Command line       =  
#        -f C:\usertemp\AppData\Local\Temp\EW742E.tmp ("I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\GP\gp_proxyTbl.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D
#        ZCL_REPORT -D HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D
#        HAL_UART=TRUE -D INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D
#        xHAL_LCD_OLED12864 -D HAL_ADC=TRUE -D HAL_UART=TRUE -D
#        INT_HEAP_LEN=2048 -lC "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\gp_proxyTbl.lst
#    Object file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\gp_proxyTbl.r51
#
###############################################################################

I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\GP\gp_proxyTbl.c
      1          /**************************************************************************************************
      2            Filename:       gp_proxyTbl.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45             
     46          #include "ZGlobals.h"
     47          #include "ZDObject.h"
     48          #include "nwk_util.h"   
     49          #include "ZComDef.h"
     50          #include "cGP_stub.h"
     51          #include "gp_common.h"
     52          #include "gp_interface.h"
     53          #include "zcl_green_power.h"
     54          #include "OSAL.h"
     55          
     56          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     57             
     58           /*********************************************************************
     59           * MACROS
     60           */ 
     61          
     62           /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69             
     70           /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          ZDO_DeviceAnnce_t aliasConflictAnnce;
   \                     aliasConflictAnnce:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
     74          
     75           /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */
     86          
     87           /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
     91          static uint8 pt_getAlias( uint8* pNew );
     92          static uint8 pt_getSecurity( uint8* pNew );
     93          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew );
     94          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
     95          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
     96          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
     97          
     98          /*********************************************************************
     99           * PUBLIC FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn          pt_ZclReadGetProxyEntry
    104           *
    105           * @brief       Populate the given item data
    106           *
    107           * @param       nvId - NV entry to read
    108           *              pData - Pointer to OTA message payload
    109           *              len - Lenght of the payload
    110           *
    111           * @return
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
   \                     pt_ZclReadGetProxyEntry:
    114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 151
   \   000005   7469         MOV       A,#0x69
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
    115            uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000014   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000017   748D         MOV       A,#-0x73
   \   000019   12....       LCALL     ?XSTACK_DISP102_8
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    116            uint8  currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000021   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   000024   740B         MOV       A,#0xb
   \   000026   12....       LCALL     ?XSTACK_DISP102_8
   \   000029   7441         MOV       A,#0x41
   \   00002B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    117            uint8  gpdEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00002E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
   \   000031   7441         MOV       A,#0x41
   \   000033   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    118            uint8  gpdEntryLen = 0;
   \   000036   85..82       MOV       DPL,?XSP + 0
   \   000039   85..83       MOV       DPH,?XSP + 1
   \   00003C   F0           MOVX      @DPTR,A
    119            uint8  status;
    120            uint16 options;
    121          
    122            status = gp_getProxyTableByIndex( nvId, currEntry );
   \   00003D                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00003D   740B         MOV       A,#0xb
   \   00003F   12....       LCALL     ?XSTACK_DISP102_8
   \   000042   12....       LCALL     ?Subroutine5 & 0xFFFF
    123          
    124            // if FAIL or Empty
    125            if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
   \                     ??CrossCallReturnLabel_5:
   \   000045   6005         JZ        ??pt_ZclReadGetProxyEntry_0
   \   000047   740D         MOV       A,#0xd
   \   000049   69           XRL       A,R1
   \   00004A   7003         JNZ       ??pt_ZclReadGetProxyEntry_1
    126            {
    127              // FAIL
    128              return status;
   \                     ??pt_ZclReadGetProxyEntry_0:
   \   00004C   02....       LJMP      ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
    129            }
    130          
    131            osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \                     ??pt_ZclReadGetProxyEntry_1:
   \   00004F   740B         MOV       A,#0xb
   \   000051   12....       LCALL     ?XSTACK_DISP100_8
   \   000054   88..         MOV       ?V0,R0
   \   000056   89..         MOV       ?V1,R1
   \   000058   75..00       MOV       ?V2,#0x0
   \   00005B                ; Setup parameters for call to function osal_memcpy
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000060   7C02         MOV       R4,#0x2
   \   000062   7D00         MOV       R5,#0x0
   \   000064   7403         MOV       A,#0x3
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   744F         MOV       A,#0x4f
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000073   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
    132            osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007E   7C02         MOV       R4,#0x2
   \   000080   7D00         MOV       R5,#0x0
   \   000082   7409         MOV       A,#0x9
   \   000084   12....       LCALL     ?XSTACK_DISP101_8
   \   000087   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
    133            gpdEntryLen += sizeof ( uint16 );
   \   00008D   85..82       MOV       DPL,?XSP + 0
   \   000090   85..83       MOV       DPH,?XSP + 1
   \   000093   E0           MOVX      A,@DPTR
   \   000094   2402         ADD       A,#0x2
   \   000096   F0           MOVX      @DPTR,A
    134            
    135            // Options bitfield
    136            // If Application Id bitfield is 0b000
    137            if( GP_IS_APPLICATION_ID_GPD( options ) )
   \   000097   7406         MOV       A,#0x6
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   5407         ANL       A,#0x7
   \   00009F   F8           MOV       R0,A
   \   0000A0   7018         JNZ       ??pt_ZclReadGetProxyEntry_3
    138            {        
    139              // Populate GPD ID
    140              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0000A2                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000A2   A8..         MOV       R0,?XSP + 0
   \   0000A4   A9..         MOV       R1,?XSP + 1
   \   0000A6   88..         MOV       ?V0,R0
   \   0000A8   89..         MOV       ?V1,R1
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   744E         MOV       A,#0x4e
   \   0000B1   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B4   7904         MOV       R1,#0x4
   \   0000B6   7413         MOV       A,#0x13
   \   0000B8   8032         SJMP      ??pt_ZclReadGetProxyEntry_4
    141            }
    142            // If Application Id bitfield is 0b010
    143            else if( GP_IS_APPLICATION_ID_IEEE( options ) )
   \                     ??pt_ZclReadGetProxyEntry_3:
   \   0000BA   7402         MOV       A,#0x2
   \   0000BC   68           XRL       A,R0
   \   0000BD   7036         JNZ       ??pt_ZclReadGetProxyEntry_5
    144            {   
    145              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0000BF                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000BF   A8..         MOV       R0,?XSP + 0
   \   0000C1   A9..         MOV       R1,?XSP + 1
   \   0000C3   88..         MOV       ?V0,R0
   \   0000C5   89..         MOV       ?V1,R1
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CC   744E         MOV       A,#0x4e
   \   0000CE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D1   7908         MOV       R1,#0x8
   \   0000D3   740F         MOV       A,#0xf
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
    146              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0000DE                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E3   744E         MOV       A,#0x4e
   \   0000E5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E8   7901         MOV       R1,#0x1
   \   0000EA   7417         MOV       A,#0x17
   \                     ??pt_ZclReadGetProxyEntry_4:
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
    147            }
   \   0000EF   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000F2   12....       LCALL     ?DEALLOC_XSTACK8
    148            
    149            if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_5:
   \   0000F5   740C         MOV       A,#0xc
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   A2E5         MOV       C,0xE0 /* A   */.5
   \   0000FD   501F         JNC       ??pt_ZclReadGetProxyEntry_6
    150            {
    151              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
   \   0000FF                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000FF   A8..         MOV       R0,?XSP + 0
   \   000101   A9..         MOV       R1,?XSP + 1
   \   000103   88..         MOV       ?V0,R0
   \   000105   89..         MOV       ?V1,R1
   \   000107   78..         MOV       R0,#?V0
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010C   744E         MOV       A,#0x4e
   \   00010E   12....       LCALL     ?XSTACK_DISP102_8
   \   000111   7902         MOV       R1,#0x2
   \   000113   7418         MOV       A,#0x18
   \   000115   12....       LCALL     ?XSTACK_DISP0_8
   \   000118   12....       LCALL     ?Subroutine10 & 0xFFFF
    152            }
   \                     ??CrossCallReturnLabel_38:
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
    153            
    154            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_6:
   \   00011E   740C         MOV       A,#0xc
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E0           MOVX      A,@DPTR
   \   000124   A2E6         MOV       C,0xE0 /* A   */.6
   \   000126   501F         JNC       ??pt_ZclReadGetProxyEntry_7
    155            {
    156              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   000128                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000128   A8..         MOV       R0,?XSP + 0
   \   00012A   A9..         MOV       R1,?XSP + 1
   \   00012C   88..         MOV       ?V0,R0
   \   00012E   89..         MOV       ?V1,R1
   \   000130   78..         MOV       R0,#?V0
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000135   744E         MOV       A,#0x4e
   \   000137   12....       LCALL     ?XSTACK_DISP102_8
   \   00013A   7901         MOV       R1,#0x1
   \   00013C   741A         MOV       A,#0x1a
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   12....       LCALL     ?Subroutine10 & 0xFFFF
    157            }
   \                     ??CrossCallReturnLabel_39:
   \   000144   12....       LCALL     ?DEALLOC_XSTACK8
    158            
    159            if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
   \                     ??pt_ZclReadGetProxyEntry_7:
   \   000147   740C         MOV       A,#0xc
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   A2E6         MOV       C,0xE0 /* A   */.6
   \   00014F   400A         JC        ??pt_ZclReadGetProxyEntry_8
   \   000151   740B         MOV       A,#0xb
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   E0           MOVX      A,@DPTR
   \   000157   A2E5         MOV       C,0xE0 /* A   */.5
   \   000159   501F         JNC       ??pt_ZclReadGetProxyEntry_9
    160            {
    161              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_8:
   \   00015B                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00015B   A8..         MOV       R0,?XSP + 0
   \   00015D   A9..         MOV       R1,?XSP + 1
   \   00015F   88..         MOV       ?V0,R0
   \   000161   89..         MOV       ?V1,R1
   \   000163   78..         MOV       R0,#?V0
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000168   744E         MOV       A,#0x4e
   \   00016A   12....       LCALL     ?XSTACK_DISP102_8
   \   00016D   7904         MOV       R1,#0x4
   \   00016F   741B         MOV       A,#0x1b
   \   000171   12....       LCALL     ?XSTACK_DISP0_8
   \   000174   12....       LCALL     ?Subroutine10 & 0xFFFF
    162            }
   \                     ??CrossCallReturnLabel_40:
   \   000177   12....       LCALL     ?DEALLOC_XSTACK8
    163            
    164            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_9:
   \   00017A   740C         MOV       A,#0xc
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   A2E6         MOV       C,0xE0 /* A   */.6
   \   000182   501F         JNC       ??pt_ZclReadGetProxyEntry_10
    165            {
    166              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
   \   000184                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000184   A8..         MOV       R0,?XSP + 0
   \   000186   A9..         MOV       R1,?XSP + 1
   \   000188   88..         MOV       ?V0,R0
   \   00018A   89..         MOV       ?V1,R1
   \   00018C   78..         MOV       R0,#?V0
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000191   744E         MOV       A,#0x4e
   \   000193   12....       LCALL     ?XSTACK_DISP102_8
   \   000196   7910         MOV       R1,#0x10
   \   000198   741F         MOV       A,#0x1f
   \   00019A   12....       LCALL     ?XSTACK_DISP0_8
   \   00019D   12....       LCALL     ?Subroutine10 & 0xFFFF
    167            }
   \                     ??CrossCallReturnLabel_41:
   \   0001A0   12....       LCALL     ?DEALLOC_XSTACK8
    168            
    169            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??pt_ZclReadGetProxyEntry_10:
   \   0001A3   740B         MOV       A,#0xb
   \   0001A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001AB   4003         JC        $+5
   \   0001AD   02....       LJMP      ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
    170            {
    171              uint8 sinkCount = 0;
   \   0001B0   7401         MOV       A,#0x1
   \   0001B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL     ?Subroutine4 & 0xFFFF
    172              uint8 sinkCountByte = gpdEntryLen;
    173              
    174              gpdEntryLen += sizeof ( sinkCountByte );
    175              
    176              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??CrossCallReturnLabel_3:
   \   0001B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BB   E582         MOV       A,DPL
   \   0001BD   28           ADD       A,R0
   \   0001BE   FE           MOV       R6,A
   \   0001BF   E4           CLR       A
   \   0001C0   3583         ADDC      A,DPH
   \   0001C2   FF           MOV       R7,A
   \   0001C3   748D         MOV       A,#-0x73
   \   0001C5   12....       LCALL     ?XSTACK_DISP100_8
   \   0001C8   88..         MOV       ?V0,R0
   \   0001CA   89..         MOV       ?V1,R1
   \   0001CC   7401         MOV       A,#0x1
   \   0001CE   12....       LCALL     ?XSTACK_DISP100_8
   \   0001D1   7408         MOV       A,#0x8
   \   0001D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D6   E8           MOV       A,R0
   \   0001D7   F0           MOVX      @DPTR,A
   \   0001D8   A3           INC       DPTR
   \   0001D9   E9           MOV       A,R1
   \   0001DA   F0           MOVX      @DPTR,A
   \   0001DB   A3           INC       DPTR
   \   0001DC   E4           CLR       A
   \   0001DD   F0           MOVX      @DPTR,A
   \   0001DE                ; Setup parameters for call to function osal_memcmp
   \   0001DE   742D         MOV       A,#0x2d
   \   0001E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E3   A982         MOV       R1,DPL
   \   0001E5   AA83         MOV       R2,DPH
   \   0001E7   89..         MOV       ?V4,R1
   \   0001E9   8A..         MOV       ?V5,R2
   \   0001EB   75..00       MOV       ?V6,#0x0
   \   0001EE   78..         MOV       R0,#?V4
   \   0001F0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001F3   7C0A         MOV       R4,#0xa
   \   0001F5   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0001F8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FB   E9           MOV       A,R1
   \   0001FC   703D         JNZ       ??pt_ZclReadGetProxyEntry_12
    177              {
    178                sinkCount += 1;
   \   0001FE   7401         MOV       A,#0x1
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   E0           MOVX      A,@DPTR
   \   000204   04           INC       A
   \   000205   F0           MOVX      @DPTR,A
    179                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   000206                ; Setup parameters for call to function osal_memcpy
   \   000206   7408         MOV       A,#0x8
   \   000208   12....       LCALL     ?XSTACK_DISP0_8
   \   00020B   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   00020E   7C01         MOV       R4,#0x1
   \   000210   7D00         MOV       R5,#0x0
   \   000212   EE           MOV       A,R6
   \   000213   FA           MOV       R2,A
   \   000214   EF           MOV       A,R7
   \   000215   FB           MOV       R3,A
   \   000216   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000219   12....       LCALL     ?DEALLOC_XSTACK8
    180                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   00021C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00021C   A8..         MOV       R0,?XSP + 0
   \   00021E   A9..         MOV       R1,?XSP + 1
   \   000220   88..         MOV       ?V4,R0
   \   000222   89..         MOV       ?V5,R1
   \   000224   78..         MOV       R0,#?V4
   \   000226   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000229   744E         MOV       A,#0x4e
   \   00022B   12....       LCALL     ?XSTACK_DISP102_8
   \   00022E   790A         MOV       R1,#0xa
   \   000230   742F         MOV       A,#0x2f
   \   000232   12....       LCALL     ?XSTACK_DISP0_8
   \   000235   12....       LCALL     ?Subroutine10 & 0xFFFF
    181              }
   \                     ??CrossCallReturnLabel_42:
   \   000238   12....       LCALL     ?DEALLOC_XSTACK8
    182              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_ZclReadGetProxyEntry_12:
   \   00023B                ; Setup parameters for call to function osal_memcmp
   \   00023B   7437         MOV       A,#0x37
   \   00023D   12....       LCALL     ?XSTACK_DISP0_8
   \   000240   A982         MOV       R1,DPL
   \   000242   AA83         MOV       R2,DPH
   \   000244   89..         MOV       ?V4,R1
   \   000246   8A..         MOV       ?V5,R2
   \   000248   78..         MOV       R0,#?V4
   \   00024A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00024D   7C0A         MOV       R4,#0xa
   \   00024F   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000252   12....       LCALL     ?DEALLOC_XSTACK8
   \   000255   E9           MOV       A,R1
   \   000256   703D         JNZ       ??pt_ZclReadGetProxyEntry_11
    183              {
    184                sinkCount += 1;
   \   000258   7401         MOV       A,#0x1
   \   00025A   12....       LCALL     ?XSTACK_DISP0_8
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   04           INC       A
   \   00025F   F0           MOVX      @DPTR,A
    185                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   000260                ; Setup parameters for call to function osal_memcpy
   \   000260   7408         MOV       A,#0x8
   \   000262   12....       LCALL     ?XSTACK_DISP0_8
   \   000265   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   000268   7C01         MOV       R4,#0x1
   \   00026A   7D00         MOV       R5,#0x0
   \   00026C   EE           MOV       A,R6
   \   00026D   FA           MOV       R2,A
   \   00026E   EF           MOV       A,R7
   \   00026F   FB           MOV       R3,A
   \   000270   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000273   12....       LCALL     ?DEALLOC_XSTACK8
    186                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   000276                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000276   A8..         MOV       R0,?XSP + 0
   \   000278   A9..         MOV       R1,?XSP + 1
   \   00027A   88..         MOV       ?V0,R0
   \   00027C   89..         MOV       ?V1,R1
   \   00027E   78..         MOV       R0,#?V0
   \   000280   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000283   744E         MOV       A,#0x4e
   \   000285   12....       LCALL     ?XSTACK_DISP102_8
   \   000288   790A         MOV       R1,#0xa
   \   00028A   7439         MOV       A,#0x39
   \   00028C   12....       LCALL     ?XSTACK_DISP0_8
   \   00028F   12....       LCALL     ?Subroutine10 & 0xFFFF
    187              }
    188            }
   \                     ??CrossCallReturnLabel_43:
   \   000292   12....       LCALL     ?DEALLOC_XSTACK8
    189               
    190            if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_11:
   \   000295   740C         MOV       A,#0xc
   \   000297   12....       LCALL     ?XSTACK_DISP0_8
   \   00029A   E0           MOVX      A,@DPTR
   \   00029B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00029D   4003         JC        $+5
   \   00029F   02....       LJMP      ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
    191            {
    192              uint8 groupCount = 0;
   \   0002A2   7401         MOV       A,#0x1
   \   0002A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A7   12....       LCALL     ?Subroutine4 & 0xFFFF
    193              uint8 groupCountByte = gpdEntryLen;
    194              
    195              gpdEntryLen++;
    196              
    197              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \                     ??CrossCallReturnLabel_4:
   \   0002AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AD   E582         MOV       A,DPL
   \   0002AF   28           ADD       A,R0
   \   0002B0   FE           MOV       R6,A
   \   0002B1   E4           CLR       A
   \   0002B2   3583         ADDC      A,DPH
   \   0002B4   FF           MOV       R7,A
   \   0002B5   7401         MOV       A,#0x1
   \   0002B7   12....       LCALL     ?XSTACK_DISP100_8
   \   0002BA   88..         MOV       ?V0,R0
   \   0002BC   89..         MOV       ?V1,R1
   \   0002BE   7441         MOV       A,#0x41
   \   0002C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C3   E0           MOVX      A,@DPTR
   \   0002C4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002C6   503A         JNC       ??pt_ZclReadGetProxyEntry_14
    198              {
    199                groupCount += 1;
   \   0002C8   7401         MOV       A,#0x1
   \   0002CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CD   7401         MOV       A,#0x1
   \   0002CF   F0           MOVX      @DPTR,A
    200                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
   \   0002D0                ; Setup parameters for call to function osal_memcpy
   \   0002D0   78..         MOV       R0,#?V0
   \   0002D2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002D5   7C01         MOV       R4,#0x1
   \   0002D7   7D00         MOV       R5,#0x0
   \   0002D9   EE           MOV       A,R6
   \   0002DA   FA           MOV       R2,A
   \   0002DB   EF           MOV       A,R7
   \   0002DC   FB           MOV       R3,A
   \   0002DD   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0002E0   12....       LCALL     ?DEALLOC_XSTACK8
    201                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0002E3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002E3   A8..         MOV       R0,?XSP + 0
   \   0002E5   A9..         MOV       R1,?XSP + 1
   \   0002E7   88..         MOV       ?V4,R0
   \   0002E9   89..         MOV       ?V5,R1
   \   0002EB   78..         MOV       R0,#?V4
   \   0002ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F0   744E         MOV       A,#0x4e
   \   0002F2   12....       LCALL     ?XSTACK_DISP102_8
   \   0002F5   7904         MOV       R1,#0x4
   \   0002F7   7444         MOV       A,#0x44
   \   0002F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FC   12....       LCALL     ?Subroutine10 & 0xFFFF
    202              }
   \                     ??CrossCallReturnLabel_44:
   \   0002FF   12....       LCALL     ?DEALLOC_XSTACK8
    203              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??pt_ZclReadGetProxyEntry_14:
   \   000302   7441         MOV       A,#0x41
   \   000304   12....       LCALL     ?XSTACK_DISP0_8
   \   000307   E0           MOVX      A,@DPTR
   \   000308   A2E1         MOV       C,0xE0 /* A   */.1
   \   00030A   503A         JNC       ??pt_ZclReadGetProxyEntry_13
    204              {
    205                groupCount += 1;
   \   00030C   7401         MOV       A,#0x1
   \   00030E   12....       LCALL     ?XSTACK_DISP0_8
   \   000311   E0           MOVX      A,@DPTR
   \   000312   04           INC       A
   \   000313   F0           MOVX      @DPTR,A
    206                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
   \   000314                ; Setup parameters for call to function osal_memcpy
   \   000314   78..         MOV       R0,#?V0
   \   000316   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000319   7C01         MOV       R4,#0x1
   \   00031B   7D00         MOV       R5,#0x0
   \   00031D   EE           MOV       A,R6
   \   00031E   FA           MOV       R2,A
   \   00031F   EF           MOV       A,R7
   \   000320   FB           MOV       R3,A
   \   000321   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000324   12....       LCALL     ?DEALLOC_XSTACK8
    207                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000327                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000327   A8..         MOV       R0,?XSP + 0
   \   000329   A9..         MOV       R1,?XSP + 1
   \   00032B   88..         MOV       ?V0,R0
   \   00032D   89..         MOV       ?V1,R1
   \   00032F   78..         MOV       R0,#?V0
   \   000331   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000334   744E         MOV       A,#0x4e
   \   000336   12....       LCALL     ?XSTACK_DISP102_8
   \   000339   7904         MOV       R1,#0x4
   \   00033B   7448         MOV       A,#0x48
   \   00033D   12....       LCALL     ?XSTACK_DISP0_8
   \   000340   12....       LCALL     ?Subroutine10 & 0xFFFF
    208              }
    209            }
   \                     ??CrossCallReturnLabel_45:
   \   000343   12....       LCALL     ?DEALLOC_XSTACK8
    210            
    211            gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_13:
   \   000346                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000346   A8..         MOV       R0,?XSP + 0
   \   000348   A9..         MOV       R1,?XSP + 1
   \   00034A   88..         MOV       ?V0,R0
   \   00034C   89..         MOV       ?V1,R1
   \   00034E   78..         MOV       R0,#?V0
   \   000350   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000353   744E         MOV       A,#0x4e
   \   000355   12....       LCALL     ?XSTACK_DISP102_8
   \   000358   7901         MOV       R1,#0x1
   \   00035A   744C         MOV       A,#0x4c
   \   00035C   12....       LCALL     ?XSTACK_DISP0_8
   \   00035F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000362   12....       LCALL     ?DEALLOC_XSTACK8
    212            
    213            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
   \   000365   740B         MOV       A,#0xb
   \   000367   12....       LCALL     ?XSTACK_DISP0_8
   \   00036A   E0           MOVX      A,@DPTR
   \   00036B   5418         ANL       A,#0x18
   \   00036D   6418         XRL       A,#0x18
   \   00036F   6017         JZ        ??pt_ZclReadGetProxyEntry_15
    214            {
    215              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   000371                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000371   78..         MOV       R0,#?V0
   \   000373   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000376   744E         MOV       A,#0x4e
   \   000378   12....       LCALL     ?XSTACK_DISP102_8
   \   00037B   7901         MOV       R1,#0x1
   \   00037D   744D         MOV       A,#0x4d
   \   00037F   12....       LCALL     ?XSTACK_DISP0_8
   \   000382   12....       LCALL     ?Subroutine10 & 0xFFFF
    216            }
   \                     ??CrossCallReturnLabel_47:
   \   000385   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??pt_ZclReadGetProxyEntry_15:
   \   000388   74A7         MOV       A,#-0x59
   \   00038A   12....       LCALL     ?XSTACK_DISP0_8
   \   00038D   E0           MOVX      A,@DPTR
   \   00038E   FE           MOV       R6,A
   \   00038F   A3           INC       DPTR
   \   000390   E0           MOVX      A,@DPTR
   \   000391   FF           MOV       R7,A
    217            
    218            if ( pData != NULL )
   \   000392   8E82         MOV       DPL,R6
   \   000394   F583         MOV       DPH,A
   \   000396   E0           MOVX      A,@DPTR
   \   000397   FA           MOV       R2,A
   \   000398   7402         MOV       A,#0x2
   \   00039A   12....       LCALL     ?XSTACK_DISP0_8
   \   00039D   E0           MOVX      A,@DPTR
   \   00039E   F8           MOV       R0,A
   \   00039F   A3           INC       DPTR
   \   0003A0   E0           MOVX      A,@DPTR
   \   0003A1   F9           MOV       R1,A
   \   0003A2   E8           MOV       A,R0
   \   0003A3   49           ORL       A,R1
   \   0003A4   7003         JNZ       $+5
   \   0003A6   02....       LJMP      ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
    219            {
    220              uint8 sinkEntryLen;
    221              uint16 totalLen;
    222              
    223              sinkEntryLen = gpdEntryLen;
   \   0003A9   85..82       MOV       DPL,?XSP + 0
   \   0003AC   85..83       MOV       DPH,?XSP + 1
   \   0003AF   E0           MOVX      A,@DPTR
   \   0003B0   F5..         MOV       ?V3,A
    224              if ( *len != 0 )
   \   0003B2   EA           MOV       A,R2
   \   0003B3   6004         JZ        ??pt_ZclReadGetProxyEntry_17
    225              {
    226              gpdEntryLen -= sizeof ( uint16 );
   \   0003B5   E0           MOVX      A,@DPTR
   \   0003B6   24FE         ADD       A,#-0x2
   \   0003B8   F0           MOVX      @DPTR,A
    227              }
    228              totalLen = gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_17:
   \   0003B9   E0           MOVX      A,@DPTR
   \   0003BA   F8           MOV       R0,A
   \   0003BB   7404         MOV       A,#0x4
   \   0003BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C0   E8           MOV       A,R0
   \   0003C1   F0           MOVX      @DPTR,A
   \   0003C2   A3           INC       DPTR
   \   0003C3   E4           CLR       A
   \   0003C4   F0           MOVX      @DPTR,A
    229              totalLen += *len;
   \   0003C5   8E82         MOV       DPL,R6
   \   0003C7   8F83         MOV       DPH,R7
   \   0003C9   E0           MOVX      A,@DPTR
   \   0003CA   F8           MOV       R0,A
   \   0003CB   7404         MOV       A,#0x4
   \   0003CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D0   E0           MOVX      A,@DPTR
   \   0003D1   28           ADD       A,R0
   \   0003D2   F0           MOVX      @DPTR,A
   \   0003D3   A3           INC       DPTR
   \   0003D4   E0           MOVX      A,@DPTR
   \   0003D5   3400         ADDC      A,#0x0
   \   0003D7   F0           MOVX      @DPTR,A
    230              osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
   \   0003D8                ; Setup parameters for call to function osal_memcpy
   \   0003D8   7404         MOV       A,#0x4
   \   0003DA   12....       LCALL     ?XSTACK_DISP100_8
   \   0003DD   88..         MOV       ?V0,R0
   \   0003DF   89..         MOV       ?V1,R1
   \   0003E1   78..         MOV       R0,#?V0
   \   0003E3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003E6   7C02         MOV       R4,#0x2
   \   0003E8   7D00         MOV       R5,#0x0
   \   0003EA   7405         MOV       A,#0x5
   \   0003EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0003EF   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0003F2   12....       LCALL     ?DEALLOC_XSTACK8
    231              if ( *len == 0 )
   \   0003F5   8E82         MOV       DPL,R6
   \   0003F7   8F83         MOV       DPH,R7
   \   0003F9   E0           MOVX      A,@DPTR
   \   0003FA   7018         JNZ       ??pt_ZclReadGetProxyEntry_18
    232              {
    233                pData += sizeof ( uint16 );
   \   0003FC   7402         MOV       A,#0x2
   \   0003FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000401   E0           MOVX      A,@DPTR
   \   000402   2402         ADD       A,#0x2
   \   000404   F8           MOV       R0,A
   \   000405   A3           INC       DPTR
   \   000406   E0           MOVX      A,@DPTR
   \   000407   3400         ADDC      A,#0x0
   \   000409   F9           MOV       R1,A
   \   00040A   7402         MOV       A,#0x2
   \   00040C   12....       LCALL     ?XSTACK_DISP0_8
   \   00040F   E8           MOV       A,R0
   \   000410   F0           MOVX      @DPTR,A
   \   000411   A3           INC       DPTR
   \   000412   E9           MOV       A,R1
   \   000413   F0           MOVX      @DPTR,A
    234              }
    235              gpdEntryLen += sizeof ( uint16 );
   \                     ??pt_ZclReadGetProxyEntry_18:
   \   000414   85..82       MOV       DPL,?XSP + 0
   \   000417   85..83       MOV       DPH,?XSP + 1
   \   00041A   E0           MOVX      A,@DPTR
   \   00041B   2402         ADD       A,#0x2
   \   00041D   F0           MOVX      @DPTR,A
    236              
    237              pData += *len;
    238              osal_memcpy( pData, gpdEntry, sinkEntryLen );
   \   00041E                ; Setup parameters for call to function osal_memcpy
   \   00041E   744C         MOV       A,#0x4c
   \   000420   12....       LCALL     ?XSTACK_DISP100_8
   \   000423   88..         MOV       ?V0,R0
   \   000425   89..         MOV       ?V1,R1
   \   000427   78..         MOV       R0,#?V0
   \   000429   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00042C   AC..         MOV       R4,?V3
   \   00042E   7D00         MOV       R5,#0x0
   \   000430   8E82         MOV       DPL,R6
   \   000432   8F83         MOV       DPH,R7
   \   000434   E0           MOVX      A,@DPTR
   \   000435   F8           MOV       R0,A
   \   000436   7405         MOV       A,#0x5
   \   000438   12....       LCALL     ?XSTACK_DISP0_8
   \   00043B   E0           MOVX      A,@DPTR
   \   00043C   28           ADD       A,R0
   \   00043D   FA           MOV       R2,A
   \   00043E   A3           INC       DPTR
   \   00043F   E0           MOVX      A,@DPTR
   \   000440   3400         ADDC      A,#0x0
   \   000442   FB           MOV       R3,A
   \   000443   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000446   12....       LCALL     ?DEALLOC_XSTACK8
    239              if ( *len != 0 )
   \   000449   8E82         MOV       DPL,R6
   \   00044B   8F83         MOV       DPH,R7
   \   00044D   E0           MOVX      A,@DPTR
   \   00044E   6019         JZ        ??pt_ZclReadGetProxyEntry_19
    240              {
    241                *len = totalLen;
   \   000450   7404         MOV       A,#0x4
   \   000452   12....       LCALL     ?XSTACK_DISP0_8
   \   000455   E0           MOVX      A,@DPTR
   \   000456   8E82         MOV       DPL,R6
   \   000458   8F83         MOV       DPH,R7
   \   00045A   801B         SJMP      ??pt_ZclReadGetProxyEntry_20
    242                return status;
    243              }
    244              *len += gpdEntryLen;
    245              return status;
    246            }
    247            else
    248            {
    249              if ( *len == 0 )
   \                     ??pt_ZclReadGetProxyEntry_16:
   \   00045C   EA           MOV       A,R2
   \   00045D   700A         JNZ       ??pt_ZclReadGetProxyEntry_19
    250              {
    251                gpdEntryLen += sizeof ( uint16 );
   \   00045F   85..82       MOV       DPL,?XSP + 0
   \   000462   85..83       MOV       DPH,?XSP + 1
   \   000465   E0           MOVX      A,@DPTR
   \   000466   2402         ADD       A,#0x2
   \   000468   F0           MOVX      @DPTR,A
    252              }
    253              *len += gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_19:
   \   000469   85..82       MOV       DPL,?XSP + 0
   \   00046C   85..83       MOV       DPH,?XSP + 1
   \   00046F   E0           MOVX      A,@DPTR
   \   000470   F8           MOV       R0,A
   \   000471   8E82         MOV       DPL,R6
   \   000473   8F83         MOV       DPH,R7
   \   000475   E0           MOVX      A,@DPTR
   \   000476   28           ADD       A,R0
   \                     ??pt_ZclReadGetProxyEntry_20:
   \   000477   F0           MOVX      @DPTR,A
    254              return status;
   \   000478   A9..         MOV       R1,?V7
   \                     ??pt_ZclReadGetProxyEntry_2:
   \   00047A   7497         MOV       A,#-0x69
    255            }
   \   00047C   02....       LJMP      ?Subroutine0 & 0xFFFF
    256          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   A9..         MOV       R1,?V0
   \   000004   AA..         MOV       R2,?V1
   \   000006   AB..         MOV       R3,?V2
   \   000008                REQUIRE ??Subroutine15_0
   \   000008                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine16_0
   \   000004                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E4           CLR       A
   \   000001   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000004   F8           MOV       R0,A
   \   000005   04           INC       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   744C         MOV       A,#0x4c
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine17_0
   \   000003                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FB           MOV       R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000003   E9           MOV       A,R1
   \   000004   F5..         MOV       ?V7,A
   \   000006   740A         MOV       A,#0xa
   \   000008   69           XRL       A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000008   7403         MOV       A,#0x3
   \   00000A   22           RET
    257          
    258          /*********************************************************************
    259           * @fn      zclGpp_ReadWriteAttrCB
    260           *
    261           * @brief   Handle Diagnostics attributes.
    262           *
    263           * @param   clusterId - cluster that attribute belongs to
    264           * @param   attrId - attribute to be read or written
    265           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    266           * @param   pValue - pointer to attribute value, OTA endian
    267           * @param   pLen - length of attribute value read, native endian
    268           *
    269           * @return  status
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclGpp_ReadWriteAttrCB:
    272                                                   uint8 *pValue, uint16 *pLen )
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    274            ZStatus_t status = ZSuccess;
   \   000007   7900         MOV       R1,#0x0
    275            uint16 proxyTableIndex;
    276            uint8 i;
    277          
    278            switch ( oper )
   \   000009   E5..         MOV       A,?V1
   \   00000B   6008         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   00000D   14           DEC       A
   \   00000E   6005         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   000010   14           DEC       A
   \   000011   604A         JZ        ??zclGpp_ReadWriteAttrCB_1
   \   000013   804A         SJMP      ??zclGpp_ReadWriteAttrCB_2
    279            {
    280              case ZCL_OPER_LEN:
    281              case ZCL_OPER_READ:
    282                if ( attrId == ATTRID_GP_PROXY_TABLE )
   \                     ??zclGpp_ReadWriteAttrCB_0:
   \   000015   7411         MOV       A,#0x11
   \   000017   6C           XRL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   7044         JNZ       ??zclGpp_ReadWriteAttrCB_2
    283                { 
    284                  for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001B   75..00       MOV       ?V0,#0x0
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   \   000028   740E         MOV       A,#0xe
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
    285                  {
    286                    proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
    287                    
    288                    status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
   \                     ??zclGpp_ReadWriteAttrCB_3:
   \   000034                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2410         ADD       A,#0x10
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   3403         ADDC      A,#0x3
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   E9           MOV       A,R1
   \   00004F   F9           MOV       R1,A
    289                    if ( status != ZSuccess )
   \   000050   700B         JNZ       ??zclGpp_ReadWriteAttrCB_1
    290                    {
    291                      status = ZFailure;
    292                      break;
    293                    }
    294                  }
   \   000052   05..         INC       ?V0
   \   000054   E5..         MOV       A,?V0
   \   000056   C3           CLR       C
   \   000057   9406         SUBB      A,#0x6
   \   000059   5004         JNC       ??zclGpp_ReadWriteAttrCB_2
   \   00005B   80D7         SJMP      ??zclGpp_ReadWriteAttrCB_3
    295                  
    296                }
    297                break;
    298          
    299              case ZCL_OPER_WRITE:
    300                status = ZFailure;
   \                     ??zclGpp_ReadWriteAttrCB_1:
   \   00005D   7901         MOV       R1,#0x1
    301                break;
    302            }
    303          
    304            return ( status );
   \                     ??zclGpp_ReadWriteAttrCB_2:
   \   00005F                REQUIRE ?Subroutine1
   \   00005F                ; // Fall through to label ?Subroutine1
    305          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    306          
    307           /*********************************************************************
    308           * @fn          gp_pairingSetProxyTblOptions
    309           *
    310           * @brief       Function to fill the options pramenter in a Proxy Table entry
    311           *              from a GP Pairing Command
    312           *
    313           * @param       pBitField - pointer to the bit field.
    314           *              bit       - position of the bit to set in the given bitfield.
    315           *
    316           * @return      
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
   \                     gp_pairingSetProxyTblOptions:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    320            uint8  proxyOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV       R4,?XSP + 0
   \   000017   AD..         MOV       R5,?XSP + 1
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    321            uint16 opt = 0; 
    322            
    323            PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
    324            PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
    325            PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
   \   00001E   EA           MOV       A,R2
   \   00001F   5407         ANL       A,#0x7
   \   000021   F8           MOV       R0,A
   \   000022   85..82       MOV       DPL,?XSP + 0
   \   000025   85..83       MOV       DPH,?XSP + 1
   \   000028   E0           MOVX      A,@DPTR
   \   000029   54F8         ANL       A,#0xf8
   \   00002B   48           ORL       A,R0
   \   00002C   4418         ORL       A,#0x18
   \   00002E   F0           MOVX      @DPTR,A
    326            PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
   \   00002F   54DF         ANL       A,#0xdf
   \   000031   FA           MOV       R2,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FB           MOV       R3,A
   \   000035   85....       MOV       ?V0,?V4
   \   000038   85....       MOV       ?V1,?V5
   \   00003B   7403         MOV       A,#0x3
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?US_SHR
   \   000042   E5..         MOV       A,?V0
   \   000044   5420         ANL       A,#0x20
   \   000046   F8           MOV       R0,A
   \   000047   EA           MOV       A,R2
   \   000048   48           ORL       A,R0
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   EB           MOV       A,R3
   \   000052   F0           MOVX      @DPTR,A
    327            
    328            if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
   \   000053   E5..         MOV       A,?V4
   \   000055   C4           SWAP      A
   \   000056   13           RRC       A
   \   000057   5407         ANL       A,#0x7
   \   000059   5403         ANL       A,#0x3
   \   00005B   F9           MOV       R1,A
   \   00005C   7403         MOV       A,#0x3
   \   00005E   69           XRL       A,R1
   \   00005F   85..82       MOV       DPL,?XSP + 0
   \   000062   85..83       MOV       DPH,?XSP + 1
   \   000065   7017         JNZ       ??gp_pairingSetProxyTblOptions_0
    329            {
    330              PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
   \   000067   E0           MOVX      A,@DPTR
   \   000068   D2E6         SETB      0xE0 /* A   */.6
   \   00006A   F0           MOVX      @DPTR,A
    331            }
    332            else
    333            {
    334              PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
    335            }
    336            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
    337            {
    338              PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
    339            }
    340            else
    341            {
    342              PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_1:
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   C2E7         CLR       0xE0 /* A   */.7
   \   00006E   F0           MOVX      @DPTR,A
    343            }
    344            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
   \   00006F   7402         MOV       A,#0x2
   \   000071   69           XRL       A,R1
   \   000072   7017         JNZ       ??gp_pairingSetProxyTblOptions_2
    345            {
    346              PROXY_TBL_SET_CGROUP( &proxyOpt[1] );
   \   000074   7401         MOV       A,#0x1
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   D2E0         SETB      0xE0 /* A   */.0
   \   00007C   8015         SJMP      ??gp_pairingSetProxyTblOptions_3
    347            }
   \                     ??gp_pairingSetProxyTblOptions_0:
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   C2E6         CLR       0xE0 /* A   */.6
   \   000081   F0           MOVX      @DPTR,A
   \   000082   7401         MOV       A,#0x1
   \   000084   69           XRL       A,R1
   \   000085   70E4         JNZ       ??gp_pairingSetProxyTblOptions_1
   \   000087   E0           MOVX      A,@DPTR
   \   000088   D2E7         SETB      0xE0 /* A   */.7
   \   00008A   F0           MOVX      @DPTR,A
    348            else
    349            {
    350              PROXY_TBL_CLR_CGROUP( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_2:
   \   00008B   7401         MOV       A,#0x1
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C2E0         CLR       0xE0 /* A   */.0
   \                     ??gp_pairingSetProxyTblOptions_3:
   \   000093   F0           MOVX      @DPTR,A
    351            }
    352            
    353            // FALSE by default
    354            PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
    355            
    356            // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
    357            // of this proxy. The default value is FALSE
    358            PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
   \   000094   E0           MOVX      A,@DPTR
   \   000095   54F9         ANL       A,#0xf9
   \   000097   F0           MOVX      @DPTR,A
    359            // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
    360            if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
   \   000098   85....       MOV       ?V0,?V4
   \   00009B   E5..         MOV       A,?V0
   \   00009D   5480         ANL       A,#0x80
   \   00009F   6005         JZ        ??gp_pairingSetProxyTblOptions_4
    361            {
    362              PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   D2E3         SETB      0xE0 /* A   */.3
   \   0000A4   8003         SJMP      ??gp_pairingSetProxyTblOptions_5
    363            }
    364            else
    365            {
    366              PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_4:
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   C2E3         CLR       0xE0 /* A   */.3
   \                     ??gp_pairingSetProxyTblOptions_5:
   \   0000A9   F0           MOVX      @DPTR,A
    367            }
    368            
    369            if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
   \   0000AA   E9           MOV       A,R1
   \   0000AB   7005         JNZ       ??gp_pairingSetProxyTblOptions_6
    370            {
    371              PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   D2E4         SETB      0xE0 /* A   */.4
   \   0000B0   8003         SJMP      ??gp_pairingSetProxyTblOptions_7
    372            }
    373            else
    374            {
    375              PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_6:
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   C2E4         CLR       0xE0 /* A   */.4
   \                     ??gp_pairingSetProxyTblOptions_7:
   \   0000B5   F0           MOVX      @DPTR,A
    376            }
    377            if ( (GP_ALIAS ( pairingOpt )) && (!GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt )) )
   \   0000B6   85....       MOV       ?V1,?V5
   \   0000B9   85....       MOV       ?V2,?V6
   \   0000BC   85....       MOV       ?V3,?V7
   \   0000BF   90....       MOV       DPTR,#__Constant_10000
   \   0000C2   78..         MOV       R0,#?V0
   \   0000C4   12....       LCALL     ?L_AND_X
   \   0000C7   E5..         MOV       A,?V0
   \   0000C9   45..         ORL       A,?V1
   \   0000CB   45..         ORL       A,?V2
   \   0000CD   45..         ORL       A,?V3
   \   0000CF   600F         JZ        ??gp_pairingSetProxyTblOptions_8
   \   0000D1   7402         MOV       A,#0x2
   \   0000D3   69           XRL       A,R1
   \   0000D4   600A         JZ        ??gp_pairingSetProxyTblOptions_8
    378            {
    379              PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
   \   0000D6   7401         MOV       A,#0x1
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   D2E5         SETB      0xE0 /* A   */.5
   \   0000DE   8008         SJMP      ??gp_pairingSetProxyTblOptions_9
    380            }
    381            else
    382            {
    383              PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
   \                     ??gp_pairingSetProxyTblOptions_8:
   \   0000E0   7401         MOV       A,#0x1
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   C2E5         CLR       0xE0 /* A   */.5
   \                     ??gp_pairingSetProxyTblOptions_9:
   \   0000E8   F0           MOVX      @DPTR,A
    384            }
    385            if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
   \   0000E9   7409         MOV       A,#0x9
   \   0000EB   78..         MOV       R0,#?V4
   \   0000ED   12....       LCALL     ?US_SHR
   \   0000F0   E5..         MOV       A,?V4
   \   0000F2   5403         ANL       A,#0x3
   \   0000F4   C3           CLR       C
   \   0000F5   9402         SUBB      A,#0x2
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   4004         JC        ??gp_pairingSetProxyTblOptions_10
    386            {
    387              PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
   \   0000FA   D2E6         SETB      0xE0 /* A   */.6
   \   0000FC   8002         SJMP      ??gp_pairingSetProxyTblOptions_11
    388            }
    389            else
    390            {
    391              PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_10:
   \   0000FE   C2E6         CLR       0xE0 /* A   */.6
   \                     ??gp_pairingSetProxyTblOptions_11:
   \   000100   F0           MOVX      @DPTR,A
    392            }
    393            PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
    394            PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
   \   000101   E0           MOVX      A,@DPTR
   \   000102   C2E7         CLR       0xE0 /* A   */.7
   \   000104   12....       LCALL     ?Subroutine13 & 0xFFFF
    395            
    396            opt |= ( ( proxyOpt[0] ) & 0x00FF );
    397            opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
    398              
    399            return opt;
   \                     ??CrossCallReturnLabel_21:
   \   000107   FA           MOV       R2,A
   \   000108   7401         MOV       A,#0x1
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   FB           MOV       R3,A
   \   00010F   7402         MOV       A,#0x2
   \   000111   02....       LJMP      ?Subroutine0 & 0xFFFF
    400          }
    401          
    402          /*********************************************************************
    403           * @fn          gp_PairingUpdateProxyTlb
    404           *
    405           * @brief       General function fill the proxy table vector
    406           *
    407           * @param       
    408           *
    409           * @return      
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
   \                     gp_PairingUpdateProxyTlb:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 73
   \   000005   74B7         MOV       A,#-0x49
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    413            uint8  entryVector[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_3`
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    414            uint8  entryLen = 0;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
    415            uint8  addSink;
    416            uint8  newSinkGroup = 0;
    417            uint16 entryOptions = 0;
   \   000022   7403         MOV       A,#0x3
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    418            uint8  securityOpt = 0;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
    419            uint8  searchCounter = 0x0A;
   \   000032   04           INC       A
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   740A         MOV       A,#0xa
   \   000038   F0           MOVX      @DPTR,A
    420            uint16 invalidAlias = 0xFFFF;
   \   000039   7406         MOV       A,#0x6
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   74FF         MOV       A,#-0x1
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
    421            
    422            addSink = GP_ADD_SINK( payload->options );
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?L_MOV_X
   \   00004C   E5..         MOV       A,?V0
   \   00004E   13           RRC       A
   \   00004F   13           RRC       A
   \   000050   13           RRC       A
   \   000051   541F         ANL       A,#0x1f
   \   000053   5401         ANL       A,#0x1
   \   000055   C0E0         PUSH      A
   \   000057   7405         MOV       A,#0x5
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   F0           MOVX      @DPTR,A
    423            
    424            entryOptions = gp_pairingSetProxyTblOptions( payload->options );
   \   00005F                ; Setup parameters for call to function gp_pairingSetProxyTblOptions
   \   00005F   AA..         MOV       R2,?V0
   \   000061   AB..         MOV       R3,?V1
   \   000063   AC..         MOV       R4,?V2
   \   000065   AD..         MOV       R5,?V3
   \   000067   12....       LCALL     `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   EA           MOV       A,R2
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   EB           MOV       A,R3
   \   000073   12....       LCALL     ?Subroutine3 & 0xFFFF
    425            gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_0:
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   740A         MOV       A,#0xa
   \   00007B   12....       LCALL     ?XSTACK_DISP102_8
   \   00007E   7902         MOV       R1,#0x2
   \   000080   7405         MOV       A,#0x5
   \   000082   12....       LCALL     ?XSTACK_DISP101_8
   \   000085   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?L_MOV_X
   \   000094   E5..         MOV       A,?V0
   \   000096   5407         ANL       A,#0x7
   \   000098   F8           MOV       R0,A
   \   000099   7018         JNZ       ??gp_PairingUpdateProxyTlb_0
    426              
    427            // Options bitfield
    428            // If Application Id bitfield is 0b000
    429            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    430            {        
    431              // Populate GPD ID
    432              entryLen += sizeof( uint32 );
   \   00009B   85..82       MOV       DPL,?XSP + 0
   \   00009E   85..83       MOV       DPH,?XSP + 1
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   2404         ADD       A,#0x4
   \   0000A4   12....       LCALL     ?Subroutine3 & 0xFFFF
    433              gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
    434            }
   \                     ??CrossCallReturnLabel_1:
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   740A         MOV       A,#0xa
   \   0000AC   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AF   7904         MOV       R1,#0x4
   \   0000B1   8019         SJMP      ??gp_PairingUpdateProxyTlb_1
    435            // If Application Id bitfield is 0b010
    436            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_PairingUpdateProxyTlb_0:
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   68           XRL       A,R0
   \   0000B6   7020         JNZ       ??gp_PairingUpdateProxyTlb_2
    437            {   
    438              gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0000B8                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000B8   A8..         MOV       R0,?XSP + 0
   \   0000BA   A9..         MOV       R1,?XSP + 1
   \   0000BC   88..         MOV       ?V0,R0
   \   0000BE   89..         MOV       ?V1,R1
   \   0000C0   78..         MOV       R0,#?V0
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   740A         MOV       A,#0xa
   \   0000C7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CA   7908         MOV       R1,#0x8
   \                     ??gp_PairingUpdateProxyTlb_1:
   \   0000CC   EE           MOV       A,R6
   \   0000CD   29           ADD       A,R1
   \   0000CE   FA           MOV       R2,A
   \   0000CF   E4           CLR       A
   \   0000D0   3F           ADDC      A,R7
   \   0000D1   FB           MOV       R3,A
    439            }
   \   0000D2   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
    440            
    441             gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_2:
   \   0000D8                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000D8   A8..         MOV       R0,?XSP + 0
   \   0000DA   A9..         MOV       R1,?XSP + 1
   \   0000DC   88..         MOV       ?V0,R0
   \   0000DE   89..         MOV       ?V1,R1
   \   0000E0   78..         MOV       R0,#?V0
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   740A         MOV       A,#0xa
   \   0000E7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000EA   7901         MOV       R1,#0x1
   \   0000EC   EE           MOV       A,R6
   \   0000ED   2410         ADD       A,#0x10
   \   0000EF   FA           MOV       R2,A
   \   0000F0   E4           CLR       A
   \   0000F1   3F           ADDC      A,R7
   \   0000F2   FB           MOV       R3,A
   \   0000F3   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000F6   12....       LCALL     ?DEALLOC_XSTACK8
    442          
    443            if( !GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) )
   \   0000F9   EE           MOV       A,R6
   \   0000FA   2432         ADD       A,#0x32
   \   0000FC   F5..         MOV       ?V6,A
   \   0000FE   E4           CLR       A
   \   0000FF   3F           ADDC      A,R7
   \   000100   F5..         MOV       ?V7,A
   \   000102   8E82         MOV       DPL,R6
   \   000104   8F83         MOV       DPH,R7
   \   000106   78..         MOV       R0,#?V0
   \   000108   12....       LCALL     ?L_MOV_X
   \   00010B   E5..         MOV       A,?V0
   \   00010D   C4           SWAP      A
   \   00010E   13           RRC       A
   \   00010F   5407         ANL       A,#0x7
   \   000111   5403         ANL       A,#0x3
   \   000113   6402         XRL       A,#0x2
   \   000115   A8..         MOV       R0,?XSP + 0
   \   000117   A9..         MOV       R1,?XSP + 1
   \   000119   88..         MOV       ?V0,R0
   \   00011B   89..         MOV       ?V1,R1
   \   00011D   78..         MOV       R0,#?V0
   \   00011F   6010         JZ        ??gp_PairingUpdateProxyTlb_3
    444            {
    445              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \   000121                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000124   740A         MOV       A,#0xa
   \   000126   12....       LCALL     ?XSTACK_DISP102_8
   \   000129   7902         MOV       R1,#0x2
   \   00012B   AA..         MOV       R2,?V6
   \   00012D   AB..         MOV       R3,?V7
   \   00012F   800F         SJMP      ??gp_PairingUpdateProxyTlb_4
    446            }
    447            else
    448            {
    449              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_3:
   \   000131                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000134   740A         MOV       A,#0xa
   \   000136   12....       LCALL     ?XSTACK_DISP102_8
   \   000139   7902         MOV       R1,#0x2
   \   00013B   7408         MOV       A,#0x8
   \   00013D   12....       LCALL     ?XSTACK_DISP101_8
    450            }
   \                     ??gp_PairingUpdateProxyTlb_4:
   \   000140   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000143   12....       LCALL     ?DEALLOC_XSTACK8
    451          
    452          
    453            //Security options
    454            securityOpt |= GP_GET_SEC_LEVEL( payload->options );
    455            securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
   \   000146   8E82         MOV       DPL,R6
   \   000148   8F83         MOV       DPH,R7
   \   00014A   78..         MOV       R0,#?V0
   \   00014C   12....       LCALL     ?L_MOV_X
   \   00014F   85....       MOV       ?V4,?V0
   \   000152   85....       MOV       ?V5,?V1
   \   000155   740B         MOV       A,#0xb
   \   000157   78..         MOV       R0,#?V4
   \   000159   12....       LCALL     ?US_SHR
   \   00015C   E5..         MOV       A,?V4
   \   00015E   33           RLC       A
   \   00015F   33           RLC       A
   \   000160   54FC         ANL       A,#0xfc
   \   000162   541C         ANL       A,#0x1c
   \   000164   F9           MOV       R1,A
   \   000165   7409         MOV       A,#0x9
   \   000167   78..         MOV       R0,#?V0
   \   000169   12....       LCALL     ?US_SHR
   \   00016C   E5..         MOV       A,?V0
   \   00016E   5403         ANL       A,#0x3
   \   000170   49           ORL       A,R1
   \   000171   F8           MOV       R0,A
   \   000172   7402         MOV       A,#0x2
   \   000174   12....       LCALL     ?XSTACK_DISP0_8
   \   000177   E0           MOVX      A,@DPTR
   \   000178   48           ORL       A,R0
   \   000179   F0           MOVX      @DPTR,A
    456            osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
   \   00017A                ; Setup parameters for call to function osal_memcpy
   \   00017A   7402         MOV       A,#0x2
   \   00017C   12....       LCALL     ?XSTACK_DISP100_8
   \   00017F   88..         MOV       ?V0,R0
   \   000181   89..         MOV       ?V1,R1
   \   000183   75..00       MOV       ?V2,#0x0
   \   000186   78..         MOV       R0,#?V0
   \   000188   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018B   7C01         MOV       R4,#0x1
   \   00018D   7D00         MOV       R5,#0x0
   \   00018F   7403         MOV       A,#0x3
   \   000191   12....       LCALL     ?XSTACK_DISP0_8
   \   000194   E0           MOVX      A,@DPTR
   \   000195   F8           MOV       R0,A
   \   000196   740B         MOV       A,#0xb
   \   000198   12....       LCALL     ?XSTACK_DISP0_8
   \   00019B   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00019E   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0001A1   12....       LCALL     ?DEALLOC_XSTACK8
    457            entryLen += sizeof ( uint8 );
   \   0001A4   85..82       MOV       DPL,?XSP + 0
   \   0001A7   85..83       MOV       DPH,?XSP + 1
   \   0001AA   E0           MOVX      A,@DPTR
   \   0001AB   04           INC       A
   \   0001AC   12....       LCALL     ?Subroutine3 & 0xFFFF
    458          
    459            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_2:
   \   0001AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B2   740A         MOV       A,#0xa
   \   0001B4   12....       LCALL     ?XSTACK_DISP102_8
   \   0001B7   7904         MOV       R1,#0x4
   \   0001B9   EE           MOV       A,R6
   \   0001BA   241E         ADD       A,#0x1e
   \   0001BC   FA           MOV       R2,A
   \   0001BD   E4           CLR       A
   \   0001BE   3F           ADDC      A,R7
   \   0001BF   FB           MOV       R3,A
   \   0001C0   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0001C3   12....       LCALL     ?DEALLOC_XSTACK8
    460            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
   \   0001C6                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001C6   78..         MOV       R0,#?V0
   \   0001C8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CB   740A         MOV       A,#0xa
   \   0001CD   12....       LCALL     ?XSTACK_DISP102_8
   \   0001D0   7910         MOV       R1,#0x10
   \   0001D2   EE           MOV       A,R6
   \   0001D3   2422         ADD       A,#0x22
   \   0001D5   FA           MOV       R2,A
   \   0001D6   E4           CLR       A
   \   0001D7   3F           ADDC      A,R7
   \   0001D8   FB           MOV       R3,A
   \   0001D9   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001DC   12....       LCALL     ?DEALLOC_XSTACK8
    461            
    462            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0001DF   EE           MOV       A,R6
   \   0001E0   2411         ADD       A,#0x11
   \   0001E2   F5..         MOV       ?V0,A
   \   0001E4   E4           CLR       A
   \   0001E5   3F           ADDC      A,R7
   \   0001E6   F5..         MOV       ?V1,A
   \   0001E8                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001E8   A8..         MOV       R0,?XSP + 0
   \   0001EA   A9..         MOV       R1,?XSP + 1
   \   0001EC   88..         MOV       ?V2,R0
   \   0001EE   89..         MOV       ?V3,R1
   \   0001F0   78..         MOV       R0,#?V2
   \   0001F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F5   740A         MOV       A,#0xa
   \   0001F7   12....       LCALL     ?XSTACK_DISP102_8
   \   0001FA   7908         MOV       R1,#0x8
   \   0001FC   AA..         MOV       R2,?V0
   \   0001FE   AB..         MOV       R3,?V1
   \   000200   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000203   12....       LCALL     ?DEALLOC_XSTACK8
    463            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   000206   EE           MOV       A,R6
   \   000207   2419         ADD       A,#0x19
   \   000209   F5..         MOV       ?V2,A
   \   00020B   E4           CLR       A
   \   00020C   3F           ADDC      A,R7
   \   00020D   F5..         MOV       ?V3,A
   \   00020F                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00020F   A8..         MOV       R0,?XSP + 0
   \   000211   A9..         MOV       R1,?XSP + 1
   \   000213   88..         MOV       ?V4,R0
   \   000215   89..         MOV       ?V5,R1
   \   000217   78..         MOV       R0,#?V4
   \   000219   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021C   740A         MOV       A,#0xa
   \   00021E   12....       LCALL     ?XSTACK_DISP102_8
   \   000221   7902         MOV       R1,#0x2
   \   000223   AA..         MOV       R2,?V2
   \   000225   AB..         MOV       R3,?V3
   \   000227   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00022A   12....       LCALL     ?DEALLOC_XSTACK8
    464            // to add the invalid entries
    465            osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \   00022D                ; Setup parameters for call to function osal_memset
   \   00022D   7C08         MOV       R4,#0x8
   \   00022F   7D00         MOV       R5,#0x0
   \   000231   79FF         MOV       R1,#-0x1
   \   000233   AA..         MOV       R2,?V0
   \   000235   AB..         MOV       R3,?V1
   \   000237   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    466            payload->sinkNwkAddr = 0xFFFF;
   \   00023A   85..82       MOV       DPL,?V2
   \   00023D   85..83       MOV       DPH,?V3
   \   000240   74FF         MOV       A,#-0x1
   \   000242   F0           MOVX      @DPTR,A
   \   000243   A3           INC       DPTR
   \   000244   F0           MOVX      @DPTR,A
    467            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   000245                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000245   78..         MOV       R0,#?V4
   \   000247   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00024A   740A         MOV       A,#0xa
   \   00024C   12....       LCALL     ?XSTACK_DISP102_8
   \   00024F   7908         MOV       R1,#0x8
   \   000251   AA..         MOV       R2,?V0
   \   000253   AB..         MOV       R3,?V1
   \   000255   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000258   12....       LCALL     ?DEALLOC_XSTACK8
    468            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   00025B                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00025B   A8..         MOV       R0,?XSP + 0
   \   00025D   A9..         MOV       R1,?XSP + 1
   \   00025F   88..         MOV       ?V0,R0
   \   000261   89..         MOV       ?V1,R1
   \   000263   78..         MOV       R0,#?V0
   \   000265   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000268   740A         MOV       A,#0xa
   \   00026A   12....       LCALL     ?XSTACK_DISP102_8
   \   00026D   7902         MOV       R1,#0x2
   \   00026F   AA..         MOV       R2,?V2
   \   000271   AB..         MOV       R3,?V3
   \   000273   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000276   12....       LCALL     ?DEALLOC_XSTACK8
    469            
    470            newSinkGroup = PROXY_TBL_GET_DGROUP( entryOptions & 0x00FF );
    471            newSinkGroup |= PROXY_TBL_GET_CGROUP( ( entryOptions & 0xFF00 ) >> 8 );
    472            osal_memset( &entryVector[entryLen], newSinkGroup, sizeof ( uint8 ) );
   \   000279                ; Setup parameters for call to function osal_memset
   \   000279   7C01         MOV       R4,#0x1
   \   00027B   7D00         MOV       R5,#0x0
   \   00027D   7403         MOV       A,#0x3
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   A3           INC       DPTR
   \   000283   E0           MOVX      A,@DPTR
   \   000284   5401         ANL       A,#0x1
   \   000286   FA           MOV       R2,A
   \   000287   7403         MOV       A,#0x3
   \   000289   12....       LCALL     ?XSTACK_DISP0_8
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   33           RLC       A
   \   00028E   33           RLC       A
   \   00028F   5401         ANL       A,#0x1
   \   000291   4A           ORL       A,R2
   \   000292   F9           MOV       R1,A
   \   000293   85..82       MOV       DPL,?XSP + 0
   \   000296   85..83       MOV       DPH,?XSP + 1
   \   000299   E0           MOVX      A,@DPTR
   \   00029A   FA           MOV       R2,A
   \   00029B   7408         MOV       A,#0x8
   \   00029D   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A0   E582         MOV       A,DPL
   \   0002A2   2A           ADD       A,R2
   \   0002A3   FA           MOV       R2,A
   \   0002A4   E4           CLR       A
   \   0002A5   3583         ADDC      A,DPH
   \   0002A7   FB           MOV       R3,A
   \   0002A8   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    473            entryLen++;
   \   0002AB   85..82       MOV       DPL,?XSP + 0
   \   0002AE   85..83       MOV       DPH,?XSP + 1
   \   0002B1   E0           MOVX      A,@DPTR
   \   0002B2   04           INC       A
   \   0002B3   F0           MOVX      @DPTR,A
    474            
    475            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   0002B4   EE           MOV       A,R6
   \   0002B5   241B         ADD       A,#0x1b
   \   0002B7   F5..         MOV       ?V4,A
   \   0002B9   E4           CLR       A
   \   0002BA   3F           ADDC      A,R7
   \   0002BB   F5..         MOV       ?V5,A
   \   0002BD                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002BD   78..         MOV       R0,#?V0
   \   0002BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002C2   740A         MOV       A,#0xa
   \   0002C4   12....       LCALL     ?XSTACK_DISP102_8
   \   0002C7   7902         MOV       R1,#0x2
   \   0002C9   AA..         MOV       R2,?V4
   \   0002CB   AB..         MOV       R3,?V5
   \   0002CD   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0002D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D3   8E82         MOV       DPL,R6
   \   0002D5   8F83         MOV       DPH,R7
   \   0002D7   78..         MOV       R0,#?V0
   \   0002D9   12....       LCALL     ?L_MOV_X
   \   0002DC   E5..         MOV       A,?V0
   \   0002DE   C4           SWAP      A
   \   0002DF   13           RRC       A
   \   0002E0   5407         ANL       A,#0x7
   \   0002E2   5403         ANL       A,#0x3
   \   0002E4   F8           MOV       R0,A
   \   0002E5   7402         MOV       A,#0x2
   \   0002E7   68           XRL       A,R0
   \   0002E8   6005         JZ        ??gp_PairingUpdateProxyTlb_5
   \   0002EA   7401         MOV       A,#0x1
   \   0002EC   68           XRL       A,R0
   \   0002ED   701A         JNZ       ??gp_PairingUpdateProxyTlb_6
    476            if( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) || GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) )
    477            {
    478              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_5:
   \   0002EF                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002EF   A8..         MOV       R0,?XSP + 0
   \   0002F1   A9..         MOV       R1,?XSP + 1
   \   0002F3   88..         MOV       ?V0,R0
   \   0002F5   89..         MOV       ?V1,R1
   \   0002F7   78..         MOV       R0,#?V0
   \   0002F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002FC   740A         MOV       A,#0xa
   \   0002FE   12....       LCALL     ?XSTACK_DISP102_8
   \   000301   7902         MOV       R1,#0x2
   \   000303   AA..         MOV       R2,?V6
   \   000305   AB..         MOV       R3,?V7
   \   000307   8019         SJMP      ??gp_PairingUpdateProxyTlb_7
    479            }
    480            else
    481            {
    482              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_6:
   \   000309                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000309   A8..         MOV       R0,?XSP + 0
   \   00030B   A9..         MOV       R1,?XSP + 1
   \   00030D   88..         MOV       ?V0,R0
   \   00030F   89..         MOV       ?V1,R1
   \   000311   78..         MOV       R0,#?V0
   \   000313   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000316   740A         MOV       A,#0xa
   \   000318   12....       LCALL     ?XSTACK_DISP102_8
   \   00031B   7902         MOV       R1,#0x2
   \   00031D   7408         MOV       A,#0x8
   \   00031F   12....       LCALL     ?XSTACK_DISP101_8
    483            }
   \                     ??gp_PairingUpdateProxyTlb_7:
   \   000322   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000325   12....       LCALL     ?DEALLOC_XSTACK8
    484            // to add the invalid entries
    485            payload->sinkGroupID = 0xFFFF;
   \   000328   85..82       MOV       DPL,?V4
   \   00032B   85..83       MOV       DPH,?V5
   \   00032E   74FF         MOV       A,#-0x1
   \   000330   F0           MOVX      @DPTR,A
   \   000331   A3           INC       DPTR
   \   000332   F0           MOVX      @DPTR,A
    486            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   000333                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000333   78..         MOV       R0,#?V0
   \   000335   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000338   740A         MOV       A,#0xa
   \   00033A   12....       LCALL     ?XSTACK_DISP102_8
   \   00033D   7902         MOV       R1,#0x2
   \   00033F   AA..         MOV       R2,?V4
   \   000341   AB..         MOV       R3,?V5
   \   000343   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000346   12....       LCALL     ?DEALLOC_XSTACK8
    487            gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   000349                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000349   78..         MOV       R0,#?V0
   \   00034B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00034E   740A         MOV       A,#0xa
   \   000350   12....       LCALL     ?XSTACK_DISP102_8
   \   000353   7902         MOV       R1,#0x2
   \   000355   7408         MOV       A,#0x8
   \   000357   12....       LCALL     ?XSTACK_DISP101_8
   \   00035A   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00035D   12....       LCALL     ?DEALLOC_XSTACK8
    488          
    489            
    490            gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
   \   000360                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000360   78..         MOV       R0,#?V0
   \   000362   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000365   740A         MOV       A,#0xa
   \   000367   12....       LCALL     ?XSTACK_DISP102_8
   \   00036A   7901         MOV       R1,#0x1
   \   00036C   EE           MOV       A,R6
   \   00036D   2434         ADD       A,#0x34
   \   00036F   FA           MOV       R2,A
   \   000370   E4           CLR       A
   \   000371   3F           ADDC      A,R7
   \   000372   FB           MOV       R3,A
   \   000373   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000376   12....       LCALL     ?DEALLOC_XSTACK8
    491           
    492            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
   \   000379   85..82       MOV       DPL,?XSP + 0
   \   00037C   85..83       MOV       DPH,?XSP + 1
   \   00037F   E0           MOVX      A,@DPTR
   \   000380   F8           MOV       R0,A
   \   000381   7408         MOV       A,#0x8
   \   000383   12....       LCALL     ?XSTACK_DISP0_8
   \   000386   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000389   7401         MOV       A,#0x1
   \   00038B   12....       LCALL     ?XSTACK_DISP100_8
   \   00038E   88..         MOV       ?V0,R0
   \   000390   89..         MOV       ?V1,R1
   \   000392   75..00       MOV       ?V2,#0x0
   \   000395   E0           MOVX      A,@DPTR
   \   000396   5418         ANL       A,#0x18
   \   000398   6008         JZ        ??gp_PairingUpdateProxyTlb_8
    493            {
    494              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   00039A                ; Setup parameters for call to function osal_memcpy
    495            }
    496            else
    497            {
    498              searchCounter = 0xFF;
   \   00039A   7401         MOV       A,#0x1
   \   00039C   12....       LCALL     ?XSTACK_DISP0_8
   \   00039F   74FF         MOV       A,#-0x1
   \   0003A1   F0           MOVX      @DPTR,A
    499              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   0003A2                ; Setup parameters for call to function osal_memcpy
   \                     ??gp_PairingUpdateProxyTlb_8:
   \   0003A2   78..         MOV       R0,#?V0
   \   0003A4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003A7   7C01         MOV       R4,#0x1
   \   0003A9   7D00         MOV       R5,#0x0
    500            }
   \   0003AB   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0003AE   12....       LCALL     ?DEALLOC_XSTACK8
    501            // Update the proxy table
    502            gp_UpdateProxyTlb( entryVector, addSink );
   \   0003B1                ; Setup parameters for call to function gp_UpdateProxyTlb
   \   0003B1   7405         MOV       A,#0x5
   \   0003B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B6   E0           MOVX      A,@DPTR
   \   0003B7   F9           MOV       R1,A
   \   0003B8   7408         MOV       A,#0x8
   \   0003BA   12....       LCALL     ?XSTACK_DISP101_8
   \   0003BD   12....       LCALL     `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
    503          }
   \   0003C0   7449         MOV       A,#0x49
   \   0003C2                REQUIRE ?Subroutine0
   \   0003C2                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    504          
    505          /*********************************************************************
    506           * @fn          gp_UpdateProxyTlb
    507           *
    508           * @brief       To update the proxy table NV vectors
    509           *
    510           * @param       pNpEntryew - New entry array to be added
    511           *
    512           * @return
    513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7C02         MOV       R4,#0x2
   \   000002                REQUIRE ??Subroutine14_0
   \   000002                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
   \                     gp_UpdateProxyTlb:
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 261
   \   000005   7582FB       MOV       DPL,#-0x5
   \   000008   7583FE       MOV       DPH,#-0x2
   \   00000B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00000E   E9           MOV       A,R1
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   F0           MOVX      @DPTR,A
    516            uint8 i;
    517            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000013   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_4`
   \   000016   7442         MOV       A,#0x42
   \   000018   12....       LCALL     ?XSTACK_DISP102_8
   \   00001B   7441         MOV       A,#0x41
   \   00001D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    518            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000020   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_5`
   \   000023   04           INC       A
   \   000024   12....       LCALL     ?XSTACK_DISP102_8
   \   000027   7441         MOV       A,#0x41
   \   000029   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    519            uint16 proxyTableIndex;
    520            uint8 status;
    521            
    522            // Copy the new entry pointer to array
    523            osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   8A..         MOV       ?V0,R2
   \   00002E   8B..         MOV       ?V1,R3
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   7C41         MOV       R4,#0x41
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   7445         MOV       A,#0x45
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
    524          
    525            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000046   75..00       MOV       ?V3,#0x0
    526            {
    527              proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \                     ??gp_UpdateProxyTlb_0:
   \   000049   E5..         MOV       A,?V3
   \   00004B   2410         ADD       A,#0x10
   \   00004D   FE           MOV       R6,A
   \   00004E   E4           CLR       A
   \   00004F   3403         ADDC      A,#0x3
   \   000051   FF           MOV       R7,A
    528              status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
   \   000052                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?XSTACK_DISP102_8
   \   000057   EE           MOV       A,R6
   \   000058   FA           MOV       R2,A
   \   000059   EF           MOV       A,R7
   \   00005A   FB           MOV       R3,A
   \   00005B   12....       LCALL     ?Subroutine5 & 0xFFFF
    529          
    530              if ( status == NV_OPER_FAILED )
   \                     ??CrossCallReturnLabel_6:
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    531              {
    532                // FAIL
    533                return status;
    534              }
    535              
    536              // if the entry is empty
    537              if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
   \   000063   740D         MOV       A,#0xd
   \   000065   69           XRL       A,R1
   \   000066   6003         JZ        $+5
   \   000068   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
   \   00006B   85..82       MOV       DPL,?XSP + 0
   \   00006E   85..83       MOV       DPH,?XSP + 1
   \   000071   E0           MOVX      A,@DPTR
   \   000072   6401         XRL       A,#0x1
   \   000074   6003         JZ        $+5
   \   000076   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
    538              {
    539                // Save new entry
    540                status = osal_nv_write( proxyTableIndex, 0,
    541                                     PROXY_TBL_ENTRY_LEN, newEntry );
   \   000079                ; Setup parameters for call to function osal_nv_write
   \   000079   7442         MOV       A,#0x42
   \   00007B   12....       LCALL     ?XSTACK_DISP100_8
   \   00007E   88..         MOV       ?V0,R0
   \   000080   89..         MOV       ?V1,R1
   \   000082   78..         MOV       R0,#?V0
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   75..41       MOV       ?V0,#0x41
   \   00008A   75..00       MOV       ?V1,#0x0
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7C00         MOV       R4,#0x0
   \   000094   7D00         MOV       R5,#0x0
   \   000096   EE           MOV       A,R6
   \   000097   FA           MOV       R2,A
   \   000098   EF           MOV       A,R7
   \   000099   FB           MOV       R3,A
   \   00009A   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009D   7404         MOV       A,#0x4
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A2   E9           MOV       A,R1
   \   0000A3   F5..         MOV       ?V7,A
    542                
    543                if ( osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    544                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    545                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   0000A5   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   0000A8   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   0000AB                ; Setup parameters for call to function osal_memcmp
   \   0000AB   744D         MOV       A,#0x4d
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   A982         MOV       R1,DPL
   \   0000B2   AA83         MOV       R2,DPH
   \   0000B4   89..         MOV       ?V4,R1
   \   0000B6   8A..         MOV       ?V5,R2
   \   0000B8   75..00       MOV       ?V6,#0x0
   \   0000BB   78..         MOV       R0,#?V4
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C0   12....       LCALL     ?Subroutine12 & 0xFFFF
    546                {
    547                  NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
    548                }
    549                return status;
    550              }
   \                     ??CrossCallReturnLabel_22:
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV       A,R1
   \   0000C7   6003         JZ        $+5
   \   0000C9   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000CC                ; Setup parameters for call to function osal_memcmp
   \   0000CC   7479         MOV       A,#0x79
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   A982         MOV       R1,DPL
   \   0000D3   AA83         MOV       R2,DPH
   \   0000D5   89..         MOV       ?V4,R1
   \   0000D7   8A..         MOV       ?V5,R2
   \   0000D9   78..         MOV       R0,#?V4
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DE   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000E1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E4   E9           MOV       A,R1
   \   0000E5   6003         JZ        $+5
   \   0000E7   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000EA                ; Setup parameters for call to function osal_memcmp
   \   0000EA   747D         MOV       A,#0x7d
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   A982         MOV       R1,DPL
   \   0000F1   AA83         MOV       R2,DPH
   \   0000F3   89..         MOV       ?V4,R1
   \   0000F5   8A..         MOV       ?V5,R2
   \   0000F7   78..         MOV       R0,#?V4
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FC   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   E9           MOV       A,R1
   \   000103   6003         JZ        $+5
   \   000105   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   000108   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    551              
    552              if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
   \                     ??gp_UpdateProxyTlb_2:
   \   00010B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_11`
   \   00010E   74C4         MOV       A,#-0x3c
   \   000110   12....       LCALL     ?XSTACK_DISP102_8
   \   000113   7441         MOV       A,#0x41
   \   000115   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000118   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_12`
   \   00011B   7483         MOV       A,#-0x7d
   \   00011D   12....       LCALL     ?XSTACK_DISP102_8
   \   000120   7441         MOV       A,#0x41
   \   000122   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000125                ; Setup parameters for call to function osal_memcpy
   \   000125   7442         MOV       A,#0x42
   \   000127   12....       LCALL     ?XSTACK_DISP100_8
   \   00012A   88..         MOV       ?V0,R0
   \   00012C   89..         MOV       ?V1,R1
   \   00012E   78..         MOV       R0,#?V0
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000133   7C41         MOV       R4,#0x41
   \   000135   7D00         MOV       R5,#0x0
   \   000137   74C7         MOV       A,#-0x39
   \   000139   12....       LCALL     ?XSTACK_DISP101_8
   \   00013C   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000142                ; Setup parameters for call to function osal_nv_read
   \   000142   7483         MOV       A,#-0x7d
   \   000144   12....       LCALL     ?XSTACK_DISP100_8
   \   000147   88..         MOV       ?V0,R0
   \   000149   89..         MOV       ?V1,R1
   \   00014B   78..         MOV       R0,#?V0
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000150   75..41       MOV       ?V0,#0x41
   \   000153   75..00       MOV       ?V1,#0x0
   \   000156   78..         MOV       R0,#?V0
   \   000158   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015B   7C00         MOV       R4,#0x0
   \   00015D   7D00         MOV       R5,#0x0
   \   00015F   EE           MOV       A,R6
   \   000160   FA           MOV       R2,A
   \   000161   EF           MOV       A,R7
   \   000162   FB           MOV       R3,A
   \   000163   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000166   7404         MOV       A,#0x4
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   E9           MOV       A,R1
   \   00016C   703E         JNZ       ??gp_UpdateProxyTlb_4
   \   00016E   74C4         MOV       A,#-0x3c
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   E0           MOVX      A,@DPTR
   \   000174   5407         ANL       A,#0x7
   \   000176   F8           MOV       R0,A
   \   000177   7483         MOV       A,#-0x7d
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   5407         ANL       A,#0x7
   \   00017F   68           XRL       A,R0
   \   000180   702A         JNZ       ??gp_UpdateProxyTlb_4
   \   000182                ; Setup parameters for call to function osal_memcmp
   \   000182   7485         MOV       A,#-0x7b
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   A982         MOV       R1,DPL
   \   000189   AA83         MOV       R2,DPH
   \   00018B   89..         MOV       ?V0,R1
   \   00018D   8A..         MOV       ?V1,R2
   \   00018F   78..         MOV       R0,#?V0
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000194   7C08         MOV       R4,#0x8
   \   000196   7D00         MOV       R5,#0x0
   \   000198   74C9         MOV       A,#-0x37
   \   00019A   12....       LCALL     ?XSTACK_DISP0_8
   \   00019D   A982         MOV       R1,DPL
   \   00019F   AA83         MOV       R2,DPH
   \   0001A1   7B00         MOV       R3,#0x0
   \   0001A3   12....       LCALL     ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0001A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A9   E9           MOV       A,R1
   \   0001AA   7018         JNZ       ??gp_UpdateProxyTlb_5
    553              {
    554                // Entry found
    555                break;
    556              }
    557              
    558              if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \                     ??gp_UpdateProxyTlb_4:
   \   0001AC   E5..         MOV       A,?V3
   \   0001AE   C3           CLR       C
   \   0001AF   9405         SUBB      A,#0x5
   \   0001B1   4005         JC        ??gp_UpdateProxyTlb_6
    559              {
    560                // No space for new entries
    561                return FAILURE;
   \   0001B3   7901         MOV       R1,#0x1
   \   0001B5   02....       LJMP      ??gp_UpdateProxyTlb_7 & 0xFFFF
    562              }
    563            }
   \                     ??gp_UpdateProxyTlb_6:
   \   0001B8   05..         INC       ?V3
   \   0001BA   E5..         MOV       A,?V3
   \   0001BC   C3           CLR       C
   \   0001BD   9406         SUBB      A,#0x6
   \   0001BF   5003         JNC       $+5
   \   0001C1   02....       LJMP      ??gp_UpdateProxyTlb_0 & 0xFFFF
    564            
    565            // Remove the entry
    566            if ( addSink == FALSE )
   \                     ??gp_UpdateProxyTlb_5:
   \   0001C4   85..82       MOV       DPL,?XSP + 0
   \   0001C7   85..83       MOV       DPH,?XSP + 1
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   7037         JNZ       ??gp_UpdateProxyTlb_8
    567            {
    568              gp_ResetProxyBasicTblEntry( currEntry );
   \   0001CD                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   0001CD   7401         MOV       A,#0x1
   \   0001CF   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D2   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    569              
    570              status = osal_nv_write( proxyTableIndex, 0,
    571                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   0001D5                ; Setup parameters for call to function osal_nv_write
   \   0001D5   7401         MOV       A,#0x1
   \   0001D7   12....       LCALL     ?XSTACK_DISP100_8
   \   0001DA   88..         MOV       ?V0,R0
   \   0001DC   89..         MOV       ?V1,R1
   \   0001DE   78..         MOV       R0,#?V0
   \   0001E0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E3   75..41       MOV       ?V0,#0x41
   \   0001E6   75..00       MOV       ?V1,#0x0
   \   0001E9   78..         MOV       R0,#?V0
   \   0001EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001EE   7C00         MOV       R4,#0x0
   \   0001F0   7D00         MOV       R5,#0x0
   \   0001F2   EE           MOV       A,R6
   \   0001F3   FA           MOV       R2,A
   \   0001F4   EF           MOV       A,R7
   \   0001F5   FB           MOV       R3,A
   \   0001F6   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001F9   7404         MOV       A,#0x4
   \   0001FB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FE   E9           MOV       A,R1
   \   0001FF   F5..         MOV       ?V7,A
   \   000201   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    572              return status;
    573            }
    574          
    575            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_UpdateProxyTlb_8:
   \   000204   7442         MOV       A,#0x42
   \   000206   12....       LCALL     ?XSTACK_DISP0_8
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00020C   4003         JC        $+5
   \   00020E   02....       LJMP      ??gp_UpdateProxyTlb_9 & 0xFFFF
    576            {
    577              if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
   \   000211                ; Setup parameters for call to function pt_updateLightweightUnicastSink
   \   000211   85..82       MOV       DPL,?XSP + 0
   \   000214   85..83       MOV       DPH,?XSP + 1
   \   000217   E0           MOVX      A,@DPTR
   \   000218   F9           MOV       R1,A
   \   000219   7401         MOV       A,#0x1
   \   00021B   12....       LCALL     ?XSTACK_DISP102_8
   \   00021E   7442         MOV       A,#0x42
   \   000220   12....       LCALL     ?XSTACK_DISP101_8
   \   000223   12....       LCALL     `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
   \   000226   E9           MOV       A,R1
   \   000227   7003         JNZ       $+5
   \   000229   02....       LJMP      ??gp_UpdateProxyTlb_10 & 0xFFFF
    578              {
    579                // The entry is full
    580                return NV_BAD_ITEM_LEN;
    581              }
    582            }
    583            else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
    584            {
    585              if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
    586              {
    587                // The entry is full
    588                return NV_BAD_ITEM_LEN;
    589              }
    590            }
    591          
    592            if ( pt_getAlias( newEntry ) )
   \                     ??gp_UpdateProxyTlb_11:
   \   00022C   7443         MOV       A,#0x43
   \   00022E   12....       LCALL     ?XSTACK_DISP0_8
   \   000231   E0           MOVX      A,@DPTR
   \   000232   A2E5         MOV       C,0xE0 /* A   */.5
   \   000234   5021         JNC       ??gp_UpdateProxyTlb_12
    593            {
    594              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
   \   000236                ; Setup parameters for call to function osal_memcpy
   \   000236   744D         MOV       A,#0x4d
   \   000238   12....       LCALL     ?XSTACK_DISP0_8
   \   00023B   A982         MOV       R1,DPL
   \   00023D   AA83         MOV       R2,DPH
   \   00023F   89..         MOV       ?V0,R1
   \   000241   8A..         MOV       ?V1,R2
   \   000243   78..         MOV       R0,#?V0
   \   000245   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000248   7C02         MOV       R4,#0x2
   \   00024A   7D00         MOV       R5,#0x0
   \   00024C   740F         MOV       A,#0xf
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   12....       LCALL     ?Subroutine9 & 0xFFFF
    595            }
   \                     ??CrossCallReturnLabel_63:
   \   000254   12....       LCALL     ?DEALLOC_XSTACK8
    596              
    597            if ( pt_getSecurity( newEntry ) )
   \                     ??gp_UpdateProxyTlb_12:
   \   000257   7443         MOV       A,#0x43
   \   000259   12....       LCALL     ?XSTACK_DISP0_8
   \   00025C   E0           MOVX      A,@DPTR
   \   00025D   A2E6         MOV       C,0xE0 /* A   */.6
   \   00025F   504B         JNC       ??gp_UpdateProxyTlb_13
    598            {
    599              PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
   \   000261   7402         MOV       A,#0x2
   \   000263   12....       LCALL     ?XSTACK_DISP0_8
   \   000266   E0           MOVX      A,@DPTR
   \   000267   D2E6         SETB      0xE0 /* A   */.6
   \   000269   F0           MOVX      @DPTR,A
    600              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
   \   00026A                ; Setup parameters for call to function osal_memcpy
   \   00026A   744F         MOV       A,#0x4f
   \   00026C   12....       LCALL     ?XSTACK_DISP0_8
   \   00026F   A982         MOV       R1,DPL
   \   000271   AA83         MOV       R2,DPH
   \   000273   89..         MOV       ?V0,R1
   \   000275   8A..         MOV       ?V1,R2
   \   000277   78..         MOV       R0,#?V0
   \   000279   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00027C   7C01         MOV       R4,#0x1
   \   00027E   7D00         MOV       R5,#0x0
   \   000280   7411         MOV       A,#0x11
   \   000282   12....       LCALL     ?XSTACK_DISP0_8
   \   000285   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000288   12....       LCALL     ?DEALLOC_XSTACK8
    601              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
   \   00028B                ; Setup parameters for call to function osal_memcpy
   \   00028B   7454         MOV       A,#0x54
   \   00028D   12....       LCALL     ?XSTACK_DISP0_8
   \   000290   A982         MOV       R1,DPL
   \   000292   AA83         MOV       R2,DPH
   \   000294   89..         MOV       ?V0,R1
   \   000296   8A..         MOV       ?V1,R2
   \   000298   78..         MOV       R0,#?V0
   \   00029A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00029D   7C10         MOV       R4,#0x10
   \   00029F   7D00         MOV       R5,#0x0
   \   0002A1   7416         MOV       A,#0x16
   \   0002A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A6   12....       LCALL     ?Subroutine9 & 0xFFFF
    602            }
   \                     ??CrossCallReturnLabel_65:
   \   0002A9   12....       LCALL     ?DEALLOC_XSTACK8
    603                   
    604            if ( pt_getSecFrameCounterCapabilities( newEntry ) )
   \                     ??gp_UpdateProxyTlb_13:
   \   0002AC   7442         MOV       A,#0x42
   \   0002AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B1   E0           MOVX      A,@DPTR
   \   0002B2   A2E5         MOV       C,0xE0 /* A   */.5
   \   0002B4   5009         JNC       ??gp_UpdateProxyTlb_14
    605            {
    606              PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_OPT] );
   \   0002B6   7401         MOV       A,#0x1
   \   0002B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BB   E0           MOVX      A,@DPTR
   \   0002BC   D2E5         SETB      0xE0 /* A   */.5
   \   0002BE   F0           MOVX      @DPTR,A
    607            }
    608            
    609            osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
   \                     ??gp_UpdateProxyTlb_14:
   \   0002BF                ; Setup parameters for call to function osal_memcpy
   \   0002BF   7450         MOV       A,#0x50
   \   0002C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C4   A982         MOV       R1,DPL
   \   0002C6   AA83         MOV       R2,DPH
   \   0002C8   89..         MOV       ?V0,R1
   \   0002CA   8A..         MOV       ?V1,R2
   \   0002CC   78..         MOV       R0,#?V0
   \   0002CE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002D1   7C04         MOV       R4,#0x4
   \   0002D3   7D00         MOV       R5,#0x0
   \   0002D5   7412         MOV       A,#0x12
   \   0002D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DA   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0002DD   12....       LCALL     ?DEALLOC_XSTACK8
    610          
    611            currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
   \   0002E0   7481         MOV       A,#-0x7f
   \   0002E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E5   E0           MOVX      A,@DPTR
   \   0002E6   C0E0         PUSH      A
   \   0002E8   7440         MOV       A,#0x40
   \   0002EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002ED   D0E0         POP       A
   \   0002EF   F0           MOVX      @DPTR,A
    612              
    613            currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
   \   0002F0   7482         MOV       A,#-0x7e
   \   0002F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F5   E0           MOVX      A,@DPTR
   \   0002F6   C0E0         PUSH      A
   \   0002F8   7441         MOV       A,#0x41
   \   0002FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FD   D0E0         POP       A
   \   0002FF   F0           MOVX      @DPTR,A
    614             
    615            status = osal_nv_write( proxyTableIndex, 0,
    616                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   000300                ; Setup parameters for call to function osal_nv_write
   \   000300   7401         MOV       A,#0x1
   \   000302   12....       LCALL     ?XSTACK_DISP100_8
   \   000305   88..         MOV       ?V0,R0
   \   000307   89..         MOV       ?V1,R1
   \   000309   78..         MOV       R0,#?V0
   \   00030B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00030E   75..41       MOV       ?V0,#0x41
   \   000311   75..00       MOV       ?V1,#0x0
   \   000314   78..         MOV       R0,#?V0
   \   000316   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000319   7C00         MOV       R4,#0x0
   \   00031B   7D00         MOV       R5,#0x0
   \   00031D   EE           MOV       A,R6
   \   00031E   FA           MOV       R2,A
   \   00031F   EF           MOV       A,R7
   \   000320   FB           MOV       R3,A
   \   000321   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000324   7404         MOV       A,#0x4
   \   000326   12....       LCALL     ?DEALLOC_XSTACK8
   \   000329   E9           MOV       A,R1
   \   00032A   F5..         MOV       ?V7,A
    617            
    618            if ( osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    619                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    620                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00032C   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   00032F   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   000332                ; Setup parameters for call to function osal_memcmp
   \   000332   740C         MOV       A,#0xc
   \   000334   12....       LCALL     ?XSTACK_DISP0_8
   \   000337   A982         MOV       R1,DPL
   \   000339   AA83         MOV       R2,DPH
   \   00033B   89..         MOV       ?V4,R1
   \   00033D   8A..         MOV       ?V5,R2
   \   00033F   75..00       MOV       ?V6,#0x0
   \   000342   78..         MOV       R0,#?V4
   \   000344   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000347   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00034A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00034D   E9           MOV       A,R1
   \   00034E   7036         JNZ       ??gp_UpdateProxyTlb_3
   \   000350                ; Setup parameters for call to function osal_memcmp
   \   000350   7438         MOV       A,#0x38
   \   000352   12....       LCALL     ?XSTACK_DISP0_8
   \   000355   A982         MOV       R1,DPL
   \   000357   AA83         MOV       R2,DPH
   \   000359   89..         MOV       ?V4,R1
   \   00035B   8A..         MOV       ?V5,R2
   \   00035D   78..         MOV       R0,#?V4
   \   00035F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000362   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000365   12....       LCALL     ?DEALLOC_XSTACK8
   \   000368   E9           MOV       A,R1
   \   000369   701B         JNZ       ??gp_UpdateProxyTlb_3
   \   00036B                ; Setup parameters for call to function osal_memcmp
   \   00036B   743C         MOV       A,#0x3c
   \   00036D   12....       LCALL     ?XSTACK_DISP0_8
   \   000370   A982         MOV       R1,DPL
   \   000372   AA83         MOV       R2,DPH
   \   000374   89..         MOV       ?V4,R1
   \   000376   8A..         MOV       ?V5,R2
   \   000378   78..         MOV       R0,#?V4
   \   00037A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00037D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000380   12....       LCALL     ?DEALLOC_XSTACK8
   \   000383   E9           MOV       A,R1
   \   000384   600D         JZ        ??gp_UpdateProxyTlb_1
    621            {
    622              NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
   \                     ??gp_UpdateProxyTlb_3:
   \   000386                ; Setup parameters for call to function NLME_ReportAddressConflict
   \   000386   7901         MOV       R1,#0x1
   \   000388   90....       MOV       DPTR,#_NIB + 20
   \   00038B   E0           MOVX      A,@DPTR
   \   00038C   FA           MOV       R2,A
   \   00038D   A3           INC       DPTR
   \   00038E   E0           MOVX      A,@DPTR
   \   00038F   FB           MOV       R3,A
   \   000390   12....       LCALL     `??NLME_ReportAddressConflict::?relay`; Banked call to: NLME_ReportAddressConflict
    623            }
    624            
    625            return status;
   \                     ??gp_UpdateProxyTlb_1:
   \   000393   A9..         MOV       R1,?V7
   \                     ??gp_UpdateProxyTlb_7:
   \   000395   758205       MOV       DPL,#0x5
   \   000398   758301       MOV       DPH,#0x1
   \   00039B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00039E   02....       LJMP      ??Subroutine17_0 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_9:
   \   0003A1   7443         MOV       A,#0x43
   \   0003A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A6   E0           MOVX      A,@DPTR
   \   0003A7   A2E0         MOV       C,0xE0 /* A   */.0
   \   0003A9   4003         JC        $+5
   \   0003AB   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \   0003AE                ; Setup parameters for call to function pt_addSinkGroup
   \   0003AE   7401         MOV       A,#0x1
   \   0003B0   12....       LCALL     ?XSTACK_DISP102_8
   \   0003B3   7442         MOV       A,#0x42
   \   0003B5   12....       LCALL     ?XSTACK_DISP101_8
   \   0003B8   12....       LCALL     `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
   \   0003BB   E9           MOV       A,R1
   \   0003BC   6003         JZ        $+5
   \   0003BE   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_10:
   \   0003C1   790C         MOV       R1,#0xc
   \   0003C3   80D0         SJMP      ??gp_UpdateProxyTlb_7
    626          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine18_0
   \   000004                ; // Fall through to label ??Subroutine18_0
    627          
    628          /*********************************************************************
    629           * @fn          gp_CheckAnnouncedDevice
    630           *
    631           * @brief       General function to check if it has the announced device 
    632           *              listed in the SinkAddressList and look for address conflict
    633           *              resolution.
    634           *
    635           * @param       
    636           *
    637           * @return      
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
   \                     gp_CheckAnnouncedDevice:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 69
   \   000005   74BB         MOV       A,#-0x45
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   EC           MOV       A,R4
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   ED           MOV       A,R5
   \   00001E   F0           MOVX      @DPTR,A
    641            uint8 i;
    642            uint8 status;
    643            uint8 annceDelay;
    644            uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
    645          
    646            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001F   7E00         MOV       R6,#0x0
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V0,R0
   \   000027   89..         MOV       ?V1,R1
   \   000029   8E..         MOV       ?V2,R6
    647            {
    648              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
   \                     ??gp_CheckAnnouncedDevice_0:
   \   00002B                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00002B   7404         MOV       A,#0x4
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EE           MOV       A,R6
   \   000031   2410         ADD       A,#0x10
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3403         ADDC      A,#0x3
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003B   E9           MOV       A,R1
   \   00003C   F8           MOV       R0,A
    649          
    650              if ( status == NV_OPER_FAILED )
   \   00003D   740A         MOV       A,#0xa
   \   00003F   68           XRL       A,R0
   \   000040   7005         JNZ       ??gp_CheckAnnouncedDevice_1
    651              {
    652                // FAIL
    653          
    654                return ZFailure;
   \   000042   7901         MOV       R1,#0x1
   \   000044   02....       LJMP      ??gp_CheckAnnouncedDevice_2 & 0xFFFF
    655              }
    656              
    657              // if the entry is empty
    658              if ( status == NV_INVALID_DATA )
   \                     ??gp_CheckAnnouncedDevice_1:
   \   000047   740D         MOV       A,#0xd
   \   000049   68           XRL       A,R0
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    659              {
    660                continue;
    661              }
    662              
    663              // Compare for nwk alias address conflict
    664              if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    665                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    666                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   740F         MOV       A,#0xf
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V4,R1
   \   00005A   8A..         MOV       ?V5,R2
   \   00005C   75..00       MOV       ?V6,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   \   00006B   7036         JNZ       ??gp_CheckAnnouncedDevice_4
   \   00006D                ; Setup parameters for call to function osal_memcmp
   \   00006D   743B         MOV       A,#0x3b
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   A982         MOV       R1,DPL
   \   000074   AA83         MOV       R2,DPH
   \   000076   89..         MOV       ?V4,R1
   \   000078   8A..         MOV       ?V5,R2
   \   00007A   78..         MOV       R0,#?V4
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007F   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   E9           MOV       A,R1
   \   000086   701B         JNZ       ??gp_CheckAnnouncedDevice_4
   \   000088                ; Setup parameters for call to function osal_memcmp
   \   000088   743F         MOV       A,#0x3f
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   A982         MOV       R1,DPL
   \   00008F   AA83         MOV       R2,DPH
   \   000091   89..         MOV       ?V4,R1
   \   000093   8A..         MOV       ?V5,R2
   \   000095   78..         MOV       R0,#?V4
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009A   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   \   0000A1   6077         JZ        ??gp_CheckAnnouncedDevice_5
    667              {
    668                // Do address conflict resolution
    669                NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
    670                                   sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
   \                     ??gp_CheckAnnouncedDevice_4:
   \   0000A3                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000A3   75..01       MOV       ?V3,#0x1
   \   0000A6   78..         MOV       R0,#?V3
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   790D         MOV       R1,#0xd
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   FC           MOV       R4,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FD           MOV       R5,A
   \   0000B7   7AFD         MOV       R2,#-0x3
   \   0000B9   7BFF         MOV       R3,#-0x1
   \   0000BB   12....       LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000BE   7401         MOV       A,#0x1
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
    671                
    672                aliasConflictAnnce.nwkAddr = sinkNwkAddr;
   \   0000C3   85..82       MOV       DPL,?XSP + 0
   \   0000C6   85..83       MOV       DPH,?XSP + 1
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F8           MOV       R0,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   90....       MOV       DPTR,#aliasConflictAnnce
   \   0000D1   E8           MOV       A,R0
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E9           MOV       A,R1
   \   0000D5   F0           MOVX      @DPTR,A
    673                osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0000D6                ; Setup parameters for call to function osal_memset
   \   0000D6   7C08         MOV       R4,#0x8
   \   0000D8   7D00         MOV       R5,#0x0
   \   0000DA   79FF         MOV       R1,#-0x1
   \   0000DC   7A..         MOV       R2,#(aliasConflictAnnce + 2) & 0xff
   \   0000DE   7B..         MOV       R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
   \   0000E0   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    674                aliasConflictAnnce.capabilities = 0;
   \   0000E3   90....       MOV       DPTR,#aliasConflictAnnce + 10
   \   0000E6   E4           CLR       A
   \   0000E7   F0           MOVX      @DPTR,A
    675                
    676                annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
   \   0000E8                ; Setup parameters for call to function osal_rand
   \   0000E8   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000EB   8A..         MOV       ?V4,R2
   \   0000ED   8B..         MOV       ?V5,R3
   \   0000EF   A8..         MOV       R0,?V4
   \   0000F1   A9..         MOV       R1,?V5
    677                // where:
    678                // 100 is Dmax
    679                // 5   is Dmin
    680                osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
   \   0000F3                ; Setup parameters for call to function osal_start_timerEx
   \   0000F3   7A8A         MOV       R2,#-0x76
   \   0000F5   7B02         MOV       R3,#0x2
   \   0000F7   12....       LCALL     ?US_DIV_MOD
   \   0000FA   E8           MOV       A,R0
   \   0000FB   2405         ADD       A,#0x5
   \   0000FD   F5..         MOV       ?V4,A
   \   0000FF   E4           CLR       A
   \   000100   F5..         MOV       ?V5,A
   \   000102   F5..         MOV       ?V7,A
   \   000104   78..         MOV       R0,#?V4
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000109   7A10         MOV       R2,#0x10
   \   00010B   7B00         MOV       R3,#0x0
   \   00010D   90....       MOV       DPTR,#gp_TaskID
   \   000110   E0           MOVX      A,@DPTR
   \   000111   F9           MOV       R1,A
   \   000112   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000115   7404         MOV       A,#0x4
   \   000117   12....       LCALL     ?DEALLOC_XSTACK8
    681              }
    682          
    683              if( sinkIEEE )
   \                     ??gp_CheckAnnouncedDevice_5:
   \   00011A   7402         MOV       A,#0x2
   \   00011C   12....       LCALL     ?XSTACK_DISP0_8
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   F8           MOV       R0,A
   \   000121   A3           INC       DPTR
   \   000122   E0           MOVX      A,@DPTR
   \   000123   F9           MOV       R1,A
   \   000124   E8           MOV       A,R0
   \   000125   49           ORL       A,R1
   \   000126   7003         JNZ       $+5
   \   000128   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    684              {
    685                //Check if one of the Sink IEEE is the same
    686                if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \   00012B                ; Setup parameters for call to function osal_memcmp
   \   00012B   7426         MOV       A,#0x26
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   A982         MOV       R1,DPL
   \   000132   AA83         MOV       R2,DPH
   \   000134   89..         MOV       ?V4,R1
   \   000136   8A..         MOV       ?V5,R2
   \   000138   78..         MOV       R0,#?V4
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013D   7C08         MOV       R4,#0x8
   \   00013F   7D00         MOV       R5,#0x0
   \   000141   7405         MOV       A,#0x5
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000149   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014C   E9           MOV       A,R1
   \   00014D   6028         JZ        ??gp_CheckAnnouncedDevice_6
    687                {
    688                  // If Nwk address is different, then update the new address
    689                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   00014F                ; Setup parameters for call to function osal_memcmp
   \   00014F   742E         MOV       A,#0x2e
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   A982         MOV       R1,DPL
   \   000156   AA83         MOV       R2,DPH
   \   000158   89..         MOV       ?V4,R1
   \   00015A   8A..         MOV       ?V5,R2
   \   00015C   78..         MOV       R0,#?V4
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000161   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000164   12....       LCALL     ?DEALLOC_XSTACK8
   \   000167   E9           MOV       A,R1
   \   000168   7060         JNZ       ??gp_CheckAnnouncedDevice_3
    690                  {
    691                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   00016A                ; Setup parameters for call to function osal_memcpy
   \   00016A   78..         MOV       R0,#?V0
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016F   7C02         MOV       R4,#0x2
   \   000171   7D00         MOV       R5,#0x0
   \   000173   7431         MOV       A,#0x31
   \   000175   804A         SJMP      ??gp_CheckAnnouncedDevice_7
    692                  }
    693                }
    694                else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_6:
   \   000177                ; Setup parameters for call to function osal_memcmp
   \   000177   7430         MOV       A,#0x30
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   A982         MOV       R1,DPL
   \   00017E   AA83         MOV       R2,DPH
   \   000180   89..         MOV       ?V4,R1
   \   000182   8A..         MOV       ?V5,R2
   \   000184   78..         MOV       R0,#?V4
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000189   7C08         MOV       R4,#0x8
   \   00018B   7D00         MOV       R5,#0x0
   \   00018D   7405         MOV       A,#0x5
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000195   12....       LCALL     ?DEALLOC_XSTACK8
   \   000198   E9           MOV       A,R1
   \   000199   602F         JZ        ??gp_CheckAnnouncedDevice_3
    695                {
    696                  // If Nwk address is different, then update the new address
    697                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   00019B                ; Setup parameters for call to function osal_memcmp
   \   00019B   7438         MOV       A,#0x38
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   A982         MOV       R1,DPL
   \   0001A2   AA83         MOV       R2,DPH
   \   0001A4   89..         MOV       ?V4,R1
   \   0001A6   8A..         MOV       ?V5,R2
   \   0001A8   78..         MOV       R0,#?V4
   \   0001AA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AD   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B3   E9           MOV       A,R1
   \   0001B4   7014         JNZ       ??gp_CheckAnnouncedDevice_3
    698                  {
    699                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   0001B6                ; Setup parameters for call to function osal_memcpy
   \   0001B6   78..         MOV       R0,#?V0
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001BB   7C02         MOV       R4,#0x2
   \   0001BD   7D00         MOV       R5,#0x0
   \   0001BF   743B         MOV       A,#0x3b
   \                     ??gp_CheckAnnouncedDevice_7:
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
    700                  }
    701                }
    702              }
    703            }
   \   0001C4   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001C7   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??gp_CheckAnnouncedDevice_3:
   \   0001CA   0E           INC       R6
   \   0001CB   EE           MOV       A,R6
   \   0001CC   C3           CLR       C
   \   0001CD   9406         SUBB      A,#0x6
   \   0001CF   5003         JNC       $+5
   \   0001D1   02....       LJMP      ??gp_CheckAnnouncedDevice_0 & 0xFFFF
    704              
    705            return ZSuccess;
   \   0001D4   7900         MOV       R1,#0x0
   \                     ??gp_CheckAnnouncedDevice_2:
   \   0001D6   7445         MOV       A,#0x45
   \   0001D8   02....       LJMP      ?Subroutine0 & 0xFFFF
    706          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   A982         MOV       R1,DPL
   \   00000A   AA83         MOV       R2,DPH
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000011   7403         MOV       A,#0x3
   \   000013   22           RET
    707          
    708           /*********************************************************************
    709           * PRIVATE FUNCTIONS
    710           *********************************************************************/
    711          
    712          /*********************************************************************
    713           * @fn          gp_PopulateProxyTblEntry
    714           *
    715           * @brief       Populate the given item data
    716           *
    717           * @param       pData - Pointer to the new data
    718           *              size - size of the new data
    719           *              pTblEntryVector - Pointer to the new vector
    720           *              vectorLen - Position in the vector to write the data
    721           *
    722           * @return
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
   \                     gp_PopulateProxyTblEntry:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   89..         MOV       ?V3,R1
   \   00000B   EC           MOV       A,R4
   \   00000C   FA           MOV       R2,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FB           MOV       R3,A
   \   00000F   740C         MOV       A,#0xc
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FF           MOV       R7,A
    726            pTblEntryVector += *(uint8*)vectorLen;
    727            
    728            osal_memcpy( pTblEntryVector, pData, size );
   \   000019                ; Setup parameters for call to function osal_memcpy
   \   000019   75..00       MOV       ?V2,#0x0
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000021   AC..         MOV       R4,?V3
   \   000023   7D00         MOV       R5,#0x0
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   EA           MOV       A,R2
   \   00002C   28           ADD       A,R0
   \   00002D   FA           MOV       R2,A
   \   00002E   E4           CLR       A
   \   00002F   3B           ADDC      A,R3
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
    729            *(uint8*)vectorLen += size;
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   25..         ADD       A,?V3
   \   00003E   F0           MOVX      @DPTR,A
    730          }
   \   00003F   02....       LJMP      ?Subroutine1 & 0xFFFF
    731          
    732          /*********************************************************************
    733           * @fn          pt_getAlias
    734           *
    735           * @brief       Get Bit to update assigned alias field or not
    736           *
    737           * @param       pNew - New entry array to be added
    738           *
    739           * @return      newAlias - TRUE if assigned alias bit is set
    740           */
    741          static uint8 pt_getAlias( uint8* pNew )
    742          {
    743            bool newAlias;
    744            
    745            newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    746            
    747            return newAlias;
    748          }
    749          
    750          /*********************************************************************
    751           * @fn          pt_getSecurity
    752           *
    753           * @brief       Get Bit to update security options field or not
    754           *
    755           * @param       pNew - New entry array to be added
    756           *
    757           * @return      secUse - TRUE if security use bit is set
    758           */
    759          static uint8 pt_getSecurity( uint8* pNew )
    760          {
    761            bool secUse;
    762            
    763            secUse = PROXY_TBL_GET_SEC_USE( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    764          
    765            return secUse;
    766          }
    767          
    768          /*********************************************************************
    769           * @fn          pt_getSecFrameCounterCapabilities
    770           *
    771           * @brief       Get Bit to update security frame counter capabilities
    772           *
    773           * @param       pNew - New entry array to be added
    774           *
    775           * @return      secCap - TRUE if security frame counter capabilities bit is set
    776           */
    777          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew )
    778          {
    779            bool secCap;
    780            
    781            secCap = PROXY_TBL_GET_SEC_CAP( pNew[PROXY_TBL_ENTRY_OPT] );
    782            
    783            return secCap;
    784          }
    785          
    786          /*********************************************************************
    787           * @fn          pt_updateLightweightUnicastSink
    788           *
    789           * @brief       To add new sink entry
    790           *
    791           * @param       pNew - New entry array to be added
    792           *              pCurr - The current entry array in the proxy table
    793           *
    794           * @return      TRUE new entry added, FALSE if not
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
   \                     pt_updateLightweightUnicastSink:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 151
   \   000005   7469         MOV       A,#0x69
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7406         MOV       A,#0x6
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   E9           MOV       A,R1
   \   000015   FE           MOV       R6,A
    798            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000016   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_6`
   \   000019   7456         MOV       A,#0x56
   \   00001B   12....       LCALL     ?XSTACK_DISP102_8
   \   00001E   7441         MOV       A,#0x41
   \   000020   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    799            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000023   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_7`
   \   000026   7415         MOV       A,#0x15
   \   000028   12....       LCALL     ?XSTACK_DISP102_8
   \   00002B   7441         MOV       A,#0x41
   \   00002D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    800            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000030   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_8`
   \   000033   740B         MOV       A,#0xb
   \   000035   12....       LCALL     ?XSTACK_DISP102_8
   \   000038   740A         MOV       A,#0xa
   \   00003A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    801            
    802            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   00003D                ; Setup parameters for call to function osal_memcpy
   \   00003D   8A..         MOV       ?V0,R2
   \   00003F   8B..         MOV       ?V1,R3
   \   000041   F5..         MOV       ?V2,A
   \   000043   78..         MOV       R0,#?V0
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000048   7C41         MOV       R4,#0x41
   \   00004A   7D00         MOV       R5,#0x0
   \   00004C   7459         MOV       A,#0x59
   \   00004E   12....       LCALL     ?XSTACK_DISP101_8
   \   000051   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
    803            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   7406         MOV       A,#0x6
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F5..         MOV       ?V0,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F5..         MOV       ?V1,A
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   7C41         MOV       R4,#0x41
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   7418         MOV       A,#0x18
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
    804            
    805            
    806            // if addSink is TRUE then add the sink to current entry
    807            if ( addSink ) 
   \   000077   7441         MOV       A,#0x41
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   A982         MOV       R1,DPL
   \   00007E   AA83         MOV       R2,DPH
   \   000080   7403         MOV       A,#0x3
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E9           MOV       A,R1
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   EA           MOV       A,R2
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   E4           CLR       A
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   7437         MOV       A,#0x37
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   A982         MOV       R1,DPL
   \   000094   AA83         MOV       R2,DPH
   \   000096   7408         MOV       A,#0x8
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   E9           MOV       A,R1
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   EA           MOV       A,R2
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E4           CLR       A
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   7478         MOV       A,#0x78
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   A982         MOV       R1,DPL
   \   0000AA   AA83         MOV       R2,DPH
   \   0000AC   89..         MOV       ?V0,R1
   \   0000AE   8A..         MOV       ?V1,R2
   \   0000B0   740B         MOV       A,#0xb
   \   0000B2   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B5   85..82       MOV       DPL,?XSP + 0
   \   0000B8   85..83       MOV       DPH,?XSP + 1
   \   0000BB   E8           MOV       A,R0
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E9           MOV       A,R1
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E4           CLR       A
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   EE           MOV       A,R6
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   6053         JZ        ??pt_updateLightweightUnicastSink_0
    808            {
    809              // if the incomming Sink entry is different to the current entry
    810              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000C8                ; Setup parameters for call to function osal_memcmp
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CB   7C0A         MOV       R4,#0xa
   \   0000CD   7D00         MOV       R5,#0x0
   \   0000CF   740B         MOV       A,#0xb
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV       A,R1
   \   0000DB   6003         JZ        $+5
   \   0000DD   02....       LJMP      ??pt_updateLightweightUnicastSink_1 & 0xFFFF
    811              {
    812                // add the sink entry in the next slot if empty
    813                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000E0                ; Setup parameters for call to function osal_memcmp
   \   0000E0   7403         MOV       A,#0x3
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   0000E8   7C0A         MOV       R4,#0xa
   \   0000EA   7D00         MOV       R5,#0x0
   \   0000EC   7403         MOV       A,#0x3
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000F4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F7   E9           MOV       A,R1
   \   0000F8   78..         MOV       R0,#?V0
   \   0000FA   6006         JZ        ??pt_updateLightweightUnicastSink_2
    814                {
    815                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
   \   0000FC                ; Setup parameters for call to function osal_memcpy
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FF   02....       LJMP      ??pt_updateLightweightUnicastSink_3 & 0xFFFF
    816                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    817                  return TRUE;
    818                }
    819              }
    820              else 
    821              {
    822                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    823               return TRUE;
    824              }
    825              // if the incomming Sink entry is different to the current entry
    826              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_updateLightweightUnicastSink_2:
   \   000102                ; Setup parameters for call to function osal_memcmp
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000105   7C0A         MOV       R4,#0xa
   \   000107   7D00         MOV       R5,#0x0
   \   000109   7406         MOV       A,#0x6
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   12....       LCALL     ?Subroutine6 & 0xFFFF
    827              {
    828                return FALSE;
    829              }
    830            }
   \                     ??CrossCallReturnLabel_9:
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
    831            else
    832            {
    833              // if the incomming Sink entry is the same to the current entry
    834              if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    835              {
    836                // Move the next sink entry to current
    837                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
    838                // Invalidate the sink entry
    839                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    840                
    841                // if the sink entry is empty then remove the proxy table entry
    842                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    843                {
    844                  gp_ResetProxyBasicTblEntry( currEntry );
    845                }
    846                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    847                return TRUE;
    848              }
    849              // if the incomming Sink entry is the same to the current entry
    850              else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    851              {
    852                // Invalidate the sink entry
    853                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    854                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    855                return TRUE;
    856              }
    857            }
    858            return FALSE;
   \                     ??pt_updateLightweightUnicastSink_4:
   \   000114   7900         MOV       R1,#0x0
   \                     ??pt_updateLightweightUnicastSink_5:
   \   000116   7497         MOV       A,#-0x69
   \   000118   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_0:
   \   00011B                ; Setup parameters for call to function osal_memcmp
   \   00011B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011E   7C0A         MOV       R4,#0xa
   \   000120   7D00         MOV       R5,#0x0
   \   000122   740B         MOV       A,#0xb
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012D   E9           MOV       A,R1
   \   00012E   6073         JZ        ??pt_updateLightweightUnicastSink_6
   \   000130                ; Setup parameters for call to function osal_memcpy
   \   000130   7403         MOV       A,#0x3
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   000138   7C0A         MOV       R4,#0xa
   \   00013A   7D00         MOV       R5,#0x0
   \   00013C   743A         MOV       A,#0x3a
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000144   12....       LCALL     ?DEALLOC_XSTACK8
   \   000147                ; Setup parameters for call to function osal_memcpy
   \   000147   85..82       MOV       DPL,?XSP + 0
   \   00014A   85..83       MOV       DPH,?XSP + 1
   \   00014D   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   000150   7C0A         MOV       R4,#0xa
   \   000152   7D00         MOV       R5,#0x0
   \   000154   7444         MOV       A,#0x44
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00015C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015F                ; Setup parameters for call to function osal_memcmp
   \   00015F   7408         MOV       A,#0x8
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   000167   7C0A         MOV       R4,#0xa
   \   000169   7D00         MOV       R5,#0x0
   \   00016B   7403         MOV       A,#0x3
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000173   12....       LCALL     ?DEALLOC_XSTACK8
   \   000176   E9           MOV       A,R1
   \   000177   6008         JZ        ??pt_updateLightweightUnicastSink_1
   \   000179                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   000179   7415         MOV       A,#0x15
   \   00017B   12....       LCALL     ?XSTACK_DISP101_8
   \   00017E   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
   \                     ??pt_updateLightweightUnicastSink_1:
   \   000181                ; Setup parameters for call to function osal_memcpy
   \   000181   7415         MOV       A,#0x15
   \   000183   12....       LCALL     ?XSTACK_DISP100_8
   \   000186   88..         MOV       ?V0,R0
   \   000188   89..         MOV       ?V1,R1
   \   00018A   78..         MOV       R0,#?V0
   \   00018C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018F   7C41         MOV       R4,#0x41
   \   000191   7D00         MOV       R5,#0x0
   \   000193   7409         MOV       A,#0x9
   \   000195   12....       LCALL     ?XSTACK_DISP0_8
   \   000198   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00019B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019E   7901         MOV       R1,#0x1
   \   0001A0   02....       LJMP      ??pt_updateLightweightUnicastSink_5 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_6:
   \   0001A3                ; Setup parameters for call to function osal_memcmp
   \   0001A3   78..         MOV       R0,#?V0
   \   0001A5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A8   7C0A         MOV       R4,#0xa
   \   0001AA   7D00         MOV       R5,#0x0
   \   0001AC   7406         MOV       A,#0x6
   \   0001AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B1   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B7   E9           MOV       A,R1
   \   0001B8   7003         JNZ       $+5
   \   0001BA   02....       LJMP      ??pt_updateLightweightUnicastSink_4 & 0xFFFF
   \   0001BD                ; Setup parameters for call to function osal_memcpy
   \   0001BD   85..82       MOV       DPL,?XSP + 0
   \   0001C0   85..83       MOV       DPH,?XSP + 1
   \   0001C3   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \                     ??pt_updateLightweightUnicastSink_3:
   \   0001C6   7C0A         MOV       R4,#0xa
   \   0001C8   7D00         MOV       R5,#0x0
   \   0001CA   7444         MOV       A,#0x44
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0001D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D5   80AA         SJMP      ??pt_updateLightweightUnicastSink_1
    859          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00000B   7403         MOV       A,#0x3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
    860          
    861          /*********************************************************************
    862           * @fn          pt_addSinkGroup
    863           *
    864           * @brief       To add new sink group entry
    865           *
    866           * @param       pNew - New entry array to be added
    867           *              pCurr - The current entry array in the proxy table
    868           *
    869           * @return      TRUE new entry added, FALSE if not
    870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    871          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
   \                     pt_addSinkGroup:
    872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 130
   \   000005   747E         MOV       A,#0x7e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    873            bool newSinkGroup;
    874            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_9`
   \   000011   7441         MOV       A,#0x41
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    875            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_10`
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7441         MOV       A,#0x41
   \   000024   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    876            
    877            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   \   00002B   F5..         MOV       ?V2,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C41         MOV       R4,#0x41
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7444         MOV       A,#0x44
   \   000038   12....       LCALL     ?XSTACK_DISP101_8
   \   00003B   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
    878            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   8E..         MOV       ?V0,R6
   \   000043   8F..         MOV       ?V1,R7
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   7C41         MOV       R4,#0x41
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   7403         MOV       A,#0x3
   \   000050   12....       LCALL     ?XSTACK_DISP101_8
   \   000053   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
    879            
    880            newSinkGroup = PROXY_TBL_GET_DGROUP( newEntry[PROXY_TBL_ENTRY_OPT] );
    881            newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    882            
    883            if ( newSinkGroup )
    884            {
    885              if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \   000059   7442         MOV       A,#0x42
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000061   507D         JNC       ??pt_addSinkGroup_0
   \   000063   7436         MOV       A,#0x36
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   A2E1         MOV       C,0xE0 /* A   */.1
   \   00006B   4073         JC        ??pt_addSinkGroup_0
    886              {
    887                if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   00006D   7478         MOV       A,#0x78
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   A982         MOV       R1,DPL
   \   000074   AA83         MOV       R2,DPH
   \   000076   7B00         MOV       R3,#0x0
   \   000078   AC..         MOV       R4,?XSP + 0
   \   00007A   AD..         MOV       R5,?XSP + 1
   \   00007C   8C..         MOV       ?V0,R4
   \   00007E   8D..         MOV       ?V1,R5
   \   000080   7436         MOV       A,#0x36
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   A2E0         MOV       C,0xE0 /* A   */.0
   \   000088   89..         MOV       ?V4,R1
   \   00008A   8A..         MOV       ?V5,R2
   \   00008C   8B..         MOV       ?V6,R3
   \   00008E   78..         MOV       R0,#?V4
   \   000090   401C         JC        ??pt_addSinkGroup_1
    888                {
    889                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \   000092                ; Setup parameters for call to function osal_memcpy
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000095   7C04         MOV       R4,#0x4
   \   000097   7D00         MOV       R5,#0x0
   \   000099   743A         MOV       A,#0x3a
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
    890                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT );
   \   0000A4   7436         MOV       A,#0x36
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   D2E0         SETB      0xE0 /* A   */.0
   \   0000AC   801A         SJMP      ??pt_addSinkGroup_2
    891                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    892                  return TRUE;
    893                }
    894                else
    895                {
    896                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \                     ??pt_addSinkGroup_1:
   \   0000AE                ; Setup parameters for call to function osal_memcpy
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B1   7C04         MOV       R4,#0x4
   \   0000B3   7D00         MOV       R5,#0x0
   \   0000B5   743E         MOV       A,#0x3e
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
    897                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT );
   \   0000C0   7436         MOV       A,#0x36
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   D2E1         SETB      0xE0 /* A   */.1
   \                     ??pt_addSinkGroup_2:
   \   0000C8   F0           MOVX      @DPTR,A
    898                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
   \   0000C9                ; Setup parameters for call to function osal_memcpy
   \   0000C9   78..         MOV       R0,#?V0
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CE   7C41         MOV       R4,#0x41
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   EE           MOV       A,R6
   \   0000D3   FA           MOV       R2,A
   \   0000D4   EF           MOV       A,R7
   \   0000D5   FB           MOV       R3,A
   \   0000D6   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
    899                  return TRUE;
   \   0000DC   7901         MOV       R1,#0x1
   \   0000DE   8002         SJMP      ??pt_addSinkGroup_3
    900                }
    901              }
    902            }
    903            return FALSE;
   \                     ??pt_addSinkGroup_0:
   \   0000E0   7900         MOV       R1,#0x0
   \                     ??pt_addSinkGroup_3:
   \   0000E2   7482         MOV       A,#-0x7e
   \   0000E4                REQUIRE ?Subroutine2
   \   0000E4                ; // Fall through to label ?Subroutine2
    904          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_ZclReadGetProxyEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_ZclReadGetProxyEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGpp_ReadWriteAttrCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGpp_ReadWriteAttrCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_pairingSetProxyTblOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_pairingSetProxyTblOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PairingUpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PairingUpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_UpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_UpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CheckAnnouncedDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CheckAnnouncedDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PopulateProxyTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PopulateProxyTblEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_updateLightweightUnicastSink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_updateLightweightUnicastSink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_addSinkGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_addSinkGroup

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_3`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_4`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_5`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_6`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_7`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_8`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_9`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_10`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_11`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_12`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536
    905          
    906          /*********************************************************************
    907           * @fn          pt_lookForGpd
    908           *
    909           * @brief       To see if the GPD id is in this NV entry
    910           *
    911           * @param       currProxyEntryId - NV ID of the proxy table
    912           *              pNew - New tabble entry array to be added
    913           *
    914           * @return      TRUE if the GPD has an entry in current NV vector
    915           */
    916          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
    917          {
    918            uint8 rtrn;
    919          
    920            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    921            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    922          
    923            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    924            
    925            rtrn = osal_nv_read( currProxyEntryId, 0,
    926                                       PROXY_TBL_ENTRY_LEN, currEntry );
    927            
    928            if ( rtrn != SUCCESS )
    929            {
    930              return FALSE;
    931            }
    932          
    933            if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
    934            {
    935              if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
    936              {
    937              return TRUE;
    938              }
    939            }
    940            return FALSE;
    941          }
    942          
    943          #endif
    944          /*********************************************************************
    945          *********************************************************************/
    946          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     89   gp_CheckAnnouncedDevice
        0     86   -> NLME_SendNetworkStatus
        0     85   -> gp_getProxyTableByIndex
        0     88   -> osal_memcmp
        0     88   -> osal_memcpy
        0     85   -> osal_memset
        0     85   -> osal_rand
        0     89   -> osal_start_timerEx
      1     92   gp_PairingUpdateProxyTlb
        0     91   -> gp_PopulateProxyTblEntry
        0     89   -> gp_UpdateProxyTlb
        0     89   -> gp_pairingSetProxyTblOptions
        0     92   -> osal_memcpy
        0     89   -> osal_memset
      0    184   gp_PopulateProxyTblEntry
        0     15   -> osal_memcpy
      1    370   gp_UpdateProxyTlb
        0    277   -> NLME_ReportAddressConflict
        0    277   -> gp_ResetProxyBasicTblEntry
        0    277   -> gp_getProxyTableByIndex
        0    280   -> osal_memcmp
        0    280   -> osal_memcpy
        0    281   -> osal_nv_read
        0    281   -> osal_nv_write
        0    277   -> pt_addSinkGroup
        0    277   -> pt_updateLightweightUnicastSink
      1    107   gp_pairingSetProxyTblOptions
      1    184   pt_ZclReadGetProxyEntry
        0    169   -> gp_PopulateProxyTblEntry
        0    167   -> gp_getProxyTableByIndex
        0    170   -> osal_memcmp
        0    170   -> osal_memcpy
      0    425   pt_addSinkGroup
        0    148   -> osal_memcpy
      0    446   pt_updateLightweightUnicastSink
        0    166   -> gp_ResetProxyBasicTblEntry
        0    169   -> osal_memcmp
        0    169   -> osal_memcpy
      0     18   zclGpp_ReadWriteAttrCB
        0     14   -> pt_ZclReadGetProxyEntry


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_10
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_11
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_12
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_2
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_3
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_4
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_5
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_6
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_7
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,_8
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_9
       8  ??Subroutine14_0
       6  ??Subroutine15_0
       6  ??Subroutine16_0
       5  ??Subroutine17_0
       6  ??Subroutine18_0
       3  ?Subroutine0
       5  ?Subroutine1
       4  ?Subroutine10
       9  ?Subroutine11
       2  ?Subroutine12
       9  ?Subroutine13
       8  ?Subroutine2
      12  ?Subroutine3
      10  ?Subroutine4
      10  ?Subroutine5
      14  ?Subroutine6
      20  ?Subroutine7
      11  ?Subroutine8
       4  ?Subroutine9
       4  __Constant_10000
      11  aliasConflictAnnce
     475  gp_CheckAnnouncedDevice
       6  gp_CheckAnnouncedDevice::?relay
     962  gp_PairingUpdateProxyTlb
       6  gp_PairingUpdateProxyTlb::?relay
      66  gp_PopulateProxyTblEntry
       6  gp_PopulateProxyTblEntry::?relay
     965  gp_UpdateProxyTlb
       6  gp_UpdateProxyTlb::?relay
     276  gp_pairingSetProxyTblOptions
       6  gp_pairingSetProxyTblOptions::?relay
    1151  pt_ZclReadGetProxyEntry
       6  pt_ZclReadGetProxyEntry::?relay
     228  pt_addSinkGroup
       6  pt_addSinkGroup::?relay
     471  pt_updateLightweightUnicastSink
       6  pt_updateLightweightUnicastSink::?relay
      95  zclGpp_ReadWriteAttrCB
       6  zclGpp_ReadWriteAttrCB::?relay

 
 4 841 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
   741 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
   737 bytes of CONST    memory (+ 4 bytes shared)
 4 841 bytes of HUGECODE memory
    11 bytes of XDATA    memory

Errors: none
Warnings: none
