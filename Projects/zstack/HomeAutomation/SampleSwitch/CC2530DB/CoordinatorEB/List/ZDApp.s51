///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.20.1.5333 for 8051              08/Feb/2022  22:10:24
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Components\stack\zdo\ZDApp.c
//    Command line       =  
//        -f C:\usertemp\AppData\Local\Temp\EWAA9E.tmp ("I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Components\stack\zdo\ZDApp.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D ZCL_REPORT -D
//        HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
//        INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D xHAL_LCD_OLED12864 -D
//        HAL_ADC=TRUE -D HAL_UART=TRUE -D INT_HEAP_LEN=2048 -lC
//        "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        -lA "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\ZDApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AddrMgrWriteNVRequest::?relay`
        FUNCTION `??AddrMgrWriteNVRequest::?relay`,0203H
        PUBLIC `??ZDAppCheckForHoldKey::?relay`
        FUNCTION `??ZDAppCheckForHoldKey::?relay`,0203H
        PUBLIC `??ZDAppDetermineDeviceType::?relay`
        FUNCTION `??ZDAppDetermineDeviceType::?relay`,0203H
        PUBLIC `??ZDApp_AnnounceNewAddress::?relay`
        FUNCTION `??ZDApp_AnnounceNewAddress::?relay`,0203H
        PUBLIC `??ZDApp_ChangeMatchDescRespPermission::?relay`
        FUNCTION `??ZDApp_ChangeMatchDescRespPermission::?relay`,0203H
        PUBLIC `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,0203H
        PUBLIC `??ZDApp_CoordStartPANIDConflictCB::?relay`
        FUNCTION `??ZDApp_CoordStartPANIDConflictCB::?relay`,0203H
        PUBLIC `??ZDApp_DeviceAuthEvt::?relay`
        FUNCTION `??ZDApp_DeviceAuthEvt::?relay`,0203H
        PUBLIC `??ZDApp_DeviceConfigured::?relay`
        FUNCTION `??ZDApp_DeviceConfigured::?relay`,0203H
        PUBLIC `??ZDApp_ForceConcentratorChange::?relay`
        FUNCTION `??ZDApp_ForceConcentratorChange::?relay`,0203H
        PUBLIC `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,0203H
        PUBLIC `??ZDApp_Init::?relay`
        FUNCTION `??ZDApp_Init::?relay`,0203H
        PUBLIC `??ZDApp_InitUserDesc::?relay`
        FUNCTION `??ZDApp_InitUserDesc::?relay`,0203H
        PUBLIC `??ZDApp_InitZdoCBFunc::?relay`
        FUNCTION `??ZDApp_InitZdoCBFunc::?relay`,0203H
        PUBLIC `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlBypass::?relay`
        FUNCTION `??ZDApp_LeaveCtrlBypass::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlInit::?relay`
        FUNCTION `??ZDApp_LeaveCtrlInit::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlReset::?relay`
        FUNCTION `??ZDApp_LeaveCtrlReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlSet::?relay`
        FUNCTION `??ZDApp_LeaveCtrlSet::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlStartup::?relay`
        FUNCTION `??ZDApp_LeaveCtrlStartup::?relay`,0203H
        PUBLIC `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveUpdate::?relay`
        FUNCTION `??ZDApp_LeaveUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,0203H
        PUBLIC `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,0203H
        PUBLIC `??ZDApp_NetworkStartEvt::?relay`
        FUNCTION `??ZDApp_NetworkStartEvt::?relay`,0203H
        PUBLIC `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,0203H
        PUBLIC `??ZDApp_NwkDescListProcessing::?relay`
        FUNCTION `??ZDApp_NwkDescListProcessing::?relay`,0203H
        PUBLIC `??ZDApp_NwkStateUpdateCB::?relay`
        FUNCTION `??ZDApp_NwkStateUpdateCB::?relay`,0203H
        PUBLIC `??ZDApp_ProcessMsgCBs::?relay`
        FUNCTION `??ZDApp_ProcessMsgCBs::?relay`,0203H
        PUBLIC `??ZDApp_ProcessNetworkJoin::?relay`
        FUNCTION `??ZDApp_ProcessNetworkJoin::?relay`,0203H
        PUBLIC `??ZDApp_ProcessOSALMsg::?relay`
        FUNCTION `??ZDApp_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecEvent::?relay`
        FUNCTION `??ZDApp_ProcessSecEvent::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecMsg::?relay`
        FUNCTION `??ZDApp_ProcessSecMsg::?relay`,0203H
        PUBLIC `??ZDApp_ReadNetworkRestoreState::?relay`
        FUNCTION `??ZDApp_ReadNetworkRestoreState::?relay`,0203H
        PUBLIC `??ZDApp_RegisterCBs::?relay`
        FUNCTION `??ZDApp_RegisterCBs::?relay`,0203H
        PUBLIC `??ZDApp_ResetNwkKey::?relay`
        FUNCTION `??ZDApp_ResetNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerCancel::?relay`
        FUNCTION `??ZDApp_ResetTimerCancel::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNetworkState::?relay`
        FUNCTION `??ZDApp_RestoreNetworkState::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,0203H
        PUBLIC `??ZDApp_SaveNetworkStateEvt::?relay`
        FUNCTION `??ZDApp_SaveNetworkStateEvt::?relay`,0203H
        PUBLIC `??ZDApp_SaveNwkKey::?relay`
        FUNCTION `??ZDApp_SaveNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SecInit::?relay`
        FUNCTION `??ZDApp_SecInit::?relay`,0203H
        PUBLIC `??ZDApp_SendEventMsg::?relay`
        FUNCTION `??ZDApp_SendEventMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendMsg::?relay`
        FUNCTION `??ZDApp_SendMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendParentAnnce::?relay`
        FUNCTION `??ZDApp_SendParentAnnce::?relay`,0203H
        PUBLIC `??ZDApp_SetParentAnnceTimer::?relay`
        FUNCTION `??ZDApp_SetParentAnnceTimer::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinBackoffDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinBackoffDuration::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinScanDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinScanDuration::?relay`,0203H
        PUBLIC `??ZDApp_StartJoiningCycle::?relay`
        FUNCTION `??ZDApp_StartJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StopJoiningCycle::?relay`
        FUNCTION `??ZDApp_StopJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_StoreNwkSecMaterial::?relay`,0203H
        PUBLIC `??ZDApp_event_loop::?relay`
        FUNCTION `??ZDApp_event_loop::?relay`,0203H
        PUBLIC `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,0203H
        PUBLIC `??ZDO_AddrChangeIndicationCB::?relay`
        FUNCTION `??ZDO_AddrChangeIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_ConcentratorIndicationCB::?relay`
        FUNCTION `??ZDO_ConcentratorIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_JoinConfirmCB::?relay`
        FUNCTION `??ZDO_JoinConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_JoinIndicationCB::?relay`
        FUNCTION `??ZDO_JoinIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_LeaveCnf::?relay`
        FUNCTION `??ZDO_LeaveCnf::?relay`,0203H
        PUBLIC `??ZDO_LeaveInd::?relay`
        FUNCTION `??ZDO_LeaveInd::?relay`,0203H
        PUBLIC `??ZDO_ManytoOneFailureIndicationCB::?relay`
        FUNCTION `??ZDO_ManytoOneFailureIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkDiscoveryConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkDiscoveryConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkFormationConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkFormationConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkStatusCB::?relay`
        FUNCTION `??ZDO_NetworkStatusCB::?relay`,0203H
        PUBLIC `??ZDO_PermitJoinCB::?relay`
        FUNCTION `??ZDO_PermitJoinCB::?relay`,0203H
        PUBLIC `??ZDO_PollConfirmCB::?relay`
        FUNCTION `??ZDO_PollConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_SrcRtgIndCB::?relay`
        FUNCTION `??ZDO_SrcRtgIndCB::?relay`,0203H
        PUBLIC `??ZDO_StartRouterConfirmCB::?relay`
        FUNCTION `??ZDO_StartRouterConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_SyncIndicationCB::?relay`
        FUNCTION `??ZDO_SyncIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_UpdateDeviceIndication::?relay`
        FUNCTION `??ZDO_UpdateDeviceIndication::?relay`,0203H
        PUBLIC `??ZDO_beaconNotifyIndCB::?relay`
        FUNCTION `??ZDO_beaconNotifyIndCB::?relay`,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,021203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC FrameCounterUpdated
        PUBLIC MatchRsps
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_DeviceConfigured
        FUNCTION ZDApp_DeviceConfigured,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_ForceConcentratorChange
        FUNCTION ZDApp_ForceConcentratorChange,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_InitZdoCBFunc
        FUNCTION ZDApp_InitZdoCBFunc,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlReset
        FUNCTION ZDApp_LeaveCtrlReset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0a1203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 43, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NewDeviceList
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_NwkDescListProcessing
        FUNCTION ZDApp_NwkDescListProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 54, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0a1203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 49, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDApp_SendParentAnnce
        FUNCTION ZDApp_SendParentAnnce,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDApp_SetParentAnnceTimer
        FUNCTION ZDApp_SetParentAnnceTimer,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_SetRejoinBackoffDuration
        FUNCTION ZDApp_SetRejoinBackoffDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_SetRejoinScanDuration
        FUNCTION ZDApp_SetRejoinScanDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StoreNwkSecMaterial
        FUNCTION ZDApp_StoreNwkSecMaterial,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDO_NetworkStatusCB
        FUNCTION ZDO_NetworkStatusCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PermitJoinCB
        FUNCTION ZDO_PermitJoinCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBLIC ZDO_beaconNotifyIndCB
        FUNCTION ZDO_beaconNotifyIndCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_258
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_2bc
        PUBWEAK __Constant_4e2
        PUBWEAK __Constant_64
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC prevDevState
        PUBLIC retryCnt
        PUBLIC runtimeChannel
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_HoldDataRequests SYMBOL "APSME_HoldDataRequests"
`??APSME_HoldDataRequests::?relay` SYMBOL "?relay", APSME_HoldDataRequests
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_SearchTCLinkKeyEntry SYMBOL "APSME_SearchTCLinkKeyEntry"
`??APSME_SearchTCLinkKeyEntry::?relay` SYMBOL "?relay", APSME_SearchTCLinkKeyEntry
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
`??APSME_UpdateDeviceReq::?relay` SYMBOL "?relay", APSME_UpdateDeviceReq
AssocMakeListOfRfdChild SYMBOL "AssocMakeListOfRfdChild"
`??AssocMakeListOfRfdChild::?relay` SYMBOL "?relay", AssocMakeListOfRfdChild
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
`??NLME_GetEnergyThreshold::?relay` SYMBOL "?relay", NLME_GetEnergyThreshold
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_InitNV         SYMBOL "NLME_InitNV"
`??NLME_InitNV::?relay` SYMBOL "?relay", NLME_InitNV
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
`??NLME_LeaveRsp::?relay` SYMBOL "?relay", NLME_LeaveRsp
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
`??NLME_NetworkDiscoveryRequest::?relay` SYMBOL "?relay", NLME_NetworkDiscoveryRequest
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_RemoveChild    SYMBOL "NLME_RemoveChild"
`??NLME_RemoveChild::?relay` SYMBOL "?relay", NLME_RemoveChild
NLME_RestoreFromNV  SYMBOL "NLME_RestoreFromNV"
`??NLME_RestoreFromNV::?relay` SYMBOL "?relay", NLME_RestoreFromNV
NLME_SetAssocFlags  SYMBOL "NLME_SetAssocFlags"
`??NLME_SetAssocFlags::?relay` SYMBOL "?relay", NLME_SetAssocFlags
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
`??NLME_SetBroadcastFilter::?relay` SYMBOL "?relay", NLME_SetBroadcastFilter
NLME_SetDefaultNV   SYMBOL "NLME_SetDefaultNV"
`??NLME_SetDefaultNV::?relay` SYMBOL "?relay", NLME_SetDefaultNV
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
`??NLME_SetEnergyThreshold::?relay` SYMBOL "?relay", NLME_SetEnergyThreshold
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
NLME_SetUpdateID    SYMBOL "NLME_SetUpdateID"
`??NLME_SetUpdateID::?relay` SYMBOL "?relay", NLME_SetUpdateID
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
`??NLME_StartRouterRequest::?relay` SYMBOL "?relay", NLME_StartRouterRequest
NLME_UpdateNV       SYMBOL "NLME_UpdateNV"
`??NLME_UpdateNV::?relay` SYMBOL "?relay", NLME_UpdateNV
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
`??RTG_MTORouteReq::?relay` SYMBOL "?relay", RTG_MTORouteReq
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
`??RTG_RemoveRtgEntry::?relay` SYMBOL "?relay", RTG_RemoveRtgEntry
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
`??SSP_ReadNwkActiveKey::?relay` SYMBOL "?relay", SSP_ReadNwkActiveKey
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
`??ZDConfig_InitDescriptors::?relay` SYMBOL "?relay", ZDConfig_InitDescriptors
ZDMatchSendState    SYMBOL "ZDMatchSendState"
`??ZDMatchSendState::?relay` SYMBOL "?relay", ZDMatchSendState
ZDO_Init            SYMBOL "ZDO_Init"
`??ZDO_Init::?relay` SYMBOL "?relay", ZDO_Init
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
`??ZDO_MatchEndDeviceBind::?relay` SYMBOL "?relay", ZDO_MatchEndDeviceBind
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
`??ZDO_ParseBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ParseBindUnbindReq
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
`??ZDO_ParseEndDeviceBindReq::?relay` SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
`??ZDO_ProcessBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ProcessBindUnbindReq
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
`??ZDO_StartDevice::?relay` SYMBOL "?relay", ZDO_StartDevice
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
`??ZDO_UpdateAddrManager::?relay` SYMBOL "?relay", ZDO_UpdateAddrManager
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
`??ZDO_UpdateNwkStatus::?relay` SYMBOL "?relay", ZDO_UpdateNwkStatus
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_ParentAnnce     SYMBOL "ZDP_ParentAnnce"
`??ZDP_ParentAnnce::?relay` SYMBOL "?relay", ZDP_ParentAnnce
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrClearNVKeyValues SYMBOL "ZDSecMgrClearNVKeyValues"
`??ZDSecMgrClearNVKeyValues::?relay` SYMBOL "?relay", ZDSecMgrClearNVKeyValues
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrGenerateRndKey SYMBOL "ZDSecMgrGenerateRndKey"
`??ZDSecMgrGenerateRndKey::?relay` SYMBOL "?relay", ZDSecMgrGenerateRndKey
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
`??ZDSecMgrNewDeviceEvent::?relay` SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
`??ZDSecMgrRequestKeyInd::?relay` SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
`??ZDSecMgrSaveApsLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
`??ZDSecMgrUpdateDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZDSecMgrUpdateTCAddress SYMBOL "ZDSecMgrUpdateTCAddress"
`??ZDSecMgrUpdateTCAddress::?relay` SYMBOL "?relay", ZDSecMgrUpdateTCAddress
ZDSecMgrVerifyKeyInd SYMBOL "ZDSecMgrVerifyKeyInd"
`??ZDSecMgrVerifyKeyInd::?relay` SYMBOL "?relay", ZDSecMgrVerifyKeyInd
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch
bdb_TCjoiningDeviceComplete SYMBOL "bdb_TCjoiningDeviceComplete"
`??bdb_TCjoiningDeviceComplete::?relay` SYMBOL "?relay", bdb_TCjoiningDeviceComplete
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_nwkAssocAttemt  SYMBOL "bdb_nwkAssocAttemt"
`??bdb_nwkAssocAttemt::?relay` SYMBOL "?relay", bdb_nwkAssocAttemt
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
gp_ProxyTblInit     SYMBOL "gp_ProxyTblInit"
`??gp_ProxyTblInit::?relay` SYMBOL "?relay", gp_ProxyTblInit
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwkNeighborRemove   SYMBOL "nwkNeighborRemove"
`??nwkNeighborRemove::?relay` SYMBOL "?relay", nwkNeighborRemove
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_desc_list_free  SYMBOL "nwk_desc_list_free"
`??nwk_desc_list_free::?relay` SYMBOL "?relay", nwk_desc_list_free
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
`??osal_pwrmgr_device::?relay` SYMBOL "?relay", osal_pwrmgr_device
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
`??AddrMgrWriteNVRequest::?relay` SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
`??ZDAppCheckForHoldKey::?relay` SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
`??ZDAppDetermineDeviceType::?relay` SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
`??ZDApp_AnnounceNewAddress::?relay` SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
`??ZDApp_ChangeMatchDescRespPermission::?relay` SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
`??ZDApp_CoordStartPANIDConflictCB::?relay` SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
`??ZDApp_DeviceAuthEvt::?relay` SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_DeviceConfigured SYMBOL "ZDApp_DeviceConfigured"
`??ZDApp_DeviceConfigured::?relay` SYMBOL "?relay", ZDApp_DeviceConfigured
ZDApp_ForceConcentratorChange SYMBOL "ZDApp_ForceConcentratorChange"
`??ZDApp_ForceConcentratorChange::?relay` SYMBOL "?relay", ZDApp_ForceConcentratorChange
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
`??ZDApp_Init::?relay` SYMBOL "?relay", ZDApp_Init
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
`??ZDApp_InitUserDesc::?relay` SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_InitZdoCBFunc SYMBOL "ZDApp_InitZdoCBFunc"
`??ZDApp_InitZdoCBFunc::?relay` SYMBOL "?relay", ZDApp_InitZdoCBFunc
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
`??ZDApp_LeaveCtrlBypass::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
`??ZDApp_LeaveCtrlInit::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlReset SYMBOL "ZDApp_LeaveCtrlReset"
`??ZDApp_LeaveCtrlReset::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlReset
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
`??ZDApp_LeaveCtrlSet::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
`??ZDApp_LeaveCtrlStartup::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
`??ZDApp_LeaveUpdate::?relay` SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
`??ZDApp_NetworkStartEvt::?relay` SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkDescListProcessing SYMBOL "ZDApp_NwkDescListProcessing"
`??ZDApp_NwkDescListProcessing::?relay` SYMBOL "?relay", ZDApp_NwkDescListProcessing
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
`??ZDApp_NwkStateUpdateCB::?relay` SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
`??ZDApp_ProcessMsgCBs::?relay` SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
`??ZDApp_ProcessNetworkJoin::?relay` SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
`??ZDApp_ProcessOSALMsg::?relay` SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
`??ZDApp_ProcessSecEvent::?relay` SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
`??ZDApp_ProcessSecMsg::?relay` SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
`??ZDApp_ReadNetworkRestoreState::?relay` SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
`??ZDApp_RegisterCBs::?relay` SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
`??ZDApp_ResetNwkKey::?relay` SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
`??ZDApp_ResetTimerCancel::?relay` SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNetworkState SYMBOL "ZDApp_RestoreNetworkState"
`??ZDApp_RestoreNetworkState::?relay` SYMBOL "?relay", ZDApp_RestoreNetworkState
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
`??ZDApp_SaveNetworkStateEvt::?relay` SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
`??ZDApp_SaveNwkKey::?relay` SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
`??ZDApp_SecInit::?relay` SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
`??ZDApp_SendEventMsg::?relay` SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
`??ZDApp_SendMsg::?relay` SYMBOL "?relay", ZDApp_SendMsg
ZDApp_SendParentAnnce SYMBOL "ZDApp_SendParentAnnce"
`??ZDApp_SendParentAnnce::?relay` SYMBOL "?relay", ZDApp_SendParentAnnce
ZDApp_SetParentAnnceTimer SYMBOL "ZDApp_SetParentAnnceTimer"
`??ZDApp_SetParentAnnceTimer::?relay` SYMBOL "?relay", ZDApp_SetParentAnnceTimer
ZDApp_SetRejoinBackoffDuration SYMBOL "ZDApp_SetRejoinBackoffDuration"
`??ZDApp_SetRejoinBackoffDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinBackoffDuration
ZDApp_SetRejoinScanDuration SYMBOL "ZDApp_SetRejoinScanDuration"
`??ZDApp_SetRejoinScanDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinScanDuration
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
`??ZDApp_StartJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
`??ZDApp_StopJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_StoreNwkSecMaterial SYMBOL "ZDApp_StoreNwkSecMaterial"
`??ZDApp_StoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_StoreNwkSecMaterial
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
`??ZDApp_event_loop::?relay` SYMBOL "?relay", ZDApp_event_loop
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
`??ZDO_AddrChangeIndicationCB::?relay` SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
`??ZDO_ConcentratorIndicationCB::?relay` SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
`??ZDO_JoinConfirmCB::?relay` SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
`??ZDO_JoinIndicationCB::?relay` SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
`??ZDO_LeaveCnf::?relay` SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
`??ZDO_LeaveInd::?relay` SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
`??ZDO_ManytoOneFailureIndicationCB::?relay` SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
`??ZDO_NetworkDiscoveryConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
`??ZDO_NetworkFormationConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_NetworkStatusCB SYMBOL "ZDO_NetworkStatusCB"
`??ZDO_NetworkStatusCB::?relay` SYMBOL "?relay", ZDO_NetworkStatusCB
ZDO_PermitJoinCB    SYMBOL "ZDO_PermitJoinCB"
`??ZDO_PermitJoinCB::?relay` SYMBOL "?relay", ZDO_PermitJoinCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
`??ZDO_PollConfirmCB::?relay` SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
`??ZDO_SrcRtgIndCB::?relay` SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
`??ZDO_StartRouterConfirmCB::?relay` SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
`??ZDO_SyncIndicationCB::?relay` SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
`??ZDO_UpdateDeviceIndication::?relay` SYMBOL "?relay", ZDO_UpdateDeviceIndication
ZDO_beaconNotifyIndCB SYMBOL "ZDO_beaconNotifyIndCB"
`??ZDO_beaconNotifyIndCB::?relay` SYMBOL "?relay", ZDO_beaconNotifyIndCB

        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_HoldDataRequests::?relay`
        FUNCTION `??APSME_HoldDataRequests::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_SearchTCLinkKeyEntry::?relay`
        FUNCTION `??APSME_SearchTCLinkKeyEntry::?relay`,00H
        EXTERN `??APSME_UpdateDeviceReq::?relay`
        FUNCTION `??APSME_UpdateDeviceReq::?relay`,00H
        EXTERN `??AssocMakeListOfRfdChild::?relay`
        FUNCTION `??AssocMakeListOfRfdChild::?relay`,00H
        EXTERN `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetEnergyThreshold::?relay`
        FUNCTION `??NLME_GetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_InitNV::?relay`
        FUNCTION `??NLME_InitNV::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveRsp::?relay`
        FUNCTION `??NLME_LeaveRsp::?relay`,00H
        EXTERN `??NLME_NetworkDiscoveryRequest::?relay`
        FUNCTION `??NLME_NetworkDiscoveryRequest::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_RemoveChild::?relay`
        FUNCTION `??NLME_RemoveChild::?relay`,00H
        EXTERN `??NLME_RestoreFromNV::?relay`
        FUNCTION `??NLME_RestoreFromNV::?relay`,00H
        EXTERN `??NLME_SetAssocFlags::?relay`
        FUNCTION `??NLME_SetAssocFlags::?relay`,00H
        EXTERN `??NLME_SetBroadcastFilter::?relay`
        FUNCTION `??NLME_SetBroadcastFilter::?relay`,00H
        EXTERN `??NLME_SetDefaultNV::?relay`
        FUNCTION `??NLME_SetDefaultNV::?relay`,00H
        EXTERN `??NLME_SetEnergyThreshold::?relay`
        FUNCTION `??NLME_SetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??NLME_SetUpdateID::?relay`
        FUNCTION `??NLME_SetUpdateID::?relay`,00H
        EXTERN `??NLME_StartRouterRequest::?relay`
        FUNCTION `??NLME_StartRouterRequest::?relay`,00H
        EXTERN `??NLME_UpdateNV::?relay`
        FUNCTION `??NLME_UpdateNV::?relay`,00H
        EXTERN `??RTG_MTORouteReq::?relay`
        FUNCTION `??RTG_MTORouteReq::?relay`,00H
        EXTERN `??RTG_RemoveRtgEntry::?relay`
        FUNCTION `??RTG_RemoveRtgEntry::?relay`,00H
        EXTERN `??SSP_ReadNwkActiveKey::?relay`
        FUNCTION `??SSP_ReadNwkActiveKey::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDConfig_InitDescriptors::?relay`
        FUNCTION `??ZDConfig_InitDescriptors::?relay`,00H
        EXTERN `??ZDMatchSendState::?relay`
        FUNCTION `??ZDMatchSendState::?relay`,00H
        EXTERN `??ZDO_Init::?relay`
        FUNCTION `??ZDO_Init::?relay`,00H
        EXTERN `??ZDO_MatchEndDeviceBind::?relay`
        FUNCTION `??ZDO_MatchEndDeviceBind::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseBindUnbindReq::?relay`
        FUNCTION `??ZDO_ParseBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_ParseEndDeviceBindReq::?relay`
        FUNCTION `??ZDO_ParseEndDeviceBindReq::?relay`,00H
        EXTERN `??ZDO_ProcessBindUnbindReq::?relay`
        FUNCTION `??ZDO_ProcessBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_StartDevice::?relay`
        FUNCTION `??ZDO_StartDevice::?relay`,00H
        EXTERN `??ZDO_UpdateAddrManager::?relay`
        FUNCTION `??ZDO_UpdateAddrManager::?relay`,00H
        EXTERN `??ZDO_UpdateNwkStatus::?relay`
        FUNCTION `??ZDO_UpdateNwkStatus::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,00H
        EXTERN `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,00H
        EXTERN `??ZDP_ParentAnnce::?relay`
        FUNCTION `??ZDP_ParentAnnce::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZDSecMgrClearNVKeyValues::?relay`
        FUNCTION `??ZDSecMgrClearNVKeyValues::?relay`,00H
        EXTERN `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,00H
        EXTERN `??ZDSecMgrGenerateRndKey::?relay`
        FUNCTION `??ZDSecMgrGenerateRndKey::?relay`,00H
        EXTERN `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,00H
        EXTERN `??ZDSecMgrNewDeviceEvent::?relay`
        FUNCTION `??ZDSecMgrNewDeviceEvent::?relay`,00H
        EXTERN `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,00H
        EXTERN `??ZDSecMgrRequestKeyInd::?relay`
        FUNCTION `??ZDSecMgrRequestKeyInd::?relay`,00H
        EXTERN `??ZDSecMgrSaveApsLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveApsLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrUpdateDeviceInd::?relay`
        FUNCTION `??ZDSecMgrUpdateDeviceInd::?relay`,00H
        EXTERN `??ZDSecMgrUpdateTCAddress::?relay`
        FUNCTION `??ZDSecMgrUpdateTCAddress::?relay`,00H
        EXTERN `??ZDSecMgrVerifyKeyInd::?relay`
        FUNCTION `??ZDSecMgrVerifyKeyInd::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,00H
        EXTERN `??bdb_TCjoiningDeviceComplete::?relay`
        FUNCTION `??bdb_TCjoiningDeviceComplete::?relay`,00H
        EXTERN `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,00H
        EXTERN `??bdb_nwkAssocAttemt::?relay`
        FUNCTION `??bdb_nwkAssocAttemt::?relay`,00H
        EXTERN `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,00H
        EXTERN `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,00H
        EXTERN `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,00H
        EXTERN `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,00H
        EXTERN `??gp_ProxyTblInit::?relay`
        FUNCTION `??gp_ProxyTblInit::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwkNeighborRemove::?relay`
        FUNCTION `??nwkNeighborRemove::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_desc_list_free::?relay`
        FUNCTION `??nwk_desc_list_free::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_pwrmgr_device::?relay`
        FUNCTION `??osal_pwrmgr_device::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,00H
        EXTERN `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_HoldDataRequests
        FUNCTION APSME_HoldDataRequests,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SearchTCLinkKeyEntry
        FUNCTION APSME_SearchTCLinkKeyEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeListOfRfdChild
        FUNCTION AssocMakeListOfRfdChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GP_CheckAnnouncedDeviceGCB
        EXTERN GP_aliasConflictAnnce
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetAssocFlags
        FUNCTION NLME_SetAssocFlags,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetDefaultNV
        FUNCTION NLME_SetDefaultNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetUpdateID
        FUNCTION NLME_SetUpdateID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_UpdateNV
        FUNCTION NLME_UpdateNV,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN NwkDescList
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDMatchSendState
        FUNCTION ZDMatchSendState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ParentAnnce
        FUNCTION ZDP_ParentAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_TransID
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrClearNVKeyValues
        FUNCTION ZDSecMgrClearNVKeyValues,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrGenerateRndKey
        FUNCTION ZDSecMgrGenerateRndKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateTCAddress
        FUNCTION ZDSecMgrUpdateTCAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrVerifyKeyInd
        FUNCTION ZDSecMgrVerifyKeyInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN aExtendedAddress
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbCommissioningProcedureState
        EXTERN bdb_TCjoiningDeviceComplete
        FUNCTION bdb_TCjoiningDeviceComplete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_nwkAssocAttemt
        FUNCTION bdb_nwkAssocAttemt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setFN
        FUNCTION bdb_setFN,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN epList
        EXTERN gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        EXTERN gMIN_TREE_LQI
        EXTERN gp_ProxyTblInit
        FUNCTION gp_ProxyTblInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_TaskID
        EXTERN matchED
        EXTERN nwkFrameCounter
        EXTERN nwkFrameCounterChanges
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborRemove
        FUNCTION nwkNeighborRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_free
        FUNCTION nwk_desc_list_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_clear_event
        FUNCTION osal_clear_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pZDNwkMgr_ProcessDataConfirm
        EXTERN pbindRemoveDev
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN savedQueuedPollRate
        EXTERN savedResponseRate
        EXTERN zgApsLinkKeyType
        EXTERN zgChildAgingEnable
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDefaultRejoinBackoff
        EXTERN zgDefaultRejoinScan
        EXTERN zgDeviceLogicalType
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPollRate
        EXTERN zgQueuedPollRate
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgRejoinPollRate
        EXTERN zgResponsePollRate
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
//    4   Revision:       $Revision: 44520 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMAC.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66    
//   67 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   68 #include "gp_common.h"
//   69 #endif
//   70    
//   71 #include "bdb.h"
//   72 #include "bdb_interface.h"
//   73 
//   74 #include "ssp.h"
//   75 
//   76 /* HAL */
//   77 #include "hal_led.h"
//   78 #include "hal_lcd.h"
//   79 #include "hal_key.h"
//   80 
//   81 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   82   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   83 #endif
//   84 
//   85 /*********************************************************************
//   86  * CONSTANTS
//   87  */
//   88 
//   89 #if !defined( NWK_START_DELAY )
//   90   #define NWK_START_DELAY             100   // in milliseconds
//   91 #endif
//   92 
//   93 #if !defined( LEAVE_RESET_DELAY )
//   94   #define LEAVE_RESET_DELAY           5000  // in milliseconds
//   95 #endif
//   96 
//   97 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   98   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   99 #endif
//  100 
//  101 #if !defined( BEACON_REQUEST_DELAY )
//  102   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//  103 #endif
//  104 
//  105 #if !defined( BEACON_REQ_DELAY_MASK )
//  106   #define BEACON_REQ_DELAY_MASK       0x007F
//  107 #endif
//  108 
//  109 #define MAX_RESUME_RETRY            3
//  110 
//  111 #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
//  112 
//  113 // Beacon Order Settings (see NLMEDE.h)
//  114 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  115 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  116 
//  117 // Leave control bits
//  118 #define ZDAPP_LEAVE_CTRL_INIT 0
//  119 #define ZDAPP_LEAVE_CTRL_SET  1
//  120 #define ZDAPP_LEAVE_CTRL_RA   2
//  121 
//  122 // Address Manager Stub Implementation
//  123 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  124 
//  125 
//  126 #if !defined ZDO_NV_SAVE_RFDs
//  127 #define ZDO_NV_SAVE_RFDs  TRUE
//  128 #endif
//  129 
//  130 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  131 #if ZDO_NV_SAVE_RFDs
//  132 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  133 #else
//  134 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  135 #endif
//  136 
//  137 // Timeout value to process New Devices
//  138 #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
//  139 
//  140 
//  141 //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
//  142 #if defined ( ZDP_BIND_VALIDATION )
//  143 #if !defined MAX_PENDING_BIND_REQ
//  144 #define MAX_PENDING_BIND_REQ 3
//  145 #endif
//  146 #endif
//  147 
//  148 #ifdef LEGACY_ZDO_LEDS
//  149 #define zdoHalLedSet HalLedSet
//  150 #else
//  151 #define zdoHalLedSet(...)
//  152 #endif
//  153 
//  154 /******************************************************************************
//  155  * TYPEDEFS
//  156  */
//  157 typedef struct
//  158 {
//  159   void   *next;
//  160   uint16 shortAddr;
//  161   uint16 timeDelta;
//  162 } ZDAppNewDevice_t;
//  163 
//  164 /*********************************************************************
//  165  * GLOBAL VARIABLES
//  166  */
//  167 
//  168 #if defined( LCD_SUPPORTED )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169   uint8 MatchRsps = 0;
MatchRsps:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  170 #endif
//  171 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  173 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  177 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 uint8 continueJoining = TRUE;
continueJoining:
        DATA8
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  181 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  183 
//  184 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  188 
//  189 #if defined ( ZDP_BIND_VALIDATION )
//  190 ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
//  191 #endif
//  192 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  193 uint32 runtimeChannel;
runtimeChannel:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 uint8 FrameCounterUpdated = FALSE;
FrameCounterUpdated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  195 /*********************************************************************
//  196  * EXTERNAL VARIABLES
//  197  */
//  198 
//  199 extern bool    requestNewTrustCenterLinkKey;
//  200 extern uint32  requestLinkKeyTimeout;
//  201 extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
//  202 /*********************************************************************
//  203  * EXTERNAL FUNCTIONS
//  204  */
//  205 
//  206 /*********************************************************************
//  207  * LOCAL FUNCTIONS
//  208  */
//  209 void ZDApp_NetworkStartEvt( void );
//  210 void ZDApp_DeviceAuthEvt( void );
//  211 void ZDApp_SaveNetworkStateEvt( void );
//  212 
//  213 uint8 ZDApp_ReadNetworkRestoreState( void );
//  214 uint8 ZDApp_RestoreNetworkState( void );
//  215 void ZDAppDetermineDeviceType( void );
//  216 void ZDApp_InitUserDesc( void );
//  217 void ZDAppCheckForHoldKey( void );
//  218 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  219 void ZDApp_ProcessNetworkJoin( void );
//  220 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  221 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  222 networkDesc_t* ZDApp_NwkDescListProcessing(void);
//  223 
//  224 void ZDApp_SecInit( uint8 state );
//  225 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  226 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  227 
//  228 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  229 
//  230 void ZDApp_ResetTimerStart( uint16 delay );
//  231 void ZDApp_ResetTimerCancel( void );
//  232 void ZDApp_LeaveCtrlInit( void );
//  233 void ZDApp_LeaveCtrlSet( uint8 ra );
//  234 uint8 ZDApp_LeaveCtrlBypass( void );
//  235 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  236 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
//  237 void ZDApp_NodeProfileSync( uint8 stackProfile );
//  238 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  239 void ZDApp_RegisterCBs( void );
//  240 void ZDApp_InitZdoCBFunc(void);
//  241 #if defined ( ZDP_BIND_VALIDATION )
//  242 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
//  243 void ZDApp_InitPendingBind( void );
//  244 void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
//  245 void ZDApp_AgeOutPendingBindEntry( void );
//  246 #endif
//  247 
//  248 void ZDApp_SetParentAnnceTimer( void );
//  249 void ZDApp_StoreNwkSecMaterial(void);
//  250 
//  251 /*********************************************************************
//  252  * LOCAL VARIABLES
//  253  */
//  254 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  255 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  256 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  257 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  258 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  259 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  260 devStates_t devState = DEV_HOLD;
devState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  261 
//  262 // previous rejoin state

        RSEG XDATA_I:XDATA:NOROOT(0)
//  263   devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
prevDevState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for prevDevState>`
        REQUIRE __INIT_XDATA_I
//  264 
//  265 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
//  266   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
//  267   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  268                         // to parent. Set to make the device do an Orphan scan.
//  269 #else
//  270   // Set the default to coodinator

        RSEG XDATA_I:XDATA:NOROOT(0)
//  271   devStartModes_t devStartMode = MODE_HARD;
devStartMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devStartMode>`
        REQUIRE __INIT_XDATA_I
//  272 #endif
//  273 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  274 uint8 retryCnt = 0;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  275 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  276 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DATA8
        DS 7
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  277 {
//  278   ZDO_EP,
//  279   0,
//  280   &ZDAppTaskID,
//  281   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  282   (afNetworkLatencyReq_t)0            // No Network Latency req
//  283 };
//  284 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  285 uint32 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DATA32
        DS 4
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  286 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  287 ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
ZDApp_NewDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  288 
//  289 /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  290 static uint8 zdappHoldKeys;
zdappHoldKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  291 
//  292 /*********************************************************************
//  293  * @fn      ZDApp_Init
//  294  *
//  295  * @brief   ZDApp Initialization function.
//  296  *
//  297  * @param   task_id - ZDApp Task ID
//  298  *
//  299  * @return  None
//  300  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  301 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDApp_Init
        CODE
//  302 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitZdoCBFunc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  303   // Save the task ID
//  304   ZDAppTaskID = task_id;
        MOV       DPTR,#ZDAppTaskID
        MOVX      @DPTR,A
//  305 
//  306   // Initialize the ZDO global device short address storage
//  307   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV       DPTR,#ZDAppNwkAddr + 8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  308   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV       DPTR,#ZDAppNwkAddr
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  309   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
//  310 
//  311   // Initialize ZDO items and setup the device - type of device to create.
//  312   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
//  313 
//  314   // Register the endpoint description with the AF
//  315   // This task doesn't have a Simple description, but we still need
//  316   // to register the endpoint.
//  317   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,#ZDApp_epDesc & 0xff
        MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  318 
//  319 #if defined( ZDO_USERDESC_RESPONSE )
//  320   ZDApp_InitUserDesc();
//  321 #endif // ZDO_USERDESC_RESPONSE
//  322 
//  323   // Initialize the ZDO callback function pointers zdoCBFunc[]
//  324   ZDApp_InitZdoCBFunc();
        ; Setup parameters for call to function ZDApp_InitZdoCBFunc
        LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
//  325 
//  326   ZDApp_RegisterCBs();
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
//  327 
//  328 #if defined ( ZDP_BIND_VALIDATION )
//  329 #if defined ( REFLECTOR )
//  330   ZDApp_InitPendingBind();
//  331 #endif
//  332 #endif
//  333 } /* ZDApp_Init() */
        LJMP      ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  334 
//  335 /*********************************************************************
//  336  * @fn          ZDApp_SecInit
//  337  *
//  338  * @brief       ZDApp initialize security.
//  339  *
//  340  * @param       state - device initialization state
//  341  *
//  342  * @return      none
//  343  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  344 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDApp_SecInit
        CODE
//  345 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,R1
//  346   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  347 
//  348   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  349   {
//  350     // Set the Trust Center bit
//  351     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
        MOVX      A,@DPTR
        ORL       A,#0x1
        MOVX      @DPTR,A
//  352   }
//  353 
//  354   // Initialize ZigBee Device Security Manager
//  355   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
//  356 
//  357   if ( ZG_SECURE_ENABLED )
//  358   {
//  359     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
        MOV       A,?V0
        JZ        ??ZDApp_SecInit_0
//  360     {
//  361       if( _NIB.nwkKeyLoaded == FALSE )
        MOV       DPTR,#_NIB + 61
        MOVX      A,@DPTR
        JNZ       ??ZDApp_SecInit_0
//  362       {
//  363         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  364              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  365         {
//  366             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
//  367             SSP_UpdateNwkKey( zgPreConfigKey, 0);
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
//  368             SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       R1,#0x0
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
//  369 
//  370             // clear local copy of key
//  371             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  372         }
//  373       }
//  374     }
//  375 
//  376     // clean the new devices list when Security module is initialized
//  377     if ( ZDApp_NewDeviceList != NULL )
??ZDApp_SecInit_0:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_121:
        JZ        ??ZDApp_SecInit_1
//  378     {
//  379       ZDAppNewDevice_t *pNewDeviceNext;
//  380 
//  381       while ( ZDApp_NewDeviceList )
//  382       {
//  383         pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
??ZDApp_SecInit_2:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  384         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        LCALL     ?Subroutine24 & 0xFFFF
//  385         ZDApp_NewDeviceList = pNewDeviceNext;
//  386       }
??CrossCallReturnLabel_14:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
        MOV       R1,A
        MOV       A,R6
        ORL       A,R1
        JNZ       ??ZDApp_SecInit_2
//  387     }
//  388   }
//  389 }
??ZDApp_SecInit_1:
        MOV       A,#0x10
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ZDApp_ProcessSecEvent
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ZDApp_SecInit
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function ZDApp_ProcessSecEvent
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  390 
//  391 /*********************************************************************
//  392  * @fn      ZDApp_event_loop()
//  393  *
//  394  * @brief   Main event loop for Zigbee device objects task. This function
//  395  *          should be called at periodic intervals.
//  396  *
//  397  * @param   task_id - Task ID
//  398  * @param   events  - Bitmap of events
//  399  *
//  400  * @return  none
//  401  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  402 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZDApp_event_loop
        CODE
//  403 {
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SendParentAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StartJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StopJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SaveNetworkStateEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessSecEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  404   uint8 *msg_ptr;
//  405 
//  406   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??ZDApp_event_loop_0
//  407   {
//  408     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  409     {
//  410       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  411 
//  412       // Release the memory
//  413       osal_msg_deallocate( msg_ptr );
//  414     }
//  415 
//  416     // Return unprocessed events
//  417     return (events ^ SYS_EVENT_MSG);
//  418   }
//  419 
//  420   if ( events & ZDO_NETWORK_INIT )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??ZDApp_event_loop_1
//  421   {
//  422     // Initialize apps and start the network
//  423     ZDApp_ChangeState( DEV_INIT );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x1
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  424 
//  425     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  426                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV       R4,#0xf
        MOV       R3,#0xf
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R1,A
        LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
//  427 
//  428     // Return unprocessed events
//  429     return (events ^ ZDO_NETWORK_INIT);
        MOV       A,R6
        XRL       A,#0x1
        LJMP      ??ZDApp_event_loop_2 & 0xFFFF
//  430   }
??ZDApp_event_loop_3:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??ZDApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       ??ZDApp_event_loop_3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??ZDApp_event_loop_4 & 0xFFFF
//  431 
//  432   if ( ZSTACK_ROUTER_BUILD )
//  433   {
//  434     if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_1:
        ANL       A,#0x2
        JZ        ??ZDApp_event_loop_5
//  435     {
//  436       ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        LCALL     `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
//  437 
//  438       // Return unprocessed events
//  439       return (events ^ ZDO_NETWORK_START);
        MOV       A,R6
        XRL       A,#0x2
        LJMP      ??ZDApp_event_loop_2 & 0xFFFF
//  440     }
//  441 
//  442     if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_5:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??ZDApp_event_loop_6
//  443     {
//  444       if ( nwkStatus == ZSuccess )
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_event_loop_7
//  445       {
//  446         if ( devState == DEV_END_DEVICE )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??ZDApp_event_loop_8
//  447         {
//  448           ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  449         }
//  450 
//  451         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_8:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV       R1,#0x0
        LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
//  452 
//  453         if ( zgChildAgingEnable == TRUE )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_event_loop_7
//  454         {
//  455           // Once the device has changed its state to a ROUTER set the timer to send
//  456           // Parent annce
//  457           ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
//  458         }
//  459       }
//  460       else
//  461       {
//  462         // remain as end device
//  463       }
//  464       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_7:
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
//  465 
//  466       // Return unprocessed events
//  467       return (events ^ ZDO_ROUTER_START);
??CrossCallReturnLabel_138:
        MOV       A,R6
        XRL       A,#0x20
        SJMP      ??ZDApp_event_loop_2
//  468     }
//  469 
//  470     if ( events & ZDO_PARENT_ANNCE_EVT )
??ZDApp_event_loop_6:
        MOV       A,R3
        ANL       A,#0x40
        JZ        ??ZDApp_event_loop_9
//  471     {
//  472       ZDApp_SendParentAnnce();
        ; Setup parameters for call to function ZDApp_SendParentAnnce
        LCALL     `??ZDApp_SendParentAnnce::?relay`; Banked call to: ZDApp_SendParentAnnce
//  473 
//  474       // Return unprocessed events
//  475       return (events ^ ZDO_PARENT_ANNCE_EVT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x40
        LJMP      ??ZDApp_event_loop_4 & 0xFFFF
//  476     }
//  477   }
//  478 
//  479   if( events & ZDO_REJOIN_BACKOFF )
??ZDApp_event_loop_9:
        MOV       A,R3
        ANL       A,#0x20
        JZ        ??ZDApp_event_loop_10
//  480   {
//  481     if( devState == DEV_NWK_BACKOFF )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0xc
        JNZ       ??ZDApp_event_loop_11
//  482     {
//  483       ZDApp_ChangeState(DEV_NWK_DISC);
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x2
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  484       // Restart scan for rejoin
//  485       ZDApp_StartJoiningCycle();
        ; Setup parameters for call to function ZDApp_StartJoiningCycle
        LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
//  486       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#zgDefaultRejoinScan
        SJMP      ??ZDApp_event_loop_12
//  487     }
//  488     else
//  489     {
//  490       // Rejoin backoff, silent period
//  491       ZDApp_ChangeState(DEV_NWK_BACKOFF);
??ZDApp_event_loop_11:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xc
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  492       ZDApp_StopJoiningCycle();
        ; Setup parameters for call to function ZDApp_StopJoiningCycle
        LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
//  493       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#zgDefaultRejoinBackoff
??ZDApp_event_loop_12:
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x0
        MOV       R3,#0x20
//  494     }
        LCALL     ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  495 
//  496     return ( events ^ ZDO_REJOIN_BACKOFF);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        SJMP      ??ZDApp_event_loop_4
//  497   }
//  498 
//  499   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_10:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??ZDApp_event_loop_13
//  500   {
//  501     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
//  502 
//  503     // At start up, do one MTO route discovery if the device is a concentrator
//  504     if ( zgConcentratorEnable == TRUE )
        MOV       DPTR,#zgConcentratorEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_event_loop_14
//  505     {
//  506       // Start next event
//  507       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine61_0 & 0xFFFF
//  508     }
??CrossCallReturnLabel_87:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  509 
//  510     // Return unprocessed events
//  511     return (events ^ ZDO_STATE_CHANGE_EVT);
??ZDApp_event_loop_14:
        MOV       A,R6
        XRL       A,#0x10
??ZDApp_event_loop_2:
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_event_loop_4
//  512   }
//  513 
//  514   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_13:
        MOV       A,R2
        ANL       A,#0x8
        JZ        ??ZDApp_event_loop_15
//  515   {
//  516     // User defined logic
//  517 
//  518     // Return unprocessed events
//  519     return (events ^ ZDO_COMMAND_CNF);
        MOV       A,R2
        XRL       A,#0x8
        MOV       R2,A
        SJMP      ??ZDApp_event_loop_16
//  520   }
//  521 
//  522   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_15:
        MOV       A,R3
        ANL       A,#0x1
        JZ        ??ZDApp_event_loop_17
//  523   {
//  524     // Save only in valid state
//  525     if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
        MOV       DPTR,#_NIB + 35
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x8
        XRL       A,R0
        JZ        ??ZDApp_event_loop_18
        MOV       A,#0x4
        XRL       A,R0
        JNZ       ??ZDApp_event_loop_19
//  526     {
//  527       ZDApp_SaveNetworkStateEvt();
??ZDApp_event_loop_18:
        ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
        LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
//  528     }
//  529 
//  530     // Return unprocessed events
//  531     return (events ^ ZDO_NWK_UPDATE_NV);
??ZDApp_event_loop_19:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x1
??ZDApp_event_loop_4:
        MOV       R3,A
        SJMP      ??ZDApp_event_loop_16
//  532   }
//  533 
//  534   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_17:
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??ZDApp_event_loop_20
//  535   {
//  536 #ifdef ZBA_FALLBACK_NWKKEY
//  537     if ( devState == DEV_END_DEVICE_UNAUTH )
//  538     {
//  539       ZDSecMgrFallbackNwkKey();
//  540     }
//  541     else
//  542 #endif
//  543     {
//  544       // Set the NV startup option to force a "new" join.
//  545       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  546 
//  547       // The device has been in the UNAUTH state, so reset
//  548       // Note: there will be no return from this call
//  549       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL     Onboard_soft_reset & 0xFFFF
//  550     }
//  551   }
//  552 
//  553 #if defined ( ZDP_BIND_VALIDATION )
//  554   if ( events & ZDO_PENDING_BIND_REQ_EVT )
//  555   {
//  556 #if defined ( REFLECTOR )
//  557     ZDApp_AgeOutPendingBindEntry();
//  558 #endif
//  559     // Return unprocessed events
//  560     return (events ^ ZDO_PENDING_BIND_REQ_EVT);
//  561   }
//  562 #endif
//  563 
//  564   if ( ZG_SECURE_ENABLED )
//  565   {
//  566     return ( ZDApp_ProcessSecEvent( task_id, events ) );
??ZDApp_event_loop_20:
        ; Setup parameters for call to function ZDApp_ProcessSecEvent
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
//  567   }
??ZDApp_event_loop_16:
        LJMP      ??Subroutine66_0 & 0xFFFF
//  568   else
//  569   {
//  570     // Discard or make more handlers
//  571     return 0;
//  572   }
//  573 }
          CFI EndBlock cfiBlock11
//  574 
//  575 /*********************************************************************
//  576  * @fn      ZDApp_ProcessSecEvent()
//  577  *
//  578  * @brief   Process incoming security events.
//  579  *
//  580  * @param   task_id - Task ID
//  581  * @param   events  - Bitmap of events
//  582  *
//  583  * @return  none
//  584  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  585 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
        CODE
//  586 {
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrNewDeviceEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_StoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveApsLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  587   (void)task_id;  // Intentionally unreferenced parameter
//  588 
//  589   if ( ZSTACK_ROUTER_BUILD )
//  590   {
//  591     if ( events & ZDO_NEW_DEVICE )
        MOV       A,R2
        ANL       A,#0x40
        JZ        ??ZDApp_ProcessSecEvent_0
//  592     {
//  593       // process the new device event
//  594       if ( ZDApp_NewDeviceList )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_122:
        JZ        ??ZDApp_ProcessSecEvent_1
//  595       {
//  596         ZDAppNewDevice_t *pNewDevice;
//  597         uint16 timeDelta;
//  598 
//  599         (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
        ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
        LCALL     ??Subroutine78_0 & 0xFFFF
??CrossCallReturnLabel_155:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL     `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
//  600 
//  601         pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  602         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        LCALL     ?Subroutine24 & 0xFFFF
//  603         ZDApp_NewDeviceList = pNewDevice;
??CrossCallReturnLabel_15:
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  604 
//  605         if ( pNewDevice )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??ZDApp_ProcessSecEvent_1
//  606         {
//  607           timeDelta = pNewDevice->timeDelta;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine67_0 & 0xFFFF
//  608           pNewDevice = pNewDevice->next;
??CrossCallReturnLabel_94:
        SJMP      ??ZDApp_ProcessSecEvent_2
//  609 
//  610           while ( pNewDevice )
//  611           {
//  612             pNewDevice->timeDelta -= timeDelta;
??ZDApp_ProcessSecEvent_3:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,?V5
        MOVX      @DPTR,A
//  613             pNewDevice = pNewDevice->next;
??ZDApp_ProcessSecEvent_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  614           }
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??ZDApp_ProcessSecEvent_3
//  615 
//  616           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
        ; Setup parameters for call to function osal_start_timerEx
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine15 & 0xFFFF
//  617         }
//  618       }
??CrossCallReturnLabel_81:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  619 
//  620       // Return unprocessed events
//  621       return (events ^ ZDO_NEW_DEVICE);
??ZDApp_ProcessSecEvent_1:
        MOV       A,R6
        XRL       A,#0x40
        SJMP      ??ZDApp_ProcessSecEvent_4
//  622     }
//  623   }
//  624 
//  625   if ( events & ZDO_DEVICE_AUTH )
??ZDApp_ProcessSecEvent_0:
        MOV       A,R2
        ANL       A,#0x80
        JZ        ??ZDApp_ProcessSecEvent_5
//  626   {
//  627     ZDApp_StoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
        LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
//  628     
//  629     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
//  630 
//  631     bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  632     
//  633     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x3
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  634 
//  635     // Return unprocessed events
//  636     return (events ^ ZDO_DEVICE_AUTH);
        MOV       A,R6
        XRL       A,#0x80
??ZDApp_ProcessSecEvent_4:
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_ProcessSecEvent_6
//  637   }
//  638 
//  639   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_5:
        MOV       A,R3
        ANL       A,#0x2
        JZ        ??ZDApp_ProcessSecEvent_7
//  640   {
//  641     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  642 
//  643     // Return unprocessed events
//  644     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x2
        SJMP      ??ZDApp_ProcessSecEvent_6
//  645   }
//  646 
//  647   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_7:
        MOV       A,R3
        ANL       A,#0x8
        JZ        ??ZDApp_ProcessSecEvent_8
//  648   {
//  649 #if defined (NV_RESTORE)
//  650     ZDSecMgrSaveApsLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
        LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
//  651 #endif // (NV_RESTORE)
//  652 
//  653     // Return unprocessed events
//  654     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x8
        SJMP      ??ZDApp_ProcessSecEvent_6
//  655   }
//  656 
//  657   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_8:
        MOV       A,R3
        ANL       A,#0x4
        JZ        ??ZDApp_ProcessSecEvent_9
//  658   {
//  659     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
//  660 
//  661     // Return unprocessed events
//  662     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x4
??ZDApp_ProcessSecEvent_6:
        MOV       R3,A
        SJMP      ??ZDApp_ProcessSecEvent_10
//  663   }
//  664 
//  665   // Discard or make more handlers
//  666   return 0;
??ZDApp_ProcessSecEvent_9:
        MOV       R2,#0x0
        MOV       R3,#0x0
??ZDApp_ProcessSecEvent_10:
        SJMP      ??Subroutine47_0
//  667 }
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDApp_ProcessSecEvent
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       DPTR,#ZDApp_NewDeviceList
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       DPTR,#ZDApp_NewDeviceList
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  668 
//  669 /*********************************************************************
//  670  * Application Functions
//  671  */
//  672 
//  673 /*********************************************************************
//  674  * @fn      ZDOInitDevice
//  675  *
//  676  * @brief   Start the device in the network.  This function will read
//  677  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  678  *   restore the network state of the device.
//  679  *
//  680  * @param   startDelay - timeDelay to start device (in milliseconds).
//  681  *                       There is a jitter added to this delay:
//  682  *                       ((NWK_START_DELAY + startDelay)
//  683  *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  684  *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
//  685  *                       this function will hold the network init. Application
//  686  *                       can start the device.
//  687  * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
//  688  *                       which mode should the device start with (only has effect on 
//  689  *                       Router devices)
//  690  *
//  691  * NOTE:    If the application would like to force a "new" join, the
//  692  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  693  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  694  *          this function. "new" join means to not restore the network
//  695  *          state of the device. Use zgWriteStartupOptions() to set these
//  696  *          options.
//  697  *
//  698  * @return
//  699  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  700  *          restored.
//  701  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  702  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  703  *          it could mean that there was no network state to restore.
//  704  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock16
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  705 uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
ZDOInitDeviceEx:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZDOInitDeviceEx
        CODE
//  706 {
        FUNCALL ZDOInitDeviceEx, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrClearNVKeyValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, gp_ProxyTblInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_ReadNetworkRestoreState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_RestoreNetworkState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_SecInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDeviceEx, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V5,R1
//  707   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV       ?V4,#0x1
//  708   uint16 extendedDelay = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  709   
//  710   if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JNZ       ??ZDOInitDeviceEx_0
//  711   {
//  712     byte temp = FALSE;
        CLR       A
        MOVX      @DPTR,A
//  713     // Initialize the RAM items table, in case an NV item has been updated.
//  714     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV       R1,A
        LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
//  715     
//  716     //Turn off the radio
//  717     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        SJMP      ??ZDOInitDeviceEx_1
//  718   }
//  719   else
//  720   {
//  721     byte temp = TRUE;
??ZDOInitDeviceEx_0:
        MOV       A,#0x1
        MOVX      @DPTR,A
//  722     //Turn on the radio
//  723     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
??ZDOInitDeviceEx_1:
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
//  724   }
//  725 
//  726   ZDConfig_InitDescriptors();
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
//  727   //devtag.071807.todo - fix this temporary solution
//  728   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 14
        MOVX      @DPTR,A
//  729 
//  730 #if defined ( NV_RESTORE )
//  731   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  732   // while booting to skip past NV Restore.
//  733   if ( zdappHoldKeys == SW_BYPASS_NV )
        MOV       DPTR,#zdappHoldKeys
        MOVX      A,@DPTR
        XRL       A,#0x4
        JZ        $+5
        LJMP      ??ZDOInitDeviceEx_2 & 0xFFFF
//  734   {
//  735     zdappHoldKeys = 0;   // Only once
        CLR       A
        MOVX      @DPTR,A
//  736     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  737   }
//  738   else
//  739   {
//  740 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
//  741     if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
//  742     {
//  743       networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
//  744     }
//  745     else
//  746     {
//  747       // Determine if NV should be restored
//  748       networkStateNV = ZDApp_ReadNetworkRestoreState();
//  749     }
//  750 #else
//  751     // Determine if NV should be restored
//  752     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  753 #endif
//  754   }
//  755 
//  756   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  757   {
//  758     networkStateNV = ZDApp_RestoreNetworkState();
//  759 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
//  760     if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
//  761     {
//  762       networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
//  763     }
//  764 #endif
//  765     runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
//  766   }
//  767   else
//  768   {
//  769     // Wipe out the network state in NV
//  770     NLME_InitNV();
??ZDOInitDeviceEx_3:
        ; Setup parameters for call to function NLME_InitNV
        LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
//  771     NLME_SetDefaultNV();
        ; Setup parameters for call to function NLME_SetDefaultNV
        LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
//  772     // clear NWK key values
//  773     ZDSecMgrClearNVKeyValues();
        ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
        LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
//  774   }
//  775 #endif
//  776 
//  777   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
??ZDOInitDeviceEx_4:
        MOV       A,#0x1
        XRL       A,?V4
        JZ        $+5
        LJMP      ??ZDOInitDeviceEx_5 & 0xFFFF
//  778   {
//  779     ZDAppDetermineDeviceType();
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
//  780 
//  781     // Only delay if joining network - not restoring network state
//  782     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  783               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       A,R2
        ANL       A,#0x7f
        MOV       R0,A
        MOV       A,?V6
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,?V7
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x64
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
//  784 
//  785     runtimeChannel = zgDefaultChannelList;
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#runtimeChannel
        LCALL     ?XSTORE_R0123
//  786     
//  787     // Set the NV startup option to force a "new" join.
//  788     zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  789     
//  790 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  791     gp_ProxyTblInit( TRUE );
        ; Setup parameters for call to function gp_ProxyTblInit
        MOV       R1,#0x1
        LCALL     `??gp_ProxyTblInit::?relay`; Banked call to: gp_ProxyTblInit
//  792 #endif
//  793 
//  794     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 20
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  795     _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 23
        DEC       A
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  796     _NIB.nwkPanId = 0xFFFF;
        MOV       DPTR,#_NIB + 33
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  797     osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#(_NIB + 53) & 0xff
        MOV       R3,#((_NIB + 53) >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  798     NLME_SetUpdateID( 0 );
        ; Setup parameters for call to function NLME_SetUpdateID
        MOV       R1,#0x0
        LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
//  799     
//  800     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDOInitDeviceEx_6
//  801     {
//  802       if(1 == mode)
        MOV       A,#0x1
        XRL       A,?V5
        JNZ       ??ZDOInitDeviceEx_7
//  803       {
//  804         //Update TC address as distributed network (TC none)
//  805         ZDSecMgrUpdateTCAddress(0);
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??ZDOInitDeviceEx_8
//  806       }
??ZDOInitDeviceEx_2:
        ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
        LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
        MOV       A,R1
        MOV       ?V4,A
        JZ        $+5
        LJMP      ??ZDOInitDeviceEx_3 & 0xFFFF
        ; Setup parameters for call to function ZDApp_RestoreNetworkState
        LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
        MOV       A,R1
        MOV       ?V4,A
        MOV       ?V0,#0x1
        MOV       ?V1,R6
        MOV       ?V2,R6
        MOV       ?V3,R6
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?L_SHL
        MOV       DPTR,#runtimeChannel
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        MOVX      @DPTR,A
        LJMP      ??ZDOInitDeviceEx_4 & 0xFFFF
//  807       else
//  808       {
//  809         // Centralized mode
//  810         uint8 tmp[Z_EXTADDR_LEN];
//  811         osal_memset(tmp,0x00,Z_EXTADDR_LEN);
??ZDOInitDeviceEx_7:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  812         ZDSecMgrUpdateTCAddress(tmp);
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
??ZDOInitDeviceEx_8:
        LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
//  813       }
//  814     }
//  815 
//  816     // Update NIB in NV
//  817     osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
??ZDOInitDeviceEx_6:
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#_NIB & 0xff
        MOV       ?V1,#(_NIB >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V0,#0x6e
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x21
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  818 
//  819     // Reset the NV startup option to resume from NV by clearing
//  820     // the "New" join option.
//  821     zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  822   
//  823   }
//  824 
//  825   // Initialize the security for type of device
//  826   ZDApp_SecInit( networkStateNV );
??ZDOInitDeviceEx_5:
        ; Setup parameters for call to function ZDApp_SecInit
        MOV       R1,?V4
        LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
//  827 
//  828   if( ZDO_INIT_HOLD_NWK_START != startDelay )
        MOV       A,#-0x1
        XRL       A,?V6
        JNZ       ??ZDOInitDeviceEx_9
        MOV       A,#-0x1
        XRL       A,?V7
??ZDOInitDeviceEx_9:
        JZ        ??ZDOInitDeviceEx_10
//  829   {
//  830     devState = DEV_INIT;    // Remove the Hold state
        MOV       DPTR,#devState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  831 
//  832     // Initialize leave control logic
//  833     ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
//  834 
//  835     // Trigger the network start
//  836     ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
//  837   }
//  838 
//  839   // set broadcast address mask to support broadcast filtering
//  840   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
??ZDOInitDeviceEx_10:
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
//  841 
//  842   return ( networkStateNV );
        MOV       R1,?V4
        MOV       A,#0x9
        LJMP      ?Subroutine2 & 0xFFFF
//  843 }
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ZDApp_ResetNwkKey
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function ZDOInitDeviceEx
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ZDApp_LeaveCtrlSet
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function ZDApp_LeaveCtrlReset
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function ZDApp_SaveNwkKey
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function ZDApp_ResetNwkKey
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function ZDApp_SaveNwkKey
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function ZDOInitDeviceEx
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZDApp_LeaveCtrlSet
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDApp_LeaveCtrlReset
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZDApp_SaveNwkKey
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDApp_ResetNwkKey
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
//  844 
//  845 /*********************************************************************
//  846  * @fn      ZDApp_ReadNetworkRestoreState
//  847  *
//  848  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  849  *          or not to restore the network state.
//  850  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  851  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  852  *
//  853  * @param   none
//  854  *
//  855  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  856  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  857  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  858  *          ZCD_NV_STARTUP_OPTION
//  859  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  860 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function ZDApp_ReadNetworkRestoreState
        CODE
//  861 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ReadNetworkRestoreState, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  862   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV       R6,#0x0
//  863 
//  864   // Look for the New Network State option.
//  865   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV       A,R1
        MOV       R0,A
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_ReadNetworkRestoreState_0
//  866   {
//  867     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV       R6,#0x1
//  868     bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  869   }
//  870 
//  871   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV       A,R6
        MOV       R1,A
        SJMP      ??Subroutine51_0
//  872 }
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x5
          CFI EndBlock cfiBlock38
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock39
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40
//  873 
//  874 /*********************************************************************
//  875  * @fn      ZDAppDetermineDeviceType()
//  876  *
//  877  * @brief   Determines the type of device to start.
//  878  *
//  879  *          Looks at zgDeviceLogicalType and determines what type of
//  880  *          device to start.  The types are:
//  881  *            ZG_DEVICETYPE_COORDINATOR
//  882  *            ZG_DEVICETYPE_ROUTER
//  883  *            ZG_DEVICETYPE_ENDDEVICE
//  884  *
//  885  * @param   none
//  886  *
//  887  * @return  none
//  888  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  889 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function ZDAppDetermineDeviceType
        CODE
//  890 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  891   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JNZ       ??ZDAppDetermineDeviceType_0
//  892   {
//  893     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV       DPTR,#devStartMode
        MOV       A,#0x2
        MOVX      @DPTR,A
//  894     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        SJMP      ??ZDAppDetermineDeviceType_1
//  895   }
//  896   else
//  897   {
//  898     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        MOV       R0,A
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDAppDetermineDeviceType_2
//  899       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV       A,#0x1
        SJMP      ??ZDAppDetermineDeviceType_3
//  900     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDAppDetermineDeviceType_4
//  901       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV       A,#0x2
??ZDAppDetermineDeviceType_3:
        ORL       A,R0
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      @DPTR,A
//  902 
//  903     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  904     // The device shall do rejoin the network. Otherwise, do normal join
//  905     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#AIB_apsUseExtendedPANID & 0xff
        MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        MOV       DPTR,#devStartMode
        JNZ       ??ZDAppDetermineDeviceType_5
//  906     {
//  907       devStartMode = MODE_JOIN;     // Assume joining
        CLR       A
        SJMP      ??ZDAppDetermineDeviceType_1
//  908     }
//  909     else
//  910     {
//  911       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV       A,#0x3
        MOVX      @DPTR,A
//  912       prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV       DPTR,#prevDevState
        INC       A
??ZDAppDetermineDeviceType_1:
        MOVX      @DPTR,A
//  913     }
//  914   }
//  915 }
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock41
//  916 
//  917 /*********************************************************************
//  918  * @fn      ZDApp_NetworkStartEvt()
//  919  *
//  920  * @brief   Process the Network Start Event
//  921  *
//  922  * @param   none
//  923  *
//  924  * @return  none
//  925  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  926 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
        CODE
//  927 {
        FUNCALL ZDApp_NetworkStartEvt, AddrMgrWriteNVRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_StoreNwkSecMaterial
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  928   if ( nwkStatus == ZSuccess )
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_NetworkStartEvt_0
//  929   {
//  930     // Successfully started a ZigBee network
//  931     if ( devState == DEV_COORD_STARTING )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??ZDApp_NetworkStartEvt_1
//  932     {
//  933       //save NIB to NV before child joins if NV_RESTORE is defined
//  934       ZDApp_NwkWriteNVRequest();
        ; Setup parameters for call to function AddrMgrWriteNVRequest
        LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
//  935       ZDApp_ChangeState( DEV_ZB_COORD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  936       
//  937       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x5
        JNZ       ??ZDApp_NetworkStartEvt_2
//  938       {
//  939         bdb_nwkFormationAttempt(TRUE);
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV       R1,#0x1
        LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
//  940         ZDApp_StoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
        LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
        SJMP      ??ZDApp_NetworkStartEvt_3
//  941       }
//  942       else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
??ZDApp_NetworkStartEvt_2:
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??ZDApp_NetworkStartEvt_3
//  943       {
//  944         bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x7
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  945       }
//  946 
//  947       if ( zgChildAgingEnable == TRUE )
??ZDApp_NetworkStartEvt_3:
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_139
//  948       {
//  949         // Once the device has changed its state to a COORDINATOR set the timer to send
//  950         // Parent annce
//  951         ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
        SJMP      ??CrossCallReturnLabel_139
//  952       }
//  953     }
//  954     else
//  955     {
//  956       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
//  957     }
//  958 
//  959     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??CrossCallReturnLabel_139:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV       R1,#0x0
        LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
        SJMP      ??ZDApp_NetworkStartEvt_4
//  960   }
//  961   else
//  962   {
//  963     // Try again with a higher energy threshold
//  964     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV       A,R1
        MOV       R1,#0x0
        ADD       A,#0x10
        JNC       ??ZDApp_NetworkStartEvt_5
        INC       R1
??ZDApp_NetworkStartEvt_5:
        CLR       C
        SUBB      A,#-0x1
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??ZDApp_NetworkStartEvt_6
//  965     {
//  966       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV       A,R1
        MOV       R0,A
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        MOV       A,#0x10
        ADD       A,R1
        MOV       R1,A
        LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
//  967       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x1
        LCALL     ??Subroutine74_0 & 0xFFFF
//  968     }
??CrossCallReturnLabel_144:
        SJMP      ??ZDApp_NetworkStartEvt_4
//  969     else
//  970     {
//  971       bdb_nwkFormationAttempt(FALSE);
??ZDApp_NetworkStartEvt_6:
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV       R1,#0x0
        LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
//  972     }
//  973   }
//  974 }
??ZDApp_NetworkStartEvt_4:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock42
//  975 
//  976 /*********************************************************************
//  977  * @fn      ZDApp_DeviceAuthEvt()
//  978  *
//  979  * @brief   Process the Device Authentic Event
//  980  *
//  981  * @param   none
//  982  *
//  983  * @return  none
//  984  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  985 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
        CODE
//  986 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_StartRouterRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  987   // received authentication from trust center
//  988   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x5
        JNZ       ??ZDApp_DeviceAuthEvt_0
//  989   {
//  990     // Stop the reset timer so it doesn't reset
//  991     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
//  992 
//  993     ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        LCALL     ?Subroutine26 & 0xFFFF
//  994 
//  995     // Set the Power Manager Device
//  996 #if defined ( POWER_SAVING )
//  997     osal_pwrmgr_device( PWRMGR_BATTERY );
//  998 #endif
//  999 
// 1000     if ( ZSTACK_ROUTER_BUILD )
// 1001     {
// 1002       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??CrossCallReturnLabel_133:
        JZ        ??ZDApp_DeviceAuthEvt_1
// 1003       {
// 1004         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1005         NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV       R3,#0x0
        MOV       R2,#0x0
        MOV       R1,#0x0
        LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
// 1006       }
// 1007     }
// 1008 
// 1009     // Notify to save info into NV
// 1010     ZDApp_NVUpdate();
??ZDApp_DeviceAuthEvt_1:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1011 
// 1012     // Save off the security
// 1013     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
// 1014 
// 1015     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     ?Subroutine36 & 0xFFFF
// 1016 
// 1017     if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
// 1018         || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
// 1019           && (zgChildAgingEnable == TRUE) ) )
??CrossCallReturnLabel_27:
        JNC       ??ZDApp_DeviceAuthEvt_2
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_DeviceAuthEvt_3
// 1020     {
// 1021       NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_DeviceAuthEvt_2:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        SJMP      ??ZDApp_DeviceAuthEvt_3
// 1022     }
// 1023   }
// 1024   else
// 1025   {
// 1026     ZDApp_NVUpdate();
??ZDApp_DeviceAuthEvt_0:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 1027   }
// 1028 }
??ZDApp_DeviceAuthEvt_3:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock43
// 1029 
// 1030 /*********************************************************************
// 1031  * @fn      ZDApp_SaveNetworkStateEvt()
// 1032  *
// 1033  * @brief   Process the Save the Network State Event
// 1034  *
// 1035  * @param   none
// 1036  *
// 1037  * @return  none
// 1038  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1039 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function ZDApp_SaveNetworkStateEvt
        CODE
// 1040 {
        FUNCALL ZDApp_SaveNetworkStateEvt, NLME_UpdateNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNetworkStateEvt, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1041 #if defined ( NV_RESTORE )
// 1042  #if defined ( NV_TURN_OFF_RADIO )
// 1043   // Turn off the radio's receiver during an NV update
// 1044   uint8 RxOnIdle;
// 1045   uint8 x = false;
// 1046   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
// 1047   ZMacSetReq( ZMacRxOnIdle, &x );
// 1048  #endif
// 1049 
// 1050   // Update the Network State in NV
// 1051   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
// 1052                  NWK_NV_DEVICELIST_ENABLE |
// 1053                  NWK_NV_BINDING_ENABLE    |
// 1054                  NWK_NV_ADDRMGR_ENABLE );
        ; Setup parameters for call to function NLME_UpdateNV
        MOV       R1,#0xf
        LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
// 1055 
// 1056   // Reset the NV startup option to resume from NV by
// 1057   // clearing the "New" join option.
// 1058   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1059 
// 1060  #if defined ( NV_TURN_OFF_RADIO )
// 1061   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
// 1062  #endif
// 1063 #endif // NV_RESTORE
// 1064 }
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock44
// 1065 
// 1066 #if defined ( NV_RESTORE )
// 1067 /*********************************************************************
// 1068  * @fn      ZDApp_RestoreNetworkState()
// 1069  *
// 1070  * @brief   This function will restore the network state of the
// 1071  *          device if the network state is stored in NV.
// 1072  *
// 1073  * @param   none
// 1074  *
// 1075  * @return
// 1076  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
// 1077  *          restored.
// 1078  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
// 1079  *          This could mean that zgStartupOption said to not restore, or
// 1080  *          it could mean that there was no network state to restore.
// 1081  *
// 1082  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1083 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
        CODE
// 1084 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1085   uint8 nvStat;
// 1086 
// 1087   // Initialize NWK NV items
// 1088   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
        MOV       A,R1
        MOV       R6,A
// 1089 
// 1090   if ( nvStat == SUCCESS )
        JNZ       ??ZDApp_RestoreNetworkState_0
// 1091   {
// 1092     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
        MOV       A,R1
        JZ        ??ZDApp_RestoreNetworkState_1
// 1093     {
// 1094       // Are we a coordinator
// 1095       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       DPTR,#ZDAppNwkAddr
        LCALL     ??Subroutine79_0 & 0xFFFF
// 1096       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
??CrossCallReturnLabel_161:
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        JNZ       ??ZDApp_RestoreNetworkState_2
// 1097       {
// 1098         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        MOVX      @DPTR,A
// 1099       }
// 1100       if(ZG_DEVICE_ENDDEVICE_TYPE) 
??ZDApp_RestoreNetworkState_2:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        MOV       DPTR,#devStartMode
        JNZ       ??ZDApp_RestoreNetworkState_3
// 1101       {
// 1102         devStartMode = MODE_REJOIN;
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1103         _NIB.nwkState = NWK_INIT;
        MOV       DPTR,#_NIB + 35
        CLR       A
        SJMP      ??ZDApp_RestoreNetworkState_4
// 1104       }
// 1105       else
// 1106       {
// 1107         devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_3:
        MOV       A,#0x1
// 1108       }
// 1109       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1110     }
??ZDApp_RestoreNetworkState_4:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_0:
        SJMP      ??ZDApp_RestoreNetworkState_5
// 1111     else
// 1112       nvStat = NV_ITEM_UNINIT;
??ZDApp_RestoreNetworkState_1:
        MOV       R6,#0x9
// 1113 
// 1114     if ( ZG_SECURE_ENABLED )
// 1115     {
// 1116       nwkFrameCounterChanges = 0;
??ZDApp_RestoreNetworkState_5:
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1117 
// 1118       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1119       {
// 1120         ZDApp_RestoreNwkKey( TRUE );
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
// 1121       }
// 1122     }
// 1123 
// 1124     // The default for RxOnWhenIdle is true for Routers and false for end devices
// 1125     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
// 1126     // other than default.
// 1127   }
// 1128 
// 1129   if ( nvStat == ZSUCCESS )
??ZDApp_RestoreNetworkState_0:
        MOV       A,R6
        JNZ       ??ZDApp_RestoreNetworkState_6
// 1130     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV       R1,#0x0
        SJMP      ??ZDApp_RestoreNetworkState_7
// 1131   else
// 1132     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_6:
        MOV       R1,#0x1
??ZDApp_RestoreNetworkState_7:
        LJMP      ??Subroutine51_0 & 0xFFFF
// 1133 }
          CFI EndBlock cfiBlock45
// 1134 #endif // NV_RESTORE
// 1135 
// 1136 /*********************************************************************
// 1137  * @fn      ZDApp_InitUserDesc()
// 1138  *
// 1139  * @brief   Initialize the User Descriptor, the descriptor is read from NV
// 1140  *          when needed.  If you want to initialize the User descriptor to
// 1141  *          something other than all zero, do it here.
// 1142  *
// 1143  * @param   none
// 1144  *
// 1145  * @return  none
// 1146  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1147 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
        CODE
// 1148 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1149   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
// 1150 
// 1151   // Initialize the User Descriptor, the descriptor is read from NV
// 1152   // when needed.  If you want to initialize the User descriptor to something
// 1153   // other than all zero, do it here.
// 1154   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x11
        LCALL     ?Subroutine31 & 0xFFFF
// 1155   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
// 1156          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
??CrossCallReturnLabel_21:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#-0x7f
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_InitUserDesc_0
// 1157   {
// 1158     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
// 1159          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x11
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7f
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_InitUserDesc_0
// 1160     {
// 1161       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??ZDApp_InitUserDesc_0
// 1162       {
// 1163         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.4
        MOVX      @DPTR,A
// 1164       }
// 1165     }
// 1166   }
// 1167 }
??ZDApp_InitUserDesc_0:
        MOV       A,#0x11
        LJMP      ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock46
// 1168 
// 1169 /*********************************************************************
// 1170  * @fn      ZDAppCheckForHoldKey()
// 1171  *
// 1172  * @brief   Check for key to set the device into Hold Auto Start
// 1173  *
// 1174  * @param   none
// 1175  *
// 1176  * @return  none
// 1177  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1178 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function ZDAppCheckForHoldKey
        CODE
// 1179 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1180 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
// 1181 
// 1182   // Get Keypad directly to see if a HOLD is needed
// 1183   zdappHoldKeys = HalKeyRead();
        ; Setup parameters for call to function HalKeyRead
        LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
        MOV       A,R1
        MOV       DPTR,#zdappHoldKeys
        MOVX      @DPTR,A
// 1184 
// 1185   // Hold down the SW_BYPASS_START key (see OnBoard.h)
// 1186   // while booting to avoid starting up the device.
// 1187   if ( zdappHoldKeys == SW_BYPASS_START )
        XRL       A,#0x1
        JNZ       ??ZDAppCheckForHoldKey_0
// 1188   {
// 1189     // Change the device state to HOLD on start up
// 1190     devState = DEV_HOLD;
        MOV       DPTR,#devState
        CLR       A
        MOVX      @DPTR,A
// 1191   }
// 1192 #endif // HAL_KEY
// 1193 }
??ZDAppCheckForHoldKey_0:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock47
// 1194 
// 1195 /*********************************************************************
// 1196  * @fn      ZDApp_ProcessOSALMsg()
// 1197  *
// 1198  * @brief   Process the incoming task message.
// 1199  *
// 1200  * @param   msgPtr - message to process
// 1201  *
// 1202  * @return  none
// 1203  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1204 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
        CODE
// 1205 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessSecMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1206   // Data Confirmation message fields
// 1207   uint8 sentEP;       // This should always be 0
// 1208   uint8 sentStatus;
// 1209   afDataConfirm_t *afDataConfirm;
// 1210 
// 1211 
// 1212   switch ( msgPtr->event )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        DEC       A
        JZ        ??ZDApp_ProcessOSALMsg_0
        DEC       A
        JZ        ??ZDApp_ProcessOSALMsg_0
        ADD       A,#-0x18
        JZ        ??ZDApp_ProcessOSALMsg_1
        ADD       A,#0x47
        JZ        ??ZDApp_ProcessOSALMsg_2
        ADD       A,#-0x2a
        JZ        ??ZDApp_ProcessOSALMsg_3
        SJMP      ??ZDApp_ProcessOSALMsg_4
// 1213   {
// 1214     // Incoming ZDO Message
// 1215     case AF_INCOMING_MSG_CMD:
// 1216       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_1:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
// 1217       break;
        SJMP      ??ZDApp_ProcessOSALMsg_0
// 1218 
// 1219     case ZDO_CB_MSG:
// 1220       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_2:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
// 1221       break;
        SJMP      ??ZDApp_ProcessOSALMsg_0
// 1222 
// 1223     case AF_DATA_CONFIRM_CMD:
// 1224       // This message is received as a confirmation of a data packet sent.
// 1225       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1226       // The message fields are defined in AF.h
// 1227       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1228       sentEP = afDataConfirm->endpoint;
// 1229       sentStatus = afDataConfirm->hdr.status;
// 1230 
// 1231       // Action taken when confirmation is received.
// 1232 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1233       if ( pZDNwkMgr_ProcessDataConfirm )
??ZDApp_ProcessOSALMsg_3:
        MOV       DPTR,#pZDNwkMgr_ProcessDataConfirm
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_113:
        JZ        ??ZDApp_ProcessOSALMsg_0
// 1234         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
        ; Setup parameters for indirect call
        LCALL     ??Subroutine78_0 & 0xFFFF
??CrossCallReturnLabel_156:
        LCALL     ?CALL_IND
        SJMP      ??ZDApp_ProcessOSALMsg_0
// 1235 #endif
// 1236       (void)sentEP;
// 1237       (void)sentStatus;
// 1238       break;
// 1239 
// 1240     case ZDO_NWK_DISC_CNF:
// 1241       if (devState != DEV_NWK_DISC)
// 1242       {
// 1243         break;
// 1244       }
// 1245       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1246       {
// 1247         //Rejoin or resume
// 1248         if(bdb_isDeviceNonFactoryNew()) 
// 1249         {
// 1250           if(bdb_rejoinNwk() == ZSuccess)
// 1251           {
// 1252             return;
// 1253           }
// 1254 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1255           else
// 1256           {
// 1257             if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1258             {
// 1259               bdb_parentLost();
// 1260               return;
// 1261             }
// 1262           }
// 1263 #endif
// 1264         }
// 1265         
// 1266         if(nwk_getNwkDescList())
// 1267         {
// 1268           bdb_nwkDiscoveryAttempt(TRUE);
// 1269         }
// 1270         else
// 1271         {
// 1272           bdb_nwkDiscoveryAttempt(FALSE);
// 1273         }
// 1274       }
// 1275     break;
// 1276 
// 1277     case ZDO_NWK_JOIN_IND:
// 1278       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1279       {
// 1280         if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
// 1281         {
// 1282           bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
// 1283         }
// 1284         ZDApp_ProcessNetworkJoin();
// 1285       }
// 1286       break;
// 1287 
// 1288     default:
// 1289       if ( ZG_SECURE_ENABLED )
// 1290         ZDApp_ProcessSecMsg( msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessSecMsg
        LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
// 1291       break;
// 1292   }
// 1293 
// 1294 }
??ZDApp_ProcessOSALMsg_0:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock48
// 1295 
// 1296 /*********************************************************************
// 1297  * @fn      ZDApp_ProcessMsgCBs()
// 1298  *
// 1299  * @brief   Process response messages
// 1300  *
// 1301  * @param   none
// 1302  *
// 1303  * @return  none
// 1304  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1305 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
        CODE
// 1306 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseEndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 44
        MOV       A,#-0x2c
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1307   switch ( inMsg->clusterID )
        MOV       A,R2
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV       ?V0,R2
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        33
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DW        32802
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_4
        CODE
// 1308   {
// 1309 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1310     case NWK_addr_rsp:
// 1311     case IEEE_addr_rsp:
// 1312       {
// 1313         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1314 
// 1315         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R7,?V1
// 1316         if ( pAddrRsp )
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1317         {
// 1318           if ( pAddrRsp->status == ZSuccess )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessMsgCBs_5
// 1319           {
// 1320             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV       A,R2
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        INC       DPTR
        LCALL     ??Subroutine69_0 & 0xFFFF
// 1321           }
??CrossCallReturnLabel_106:
        LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
// 1322 
// 1323 #if defined ( ZDP_BIND_VALIDATION )
// 1324           // look for pending bind entry for NWK_addr_rsp Only
// 1325           if ( inMsg->clusterID == NWK_addr_rsp )
// 1326           {
// 1327 #if defined ( REFLECTOR )
// 1328             ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
// 1329 #endif
// 1330           }
// 1331 #endif
// 1332 
// 1333           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       A,R7
        SJMP      ??ZDApp_ProcessMsgCBs_6
// 1334         }
// 1335       }
// 1336       break;
// 1337 #endif
// 1338 
// 1339 #if defined ( REFLECTOR )
// 1340     case Bind_req:
// 1341     case Unbind_req:
// 1342       {
// 1343         ZDO_BindUnbindReq_t bindReq;
// 1344         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
// 1345         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
// 1346       }
// 1347       break;
        SJMP      ??ZDApp_ProcessMsgCBs_4
// 1348 #endif
// 1349 
// 1350 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1351     case Bind_rsp:
// 1352     case Unbind_rsp:
// 1353       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
??ZDApp_ProcessMsgCBs_2:
        MOV       DPTR,#matchED
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_114:
        JZ        ??ZDApp_ProcessMsgCBs_4
// 1354       {
// 1355         ZDMatchSendState(
// 1356              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1357              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
        MOV       A,#0x21
        XRL       A,R2
        JNZ       ??ZDApp_ProcessMsgCBs_7
        MOV       A,#-0x80
        XRL       A,R3
??ZDApp_ProcessMsgCBs_7:
        JNZ       ??ZDApp_ProcessMsgCBs_8
        MOV       R1,#0x3
        SJMP      ??ZDApp_ProcessMsgCBs_9
??ZDApp_ProcessMsgCBs_8:
        MOV       R1,#0x2
??ZDApp_ProcessMsgCBs_9:
        ; Setup parameters for call to function ZDMatchSendState
        LCALL     ?Subroutine38 & 0xFFFF
// 1358       }
??CrossCallReturnLabel_29:
        MOV       R3,A
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV       R2,A
        LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
        SJMP      ??ZDApp_ProcessMsgCBs_4
// 1359       break;
// 1360 
// 1361     case End_Device_Bind_req:
// 1362 #ifdef ZDO_ENDDEVICEBIND_RESPONSE
// 1363       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1364       {
// 1365         ZDEndDeviceBind_t bindReq;
// 1366         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_3:
        ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
// 1367         ZDO_MatchEndDeviceBind( &bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
// 1368 
// 1369         // Freeing the cluster lists - if allocated.
// 1370         if ( bindReq.numInClusters )
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??ZDApp_ProcessMsgCBs_10
// 1371           osal_mem_free( bindReq.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1372         if ( bindReq.numOutClusters )
??ZDApp_ProcessMsgCBs_10:
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??ZDApp_ProcessMsgCBs_4
// 1373           osal_mem_free( bindReq.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
??ZDApp_ProcessMsgCBs_6:
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1374       }
// 1375 #endif
// 1376       break;
// 1377 #endif
// 1378   }
// 1379 }
??ZDApp_ProcessMsgCBs_4:
        MOV       A,#0x2c
        LJMP      ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock49
// 1380 
// 1381 /*********************************************************************
// 1382  * @fn      ZDApp_RegisterCBs()
// 1383  *
// 1384  * @brief   Process response messages
// 1385  *
// 1386  * @param   none
// 1387  *
// 1388  * @return  none
// 1389  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1390 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
        CODE
// 1391 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1392 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1393   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        LCALL     ?Subroutine19 & 0xFFFF
// 1394 #endif
// 1395 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1396   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
??CrossCallReturnLabel_55:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x0
        LCALL     ?Subroutine19 & 0xFFFF
// 1397 #endif
// 1398 #if ZG_BUILD_COORDINATOR_TYPE
// 1399   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x21
        LCALL     ?Subroutine19 & 0xFFFF
// 1400   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
??CrossCallReturnLabel_57:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x22
        LCALL     ?Subroutine19 & 0xFFFF
// 1401 #ifdef ZDO_ENDDEVICEBIND_RESPONSE
// 1402   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x20
        MOV       R3,#0x0
        LCALL     ??Subroutine52_0 & 0xFFFF
// 1403 #endif
// 1404 #endif
// 1405 #if defined ( REFLECTOR )
// 1406   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
??CrossCallReturnLabel_59:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x21
        MOV       R3,#0x0
        LCALL     ??Subroutine52_0 & 0xFFFF
// 1407   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
??CrossCallReturnLabel_60:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x22
        MOV       R3,#0x0
        LCALL     ??Subroutine52_0 & 0xFFFF
// 1408 #endif
// 1409 }
??CrossCallReturnLabel_61:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock50

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
          CFI Conditional ??CrossCallReturnLabel_55
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function ZDApp_RegisterCBs
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond52) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond52) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond52) CFA_SP SP+-7
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function ZDApp_RegisterCBs
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond53) CFA_SP SP+-7
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function ZDApp_RegisterCBs
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond54) CFA_SP SP+-7
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOV       R3,#-0x80
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
          CFI Conditional ??CrossCallReturnLabel_59
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function ZDApp_RegisterCBs
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond57) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond57) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond57) CFA_SP SP+-7
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function ZDApp_RegisterCBs
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond58) CFA_SP SP+-7
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function ZDApp_RegisterCBs
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-7
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function ZDApp_RegisterCBs
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond60) CFA_SP SP+-7
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function ZDApp_RegisterCBs
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond61) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond61) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond61) CFA_SP SP+-7
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function ZDApp_RegisterCBs
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond62) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond62) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond62) CFA_SP SP+-7
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63
// 1410 
// 1411 /*********************************************************************
// 1412  * @fn      ZDApp_ProcessSecMsg()
// 1413  *
// 1414  * @brief   Process the incoming security message.
// 1415  *
// 1416  * @param   msgPtr - message to process
// 1417  *
// 1418  * @return  none
// 1419  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1420 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
        CODE
// 1421 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrUpdateDeviceInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrRequestKeyInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, bdb_TCjoiningDeviceComplete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrVerifyKeyInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1422   switch ( msgPtr->event )
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#-0x5
        JZ        ??ZDApp_ProcessSecMsg_0
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??ZDApp_ProcessSecMsg_1 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??ZDApp_ProcessSecMsg_2 & 0xFFFF
        LJMP      ??ZDApp_ProcessSecMsg_3 & 0xFFFF
// 1423   {
// 1424     case ZDO_TRANSPORT_KEY_IND:
// 1425       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1426       {
// 1427         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
// 1428       }
// 1429       break;
// 1430 
// 1431     case ZDO_UPDATE_DEVICE_IND:
// 1432       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1433       {
// 1434         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_0:
        ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
        LCALL     `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
// 1435         
// 1436         // Look at GP proxy table for posible conflict with GPD alias NwkAddr
// 1437 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
// 1438         ZDO_DeviceAnnce_t devAnnce;
// 1439         uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
        MOV       DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1440         
// 1441         osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0x4
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1442         devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
        MOV       A,R6
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1443         
// 1444         // Check GP proxy table to update the entry if necesary
// 1445         if( osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JZ        ??ZDApp_ProcessSecMsg_4
// 1446         {
// 1447           if( osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#gp_TaskID
        LCALL     ??Subroutine77_0 & 0xFFFF
??CrossCallReturnLabel_154:
        JZ        ??ZDApp_ProcessSecMsg_3
// 1448           {
// 1449             if ( osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V0,#GP_aliasConflictAnnce & 0xff
        MOV       ?V1,#(GP_aliasConflictAnnce >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0xb
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JZ        ??ZDApp_ProcessSecMsg_3
// 1450             {
// 1451               osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#gp_TaskID
        LCALL     ??Subroutine65_0 & 0xFFFF
// 1452             }
// 1453           }
// 1454         }
??CrossCallReturnLabel_91:
        SJMP      ??ZDApp_ProcessSecMsg_3
// 1455         else
// 1456         {
// 1457           if(GP_CheckAnnouncedDeviceGCB != NULL)
??ZDApp_ProcessSecMsg_4:
        MOV       DPTR,#GP_CheckAnnouncedDeviceGCB
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_115:
        JZ        ??ZDApp_ProcessSecMsg_3
// 1458           {
// 1459             GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );
        ; Setup parameters for indirect call
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        MOV       DPTR,#GP_CheckAnnouncedDeviceGCB + 1
        LCALL     ??Subroutine78_0 & 0xFFFF
// 1460           }          
// 1461         }
// 1462 #endif
// 1463       }
??CrossCallReturnLabel_157:
        LCALL     ?CALL_IND
        SJMP      ??ZDApp_ProcessSecMsg_3
// 1464       break;
// 1465 
// 1466     case ZDO_REMOVE_DEVICE_IND:
// 1467       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1468       {
// 1469         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1470       }
// 1471       break;
// 1472 
// 1473     case ZDO_REQUEST_KEY_IND:
// 1474       if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
// 1475       {
// 1476         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1477         {
// 1478           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_1:
        ; Setup parameters for call to function ZDSecMgrRequestKeyInd
        LCALL     `??ZDSecMgrRequestKeyInd::?relay`; Banked call to: ZDSecMgrRequestKeyInd
// 1479         }
// 1480       }
// 1481       break;
        SJMP      ??ZDApp_ProcessSecMsg_3
// 1482     case ZDO_VERIFY_KEY_IND:
// 1483 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1484       if(ZG_DEVICE_COORDINATOR_TYPE)
// 1485       {
// 1486         if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
??ZDApp_ProcessSecMsg_2:
        MOV       A,R2
        ADD       A,#0x1d
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessSecMsg_5
// 1487         {
// 1488           bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
        ; Setup parameters for call to function bdb_TCjoiningDeviceComplete
        MOV       A,R2
        ADD       A,#0x5
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??bdb_TCjoiningDeviceComplete::?relay`; Banked call to: bdb_TCjoiningDeviceComplete
// 1489         }
// 1490       }
// 1491   
// 1492       ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_5:
        ; Setup parameters for call to function ZDSecMgrVerifyKeyInd
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrVerifyKeyInd::?relay`; Banked call to: ZDSecMgrVerifyKeyInd
// 1493 #endif
// 1494       break;
// 1495 
// 1496     case ZDO_SWITCH_KEY_IND:
// 1497       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1498       {
// 1499         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
// 1500       }
// 1501       break;
// 1502 
// 1503     default:
// 1504       // Unsupported messages
// 1505       break;
// 1506   }
// 1507 }
??ZDApp_ProcessSecMsg_3:
        MOV       A,#0x13
          CFI EndBlock cfiBlock64
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Valid
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock65

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function ZDApp_StoreNwkSecMaterial
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        MOV       R2,DPL
        MOV       R3,DPH
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ZDApp_SendMsg
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function ZDApp_ProcessSecMsg
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function ZDApp_StoreNwkSecMaterial
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73
// 1508 
// 1509 /*********************************************************************
// 1510  * @fn      ZDApp_ProcessNetworkJoin()
// 1511  *
// 1512  * @brief
// 1513  *
// 1514  *   Save off the Network key information.
// 1515  *
// 1516  * @param   none
// 1517  *
// 1518  * @return  none
// 1519  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1520 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
        CODE
// 1521 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1522   if ( (devState == DEV_NWK_JOINING) ||
// 1523       ((devState == DEV_NWK_ORPHAN)  &&
// 1524        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x3
        JZ        ??ZDApp_ProcessNetworkJoin_0
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??ZDApp_ProcessNetworkJoin_1
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_2
// 1525   {
// 1526     // Result of a Join attempt by this device.
// 1527     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_3
// 1528     {
// 1529       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
// 1530 
// 1531 #if defined ( POWER_SAVING )
// 1532       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1533 #endif
// 1534 
// 1535       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
??CrossCallReturnLabel_140:
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        JNZ       ??ZDApp_ProcessNetworkJoin_4
// 1536       {
// 1537         // wait for auth from trust center
// 1538         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x5
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1539         
// 1540         bdb_nwkAssocAttemt(TRUE);
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV       R1,#0x1
        SJMP      ??ZDApp_ProcessNetworkJoin_5
// 1541       }
// 1542       else
// 1543       {
// 1544         if ( ZSTACK_ROUTER_BUILD )
// 1545         {
// 1546           if ( devState == DEV_NWK_ORPHAN
// 1547             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_4:
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??ZDApp_ProcessNetworkJoin_6
        LCALL     ??Subroutine73_0 & 0xFFFF
??CrossCallReturnLabel_135:
        JZ        ??ZDApp_ProcessNetworkJoin_7
// 1548           {
// 1549             // Change NIB state to router for restore
// 1550             _NIB.nwkState = NWK_ROUTER;
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x8
        MOVX      @DPTR,A
        SJMP      ??ZDApp_ProcessNetworkJoin_7
// 1551           }
// 1552         }
// 1553 
// 1554         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_6:
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDApp_ProcessNetworkJoin_7
// 1555         {
// 1556           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1557           if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_ProcessNetworkJoin_7
// 1558           {
// 1559             bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1560             bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1561           }
// 1562         }
// 1563 
// 1564         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_7:
        ; Setup parameters for call to function ZDApp_ChangeState
        LCALL     ?Subroutine26 & 0xFFFF
// 1565 
// 1566         if ( ZSTACK_ROUTER_BUILD )
// 1567         {
// 1568           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1569           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??CrossCallReturnLabel_134:
        JNZ       $+5
        LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
// 1570           {
// 1571             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV       R3,#0x0
        MOV       R2,#0x0
        MOV       R1,#0x0
        LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
        LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
// 1572           }
// 1573         }
// 1574       }
// 1575     }
// 1576     else
// 1577     {
// 1578 
// 1579       bdb_nwkAssocAttemt(FALSE);
??ZDApp_ProcessNetworkJoin_3:
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV       R1,#0x0
??ZDApp_ProcessNetworkJoin_5:
        LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
        LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
// 1580     }
// 1581   }
// 1582   else if ( devState == DEV_NWK_ORPHAN ||
// 1583             devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
// 1584             devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
// 1585             devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
// 1586             devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
??ZDApp_ProcessNetworkJoin_1:
        MOVX      A,@DPTR
        XRL       A,#0x4
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xe
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xf
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xd
        JZ        $+5
        LJMP      ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
// 1587   {
// 1588     // results of an orphaning attempt by this device
// 1589     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
// 1590     {
// 1591       //When the device has successfully rejoined then reset retryCnt
// 1592       retryCnt = 0;
        MOV       DPTR,#retryCnt
        CLR       A
        MOVX      @DPTR,A
// 1593 
// 1594       // Verify NWK key is available before sending Device_annce
// 1595       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        JNZ       ??ZDApp_ProcessNetworkJoin_10
// 1596       {
// 1597         // wait for auth from trust center
// 1598         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x5
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1599 
// 1600         // Start the reset timer for MAX UNAUTH time
// 1601         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#0x10
        MOV       R3,#0x27
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
        LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
// 1602       }
// 1603       else
// 1604       {
// 1605         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_10:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1606 
// 1607         osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ?Subroutine23 & 0xFFFF
// 1608 
// 1609         // setup Power Manager Device
// 1610 #if defined ( POWER_SAVING )
// 1611         osal_pwrmgr_device( PWRMGR_BATTERY );
// 1612 #endif
// 1613 
// 1614         // The receiver is on, turn network layer polling off.
// 1615         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_89:
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??ZDApp_ProcessNetworkJoin_11
// 1616         {
// 1617           // if Child Table Management process is not enabled
// 1618           if ( zgChildAgingEnable == FALSE )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_11
// 1619           {
// 1620             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1621             NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1622             NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 1623           }
// 1624         }
// 1625 
// 1626         if ( ZSTACK_ROUTER_BUILD )
// 1627         {
// 1628           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1629           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_11:
        LCALL     ??Subroutine73_0 & 0xFFFF
??CrossCallReturnLabel_136:
        JZ        ??ZDApp_ProcessNetworkJoin_12
// 1630           {
// 1631             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV       R3,#0x0
        MOV       R2,#0x0
        MOV       R1,#0x0
        LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
// 1632           }
// 1633         }
// 1634 
// 1635         ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_12:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     ?Subroutine36 & 0xFFFF
// 1636 
// 1637         if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
// 1638             || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
// 1639               && (zgChildAgingEnable == TRUE) ) )
??CrossCallReturnLabel_28:
        JNC       ??ZDApp_ProcessNetworkJoin_13
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_141
// 1640         {
// 1641           if(devStartMode == MODE_REJOIN)
??ZDApp_ProcessNetworkJoin_13:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDApp_ProcessNetworkJoin_14
// 1642           {
// 1643             NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#zgRejoinPollRate
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,?V0
        MOV       R3,A
        CLR       A
        MOV       R4,A
        MOV       R5,A
        SJMP      ??ZDApp_ProcessNetworkJoin_15
// 1644           }
// 1645           else
// 1646           {
// 1647             NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_ProcessNetworkJoin_14:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XLOAD_R2345
??ZDApp_ProcessNetworkJoin_15:
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        SJMP      ??CrossCallReturnLabel_141
// 1648           }
// 1649         }
// 1650       }
// 1651     }
// 1652     else
// 1653     {
// 1654       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_9:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_16
// 1655       {
// 1656         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV       DPTR,#retryCnt
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
        CLR       C
        SUBB      A,#0x4
        JNC       ??ZDApp_ProcessNetworkJoin_17
// 1657         {
// 1658           if ( _NIB.nwkPanId == 0xFFFF )
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??ZDApp_ProcessNetworkJoin_18
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_ProcessNetworkJoin_18:
        JZ        ??ZDApp_ProcessNetworkJoin_19
// 1659             devStartMode = MODE_JOIN;
// 1660           else
// 1661           {
// 1662             devStartMode = MODE_REJOIN;
        MOV       DPTR,#devStartMode
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1663             _tmpRejoinState = true;
        MOV       DPTR,#_tmpRejoinState
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1664             prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV       DPTR,#prevDevState
        MOV       A,#0x4
        SJMP      ??ZDApp_ProcessNetworkJoin_20
// 1665           }
// 1666         }
// 1667         // Do a normal join to the network after certain times of rejoin retries
// 1668         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_17:
        MOV       DPTR,#AIB_apsUseInsecureJoin
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_16
// 1669         {
// 1670           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_19:
        MOV       DPTR,#devStartMode
        CLR       A
??ZDApp_ProcessNetworkJoin_20:
        MOVX      @DPTR,A
// 1671         }
// 1672       }
// 1673       else if(devStartMode == MODE_REJOIN)
// 1674       {
// 1675         if ( ZSTACK_END_DEVICE_BUILD )
// 1676         {
// 1677           devStartMode = MODE_REJOIN;
// 1678           _tmpRejoinState = true;
// 1679           _NIB.nwkState = NWK_INIT;
// 1680 
// 1681           if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
// 1682           {
// 1683             runtimeChannel = MAX_CHANNELS_24GHZ;
// 1684             prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
// 1685           }
// 1686           else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
// 1687           {
// 1688             // Set the flag that will ask the device to do trust center network layer rejoin.
// 1689             _NIB.nwkKeyLoaded = FALSE;
// 1690             ZDApp_ResetNwkKey(); // Clear up the old network key.
// 1691             runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
// 1692             prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
// 1693           }
// 1694           else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
// 1695           {
// 1696             runtimeChannel = MAX_CHANNELS_24GHZ;
// 1697             prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
// 1698           }
// 1699 
// 1700         }
// 1701       }
// 1702 
// 1703       // Clear the neighbor Table and network discovery tables.
// 1704       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_16:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1705       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     ?Subroutine33 & 0xFFFF
// 1706 
// 1707       // setup a retry for later...
// 1708       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1709            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
// 1710     }
// 1711   }
??CrossCallReturnLabel_23:
        SJMP      ??CrossCallReturnLabel_141
// 1712 #if defined ( ZIGBEEPRO )
// 1713   else if ( devState != DEV_HOLD )
??ZDApp_ProcessNetworkJoin_8:
        MOVX      A,@DPTR
        JZ        ??CrossCallReturnLabel_141
// 1714   {
// 1715     // Assume from address conflict
// 1716 
// 1717     // Notify the network
// 1718     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1719 
// 1720     // Notify apps
// 1721     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
// 1722   }
// 1723 #endif
// 1724 }
??CrossCallReturnLabel_141:
        SJMP      ??Subroutine55_0
          CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_27
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_51:
          CFI EndBlock cfiBlock78
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock79
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock80
// 1725 
// 1726 /******************************************************************************
// 1727  * @fn          ZDApp_StoreNwkSecMaterial
// 1728  *
// 1729  * @brief       Stores new entries in the NwkSecMaterial
// 1730  *
// 1731  * @param       none
// 1732  *
// 1733  * @return      none
// 1734  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1735 void ZDApp_StoreNwkSecMaterial(void)
ZDApp_StoreNwkSecMaterial:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
        CODE
// 1736 {
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_StoreNwkSecMaterial, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1737   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1738   uint8 i;
// 1739   uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
// 1740   
// 1741   //Search if we do have security material for this network
// 1742   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV       R6,#0x0
        MOV       ?V0,#(_NIB + 53) & 0xff
        MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
        MOV       ?V2,R6
        SJMP      ??ZDApp_StoreNwkSecMaterial_0
??ZDApp_StoreNwkSecMaterial_1:
        INC       R6
??ZDApp_StoreNwkSecMaterial_0:
        MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
// 1743   {
// 1744     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V4,#0xc
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x75
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1745     {
// 1746       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_StoreNwkSecMaterial_2
// 1747       {
// 1748         break;
// 1749       }
// 1750       if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        ??ZDApp_StoreNwkSecMaterial_1
// 1751       {
// 1752         emptyEntryIndexOffset = i;
        MOV       A,R6
        MOV       R7,A
// 1753         break;
// 1754       }
// 1755     }
// 1756   }
// 1757   
// 1758   //ExtPanID not found and found an empty entry, save the extended PANID
// 1759   if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
// 1760   {
// 1761     osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1762     nwkSecMaterialDesc.FrameCounter = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
// 1763     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
// 1764   }
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R7
        ADD       A,#0x75
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1765 
// 1766 }
??ZDApp_StoreNwkSecMaterial_2:
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock81
// 1767 
// 1768 
// 1769 /*********************************************************************
// 1770  * @fn      ZDApp_SaveNwkKey()
// 1771  *
// 1772  * @brief   Save off the Network key information.
// 1773  *
// 1774  * @param   none
// 1775  *
// 1776  * @return  none
// 1777  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1778 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
        CODE
// 1779 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 33
        MOV       A,#-0x21
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
// 1780   nwkActiveKeyItems keyItems;
// 1781   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1782   uint8 found = 0;
// 1783   uint8 i;
// 1784   
// 1785   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
// 1786 
// 1787   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1788                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V0,#0x15
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
// 1789   
// 1790   //Search for the security material to update its framecounter
// 1791   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV       ?V3,#0x0
        SJMP      ??ZDApp_SaveNwkKey_0
??ZDApp_SaveNwkKey_1:
        INC       ?V3
??ZDApp_SaveNwkKey_0:
        MOV       R6,?V3
        MOV       R7,#0x0
        MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??ZDApp_SaveNwkKey_2 & 0xFFFF
// 1792   {
// 1793     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        MOV       A,R6
        ADD       A,#0x75
        MOV       R6,A
        JNC       ??ZDApp_SaveNwkKey_3
        INC       R7
??ZDApp_SaveNwkKey_3:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
// 1794     {
// 1795       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#(_NIB + 53) & 0xff
        MOV       R2,#((_NIB + 53) >> 8) & 0xff
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       A,R1
        JZ        ??ZDApp_SaveNwkKey_1
// 1796       {
// 1797         nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XSTORE_R0123
// 1798         found = TRUE;
// 1799         //update the framecounter associated to this ExtPanID
// 1800         osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_SaveNwkKey_4
          CFI CFA_XSP16 add(XSP16, 45)
// 1801         break;
// 1802       }
// 1803     }
// 1804   }
// 1805   
// 1806   //If not found, then use the generic
// 1807   if(!found)
// 1808   {
// 1809     osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
??ZDApp_SaveNwkKey_2:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1810     nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XSTORE_R0123
// 1811     //update the framecounter associated to this ExtPanID
// 1812     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V0,#0xc
        MOV       ?V1,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x74
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
??ZDApp_SaveNwkKey_4:
        MOV       R3,A
// 1813   }
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
// 1814   
// 1815   
// 1816   nwkFrameCounterChanges = 0;
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1817   
// 1818   // Clear copy in RAM before return.
// 1819   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,A
        MOV       R1,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1820 
// 1821 }
        MOV       A,#0x21
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock82
// 1822 
// 1823 /*********************************************************************
// 1824  * @fn      ZDApp_ForceConcentratorChange()
// 1825  *
// 1826  * @brief   Force a network concentrator change by resetting
// 1827  *          zgConcentratorEnable and zgConcentratorDiscoveryTime
// 1828  *          from NV and set nwk event.
// 1829  *
// 1830  * @param   none
// 1831  *
// 1832  * @return  none
// 1833  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1834 void ZDApp_ForceConcentratorChange( void )
ZDApp_ForceConcentratorChange:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
        CODE
// 1835 {
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1836   osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#zgConcentratorEnable & 0xff
        MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x32
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1837   osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
        MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x33
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1838 
// 1839   if ( zgConcentratorEnable == TRUE )
        MOV       DPTR,#zgConcentratorEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ForceConcentratorChange_0
// 1840   {
// 1841     // Start next event
// 1842     osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine61_0 & 0xFFFF
// 1843   }
??CrossCallReturnLabel_88:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP      ??CrossCallReturnLabel_92
// 1844   else
// 1845   {
// 1846     // Stop the next event
// 1847     osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
??ZDApp_ForceConcentratorChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine65_0 & 0xFFFF
// 1848   }
// 1849 }
??CrossCallReturnLabel_92:
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function ZDApp_RestoreNwkKey
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function ZDApp_LeaveCtrlInit
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function ZDApp_DeviceConfigured
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function ZDApp_SaveNwkKey
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function ZDApp_InitUserDesc
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function ZDApp_RestoreNwkKey
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function ZDApp_LeaveCtrlInit
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function ZDApp_DeviceConfigured
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100
// 1850 
// 1851 /*********************************************************************
// 1852  * @fn      ZDApp_ResetNwkKey()
// 1853  *
// 1854  * @brief   Reset the Network key information in NV.
// 1855  *
// 1856  * @param   none
// 1857  *
// 1858  * @return  none
// 1859  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1860 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function ZDApp_ResetNwkKey
        CODE
// 1861 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1862   nwkActiveKeyItems keyItems;
// 1863 
// 1864   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        LCALL     ?Subroutine31 & 0xFFFF
// 1865   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1866                 (void *)&keyItems );
??CrossCallReturnLabel_22:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V0,#0x15
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1867 }
        MOV       A,#0x15
        LJMP      ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function ZDApp_ResetNwkKey
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
// 1868 
// 1869 /*********************************************************************
// 1870  * @fn      ZDApp_RestoreNwkSecMaterial()
// 1871  *
// 1872  * @brief   Restore the network frame counter associated to this ExtPanID and 
// 1873  *          increment it if found. This can only happens once per reset
// 1874  *
// 1875  * @param   none
// 1876  *
// 1877  * @return  none
// 1878  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1879 void ZDApp_RestoreNwkSecMaterial(void)
ZDApp_RestoreNwkSecMaterial:
          CFI Block cfiBlock105 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkSecMaterial
        CODE
// 1880 {
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkSecMaterial, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 1881   uint8 Found = FALSE;
// 1882   uint8 i;
// 1883   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 1884   uint8 UpdateFrameCounter = FALSE;
// 1885 
// 1886   //Search if we do have security material for this network
// 1887   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
        MOV       ?V3,#0x0
        SJMP      ??ZDApp_RestoreNwkSecMaterial_0
// 1888   {
// 1889     osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
??ZDApp_RestoreNwkSecMaterial_1:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 1890     {
// 1891       if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#(_NIB + 53) & 0xff
        MOV       R2,#((_NIB + 53) >> 8) & 0xff
        LCALL     ??Subroutine57_0 & 0xFFFF
// 1892       {
// 1893         UpdateFrameCounter = TRUE;
// 1894         Found = TRUE;
// 1895         break;
// 1896       }
// 1897     }
// 1898   }    
??CrossCallReturnLabel_79:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        JNZ       ??ZDApp_RestoreNwkSecMaterial_2
        INC       ?V3
??ZDApp_RestoreNwkSecMaterial_0:
        MOV       A,?V3
        ADD       A,#0x75
        MOV       R6,A
        CLR       A
        ADDC      A,#0x0
        MOV       R7,A
        MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,?V3
        SUBB      A,R0
        JC        ??ZDApp_RestoreNwkSecMaterial_1
// 1899   //Check if we do have frame counter stored in the generic
// 1900   if(!Found)
// 1901   {
// 1902     //The last entry readed has the Generic item, thefore, no need to read it again
// 1903     if(nwkSecMaterialDesc.FrameCounter)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??ZDApp_RestoreNwkSecMaterial_3
??ZDApp_RestoreNwkSecMaterial_2:
        MOV       DPTR,#FrameCounterUpdated
        MOVX      A,@DPTR
        JNZ       ??ZDApp_RestoreNwkSecMaterial_3
// 1904     {
// 1905       UpdateFrameCounter = TRUE;
// 1906     }
// 1907   }  
// 1908 
// 1909   if(UpdateFrameCounter && (!FrameCounterUpdated))
// 1910   {
// 1911     FrameCounterUpdated = TRUE;
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1912     
// 1913     // Increment the frame counter stored in NV
// 1914     nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
// 1915                               NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
        MOV       DPTR,#__Constant_4e2
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
// 1916     
// 1917     nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#nwkFrameCounter
        LCALL     ?XSTORE_R0123
// 1918     
// 1919     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0xc
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 1920     
// 1921     nwkFrameCounterChanges = 0;
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1922   }
// 1923   return;
??ZDApp_RestoreNwkSecMaterial_3:
        MOV       A,#0xc
        LJMP      ??Subroutine62_0 & 0xFFFF
// 1924 }
          CFI EndBlock cfiBlock105

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function ZDApp_ProcessSecMsg
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function ZDApp_RestoreNwkKey
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV       R1,DPL
        MOV       R2,DPH
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ZDApp_ProcessSecMsg
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ZDApp_ProcessSecMsg
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function ZDApp_RestoreNwkKey
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function ZDApp_SaveNwkKey
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function ZDApp_RestoreNwkSecMaterial
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function ZDApp_ProcessSecMsg
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function ZDApp_ProcessSecMsg
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function ZDApp_RestoreNwkKey
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122
// 1925 
// 1926 /*********************************************************************
// 1927  * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
// 1928  *
// 1929  * @brief
// 1930  *
// 1931  *   Save off the Network key information.
// 1932  *
// 1933  * @param   incrFrmCnt - set to true if we want to increment the network
// 1934             frame counter, else set to false
// 1935  *
// 1936  * @return  true if restored from NV, false if not
// 1937  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1938 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
ZDApp_RestoreNwkKey:
          CFI Block cfiBlock123 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkKey
        CODE
// 1939 {
        FUNCALL ZDApp_RestoreNwkKey, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 37
        MOV       A,#-0x25
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 1940   nwkActiveKeyItems keyItems;
// 1941   uint8 ret = FALSE;
        MOV       R6,#0x0
// 1942 
// 1943   ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1944 
// 1945   // Restore the key information
// 1946   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1947       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0x15
        MOV       ?V1,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,R1
        JNZ       ??ZDApp_RestoreNwkKey_0
// 1948   {
// 1949     uint8 nullKey[SEC_KEY_LEN];
// 1950 
// 1951     // initialize default value to compare to
// 1952     osal_memset( nullKey, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        LCALL     ?Subroutine43 & 0xFFFF
// 1953 
// 1954     // if stored key is different than default value, then a key has been established
// 1955     if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
??CrossCallReturnLabel_38:
        MOV       ?V2,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,R1
        JNZ       ??ZDApp_RestoreNwkKey_0
// 1956     {
// 1957       ret = TRUE;
        MOV       R6,#0x1
// 1958 
// 1959       // Clear copy in RAM before return.
// 1960       osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1961     }
// 1962   }
// 1963 
// 1964   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x25
        LJMP      ?Subroutine5 & 0xFFFF
// 1965 }
          CFI EndBlock cfiBlock123

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function ZDApp_ResetNwkKey
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_22
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDApp_RestoreNwkKey
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        RET
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
// 1966 
// 1967 /*********************************************************************
// 1968  * @fn      ZDApp_ResetTimerStart
// 1969  *
// 1970  * @brief   Start the reset timer.
// 1971  *
// 1972  * @param   delay - delay time(ms) before reset
// 1973  *
// 1974  * @return  none
// 1975  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1976 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
          CFI Block cfiBlock128 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
        CODE
// 1977 {
        FUNCALL ZDApp_ResetTimerStart, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1978   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_150:
        JNZ       ??ZDApp_ResetTimerStart_0
// 1979   {
// 1980     // Start the rest timer
// 1981     osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x4
        LCALL     ??Subroutine59_0 & 0xFFFF
// 1982   }
??CrossCallReturnLabel_83:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1983 }
??ZDApp_ResetTimerStart_0:
        SJMP      ??Subroutine63_0
          CFI EndBlock cfiBlock128

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function ZDO_JoinIndicationCB
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        MOV       R2,#0x40
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function ZDApp_NetworkInit
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function ZDApp_ProcessSecEvent
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function ZDO_JoinIndicationCB
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function ZDApp_NVUpdate
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond138) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond138) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond138) CFA_SP SP+-7
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function ZDApp_ResetTimerStart
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function ZDApp_NetworkInit
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function ZDApp_ProcessSecEvent
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function ZDO_JoinIndicationCB
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOV       DPTR,#ZDAppTaskID
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function ZDApp_event_loop
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function ZDApp_NVUpdate
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond147) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond147) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond147) CFA_SP SP+-7
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function ZDApp_ResetTimerStart
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function ZDApp_NetworkInit
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function ZDApp_ProcessSecEvent
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function ZDO_JoinIndicationCB
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x4
          CFI EndBlock cfiBlock153
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiBlock154 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 45)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock154
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiBlock155 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock155
// 1984 
// 1985 /*********************************************************************
// 1986  * @fn      ZDApp_ResetTimerCancel
// 1987  *
// 1988  * @brief   Cancel the reset timer.
// 1989  *
// 1990  * @param   none
// 1991  *
// 1992  * @return  none
// 1993  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1994 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
          CFI Block cfiBlock156 Using cfiCommon0
          CFI Function ZDApp_ResetTimerCancel
        CODE
// 1995 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerCancel, osal_clear_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1996   (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     ?Subroutine23 & 0xFFFF
// 1997   (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
??CrossCallReturnLabel_90:
        ; Setup parameters for call to function osal_clear_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 1998 }
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock156
// 1999 
// 2000 /*********************************************************************
// 2001  * @fn      ZDApp_LeaveCtrlInit
// 2002  *
// 2003  * @brief   Initialize the leave control logic.
// 2004  *
// 2005  * @param   none
// 2006  *
// 2007  * @return  none
// 2008  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2009 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
          CFI Block cfiBlock157 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlInit
        CODE
// 2010 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2011   uint8 status;
// 2012 
// 2013 
// 2014   // Initialize control state
// 2015   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV       DPTR,#ZDApp_LeaveCtrl
        CLR       A
        MOVX      @DPTR,A
// 2016 
// 2017   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 2018                               sizeof(ZDApp_LeaveCtrl),
// 2019                               &ZDApp_LeaveCtrl );
// 2020 
// 2021   if ( status == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JNZ       ??ZDApp_LeaveCtrlInit_0
// 2022   {
// 2023     // Read saved control
// 2024     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 2025                   0,
// 2026                   sizeof( uint8 ),
// 2027                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        LCALL     ?Subroutine32 & 0xFFFF
// 2028   }
??CrossCallReturnLabel_70:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2029 }
??ZDApp_LeaveCtrlInit_0:
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock157
// 2030 
// 2031 /*********************************************************************
// 2032  * @fn      ZDApp_LeaveCtrlSet
// 2033  *
// 2034  * @brief   Set the leave control logic.
// 2035  *
// 2036  * @param   ra - reassociate flag
// 2037  *
// 2038  * @return  none
// 2039  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2040 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
          CFI Block cfiBlock158 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlSet
        CODE
// 2041 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2042   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2043 
// 2044   if ( ra == TRUE )
        XRL       A,R6
        JNZ       ??ZDApp_LeaveCtrlSet_0
// 2045   {
// 2046     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2047   }
// 2048 
// 2049   // Write the leave control
// 2050   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 2051                  0,
// 2052                  sizeof( uint8 ),
// 2053                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        LJMP      ?Subroutine4 & 0xFFFF
// 2054 }
          CFI EndBlock cfiBlock158
// 2055 
// 2056 /*********************************************************************
// 2057  * @fn      ZDApp_LeaveCtrlReset
// 2058  *
// 2059  * @brief   Re-initialize the leave control logic.
// 2060  *
// 2061  * @param   none
// 2062  *
// 2063  * @return  none
// 2064  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2065 void ZDApp_LeaveCtrlReset( void )
ZDApp_LeaveCtrlReset:
          CFI Block cfiBlock159 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlReset
        CODE
// 2066 {
        FUNCALL ZDApp_LeaveCtrlReset, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2067   // Set leave control to initialized state
// 2068   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV       DPTR,#ZDApp_LeaveCtrl
        CLR       A
        MOVX      @DPTR,A
// 2069 
// 2070   // Write initialized control
// 2071   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 2072                 0,
// 2073                 sizeof( uint8 ),
// 2074                 &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_write
        LJMP      ?Subroutine4 & 0xFFFF
// 2075 }
          CFI EndBlock cfiBlock159
// 2076 
// 2077 /*********************************************************************
// 2078  * @fn      ZDApp_LeaveCtrlBypass
// 2079  *
// 2080  * @brief   Check if NV restore should be skipped during a leave reset.
// 2081  *
// 2082  * @param   none
// 2083  *
// 2084  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 2085  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2086 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
          CFI Block cfiBlock160 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlBypass
        CODE
// 2087 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2088   uint8 bypass;
// 2089 
// 2090   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 2091   {
// 2092     bypass = TRUE;
// 2093   }
// 2094   else
// 2095   {
// 2096     bypass = FALSE;
// 2097   }
// 2098 
// 2099   return bypass;
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        CLR       A
        RLC       A
        MOV       R1,A
        SJMP      ??Subroutine64_0
// 2100 }
          CFI EndBlock cfiBlock160
// 2101 
// 2102 /*********************************************************************
// 2103  * @fn      ZDApp_LeaveCtrlStartup
// 2104  *
// 2105  * @brief   Check for startup conditions during a leave reset.
// 2106  *
// 2107  * @param   state      - devState_t determined by leave control logic
// 2108  * @param   startDelay - startup delay
// 2109  *
// 2110  * @return  none
// 2111  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2112 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
          CFI Block cfiBlock161 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlStartup
        CODE
// 2113 {
        FUNCALL ZDApp_LeaveCtrlStartup, ZDApp_LeaveCtrlReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2114   *startDelay = 0;
        MOV       DPL,R4
        MOV       DPH,R5
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2115 
// 2116   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??ZDApp_LeaveCtrlStartup_0
// 2117   {
// 2118     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_LeaveCtrlStartup_1
// 2119     {
// 2120       *startDelay = LEAVE_RESET_DELAY;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x78
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x13
        SJMP      ??ZDApp_LeaveCtrlStartup_2
// 2121     }
// 2122     else
// 2123     {
// 2124       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
??ZDApp_LeaveCtrlStartup_2:
        MOVX      @DPTR,A
// 2125     }
// 2126 
// 2127     // Reset leave control logic
// 2128     ZDApp_LeaveCtrlReset();
        ; Setup parameters for call to function ZDApp_LeaveCtrlReset
        LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
// 2129   }
// 2130 }
??ZDApp_LeaveCtrlStartup_0:
        SJMP      ??Subroutine64_0
          CFI EndBlock cfiBlock161

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock162 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 3)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock162
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiBlock163 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock163
// 2131 
// 2132 /*********************************************************************
// 2133  * @fn      ZDApp_LeaveReset
// 2134  *
// 2135  * @brief   Setup a device reset due to a leave indication/confirm.
// 2136  *
// 2137  * @param   ra - reassociate flag
// 2138  *
// 2139  * @return  none
// 2140  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2141 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
          CFI Block cfiBlock164 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
        CODE
// 2142 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_clear_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2143   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
// 2144 
// 2145   APSME_HoldDataRequests( LEAVE_RESET_DELAY);
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#-0x78
        MOV       R3,#0x13
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 2146 
// 2147   if ( ZSTACK_ROUTER_BUILD )
// 2148   {
// 2149     osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x1
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine65_0 & 0xFFFF
// 2150     osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
??CrossCallReturnLabel_93:
        ; Setup parameters for call to function osal_clear_event
        MOV       R2,#0x0
        MOV       R3,#0x1
        MOV       DPTR,#NWK_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 2151   }
// 2152 
// 2153   if (ZG_DEVICE_ENDDEVICE_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_LeaveReset_0
// 2154   {
// 2155     // Save polling values to be restored after rejoin
// 2156     if ( ra == TRUE )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??ZDApp_LeaveReset_1
// 2157     {
// 2158        ZDApp_SavedPollRate = zgPollRate;
        MOV       DPTR,#zgPollRate
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XSTORE_R0123
// 2159        savedResponseRate = zgResponsePollRate;
        MOV       DPTR,#zgResponsePollRate
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV       DPTR,#savedResponseRate
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2160        savedQueuedPollRate = zgQueuedPollRate;
        MOV       DPTR,#zgQueuedPollRate
        LCALL     ??Subroutine68_0 & 0xFFFF
// 2161     }
??CrossCallReturnLabel_98:
        MOV       DPTR,#savedQueuedPollRate
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2162 
// 2163     // Disable polling
// 2164     NLME_SetPollRate(0);
??ZDApp_LeaveReset_1:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2165     NLME_SetResponseRate(0);
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 2166     NLME_SetQueuedPollRate(0);
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 2167   }
// 2168 
// 2169   if ( ra == TRUE )
??ZDApp_LeaveReset_0:
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??ZDApp_LeaveReset_2
// 2170   {
// 2171     devState = DEV_NWK_DISC;
        MOV       DPTR,#devState
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2172     devStartMode = MODE_REJOIN;
        MOV       DPTR,#devStartMode
        INC       A
        MOVX      @DPTR,A
// 2173     _tmpRejoinState = true;
        MOV       DPTR,#_tmpRejoinState
        MOV       A,#0x1
        LCALL     ?Subroutine8 & 0xFFFF
// 2174 
// 2175     // For rejoin, specify the extended PANID to look for
// 2176     osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 2177 
// 2178     _NIB.nwkState = NWK_DISC;
??CrossCallReturnLabel_1:
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2179      NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     ?Subroutine33 & 0xFFFF
// 2180 
// 2181     ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
// 2182   }
??CrossCallReturnLabel_24:
        SJMP      ??ZDApp_LeaveReset_3
// 2183   else
// 2184   {
// 2185     ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
??ZDApp_LeaveReset_2:
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0x78
        MOV       R3,#0x13
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 2186   }
// 2187 }
??ZDApp_LeaveReset_3:
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock164

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function ZDApp_LeaveReset
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
        ; Setup parameters for call to function osal_rand
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       A,R2
        ANL       A,#0x7f
        ADD       A,#0x64
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond168 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function ZDApp_ResetTimerCancel
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond169) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond169) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond169) CFA_SP SP+-7
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        MOV       DPTR,#ZDAppTaskID
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function ZDApp_LeaveReset
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function ZDApp_ResetTimerCancel
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond175) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond175) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond175) CFA_SP SP+-7
          CFI Block cfiPicker176 Using cfiCommon1
          CFI (cfiPicker176) NoFunction
          CFI (cfiPicker176) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiPicker176

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond177 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function ZDApp_LeaveReset
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker179 Using cfiCommon1
          CFI (cfiPicker179) NoFunction
          CFI (cfiPicker179) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,#(_NIB + 53) & 0xff
        MOV       R5,#((_NIB + 53) >> 8) & 0xff
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        RET
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiPicker179
// 2188 
// 2189 /*********************************************************************
// 2190  * @fn      ZDApp_LeaveUpdate
// 2191  *
// 2192  * @brief   Update local device data related to leaving device.
// 2193  *
// 2194  * @param   nwkAddr        - NWK address of leaving device
// 2195  * @param   extAddr        - EXT address of leaving device
// 2196  * @param   removeChildren - remove children of leaving device
// 2197  * @param   rejoin         - if device will rejoin or not
// 2198  *
// 2199  * @return  none
// 2200  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2201 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
          CFI Block cfiBlock180 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
        CODE
// 2202                         uint8 removeChildren, uint8 rejoin )
// 2203 {
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, nwkNeighborRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, AddrMgrWriteNVRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 26
        MOV       A,#-0x1a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       ?V3,R1
// 2204   uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2205   // Remove Apps Key for leaving device
// 2206   ZDSecMgrDeviceRemoveByExtAddr(extAddr);
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
// 2207 
// 2208   // Clear SECURITY bit from Address Manager
// 2209   ZDSecMgrAddrClear( extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 2210 
// 2211   if ( pbindRemoveDev )
        MOV       DPTR,#pbindRemoveDev
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_116:
        JZ        ??ZDApp_LeaveUpdate_0
// 2212   {
// 2213     zAddrType_t devAddr;
// 2214 
// 2215     // Remove bind entry and all related data
// 2216     devAddr.addrMode = Addr64Bit;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2217     osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R6
        MOV       ?V1,R7
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
// 2218 
// 2219     pbindRemoveDev(&devAddr);
        ; Setup parameters for indirect call
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        MOV       DPTR,#pbindRemoveDev
        MOVX      A,@DPTR
        LCALL     ?Subroutine21 & 0xFFFF
// 2220   }
??CrossCallReturnLabel_159:
        LCALL     ?CALL_IND
// 2221 
// 2222   // Remove if child
// 2223   if ( ZSTACK_ROUTER_BUILD )
// 2224   {
// 2225     // Router shall notify the Trust Center that a child End Device or
// 2226     // a neighbor Router (within radius=1) has left the network
// 2227     APSME_UpdateDeviceReq_t req;
// 2228 
// 2229     // forward authorization to the Trust Center
// 2230     req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
??ZDApp_LeaveUpdate_0:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2231     req.devAddr    = nwkAddr;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
// 2232     req.devExtAddr = extAddr;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2233     req.status = APSME_UD_DEVICE_LEFT;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2234 
// 2235     if ( rejoin == FALSE )
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JNZ       ??ZDApp_LeaveUpdate_1
// 2236     {
// 2237       if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JNZ       ??ZDApp_LeaveUpdate_1
// 2238       {
// 2239         if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2240         {
// 2241           uint8 found;
// 2242           APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
        ; Setup parameters for call to function APSME_GetRequest
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 2243           
// 2244           APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
// 2245           
// 2246           // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 2247           // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 2248           // with legacy Coordinator devices which can only handle one or the other.
// 2249           if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
        MOV       DPTR,#zgApsLinkKeyType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_LeaveUpdate_2
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??ZDApp_LeaveUpdate_2
// 2250           {
// 2251             req.apsSecure = FALSE;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2252 
// 2253             // send and APSME_UPDATE_DEVICE request to the trust center
// 2254             APSME_UpdateDeviceReq( &req );
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        INC       A
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 2255           }
// 2256 
// 2257           // send the message APS encrypted
// 2258           req.apsSecure = TRUE;
??ZDApp_LeaveUpdate_2:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2259 
// 2260           // send and APSME_UPDATE_DEVICE request to the trust center
// 2261           APSME_UpdateDeviceReq( &req );
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 2262         }
// 2263         else
// 2264         {
// 2265           req.apsSecure = FALSE;
// 2266 
// 2267           // send and APSME_UPDATE_DEVICE request to the trust center
// 2268           APSME_UpdateDeviceReq( &req );
// 2269         }
// 2270       }
// 2271     }
// 2272 
// 2273     NLME_RemoveChild( extAddr, removeChildren );
??ZDApp_LeaveUpdate_1:
        ; Setup parameters for call to function NLME_RemoveChild
        MOV       R1,?V3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
// 2274   }
// 2275 
// 2276   // Remove Routing table related entry
// 2277   RTG_RemoveRtgEntry( nwkAddr, 0 );
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV       R1,#0x0
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
// 2278 
// 2279   // Remove entry from neighborTable
// 2280   nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
        ; Setup parameters for call to function nwkNeighborRemove
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
// 2281 
// 2282   // Schedule to save data to NV
// 2283   ZDApp_NwkWriteNVRequest();
        ; Setup parameters for call to function AddrMgrWriteNVRequest
        LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
// 2284 }
        MOV       A,#0x1a
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock180
// 2285 
// 2286 /*********************************************************************
// 2287  * @fn      ZDApp_NetworkDiscoveryReq
// 2288  *
// 2289  * @brief   Request a network discovery.
// 2290  *
// 2291  * @param  scanChannels -
// 2292  * @param  scanDuration -
// 2293  *
// 2294  * @return  ZStatus_t
// 2295  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2296 ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
ZDApp_NetworkDiscoveryReq:
          CFI Block cfiBlock181 Using cfiCommon0
          CFI Function ZDApp_NetworkDiscoveryReq
        CODE
// 2297 {
        FUNCALL ZDApp_NetworkDiscoveryReq, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 2298   // Setup optional filters - tbd
// 2299 
// 2300   // Request NLME network discovery
// 2301   return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
        LJMP      ??Subroutine63_0 & 0xFFFF
// 2302 }
          CFI EndBlock cfiBlock181
// 2303 
// 2304 /*********************************************************************
// 2305  * @fn      ZDApp_JoinReq
// 2306  *
// 2307  * @brief   Request the device to join a parent in a network.
// 2308  *
// 2309  * @param   channel -
// 2310  * @param   panID -
// 2311  *
// 2312  * @return  ZStatus_t
// 2313  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2314 ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
ZDApp_JoinReq:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI Function ZDApp_JoinReq
        CODE
// 2315                          uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
// 2316 {
        FUNCALL ZDApp_JoinReq, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_JoinReq, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 2317   // Sync up the node with the stack profile (In the case where a pro device
// 2318   // joins a non-pro network, or verse versa)
// 2319   ZDApp_NodeProfileSync( stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 2320 
// 2321   // Request NLME Join Request
// 2322   return NLME_JoinRequest(extendedPanID, panID,channel,
// 2323                           ZDO_Config_Node_Descriptor.CapabilityFlags,
// 2324                           chosenParent, parentDepth);
        ; Setup parameters for call to function NLME_JoinRequest
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,?V2
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        LJMP      ?Subroutine6 & 0xFFFF
// 2325 
// 2326 }
          CFI EndBlock cfiBlock182
// 2327 
// 2328 /*********************************************************************
// 2329  * @fn      ZDApp_DeviceConfigured
// 2330  *
// 2331  * @brief   Check to see if the local device is configured (i.e., part
// 2332  *          of a network).
// 2333  *
// 2334  * @param   none
// 2335  *
// 2336  * @return  TRUE if configured. FALSE, otherwise.
// 2337  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2338 uint8 ZDApp_DeviceConfigured( void )
ZDApp_DeviceConfigured:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function ZDApp_DeviceConfigured
        CODE
// 2339 {
        FUNCALL ZDApp_DeviceConfigured, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2340   uint16 nwkAddr = INVALID_NODE_ADDR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        LCALL     ?Subroutine9 & 0xFFFF
// 2341 
// 2342   osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
// 2343                 sizeof( uint16), &nwkAddr );
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x21
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2344 
// 2345   // Does the NIB have anything more than default?
// 2346   return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDApp_DeviceConfigured_0
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_DeviceConfigured_0:
        JNZ       ??ZDApp_DeviceConfigured_1
        MOV       R1,#0x0
        SJMP      ??ZDApp_DeviceConfigured_2
??ZDApp_DeviceConfigured_1:
        MOV       R1,#0x1
??ZDApp_DeviceConfigured_2:
        MOV       A,#0x2
        LJMP      ??Subroutine54_0 & 0xFFFF
// 2347 }
          CFI EndBlock cfiBlock183

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond184 Using cfiCommon0
          CFI Function ZDApp_StoreNwkSecMaterial
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function ZDApp_DeviceConfigured
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker186 Using cfiCommon1
          CFI (cfiPicker186) NoFunction
          CFI (cfiPicker186) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiPicker186
// 2348 
// 2349 /*********************************************************************
// 2350  * CALLBACK FUNCTIONS
// 2351  */
// 2352 
// 2353 
// 2354 /*********************************************************************
// 2355  * @fn      ZDApp_SendEventMsg()
// 2356  *
// 2357  * @brief
// 2358  *
// 2359  *   Sends a Network Join message
// 2360  *
// 2361  * @param  cmd - command ID
// 2362  * @param  len - length (in bytes) of the buf field
// 2363  * @param  buf - buffer for the rest of the message.
// 2364  *
// 2365  * @return  none
// 2366  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2367 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
        CODE
// 2368 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
// 2369   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV       R3,A
        MOV       A,R1
        MOV       R2,A
        LCALL     ?Subroutine29 & 0xFFFF
// 2370 }
??CrossCallReturnLabel_18:
        LJMP      ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock187
// 2371 
// 2372 /*********************************************************************
// 2373  * @fn      ZDApp_SendMsg()
// 2374  *
// 2375  * @brief   Sends a OSAL message
// 2376  *
// 2377  * @param  taskID - Where to send the message
// 2378  * @param  cmd - command ID
// 2379  * @param  len - length (in bytes) of the buf field
// 2380  * @param  buf - buffer for the rest of the message.
// 2381  *
// 2382  * @return  none
// 2383  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2384 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
          CFI Block cfiBlock188 Using cfiCommon0
          CFI Function ZDApp_SendMsg
        CODE
// 2385 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,R2
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       ?V3,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
// 2386   osal_event_hdr_t *msgPtr;
// 2387 
// 2388   // Send the address to the task
// 2389   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        MOV       R6,?V3
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,R3
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
// 2390   if ( msgPtr )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_SendMsg_0
// 2391   {
// 2392     if ( (len > 0) && (buf != NULL) )
        MOV       A,R6
        JZ        ??ZDApp_SendMsg_1
        MOV       A,?V6
        ORL       A,?V7
        JZ        ??ZDApp_SendMsg_1
// 2393       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,?V6
        MOV       ?V1,?V7
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R6
        MOV       R4,A
        MOV       R5,#0x0
        LCALL     ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 2394 
// 2395     msgPtr->event = cmd;
??ZDApp_SendMsg_1:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      @DPTR,A
// 2396     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2397   }
// 2398 }
??ZDApp_SendMsg_0:
        MOV       A,#0x2
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock188
// 2399 
// 2400 /*********************************************************************
// 2401  * Call Back Functions from NWK  - API
// 2402  */
// 2403 
// 2404 /*********************************************************************
// 2405  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2406  *
// 2407  * @brief       This function returns a choice of PAN to join.
// 2408  *
// 2409  * @param       status - return status of the nwk discovery confirm
// 2410  *
// 2411  * @return      ZStatus_t
// 2412  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2413 ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
ZDO_NetworkDiscoveryConfirmCB:
          CFI Block cfiBlock189 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
        CODE
// 2414 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 3)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2415   osal_event_hdr_t msg;
// 2416 
// 2417   // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
// 2418   // Send ZDO_MGMT_NWK_DISC_RSP back
// 2419 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2420   if ( zdappMgmtNwkDiscReqInProgress )
// 2421   {
// 2422     zdappMgmtNwkDiscReqInProgress = false;
// 2423     ZDO_FinishProcessingMgmtNwkDiscReq();
// 2424   }
// 2425   else
// 2426 #endif
// 2427   {
// 2428     // Pass the confirm to another task if it registers the callback
// 2429     // Otherwise, pass the confirm to ZDApp.
// 2430     if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 4
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
// 2431     {
// 2432       zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
        SJMP      ??CrossCallReturnLabel_19
// 2433     }
// 2434     else
// 2435     {
// 2436       // Otherwise, send scan confirm to ZDApp task to proceed
// 2437       msg.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2438 
// 2439       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
        ; Setup parameters for call to function ZDApp_SendMsg
        INC       A
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,#0x1
        LCALL     ?Subroutine29 & 0xFFFF
// 2440     }
// 2441   }
// 2442   return (ZSuccess);
??CrossCallReturnLabel_19:
        MOV       R1,#0x0
        MOV       A,#0x3
        LJMP      ?Subroutine3 & 0xFFFF
// 2443 }  // ZDO_NetworkDiscoveryConfirmCB
          CFI EndBlock cfiBlock189

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond190 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function ZDO_NetworkDiscoveryConfirmCB
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond191) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond191) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond191) CFA_SP SP+-7
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function ZDO_JoinConfirmCB
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
        RET
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193
// 2444 
// 2445 /*********************************************************************
// 2446  * @fn          ZDApp_NwkDescListProcessing
// 2447  *
// 2448  * @brief       This function process the network discovery result and select
// 2449  *              a parent device to join itself.
// 2450  *
// 2451  * @param       none
// 2452  *
// 2453  * @return      ZStatus_t
// 2454  */
// 2455 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2456 networkDesc_t* ZDApp_NwkDescListProcessing(void)
ZDApp_NwkDescListProcessing:
          CFI Block cfiBlock194 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
        CODE
// 2457 {
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_desc_list_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 2458   networkDesc_t *pNwkDesc;
// 2459   uint8 i, ResultCount = 0;
        MOV       ?V3,#0x0
// 2460   uint8 stackProfile;
// 2461   uint8 stackProfilePro;
// 2462   uint8 selected;
// 2463 
// 2464   // Count the number of nwk descriptors in the list
// 2465   pNwkDesc = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
        SJMP      ??CrossCallReturnLabel_127
// 2466   while (pNwkDesc)
// 2467   {
// 2468     ResultCount++;
??ZDApp_NwkDescListProcessing_0:
        INC       ?V3
// 2469     pNwkDesc = pNwkDesc->nextDesc;
        LCALL     ?Subroutine22 & 0xFFFF
// 2470   }
??CrossCallReturnLabel_127:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDApp_NwkDescListProcessing_0
// 2471 
// 2472   // process discovery results
// 2473   stackProfilePro = FALSE;
        MOV       ?V0,#0x0
// 2474   selected = FALSE;
// 2475 
// 2476 
// 2477   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV       ?V2,#0x0
// 2478   {
// 2479     pNwkDesc = nwk_getNwkDescList();
??ZDApp_NwkDescListProcessing_1:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 2480     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV       ?V1,#0x0
        SJMP      ??CrossCallReturnLabel_128
// 2481     {
// 2482        if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 2483       {
// 2484         // If the extended Pan ID is commissioned to a non zero value
// 2485         // Only join the Pan that has match EPID
// 2486         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 2487           continue;
// 2488 
// 2489       }
// 2490       else if ( zgConfigPANID != 0xFFFF )
// 2491       {
// 2492         // PAN Id is preconfigured. check if it matches
// 2493         if ( pNwkDesc->panId != zgConfigPANID )
// 2494           continue;
// 2495       }
// 2496 
// 2497       if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
// 2498       {
// 2499         // check that network is allowing joining
// 2500         if ( ZSTACK_ROUTER_BUILD )
// 2501         {
// 2502           if ( stackProfilePro == FALSE )
// 2503           {
// 2504             if ( !pNwkDesc->routerCapacity )
// 2505             {
// 2506               continue;
// 2507             }
// 2508           }
// 2509           else
// 2510           {
// 2511             if ( !pNwkDesc->deviceCapacity )
// 2512             {
// 2513               continue;
// 2514             }
// 2515           }
// 2516         }
// 2517         else if ( ZSTACK_END_DEVICE_BUILD )
// 2518         {
// 2519           if ( !pNwkDesc->deviceCapacity )
// 2520           {
// 2521             continue;
// 2522           }
// 2523         }
// 2524       }
// 2525 
// 2526       // check version of zigbee protocol
// 2527       if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 2528         continue;
// 2529 
// 2530       // check version of stack profile
// 2531       if ( pNwkDesc->stackProfile != zgStackProfile  )
// 2532       {
// 2533         if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 2534             || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDApp_NwkDescListProcessing_2:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_NwkDescListProcessing_3
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_3
// 2535         {
// 2536           stackProfilePro = TRUE;
??ZDApp_NwkDescListProcessing_4:
        MOV       ?V0,#0x1
// 2537         }
// 2538 
// 2539         if ( stackProfile == 0 )
??ZDApp_NwkDescListProcessing_3:
        MOV       A,?V2
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
??ZDApp_NwkDescListProcessing_6:
        INC       ?V1
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV       A,?V1
        CLR       C
        SUBB      A,?V3
        JC        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDApp_NwkDescListProcessing_8
        ; Setup parameters for call to function sAddrExtCmp
        MOV       A,R6
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JNZ       ??ZDApp_NwkDescListProcessing_9
        SJMP      ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_8:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??ZDApp_NwkDescListProcessing_10
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_NwkDescListProcessing_10:
        JZ        ??ZDApp_NwkDescListProcessing_9
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDApp_NwkDescListProcessing_11:
        JNZ       ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_9:
        MOV       DPTR,#_NIB + 23
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_12
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDApp_NwkDescListProcessing_12:
        JNZ       ??ZDApp_NwkDescListProcessing_13
        MOV       A,#-0x2
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_14
        MOV       A,#-0x1
        XRL       A,R1
??ZDApp_NwkDescListProcessing_14:
        JNZ       ??ZDApp_NwkDescListProcessing_15
??ZDApp_NwkDescListProcessing_13:
        MOV       A,?V0
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        JNZ       ??ZDApp_NwkDescListProcessing_16
        MOVX      A,@DPTR
        JNZ       ??ZDApp_NwkDescListProcessing_15
        LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
??ZDApp_NwkDescListProcessing_16:
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
??ZDApp_NwkDescListProcessing_15:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#_NIB + 17
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??ZDApp_NwkDescListProcessing_5
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
        MOV       A,#0x2
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
        LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
// 2540         {
// 2541           continue;
// 2542         }
// 2543       }
// 2544 
// 2545       break;
// 2546     }
// 2547 
// 2548     if (i < ResultCount)
// 2549     {
// 2550      selected = TRUE;
// 2551       break;
// 2552     }
// 2553 
// 2554     // break if selected or stack profile pro wasn't found
// 2555     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDApp_NwkDescListProcessing_7:
        MOV       A,?V0
        JZ        ??ZDApp_NwkDescListProcessing_17
// 2556     {
// 2557       break;
// 2558     }
// 2559   }
        INC       ?V2
        MOV       A,?V2
        CLR       C
        SUBB      A,#0x2
        JNC       $+5
        LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
// 2560 
// 2561   if ( i == ResultCount )
??ZDApp_NwkDescListProcessing_17:
        MOV       A,?V3
        XRL       A,?V1
        JNZ       ??ZDApp_NwkDescListProcessing_5
// 2562   {
// 2563     nwk_desc_list_free();
        ; Setup parameters for call to function nwk_desc_list_free
        LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
// 2564     return (NULL);   // couldn't find appropriate PAN to join !
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??ZDApp_NwkDescListProcessing_18
// 2565   }
// 2566   else
// 2567   {
// 2568     return (pNwkDesc);
??ZDApp_NwkDescListProcessing_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
// 2569   }
??ZDApp_NwkDescListProcessing_18:
        SJMP      ??Subroutine66_0
// 2570 }
          CFI EndBlock cfiBlock194

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock195 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 40)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock195
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiBlock196 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock196
// 2571 
// 2572 /*********************************************************************
// 2573  * @fn          ZDO_NetworkFormationConfirmCB
// 2574  *
// 2575  * @brief       This function reports the results of the request to
// 2576  *              initialize a coordinator in a network.
// 2577  *
// 2578  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2579  *
// 2580  * @return      none
// 2581  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2582 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
          CFI Block cfiBlock197 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
        CODE
// 2583 {
        FUNCALL ZDO_NetworkFormationConfirmCB, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, NLME_SetAssocFlags
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDSecMgrGenerateRndKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, bdb_nwkFormationAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
// 2584   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2585 
// 2586   if ( Status == ZSUCCESS )
        JZ        $+5
        LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2587   {
// 2588     bdb_setNodeIsOnANetwork(TRUE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 2589     
// 2590     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2591     {
// 2592       // LED on shows Coordinator started
// 2593       zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2594 
// 2595       zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 2596 
// 2597         #if defined ( ZBIT )
// 2598             SIM_SetColor(0xd0ffd0);
// 2599         #endif
// 2600 
// 2601       if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_NetworkFormationConfirmCB_1
// 2602       {
// 2603         ZDApp_ChangeState( DEV_COORD_STARTING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x8
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2604       }
// 2605     }
// 2606 
// 2607     if(ZG_DEVICE_RTR_TYPE)
??ZDO_NetworkFormationConfirmCB_1:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??ZDO_NetworkFormationConfirmCB_2
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2608     {
// 2609       uint8 x;
// 2610       uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
??ZDO_NetworkFormationConfirmCB_2:
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x10
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 2611       
// 2612       if(APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JNZ       $+5
        LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
// 2613       {
// 2614         //Check if we have an extended PANID assigned
// 2615         if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#(_NIB + 53) & 0xff
        MOV       R3,#((_NIB + 53) >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        JNZ       ??ZDO_NetworkFormationConfirmCB_3
// 2616         {
// 2617           //Set the extended PANID as the extended address
// 2618           osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,#aExtendedAddress & 0xff
        MOV       R5,#(aExtendedAddress >> 8) & 0xff
        MOV       R2,#(_NIB + 53) & 0xff
        MOV       R3,#((_NIB + 53) >> 8) & 0xff
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2619         } 
// 2620         
// 2621         ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
??ZDO_NetworkFormationConfirmCB_3:
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x10
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2622         
// 2623         //Set the MAC address
// 2624         ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,#(_NIB + 20) & 0xff
        MOV       R3,#((_NIB + 20) >> 8) & 0xff
        MOV       R1,#0x53
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2625 
// 2626         if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 2627           x = true;
// 2628         else
// 2629           x = false;
        MOV       DPTR,#_NIB + 14
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??ZDO_NetworkFormationConfirmCB_4
        SETB      B.0
        SJMP      ??ZDO_NetworkFormationConfirmCB_5
??ZDO_NetworkFormationConfirmCB_4:
        CLR       B.0
??ZDO_NetworkFormationConfirmCB_5:
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2630         ZMacSetReq( ZMacRxOnIdle, &x );
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 2631 
// 2632         // Change NIB state to router for restore
// 2633         _NIB.nwkState = NWK_ROUTER;
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x8
        MOVX      @DPTR,A
// 2634         NLME_SetAssocFlags();
        ; Setup parameters for call to function NLME_SetAssocFlags
        LCALL     `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
// 2635 
// 2636         //Restore the nwk security material using the generic index
// 2637         ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 2638         
// 2639         //Be sure to store the nwk FrameCounter if
// 2640         if(nwkFrameCounter == 0)
        MOV       DPTR,#nwkFrameCounter
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JNZ       ??ZDO_NetworkFormationConfirmCB_6
// 2641         {
// 2642           nwkFrameCounter = 1;
        MOV       DPTR,#nwkFrameCounter
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2643         }
// 2644         
// 2645         osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
??ZDO_NetworkFormationConfirmCB_6:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#0x3
        LCALL     ??Subroutine75_0 & 0xFFFF
// 2646         
// 2647         ZDSecMgrGenerateRndKey(tmpKey);
??CrossCallReturnLabel_148:
        ; Setup parameters for call to function ZDSecMgrGenerateRndKey
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
// 2648          
// 2649         //Set the nwk key as the default and initialize the keySeqNum
// 2650         SSP_UpdateNwkKey( tmpKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 2651         if ( !_NIB.nwkKeyLoaded )
        MOV       DPTR,#_NIB + 61
        MOVX      A,@DPTR
        JNZ       ??ZDO_NetworkFormationConfirmCB_7
// 2652         {
// 2653           SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       R1,#0x0
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 2654         }
// 2655         
// 2656         // Clear copy in RAM after use 
// 2657         osal_memset(tmpKey,0,SEC_KEY_LEN);
??ZDO_NetworkFormationConfirmCB_7:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2658         
// 2659         //Success formation of distributed nwk
// 2660         bdb_nwkFormationAttempt(TRUE);
        ; Setup parameters for call to function bdb_nwkFormationAttempt
        MOV       R1,#0x1
        LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
// 2661       }
// 2662     }
// 2663   }
// 2664 
// 2665   else
// 2666   {
// 2667     #if defined(BLINK_LEDS)
// 2668       zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2669     #endif
// 2670   }
// 2671 
// 2672 
// 2673   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x2
        LCALL     ??Subroutine74_0 & 0xFFFF
// 2674 }
??CrossCallReturnLabel_145:
        MOV       A,#0x11
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock197
// 2675 
// 2676 /****************************************************************************
// 2677  * @fn          ZDApp_beaconIndProcessing
// 2678  *
// 2679  * @brief       This function processes the incoming beacon indication.
// 2680  *
// 2681  *              When another task (MT or App) is registered to process
// 2682  *              beacon indication themselves, this function will parse the
// 2683  *              beacon payload and pass the beacon descriptor to that task
// 2684  *              If no other tasks registered, this function will process
// 2685  *              the beacon payload and generate the network descriptor link
// 2686  *              list.
// 2687  *
// 2688  * @param
// 2689  *
// 2690  * @return      none
// 2691  *
// 2692  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2693 void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
ZDO_beaconNotifyIndCB:
          CFI Block cfiBlock198 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
        CODE
// 2694 {
        FUNCALL ZDO_beaconNotifyIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2695   // Pass the beacon Indication to another task if it registers the callback
// 2696   // Otherwise, process the beacon notification here.
// 2697   if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 6
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ        ??ZDO_beaconNotifyIndCB_0
// 2698   {
// 2699     zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
        ; Setup parameters for indirect call
        LCALL     ?CALL_IND
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2700   }
// 2701   else
// 2702   {
// 2703     networkDesc_t *pNwkDesc;
// 2704     networkDesc_t *pLastNwkDesc;
// 2705     uint8 found = false;
// 2706 
// 2707     // Add the network to the Network Descriptor List
// 2708     pNwkDesc = NwkDescList;
??ZDO_beaconNotifyIndCB_0:
        MOV       DPTR,#NwkDescList
        LCALL     ??Subroutine71_0 & 0xFFFF
// 2709     pLastNwkDesc = NwkDescList;
??CrossCallReturnLabel_124:
        MOV       DPTR,#NwkDescList
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V7,A
        SJMP      ??CrossCallReturnLabel_129
// 2710     while (pNwkDesc)
// 2711     {
// 2712       if ((pNwkDesc->panId == pBeacon->panID) &&
// 2713           (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
??ZDO_beaconNotifyIndCB_2:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDO_beaconNotifyIndCB_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDO_beaconNotifyIndCB_3:
        JNZ       ??ZDO_beaconNotifyIndCB_4
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??ZDO_beaconNotifyIndCB_5
// 2714       {
// 2715         found = true;
// 2716         break;
// 2717       }
// 2718       pLastNwkDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_4:
        MOV       ?V2,R6
        MOV       ?V3,R7
// 2719       pNwkDesc = pNwkDesc->nextDesc;
        LCALL     ?Subroutine22 & 0xFFFF
// 2720     }
??CrossCallReturnLabel_129:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDO_beaconNotifyIndCB_2
// 2721 
// 2722     // If no existing descriptor found, make a new one and add to the list
// 2723     if (found == false)
// 2724     {
// 2725       pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x16
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 2726       if ( !pNwkDesc )
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2727       {
// 2728         // Memory alloc failed, discard this beacon
// 2729         return;
// 2730       }
// 2731 
// 2732       // Clear the network descriptor
// 2733       osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x16
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2734 
// 2735       // Initialize the descriptor
// 2736       pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
// 2737       pNwkDesc->chosenRouterDepth = 0xFF;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2738 
// 2739       // Save new entry into the descriptor list
// 2740       if ( !NwkDescList )
        MOV       DPTR,#NwkDescList
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_117:
        JNZ       ??ZDO_beaconNotifyIndCB_6
// 2741       {
// 2742         NwkDescList = pNwkDesc;
        MOV       DPTR,#NwkDescList
        SJMP      ??ZDO_beaconNotifyIndCB_7
// 2743       }
// 2744       else
// 2745       {
// 2746         pLastNwkDesc->nextDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_6:
        MOV       A,?V2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
??ZDO_beaconNotifyIndCB_7:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2747       }
// 2748     }
// 2749 
// 2750     // Update the descriptor with the incoming beacon
// 2751     pNwkDesc->stackProfile   = pBeacon->stackProfile;
??ZDO_beaconNotifyIndCB_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_16:
        INC       DPTR
        MOVX      @DPTR,A
// 2752     pNwkDesc->version        = pBeacon->protocolVersion;
        MOV       A,?V0
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?Subroutine10 & 0xFFFF
// 2753     pNwkDesc->logicalChannel = pBeacon->logicalChannel;
??CrossCallReturnLabel_4:
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2754     pNwkDesc->panId          = pBeacon->panID;
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine79_0 & 0xFFFF
// 2755     pNwkDesc->updateId       = pBeacon->updateID;
??CrossCallReturnLabel_162:
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_32:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2756 
// 2757     // Save the extended PAN ID from the beacon payload only if 1.1 version network
// 2758     if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
        MOV       A,R6
        ADD       A,#0xb
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDO_beaconNotifyIndCB_8
// 2759     {
// 2760       osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0xd
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??ZDO_beaconNotifyIndCB_9
// 2761     }
// 2762     else
// 2763     {
// 2764       osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
??ZDO_beaconNotifyIndCB_8:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
??ZDO_beaconNotifyIndCB_9:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#gMIN_TREE_LQI
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDO_beaconNotifyIndCB_10
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
// 2765     }
// 2766 
// 2767     // check if this device is a better choice to join...
// 2768     // ...dont bother checking assocPermit flag is doing a rejoin
// 2769     if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
// 2770         ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JNZ       $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2771     {
// 2772       uint8 selected = FALSE;
??ZDO_beaconNotifyIndCB_10:
        CLR       B.0
// 2773       uint8 capacity = FALSE;
// 2774 
// 2775 #if defined ( ZIGBEEPRO )
// 2776       if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
// 2777             (pBeacon->depth < MAX_NODE_DEPTH)) ||
// 2778           ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
// 2779            (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       A,R6
        ADD       A,#0x9
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R6
        ADD       A,#0xa
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       A,?V0
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,?V3
        CLR       C
        SUBB      A,?V2
        JNC       ??ZDO_beaconNotifyIndCB_11
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x14
        JC        ??ZDO_beaconNotifyIndCB_12
        SJMP      ??ZDO_beaconNotifyIndCB_13
??ZDO_beaconNotifyIndCB_11:
        MOV       A,?V3
        XRL       A,?V2
        JNZ       ??ZDO_beaconNotifyIndCB_13
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,?V2
        JNC       ??ZDO_beaconNotifyIndCB_13
// 2780       {
// 2781         selected = TRUE;
??ZDO_beaconNotifyIndCB_12:
        SETB      B.0
// 2782       }
// 2783 #else
// 2784       if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
// 2785       {
// 2786         selected = TRUE;
// 2787       }
// 2788 #endif
// 2789 
// 2790       if ( ZSTACK_ROUTER_BUILD )
// 2791       {
// 2792         capacity = pBeacon->routerCapacity;
// 2793       }
// 2794       else if ( ZSTACK_END_DEVICE_BUILD )
// 2795       {
// 2796         capacity = pBeacon->deviceCapacity;
// 2797       }
// 2798 
// 2799       if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
??ZDO_beaconNotifyIndCB_13:
        MOV       A,?V0
        ADD       A,#0x6
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        MOVX      A,@DPTR
        JNZ       ??ZDO_beaconNotifyIndCB_14
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV       DPTR,#_NIB + 23
        MOVX      A,@DPTR
        XRL       A,?V4
        JNZ       ??ZDO_beaconNotifyIndCB_15
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V5
??ZDO_beaconNotifyIndCB_15:
        JNZ       ??ZDO_beaconNotifyIndCB_16
??ZDO_beaconNotifyIndCB_14:
        MOV       C,B.0
        JNC       ??ZDO_beaconNotifyIndCB_16
// 2800       {
// 2801         // this is the new chosen router for joining...
// 2802         pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        LCALL     ?Subroutine10 & 0xFFFF
// 2803         pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
??CrossCallReturnLabel_5:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
// 2804         pNwkDesc->chosenRouterDepth       = pBeacon->depth;
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 2805       }
// 2806 
// 2807       if ( pBeacon->deviceCapacity )
??ZDO_beaconNotifyIndCB_16:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??ZDO_beaconNotifyIndCB_17
// 2808         pNwkDesc->deviceCapacity = 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2809 
// 2810       if ( pBeacon->routerCapacity )
??ZDO_beaconNotifyIndCB_17:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        JZ        ??ZDO_beaconNotifyIndCB_1
// 2811         pNwkDesc->routerCapacity = 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2812     }
// 2813   }
// 2814 }
??ZDO_beaconNotifyIndCB_1:
        LJMP      ??Subroutine47_0 & 0xFFFF
          CFI EndBlock cfiBlock198

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond199 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker201 Using cfiCommon1
          CFI (cfiPicker201) NoFunction
          CFI (cfiPicker201) Picker
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiPicker201

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond202 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker204 Using cfiCommon1
          CFI (cfiPicker204) NoFunction
          CFI (cfiPicker204) Picker
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiPicker204

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond205 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker207 Using cfiCommon1
          CFI (cfiPicker207) NoFunction
          CFI (cfiPicker207) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiPicker207
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond208 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        RET
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
          CFI Conditional ??CrossCallReturnLabel_102
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function ZDApp_InMsgCB
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker214 Using cfiCommon1
          CFI (cfiPicker214) NoFunction
          CFI (cfiPicker214) Picker
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_42:
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiPicker214
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function ZDApp_LeaveReset
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function ZDApp_ProcessSecMsg
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function ZDApp_InMsgCB
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker222 Using cfiCommon1
          CFI (cfiPicker222) NoFunction
          CFI (cfiPicker222) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiPicker222

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond223 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function ZDApp_ProcessSecMsg
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_102
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-4
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function ZDApp_InMsgCB
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_103
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-4
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker226 Using cfiCommon1
          CFI (cfiPicker226) NoFunction
          CFI (cfiPicker226) Picker
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiPicker226

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond227 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker229 Using cfiCommon1
          CFI (cfiPicker229) NoFunction
          CFI (cfiPicker229) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiPicker229
// 2815 
// 2816 /*********************************************************************
// 2817  * @fn          ZDO_StartRouterConfirmCB
// 2818  *
// 2819  * @brief       This function reports the results of the request to
// 2820  *              start functioning as a router in a network.
// 2821  *
// 2822  * @param       Status - Result of NLME_StartRouterRequest()
// 2823  *
// 2824  * @return      none
// 2825  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2826 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
          CFI Block cfiBlock230 Using cfiCommon0
          CFI Function ZDO_StartRouterConfirmCB
        CODE
// 2827 {
        FUNCALL ZDO_StartRouterConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 2828   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2829 
// 2830   if ( Status == ZSUCCESS )
        JNZ       ??ZDO_StartRouterConfirmCB_0
// 2831   {
// 2832     // LED on shows Router started
// 2833     zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2834     zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2835     if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_StartRouterConfirmCB_0
// 2836     {
// 2837       ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2838     }
// 2839   }
// 2840 #if defined(BLINK_LEDS)
// 2841   else
// 2842   {
// 2843     zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2844   }
// 2845 #endif
// 2846 
// 2847   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x20
        LCALL     ??Subroutine74_0 & 0xFFFF
// 2848 }
??CrossCallReturnLabel_146:
        LJMP      ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock230
// 2849 
// 2850 /*********************************************************************
// 2851  * @fn          ZDO_JoinConfirmCB
// 2852  *
// 2853  * @brief       This function allows the next higher layer to be notified
// 2854  *              of the results of its request to join itself or another
// 2855  *              device to a network.
// 2856  *
// 2857  * @param       Status - Result of NLME_JoinRequest()
// 2858  *
// 2859  * @return      none
// 2860  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2861 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
          CFI Block cfiBlock231 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
        CODE
// 2862 {
        FUNCALL ZDO_JoinConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
// 2863   (void)PanId;  // remove if this parameter is used.
// 2864 
// 2865   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2866 
// 2867   if ( Status == ZSUCCESS )
        JNZ       ??ZDO_JoinConfirmCB_0
// 2868   {
// 2869     if ( ZSTACK_END_DEVICE_BUILD
// 2870       || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 2871     {
// 2872       neighborEntry_t *pItem;
// 2873 
// 2874       // We don't need the neighbor table entries.
// 2875       // Clear the neighbor Table to remove beacon information
// 2876       nwkNeighborInitTable();
// 2877 
// 2878       // Force a neighbor table entry for the parent
// 2879       pItem = nwkNeighborFindEmptySlot();
// 2880       if ( pItem != NULL )
// 2881       {
// 2882         osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
// 2883         pItem->neighborAddress = _NIB.nwkCoordAddress;
// 2884         osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
// 2885         pItem->panId = _NIB. nwkPanId;
// 2886         pItem->linkInfo.rxLqi = DEF_LQI;
// 2887         pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
// 2888         pItem->linkInfo.txCost = DEF_LINK_COST;
// 2889       }
// 2890     }
// 2891 
// 2892     // LED on shows device joined
// 2893     zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2894     zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2895     if ( (devState == DEV_HOLD) )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_JoinConfirmCB_0
// 2896     {
// 2897       ZDApp_ChangeState( DEV_NWK_JOINING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x3
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2898     }
// 2899 
// 2900     if ( !ZG_SECURE_ENABLED )
// 2901     {
// 2902       // Notify to save info into NV
// 2903       ZDApp_NVUpdate();
// 2904     }
// 2905   }
// 2906   else
// 2907   {
// 2908 #if defined(BLINK_LEDS)
// 2909     zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2910 #endif
// 2911   }
// 2912 
// 2913   // Pass the join confirm to higher layer if callback registered
// 2914   if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
??ZDO_JoinConfirmCB_0:
        MOV       DPTR,#zdoCBFunc + 8
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_118:
        JZ        ??ZDO_JoinConfirmCB_1
// 2915   {
// 2916     zdoJoinCnf_t joinCnf;
// 2917 
// 2918     joinCnf.status = Status;
        MOV       A,R6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2919     joinCnf.deviceAddr = _NIB.nwkDevAddress;
        MOV       DPTR,#_NIB + 20
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine79_0 & 0xFFFF
// 2920     joinCnf.parentAddr = _NIB.nwkCoordAddress;
??CrossCallReturnLabel_163:
        MOV       DPTR,#_NIB + 23
        LCALL     ??Subroutine69_0 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine79_0 & 0xFFFF
// 2921 
// 2922     zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
??CrossCallReturnLabel_164:
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?CALL_IND
// 2923   }
// 2924   
// 2925   // Notify ZDApp
// 2926   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R3,#0x2
        MOV       R2,#0x2
        LCALL     ?Subroutine29 & 0xFFFF
// 2927 
// 2928 }
??CrossCallReturnLabel_20:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock231

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function ZDO_LeaveInd
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker234 Using cfiCommon1
          CFI (cfiPicker234) NoFunction
          CFI (cfiPicker234) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiPicker234
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiCond235 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-2
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function ZDO_JoinConfirmCB
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function ZDO_JoinConfirmCB
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function ZDO_LeaveCnf
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function ZDO_LeaveInd
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker244 Using cfiCommon1
          CFI (cfiPicker244) NoFunction
          CFI (cfiPicker244) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiPicker244

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond245 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_121
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function ZDApp_ProcessSecEvent
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function ZDO_JoinIndicationCB
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker248 Using cfiCommon1
          CFI (cfiPicker248) NoFunction
          CFI (cfiPicker248) Picker
        MOV       DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiPicker248
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiCond249 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_113
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function ZDApp_ProcessSecMsg
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function ZDApp_LeaveUpdate
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function ZDO_JoinConfirmCB
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function ZDO_JoinIndicationCB
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond256 Using cfiCommon0
          CFI (cfiCond256) Function ZDO_SrcRtgIndCB
          CFI (cfiCond256) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond256) CFA_SP SP+-2
          CFI (cfiCond256) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function ZDApp_SecInit
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-2
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function ZDApp_ProcessSecEvent
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function ZDO_JoinIndicationCB
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-2
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker260 Using cfiCommon1
          CFI (cfiPicker260) NoFunction
          CFI (cfiPicker260) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiPicker260
// 2929 
// 2930 /*********************************************************************
// 2931  * @fn          ZDO_PermitJoinCB
// 2932  *
// 2933  * @brief      This function is called when there is a change in the
// 2934  *             device's permit join status.
// 2935  *
// 2936  * @param       duration - the new duration
// 2937  *
// 2938  * @return      none
// 2939  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2940 void ZDO_PermitJoinCB( uint8 duration )
ZDO_PermitJoinCB:
          CFI Block cfiBlock261 Using cfiCommon0
          CFI Function ZDO_PermitJoinCB
        CODE
// 2941 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2942   // Pass the Permit Join status to higher layer if callback registered
// 2943   if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 14
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ        ??ZDO_PermitJoinCB_0
// 2944   {
// 2945     zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
// 2946   }
// 2947 }
??ZDO_PermitJoinCB_0:
        MOV       A,#0x1
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock261
// 2948 
// 2949 /*********************************************************************
// 2950  * @fn          ZDO_AddrChangeIndicationCB
// 2951  *
// 2952  * @brief       This function notifies the application that this
// 2953  *              device's address has changed.  Could happen in
// 2954  *              a network with stochastic addressing (PRO).
// 2955  *
// 2956  * @param       newAddr - the new address
// 2957  *
// 2958  * @return      none
// 2959  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2960 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
          CFI Block cfiBlock262 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
        CODE
// 2961 {
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
// 2962   ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
// 2963   epList_t *pItem = epList;
        MOV       DPTR,#epList
        LCALL     ??Subroutine71_0 & 0xFFFF
// 2964 
// 2965   // Notify to save info into NV
// 2966   ZDApp_NVUpdate();
??CrossCallReturnLabel_125:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 2967 
// 2968   // Notify the applications
// 2969   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_142:
        SJMP      ??CrossCallReturnLabel_126
// 2970 
// 2971   while (pItem != NULL)
// 2972   {
// 2973     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_AddrChangeIndicationCB_0:
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV       DPL,?V0
        MOV       DPH,A
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_44:
        JZ        ??ZDO_AddrChangeIndicationCB_1
// 2974     {
// 2975       pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
// 2976       if (pZDOAddrChangeMsg != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDO_AddrChangeIndicationCB_1
// 2977       {
// 2978         pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x2a
        MOVX      @DPTR,A
// 2979         pZDOAddrChangeMsg->shortAddr = newAddr;
        INC       DPTR
        INC       DPTR
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        LCALL     ?Subroutine12 & 0xFFFF
// 2980         osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
// 2981       }
// 2982     }
??CrossCallReturnLabel_6:
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_160:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV       R1,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2983     pItem = pItem->nextDesc;
??ZDO_AddrChangeIndicationCB_1:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine71_0 & 0xFFFF
// 2984   }
??CrossCallReturnLabel_126:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDO_AddrChangeIndicationCB_0
// 2985 
// 2986   // Send out a device announce
// 2987   ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 2988 }
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock262

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond263 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker266 Using cfiCommon1
          CFI (cfiPicker266) NoFunction
          CFI (cfiPicker266) Picker
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiPicker266
        REQUIRE ??Subroutine71_0
        ; // Fall through to label ??Subroutine71_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine71_0:
          CFI Block cfiCond267 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-2
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-2
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-2
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker273 Using cfiCommon1
          CFI (cfiPicker273) NoFunction
          CFI (cfiPicker273) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiPicker273
// 2989 
// 2990 /*********************************************************************
// 2991  * @fn          ZDO_JoinIndicationCB
// 2992  *
// 2993  * @brief       This function allows the next higher layer of a
// 2994  *              coordinator to be notified of a remote join request.
// 2995  *
// 2996  * @param       ShortAddress - 16-bit address
// 2997  * @param       ExtendedAddress - IEEE (64-bit) address
// 2998  * @param       CapabilityFlags - Association Capability Flags
// 2999  * @param       type - of joining -
// 3000  *                          NWK_ASSOC_JOIN
// 3001  *                          NWK_ASSOC_REJOIN_UNSECURE
// 3002  *                          NWK_ASSOC_REJOIN_SECURE
// 3003  *
// 3004  * @return      ZStatus_t
// 3005  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3006 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
          CFI Block cfiBlock274 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
        CODE
// 3007                                 uint8 CapabilityFlags, uint8 type)
// 3008 {
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V4,R2
        MOV       ?V5,R3
// 3009   (void)ExtendedAddress;
// 3010   //check if the device is leaving before responding to rejoin request
// 3011   if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
        ; Setup parameters for call to function osal_get_timeoutEx
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_151:
        JZ        ??ZDO_JoinIndicationCB_0
// 3012   {
// 3013     return ZFailure; // device leaving , hence do not allow rejoin
        MOV       R1,#0x1
        LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 3014   }
// 3015 
// 3016 #if ZDO_NV_SAVE_RFDs
// 3017     (void)CapabilityFlags;
// 3018 
// 3019 #else  // if !ZDO_NV_SAVE_RFDs
// 3020     if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 3021 #endif
// 3022     {
// 3023       ZDApp_NVUpdate();  // Notify to save info into NV.
??ZDO_JoinIndicationCB_0:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
// 3024     }
// 3025 
// 3026     if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 3027     {
// 3028       if ( type == NWK_ASSOC_JOIN ||
// 3029           type == NWK_ASSOC_REJOIN_UNSECURE ||
// 3030             type == NWK_ASSOC_REJOIN_SECURE )
        JZ        ??ZDO_JoinIndicationCB_2
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??ZDO_JoinIndicationCB_2
        MOV       A,#0x2
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
// 3031       {
// 3032         uint16 timeToFire;
// 3033         ZDAppNewDevice_t *pNewDevice, *pDeviceList;
// 3034 
// 3035         pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
??ZDO_JoinIndicationCB_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 3036 
// 3037         if ( pNewDevice == NULL )
        MOV       A,R2
        ORL       A,R7
        JNZ       ??ZDO_JoinIndicationCB_4
// 3038         {
// 3039           // Memory alloc failed
// 3040           return ZMemError;
        MOV       R1,#0x10
        SJMP      ??ZDO_JoinIndicationCB_1
// 3041         }
// 3042 
// 3043         // Add the new device to the New Device List
// 3044         if ( ZDApp_NewDeviceList == NULL )
??ZDO_JoinIndicationCB_4:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_123:
        MOV       DPTR,#ZDApp_NewDeviceList
        JNZ       ??ZDO_JoinIndicationCB_5
// 3045         {
// 3046           // The list is empty, add the first element
// 3047           ZDApp_NewDeviceList = pNewDevice;
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??ZDO_JoinIndicationCB_6
// 3048         }
// 3049         else
// 3050         {
// 3051           pDeviceList = ZDApp_NewDeviceList;
??ZDO_JoinIndicationCB_5:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??ZDO_JoinIndicationCB_7
// 3052 
// 3053           // Walk the list to last element
// 3054           while ( pDeviceList->next )
// 3055           {
// 3056             pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
??ZDO_JoinIndicationCB_8:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
??ZDO_JoinIndicationCB_7:
        MOV       R3,A
// 3057           }
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_119:
        JNZ       ??ZDO_JoinIndicationCB_8
// 3058 
// 3059           // Add new device at the end
// 3060           pDeviceList->next = pNewDevice;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
??ZDO_JoinIndicationCB_6:
        MOVX      @DPTR,A
// 3061         }
// 3062 
// 3063         // get the remaining time of the timer
// 3064         timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3065 
// 3066         pNewDevice->next = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3067         pNewDevice->shortAddr = ShortAddress;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
// 3068         pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
        MOV       A,#0x58
        CLR       C
        SUBB      A,?V0
        MOV       R0,A
        MOV       A,#0x2
        SUBB      A,?V1
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 3069 
// 3070         // Start the timer only if there is no pending timer
// 3071         if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
        MOV       A,#0x58
        XRL       A,R0
        JNZ       ??ZDO_JoinIndicationCB_9
        MOV       A,#0x2
        XRL       A,R1
??ZDO_JoinIndicationCB_9:
        JNZ       ??ZDO_JoinIndicationCB_3
// 3072         {
// 3073           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_258
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine15 & 0xFFFF
// 3074         }
// 3075       }
// 3076     }
??CrossCallReturnLabel_82:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3077 
// 3078     return ZSuccess;
??ZDO_JoinIndicationCB_3:
        MOV       R1,#0x0
??ZDO_JoinIndicationCB_1:
        LJMP      ??Subroutine66_0 & 0xFFFF
// 3079 
// 3080 }
          CFI EndBlock cfiBlock274
// 3081 
// 3082 /*********************************************************************
// 3083  * @fn          ZDO_ConcentratorIndicationCB
// 3084  *
// 3085  * @brief       This function allows the next higher layer of a
// 3086  *              device to be notified of existence of the concentrator.
// 3087  *
// 3088  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 3089  * @param       extAddr - pointer to extended Address
// 3090  *                        NULL if not available
// 3091  * @param       pktCost - PktCost from RREQ
// 3092  *
// 3093  * @return      void
// 3094  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3095 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
          CFI Block cfiBlock275 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
        CODE
// 3096 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3097   zdoConcentratorInd_t conInd;
// 3098 
// 3099   conInd.nwkAddr = nwkAddr;
        LCALL     ?Subroutine11 & 0xFFFF
// 3100   conInd.extAddr = extAddr;
??CrossCallReturnLabel_166:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3101   conInd.pktCost = pktCost;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 3102 
// 3103   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 2
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ        ??ZDO_ConcentratorIndicationCB_0
// 3104   {
// 3105     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
// 3106   }
// 3107 }
??ZDO_ConcentratorIndicationCB_0:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock275

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond276 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
          CFI Conditional ??CrossCallReturnLabel_8
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-2
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function ZDO_PermitJoinCB
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond278) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond278) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond278) CFA_SP SP+-7
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function ZDO_LeaveCnf
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function ZDO_LeaveInd
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker282 Using cfiCommon1
          CFI (cfiPicker282) NoFunction
          CFI (cfiPicker282) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiPicker282
// 3108 
// 3109 /*********************************************************************
// 3110  * @fn          ZDO_LeaveCnf
// 3111  *
// 3112  * @brief       This function allows the next higher layer to be
// 3113  *              notified of the results of its request for this or
// 3114  *              a child device to leave the network.
// 3115  *
// 3116  * @param       cnf - NLME_LeaveCnf_t
// 3117  *
// 3118  * @return      none
// 3119  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3120 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
          CFI Block cfiBlock283 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
        CODE
// 3121 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3122   // Check for this device
// 3123   if ( osal_ExtAddrEqual( cnf->extAddr,
// 3124                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_36:
        ; Setup parameters for call to function sAddrExtCmp
        MOV       R2,?V0
        MOV       R3,A
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDO_LeaveCnf_0
// 3125   {
// 3126     // Pass the leave confirm to higher layer if callback registered
// 3127     if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
// 3128          ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
        MOV       DPTR,#zdoCBFunc + 10
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ        ??ZDO_LeaveCnf_1
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
        MOV       A,R2
        ORL       A,R3
        JNZ       ??ZDO_LeaveCnf_2
// 3129     {
// 3130       // Prepare to leave with reset
// 3131       ZDApp_LeaveReset( cnf->rejoin );
??ZDO_LeaveCnf_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine72_0 & 0xFFFF
// 3132     }
// 3133   }
??CrossCallReturnLabel_132:
        SJMP      ??ZDO_LeaveCnf_2
// 3134   else if ( ZSTACK_ROUTER_BUILD )
// 3135   {
// 3136     // Remove device address(optionally descendents) from data
// 3137     ZDApp_LeaveUpdate( cnf->dstAddr,
// 3138                        cnf->extAddr,
// 3139                        cnf->removeChildren,
// 3140                        cnf->rejoin );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        LCALL     ?Subroutine25 & 0xFFFF
// 3141   }
??CrossCallReturnLabel_111:
        LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 3142 }
??ZDO_LeaveCnf_2:
        LJMP      ??Subroutine63_0 & 0xFFFF
          CFI EndBlock cfiBlock283

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond284 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function ZDO_LeaveCnf
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker286 Using cfiCommon1
          CFI (cfiPicker286) NoFunction
          CFI (cfiPicker286) Picker
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiPicker286
// 3143 
// 3144 /*********************************************************************
// 3145  * @fn          ZDO_LeaveInd
// 3146  *
// 3147  * @brief       This function allows the next higher layer of a
// 3148  *              device to be notified of a remote leave request or
// 3149  *              indication.
// 3150  *
// 3151  * @param       ind - NLME_LeaveInd_t
// 3152  *
// 3153  * @return      none
// 3154  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3155 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
          CFI Block cfiBlock287 Using cfiCommon0
          CFI Function ZDO_LeaveInd
        CODE
// 3156 {
        FUNCALL ZDO_LeaveInd, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3157   uint8 leave;
// 3158 
// 3159   // NWK layer filters out illegal requests
// 3160   if ( ind->request == TRUE )
        MOV       A,R2
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV       A,R2
        ADD       A,#0xc
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDO_LeaveInd_0
// 3161   {
// 3162     byte temp = FALSE;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        LCALL     ?Subroutine12 & 0xFFFF
// 3163     
// 3164     // Only respond if we are not rejoining the network
// 3165     if ( ind->rejoin == FALSE )
??CrossCallReturnLabel_7:
        JNZ       ??ZDO_LeaveInd_1
// 3166     {
// 3167       // Notify network of leave
// 3168       NLME_LeaveRsp_t rsp;
// 3169       rsp.rejoin = ind->rejoin;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 3170 
// 3171       if ( ZSTACK_ROUTER_BUILD )
// 3172       {
// 3173         rsp.removeChildren = ind->removeChildren;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 3174       }
// 3175       else if ( ZSTACK_END_DEVICE_BUILD )
// 3176       {
// 3177         NLME_SetResponseRate(0);
// 3178         NLME_SetQueuedPollRate(0);
// 3179         rsp.removeChildren = 0;
// 3180       }
// 3181       
// 3182       bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 3183        
// 3184       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
// 3185     }
// 3186 
// 3187     if ( ZSTACK_END_DEVICE_BUILD )
// 3188     {
// 3189       // Stop polling and get ready to reset
// 3190       NLME_SetPollRate( 0 );
// 3191     }
// 3192 
// 3193     // Prepare to leave with reset
// 3194     ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL     ?Subroutine30 & 0xFFFF
// 3195     
// 3196     //Turn on the radio to avoid sending packets after sending the leave    
// 3197     ZMacSetReq(ZMacRxOnIdle, &temp);
??CrossCallReturnLabel_130:
        ; Setup parameters for call to function ZMacSetReq
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        SJMP      ??ZDO_LeaveInd_2
// 3198   }
// 3199   else
// 3200   {
// 3201     leave = FALSE;
// 3202 
// 3203     // Check if this device needs to leave as a child or descendent
// 3204     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV       A,?V4
        XRL       A,R2
        JNZ       ??ZDO_LeaveInd_3
        MOV       A,?V5
        XRL       A,R3
??ZDO_LeaveInd_3:
        JNZ       ??ZDO_LeaveInd_4
// 3205     {
// 3206       if ( ( ind->removeChildren == TRUE )   )
        MOV       A,#0x1
        XRL       A,R1
        JZ        ??ZDO_LeaveInd_5
// 3207       {
// 3208         leave = TRUE;
// 3209       }
// 3210       else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
        LCALL     ??Subroutine73_0 & 0xFFFF
??CrossCallReturnLabel_137:
        JNZ       ??ZDO_LeaveInd_4
// 3211       {
// 3212         // old parents is leaving the network, child needs to search for a new parent
// 3213         ind->rejoin = TRUE;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3214         leave = TRUE;
// 3215       }
// 3216 
// 3217     }
// 3218     else if ( ind->removeChildren == TRUE )
// 3219     {
// 3220       // Check NWK address allocation algorithm
// 3221       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 3222     }
// 3223 
// 3224     if ( leave == TRUE )
// 3225     {
// 3226       // Prepare to leave with reset
// 3227       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_5:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL     ?Subroutine30 & 0xFFFF
// 3228     }
??CrossCallReturnLabel_131:
        SJMP      ??ZDO_LeaveInd_2
// 3229     else
// 3230     {
// 3231       // Remove device address(optionally descendents) from data
// 3232       ZDApp_LeaveUpdate( ind->srcAddr,
// 3233                          ind->extAddr,
// 3234                          ind->removeChildren,
// 3235                          ind->rejoin );
??ZDO_LeaveInd_4:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R6
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 3236     }
// 3237   }
// 3238 
// 3239   // Pass the leave indication to higher layer if callback registered.
// 3240   if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
??ZDO_LeaveInd_2:
        MOV       DPTR,#zdoCBFunc + 12
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ        ??ZDO_LeaveInd_6
// 3241   {
// 3242     (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
// 3243   }
// 3244 }
??ZDO_LeaveInd_6:
        MOV       A,#0x3
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock287

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond288 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function ZDO_LeaveInd
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-2
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker290 Using cfiCommon1
          CFI (cfiPicker290) NoFunction
          CFI (cfiPicker290) Picker
        ADD       A,#0xb
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        RET
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiPicker290

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond291 Using cfiCommon0
          CFI Function ZDO_LeaveInd
          CFI Conditional ??CrossCallReturnLabel_130
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function ZDO_LeaveInd
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-2
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker293 Using cfiCommon1
          CFI (cfiPicker293) NoFunction
          CFI (cfiPicker293) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiPicker293
        REQUIRE ??Subroutine72_0
        ; // Fall through to label ??Subroutine72_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine72_0:
          CFI Block cfiCond294 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function ZDO_LeaveInd
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-2
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function ZDO_LeaveInd
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-2
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker297 Using cfiCommon1
          CFI (cfiPicker297) NoFunction
          CFI (cfiPicker297) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        RET
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiPicker297

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond298 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_133
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-2
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker300 Using cfiCommon1
          CFI (cfiPicker300) NoFunction
          CFI (cfiPicker300) Picker
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiPicker300
        REQUIRE ??Subroutine73_0
        ; // Fall through to label ??Subroutine73_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine73_0:
          CFI Block cfiCond301 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-2
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function ZDO_LeaveInd
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-2
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function ZDApp_DeviceAuthEvt
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond304) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond304) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond304) CFA_SP SP+-7
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-2
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker306 Using cfiCommon1
          CFI (cfiPicker306) NoFunction
          CFI (cfiPicker306) Picker
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x2
        RET
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiPicker306

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond307 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function ZDO_LeaveInd
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-2
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker309 Using cfiCommon1
          CFI (cfiPicker309) NoFunction
          CFI (cfiPicker309) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiPicker309
// 3245 
// 3246 /*********************************************************************
// 3247  * @fn          ZDO_SyncIndicationCB
// 3248  *
// 3249  * @brief       This function allows the next higher layer of a
// 3250  *              coordinator to be notified of a loss of synchronization
// 3251  *                          with the parent/child device.
// 3252  *
// 3253  * @param       type: 0 - child; 1 - parent
// 3254  *
// 3255  *
// 3256  * @return      none
// 3257  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3258 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
          CFI Block cfiBlock310 Using cfiCommon0
          CFI Function ZDO_SyncIndicationCB
        CODE
// 3259 {
        ; Saved register size: 0
        ; Auto size: 0
// 3260   (void)shortAddr;  // Remove this line if this parameter is used.
// 3261 
// 3262   if ( ZSTACK_END_DEVICE_BUILD
// 3263     || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 3264   {
// 3265     if ( type == 1 && retryCnt == 0 )
// 3266     {
// 3267       // We lost contact with our parent.  Clear the neighbor Table.
// 3268       nwkNeighborInitTable();
// 3269       
// 3270       //If we are Factory new, then report fail on association
// 3271       if(!bdb_isDeviceNonFactoryNew())
// 3272       {
// 3273         bdb_nwkAssocAttemt(FALSE);
// 3274       }
// 3275 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 3276       else
// 3277       {
// 3278         //We lost our parent
// 3279         bdb_parentLost();
// 3280       }
// 3281 #endif
// 3282     }
// 3283   }
// 3284 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock310
// 3285 
// 3286 /*********************************************************************
// 3287  * @fn          ZDO_ManytoOneFailureIndicationCB
// 3288  *
// 3289  * @brief       This function allows the next higher layer of a
// 3290  *              concentrator to be notified of a many-to-one route
// 3291  *              failure.
// 3292  *
// 3293  * @param       none
// 3294  *
// 3295  *
// 3296  * @return      none
// 3297  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3298 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
          CFI Block cfiBlock311 Using cfiCommon0
          CFI Function ZDO_ManytoOneFailureIndicationCB
        CODE
// 3299 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3300   // By default, the concentrator automatically redo many-to-one route
// 3301   // discovery to update all many-to-one routes in the network
// 3302   // If you want anything processing other than the default,
// 3303   // please replace the following code.
// 3304 
// 3305   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
// 3306 }
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock311
// 3307 
// 3308 /*********************************************************************
// 3309  * @fn          ZDO_PollConfirmCB
// 3310  *
// 3311  * @brief       This function allows the next higher layer to be
// 3312  *              notified of a Poll Confirm.
// 3313  *
// 3314  * @param       none
// 3315  *
// 3316  * @return      none
// 3317  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3318 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
          CFI Block cfiBlock312 Using cfiCommon0
          CFI Function ZDO_PollConfirmCB
        CODE
// 3319 {
        ; Saved register size: 0
        ; Auto size: 0
// 3320   (void)status;  // Remove this line if this parameter is used.
// 3321   return;
        LJMP      ?BRET
// 3322 }
          CFI EndBlock cfiBlock312
// 3323 
// 3324 /*********************************************************************
// 3325  * @fn          ZDO_NetworkStatusCB
// 3326  *
// 3327  * @brief       Network Status Callback function
// 3328  *
// 3329  * @param       nwkDstAddr - message's destination address- used to determine
// 3330  *                           if the message was intended for this device or
// 3331  *                           a sleeping end device.
// 3332  * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
// 3333  * @param       dstAddr - the destination address related to the status code
// 3334  *
// 3335  * @return      none
// 3336  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3337 void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
ZDO_NetworkStatusCB:
          CFI Block cfiBlock313 Using cfiCommon0
          CFI Function ZDO_NetworkStatusCB
        CODE
// 3338 {
        FUNCALL ZDO_NetworkStatusCB, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3339   (void)dstAddr;     // Remove this line if this parameter is used.
// 3340 
// 3341   if ( (nwkDstAddr == NLME_GetShortAddr())
// 3342       && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
// 3343   {
// 3344     // Routing error for dstAddr, this is informational and a Route
// 3345     // Request should happen automatically.
// 3346   }
// 3347 }
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock313
// 3348 
// 3349 /******************************************************************************
// 3350  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 3351  *
// 3352  * @brief       Stub routine implemented by NHLE. NHLE should call
// 3353  *              <AddrMgrWriteNV> when appropriate.
// 3354  *
// 3355  * @param       none
// 3356  *
// 3357  * @return      none
// 3358  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3359 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
          CFI Block cfiBlock314 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
        CODE
// 3360 {
        FUNCALL AddrMgrWriteNVRequest, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AddrMgrWriteNVRequest, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3361 #if defined ( NV_RESTORE )
// 3362   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine76_0 & 0xFFFF
??CrossCallReturnLabel_152:
        JNZ       ??AddrMgrWriteNVRequest_0
// 3363   {
// 3364     // Trigger to save info into NV
// 3365     ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 3366   }
// 3367 #endif
// 3368 }
??AddrMgrWriteNVRequest_0:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock314
// 3369 
// 3370 /*********************************************************************
// 3371  * Call Back Functions from Security  - API
// 3372  */
// 3373 
// 3374  /*********************************************************************
// 3375  * @fn          ZDO_UpdateDeviceIndication
// 3376  *
// 3377  * @brief       This function notifies the "Trust Center" of a
// 3378  *              network when a device joins or leaves the network.
// 3379  *
// 3380  * @param       extAddr - pointer to 64 bit address of new device
// 3381  * @param       status  - 0 if a new device joined securely
// 3382  *                      - 1 if a new device joined un-securely
// 3383  *                      - 2 if a device left the network
// 3384  *
// 3385  * @return      true if newly joined device should be allowed to
// 3386  *                                              remain on network
// 3387  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3388 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
          CFI Block cfiBlock315 Using cfiCommon0
          CFI Function ZDO_UpdateDeviceIndication
        CODE
// 3389 {
        ; Saved register size: 0
        ; Auto size: 0
// 3390   // can implement a network access policy based on the
// 3391   // IEEE address of newly joining devices...
// 3392   (void)extAddr;
// 3393   (void)status;
// 3394 
// 3395   return ZSuccess;
        MOV       R1,#0x0
        LJMP      ?BRET
// 3396 }
          CFI EndBlock cfiBlock315
// 3397 
// 3398 /*********************************************************************
// 3399  * @fn          ZDApp_InMsgCB
// 3400  *
// 3401  * @brief       This function is called to pass up any message that is
// 3402  *              not yet supported.  This allows for the developer to
// 3403  *              support features themselves..
// 3404  *
// 3405  * @return      none
// 3406  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3407 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
          CFI Block cfiBlock316 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
        CODE
// 3408 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3409   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        MOV       A,R2
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_103:
        ANL       A,#0x80
        JNZ       ??ZDApp_InMsgCB_0
// 3410   {
// 3411     // Handle the response message
// 3412   }
// 3413   else
// 3414   {
// 3415     // Handle the request message by sending a generic "not supported".
// 3416     // Device Announce doesn't have a response.
// 3417     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        MOV       A,R2
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        JNZ       ??ZDApp_InMsgCB_0
        MOV       A,#0x13
        XRL       A,R0
        JNZ       ??ZDApp_InMsgCB_1
        MOV       A,R1
??ZDApp_InMsgCB_1:
        JZ        ??ZDApp_InMsgCB_0
// 3418     {
// 3419       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 3420                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV       A,R0
        MOV       ?V0,A
        MOV       A,R1
        ORL       A,#0x80
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R4,#-0x7c
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ?Subroutine38 & 0xFFFF
// 3421     }
// 3422   }
??CrossCallReturnLabel_30:
        MOV       R1,A
        LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3423 }
??ZDApp_InMsgCB_0:
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock316

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond317 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 54)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function ZDApp_InMsgCB
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker319 Using cfiCommon1
          CFI (cfiPicker319) NoFunction
          CFI (cfiPicker319) Picker
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiPicker319
// 3424 
// 3425 
// 3426 /*********************************************************************
// 3427  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3428  *
// 3429  * @brief   Changes the Match Descriptor Response permission.
// 3430  *
// 3431  * @param   endpoint - endpoint to allow responses
// 3432  * @param   action - true to allow responses, false to not
// 3433  *
// 3434  * @return  none
// 3435  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3436 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
          CFI Block cfiBlock320 Using cfiCommon0
          CFI Function ZDApp_ChangeMatchDescRespPermission
        CODE
// 3437 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3438   // Store the action
// 3439   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
// 3440 }
        LJMP      ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock320
// 3441 
// 3442 /*********************************************************************
// 3443  * @fn      ZDApp_NetworkInit()
// 3444  *
// 3445  * @brief   Used to start the network joining process
// 3446  *
// 3447  * @param   delay - mSec delay to wait before starting
// 3448  *
// 3449  * @return  none
// 3450  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3451 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
          CFI Block cfiBlock321 Using cfiCommon0
          CFI Function ZDApp_NetworkInit
        CODE
// 3452 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3453   if ( delay )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_NetworkInit_0
// 3454   {
// 3455     // Wait awhile before starting the device
// 3456     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x1
        LCALL     ??Subroutine59_0 & 0xFFFF
// 3457   }
??CrossCallReturnLabel_84:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP      ??CrossCallReturnLabel_147
// 3458   else
// 3459   {
// 3460     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x1
        LCALL     ??Subroutine74_0 & 0xFFFF
// 3461   }
// 3462 }
??CrossCallReturnLabel_147:
        LJMP      ??Subroutine63_0 & 0xFFFF
          CFI EndBlock cfiBlock321

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond322 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_138
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function ZDApp_NetworkStartEvt
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond323) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond323) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond323) CFA_SP SP+-7
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond324) CFA_SP SP+-2
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-2
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function ZDApp_ChangeState
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker328 Using cfiCommon1
          CFI (cfiPicker328) NoFunction
          CFI (cfiPicker328) Picker
        MOV       R2,#0x10
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiPicker328
        REQUIRE ??Subroutine74_0
        ; // Fall through to label ??Subroutine74_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine74_0:
          CFI Block cfiCond329 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
          CFI Conditional ??CrossCallReturnLabel_144
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function ZDO_NetworkFormationConfirmCB
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-2
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function ZDO_StartRouterConfirmCB
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+-2
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function ZDApp_NetworkInit
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-2
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function ZDApp_event_loop
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-2
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function ZDApp_NetworkStartEvt
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond334) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond334) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond334) CFA_SP SP+-7
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-2
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond336 Using cfiCommon0
          CFI (cfiCond336) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond336) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond336) CFA_SP SP+-2
          CFI (cfiCond336) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond337 Using cfiCommon0
          CFI (cfiCond337) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond337) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond337) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond337) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond337) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond337) CFA_SP SP+-2
          CFI (cfiCond337) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function ZDApp_ChangeState
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-2
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiCond336
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339
        REQUIRE ??Subroutine75_0
        ; // Fall through to label ??Subroutine75_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine75_0:
          CFI Block cfiCond340 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
          CFI Conditional ??CrossCallReturnLabel_148
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function ZDApp_NVUpdate
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond341) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond341) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond341) CFA_SP SP+-7
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function ZDApp_NetworkStartEvt
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond342) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond342) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond342) CFA_SP SP+-7
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function ZDO_NetworkFormationConfirmCB
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-2
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function ZDO_StartRouterConfirmCB
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-2
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function ZDApp_NetworkInit
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-2
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function ZDApp_event_loop
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-2
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function ZDApp_NetworkStartEvt
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond347) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond347) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond347) CFA_SP SP+-7
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+-2
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-2
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-2
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond351 Using cfiCommon0
          CFI (cfiCond351) Function ZDApp_ChangeState
          CFI (cfiCond351) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond351) CFA_SP SP+-2
          CFI (cfiCond351) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker352 Using cfiCommon1
          CFI (cfiPicker352) NoFunction
          CFI (cfiPicker352) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        RET
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiCond351
          CFI EndBlock cfiPicker352
// 3463 
// 3464 /*********************************************************************
// 3465  * @fn      ZDApp_NwkStateUpdateCB()
// 3466  *
// 3467  * @brief   This function notifies that this device's network
// 3468  *          state info has been changed.
// 3469  *
// 3470  * @param   none
// 3471  *
// 3472  * @return  none
// 3473  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3474 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
          CFI Block cfiBlock353 Using cfiCommon0
          CFI Function ZDApp_NwkStateUpdateCB
        CODE
// 3475 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkStateUpdateCB, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3476   // Notify to save info into NV
// 3477   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine76_0 & 0xFFFF
??CrossCallReturnLabel_153:
        JNZ       ??ZDApp_NwkStateUpdateCB_0
// 3478   {
// 3479     // Trigger to save info into NV
// 3480     ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 3481   }
// 3482 }
??ZDApp_NwkStateUpdateCB_0:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock353

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond354 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
          CFI Conditional ??CrossCallReturnLabel_150
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond355 Using cfiCommon0
          CFI (cfiCond355) Function ZDO_JoinIndicationCB
          CFI (cfiCond355) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond355) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond355) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond355) CFA_SP SP+-2
          CFI (cfiCond355) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker356 Using cfiCommon1
          CFI (cfiPicker356) NoFunction
          CFI (cfiPicker356) Picker
        MOV       R2,#0x4
        MOV       R3,#0x0
          CFI EndBlock cfiCond354
          CFI EndBlock cfiCond355
          CFI EndBlock cfiPicker356
        REQUIRE ??Subroutine76_0
        ; // Fall through to label ??Subroutine76_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine76_0:
          CFI Block cfiCond357 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
          CFI Conditional ??CrossCallReturnLabel_152
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond358 Using cfiCommon0
          CFI (cfiCond358) Function ZDApp_NwkStateUpdateCB
          CFI (cfiCond358) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond358) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond358) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond358) CFA_SP SP+-7
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function ZDApp_ResetTimerStart
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+-2
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function ZDO_JoinIndicationCB
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+-2
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker361 Using cfiCommon1
          CFI (cfiPicker361) NoFunction
          CFI (cfiPicker361) Picker
        MOV       DPTR,#ZDAppTaskID
          CFI EndBlock cfiCond357
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiPicker361
        REQUIRE ??Subroutine77_0
        ; // Fall through to label ??Subroutine77_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine77_0:
          CFI Block cfiCond362 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
          CFI Conditional ??CrossCallReturnLabel_154
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond363 Using cfiCommon0
          CFI (cfiCond363) Function AddrMgrWriteNVRequest
          CFI (cfiCond363) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond363) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond363) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond363) CFA_SP SP+-7
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function ZDApp_NwkStateUpdateCB
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond364) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond364) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond364) CFA_SP SP+-7
          CFI Block cfiCond365 Using cfiCommon0
          CFI (cfiCond365) Function ZDApp_ResetTimerStart
          CFI (cfiCond365) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond365) CFA_SP SP+-2
          CFI (cfiCond365) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond366 Using cfiCommon0
          CFI (cfiCond366) Function ZDO_JoinIndicationCB
          CFI (cfiCond366) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond366) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond366) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond366) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond366) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond366) CFA_SP SP+-2
          CFI (cfiCond366) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker367 Using cfiCommon1
          CFI (cfiPicker367) NoFunction
          CFI (cfiPicker367) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond362
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiCond365
          CFI EndBlock cfiCond366
          CFI EndBlock cfiPicker367
// 3483 
// 3484 /*********************************************************************
// 3485  * @fn      ZDApp_NodeProfileSync()
// 3486  *
// 3487  * @brief   Sync node with stack profile.
// 3488  *
// 3489  * @param   stackProfile - stack profile of the network to join
// 3490  *
// 3491  * @return  none
// 3492  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3493 void ZDApp_NodeProfileSync( uint8 stackProfile )
ZDApp_NodeProfileSync:
          CFI Block cfiBlock368 Using cfiCommon0
          CFI Function ZDApp_NodeProfileSync
        CODE
// 3494 {
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3495   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_NodeProfileSync_0
// 3496   {
// 3497     if ( stackProfile != zgStackProfile )
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??ZDApp_NodeProfileSync_0
// 3498     {
// 3499       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        ORL       A,#0x2
        MOVX      @DPTR,A
// 3500       ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOV       A,#0xc
        MOVX      @DPTR,A
// 3501       NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV       R1,A
        LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
// 3502     }
// 3503   }
// 3504 }
??ZDApp_NodeProfileSync_0:
        LJMP      ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock368
// 3505 
// 3506 /*********************************************************************
// 3507  * @fn      ZDApp_StartJoiningCycle()
// 3508  *
// 3509  * @brief   Starts the joining cycle of a device.  This will only
// 3510  *          continue an already started (or stopped) joining cycle.
// 3511  *
// 3512  * @param   none
// 3513  *
// 3514  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3515  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3516 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
          CFI Block cfiBlock369 Using cfiCommon0
          CFI Function ZDApp_StartJoiningCycle
        CODE
// 3517 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3518   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_StartJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_StartJoiningCycle_1
// 3519   {
// 3520     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV       DPTR,#continueJoining
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3521     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
// 3522 
// 3523     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??ZDApp_StartJoiningCycle_2
// 3524   }
// 3525   else
// 3526     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV       R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP      ??Subroutine64_0 & 0xFFFF
// 3527 }
          CFI EndBlock cfiBlock369
// 3528 
// 3529 /*********************************************************************
// 3530  * @fn      ZDApp_StopJoiningCycle()
// 3531  *
// 3532  * @brief   Stops the joining or rejoining process of a device.
// 3533  *
// 3534  * @param   none
// 3535  *
// 3536  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3537  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3538 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
          CFI Block cfiBlock370 Using cfiCommon0
          CFI Function ZDApp_StopJoiningCycle
        CODE
// 3539 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3540   if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_StopJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??ZDApp_StopJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0xc
        JNZ       ??ZDApp_StopJoiningCycle_1
// 3541   {
// 3542     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        MOV       DPTR,#continueJoining
        CLR       A
        MOVX      @DPTR,A
// 3543     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??ZDApp_StopJoiningCycle_2
// 3544   }
// 3545   else
// 3546     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV       R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP      ??Subroutine64_0 & 0xFFFF
// 3547 }
          CFI EndBlock cfiBlock370
// 3548 
// 3549 /*********************************************************************
// 3550  * @fn      ZDApp_AnnounceNewAddress()
// 3551  *
// 3552  * @brief   Send Device Announce and hold all transmissions for
// 3553  *          new address timeout.
// 3554  *
// 3555  * @param   none
// 3556  *
// 3557  * @return  none
// 3558  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3559 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
          CFI Block cfiBlock371 Using cfiCommon0
          CFI Function ZDApp_AnnounceNewAddress
        CODE
// 3560 {
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3561 #if defined ( ZIGBEEPRO )
// 3562   // Turn off data request hold
// 3563   APSME_HoldDataRequests( 0 );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3564 #endif
// 3565 
// 3566   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 3567                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R4,A
        MOV       R5,?V1
        LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3568 
// 3569 #if defined ( ZIGBEEPRO )
// 3570   // Setup the timeout
// 3571   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3572 #endif
// 3573 
// 3574   if ( ZSTACK_END_DEVICE_BUILD )
// 3575   {
// 3576     if ( zgChildAgingEnable == TRUE )
// 3577     {
// 3578       uint8 coordExtAddr[Z_EXTADDR_LEN];
// 3579 
// 3580       // Send the message to parent
// 3581       NLME_GetCoordExtAddr( coordExtAddr );
// 3582       NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
// 3583                                  zgEndDeviceTimeoutValue,
// 3584                                  zgEndDeviceConfiguration );
// 3585     }
// 3586   }
// 3587 }
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock371
// 3588 
// 3589 /*********************************************************************
// 3590  * @fn      ZDApp_SendParentAnnce()
// 3591  *
// 3592  * @brief   Send Parent Announce message.
// 3593  *
// 3594  * @param   none
// 3595  *
// 3596  * @return  none
// 3597  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3598 void ZDApp_SendParentAnnce( void )
ZDApp_SendParentAnnce:
          CFI Block cfiBlock372 Using cfiCommon0
          CFI Function ZDApp_SendParentAnnce
        CODE
// 3599 {
        FUNCALL ZDApp_SendParentAnnce, AssocMakeListOfRfdChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, ZDP_ParentAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3600   uint8 count;
// 3601   uint8 *childInfo;
// 3602 
// 3603   childInfo = AssocMakeListOfRfdChild( &count );
        ; Setup parameters for call to function AssocMakeListOfRfdChild
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3604 
// 3605   if ( childInfo != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_SendParentAnnce_0
// 3606   {
// 3607     if ( count > 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??ZDApp_SendParentAnnce_1
// 3608     {
// 3609       zAddrType_t dstAddr;
// 3610 
// 3611       dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
// 3612       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3613 
// 3614       ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
        ; Setup parameters for call to function ZDP_ParentAnnce
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V2,#0x1f
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3615     }
// 3616 
// 3617     // Free the list after the message has been sent
// 3618     osal_mem_free( childInfo );
??ZDApp_SendParentAnnce_1:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3619   }
// 3620 }
??ZDApp_SendParentAnnce_0:
        MOV       A,#0xa
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock372
// 3621 
// 3622 /*********************************************************************
// 3623  * @fn          ZDApp_NVUpdate
// 3624  *
// 3625  * @brief       Set the NV Update Timer.
// 3626  *
// 3627  * @param       none
// 3628  *
// 3629  * @return      none
// 3630  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3631 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
          CFI Block cfiBlock373 Using cfiCommon0
          CFI Function ZDApp_NVUpdate
        CODE
// 3632 {
        FUNCALL ZDApp_NVUpdate, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NVUpdate, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3633 #if defined ( NV_RESTORE )
// 3634   if ( (ZSTACK_END_DEVICE_BUILD)
// 3635        || (ZSTACK_ROUTER_BUILD
// 3636            && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
        MOV       DPTR,#_NIB + 14
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??ZDApp_NVUpdate_0
// 3637   {
// 3638     // No need to wait, set the event to save the state
// 3639     osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine75_0 & 0xFFFF
// 3640   }
??CrossCallReturnLabel_149:
        SJMP      ??ZDApp_NVUpdate_1
// 3641   else
// 3642   {
// 3643     // To allow for more changes to the network state before saving
// 3644     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
??ZDApp_NVUpdate_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_2bc
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine60_0 & 0xFFFF
// 3645   }
??CrossCallReturnLabel_86:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
// 3646 #endif
// 3647 }
??ZDApp_NVUpdate_1:
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock373
// 3648 
// 3649 /*********************************************************************
// 3650  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 3651  *
// 3652  * @brief   Returns a PAN ID for the network layer to use during
// 3653  *          a coordinator start and there is another network with
// 3654  *          the intended PANID.
// 3655  *
// 3656  * @param   panid - the intended PAN ID
// 3657  *
// 3658  * @return  PANID to try
// 3659  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3660 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
          CFI Block cfiBlock374 Using cfiCommon0
          CFI Function ZDApp_CoordStartPANIDConflictCB
        CODE
// 3661 {
        ; Saved register size: 0
        ; Auto size: 0
// 3662   return ( panid + 1 );
        MOV       A,R2
        ADD       A,#0x1
        INC       R2
        JNC       ??ZDApp_CoordStartPANIDConflictCB_0
        INC       R3
??ZDApp_CoordStartPANIDConflictCB_0:
        LJMP      ?BRET
// 3663 }
          CFI EndBlock cfiBlock374
// 3664 
// 3665 /*********************************************************************
// 3666  * @fn          ZDO_SrcRtgIndCB
// 3667  *
// 3668  * @brief       This function notifies the ZDO available src route record received.
// 3669  *
// 3670  * @param       srcAddr - source address of the source route
// 3671  * @param       relayCnt - number of devices in the relay list
// 3672  * @param       relayList - relay list of the source route
// 3673  *
// 3674  * @return      none
// 3675  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3676 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
          CFI Block cfiBlock375 Using cfiCommon0
          CFI Function ZDO_SrcRtgIndCB
        CODE
// 3677 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3678   zdoSrcRtg_t srcRtg;
// 3679 
// 3680   srcRtg.srcAddr = srcAddr;
        LCALL     ?Subroutine11 & 0xFFFF
// 3681   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_167:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 3682   srcRtg.pRelayList = pRelayList;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3683 
// 3684   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_120:
        JZ        ??ZDO_SrcRtgIndCB_0
// 3685   {
// 3686     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ??Subroutine78_0 & 0xFFFF
// 3687   }
??CrossCallReturnLabel_158:
        LCALL     ?CALL_IND
// 3688 }
??ZDO_SrcRtgIndCB_0:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock375

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond376 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_159
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond377 Using cfiCommon0
          CFI (cfiCond377) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond377) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond377) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond377) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond377) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond377) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond377) CFA_SP SP+-2
          CFI (cfiCond377) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker378 Using cfiCommon1
          CFI (cfiPicker378) NoFunction
          CFI (cfiPicker378) Picker
        MOV       R0,A
        INC       DPTR
          CFI EndBlock cfiCond376
          CFI EndBlock cfiCond377
          CFI EndBlock cfiPicker378
        REQUIRE ??Subroutine78_0
        ; // Fall through to label ??Subroutine78_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine78_0:
          CFI Block cfiCond379 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_155
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond380 Using cfiCommon0
          CFI (cfiCond380) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond380) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond380) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond380) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond380) CFA_SP SP+-7
          CFI Block cfiCond381 Using cfiCommon0
          CFI (cfiCond381) Function ZDApp_ProcessSecMsg
          CFI (cfiCond381) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond381) CFA_SP SP+-2
          CFI (cfiCond381) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond382 Using cfiCommon0
          CFI (cfiCond382) Function ZDO_SrcRtgIndCB
          CFI (cfiCond382) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond382) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond382) CFA_SP SP+-2
          CFI (cfiCond382) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond383 Using cfiCommon0
          CFI (cfiCond383) Function ZDApp_LeaveUpdate
          CFI (cfiCond383) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond383) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond383) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond383) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond383) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond383) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond383) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond383) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond383) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond383) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond383) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond383) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond383) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond383) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond383) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond383) CFA_SP SP+-2
          CFI (cfiCond383) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond384 Using cfiCommon0
          CFI (cfiCond384) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond384) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond384) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond384) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond384) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond384) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond384) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond384) CFA_SP SP+-2
          CFI (cfiCond384) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker385 Using cfiCommon1
          CFI (cfiPicker385) NoFunction
          CFI (cfiPicker385) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond379
          CFI EndBlock cfiCond380
          CFI EndBlock cfiCond381
          CFI EndBlock cfiCond382
          CFI EndBlock cfiCond383
          CFI EndBlock cfiCond384
          CFI EndBlock cfiPicker385
// 3689 
// 3690 /*********************************************************************
// 3691  * @fn          ZDApp_InitZdoCBFunc
// 3692  *
// 3693  * @brief       Call this function to initialize zdoCBFunc[]
// 3694  *
// 3695  * @param       none
// 3696  *
// 3697  * @return      none
// 3698  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3699 void ZDApp_InitZdoCBFunc( void )
ZDApp_InitZdoCBFunc:
          CFI Block cfiBlock386 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
        CODE
// 3700 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3701   uint8 i;
// 3702 
// 3703   for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
        MOV       R2,#0x0
// 3704   {
// 3705     zdoCBFunc[i] = NULL;
??ZDApp_InitZdoCBFunc_0:
        MOV       A,R2
        ADD       A,0xE0 /* A   */
        LCALL     ?Subroutine44 & 0xFFFF
// 3706   }
??CrossCallReturnLabel_39:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       R2
        MOV       A,R2
        CLR       C
        SUBB      A,#0x9
        JC        ??ZDApp_InitZdoCBFunc_0
// 3707 }
        LJMP      ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock386
// 3708 
// 3709 /*********************************************************************
// 3710  * @fn          ZDO_RegisterForZdoCB
// 3711  *
// 3712  * @brief       Call this function to register the higher layer (for
// 3713  *              example, the Application layer or MT layer) with ZDO
// 3714  *              callbacks to get notified of some ZDO indication like
// 3715  *              existence of a concentrator or receipt of a source
// 3716  *              route record.
// 3717  *
// 3718  * @param       indID - ZDO Indication ID
// 3719  * @param       pFn   - Callback function pointer
// 3720  *
// 3721  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3722  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3723 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
          CFI Block cfiBlock387 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
        CODE
// 3724 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
// 3725   // Check the range of the indication ID
// 3726   if ( indID < MAX_ZDO_CB_FUNC )
        CLR       C
        SUBB      A,#0x9
        JNC       ??ZDO_RegisterForZdoCB_0
// 3727   {
// 3728     zdoCBFunc[indID] = pFn;
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     ??Subroutine79_0 & 0xFFFF
// 3729     return ZSuccess;
??CrossCallReturnLabel_165:
        MOV       R1,#0x0
        SJMP      ??ZDO_RegisterForZdoCB_1
// 3730   }
// 3731 
// 3732   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV       R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP      ??Subroutine64_0 & 0xFFFF
// 3733 }
          CFI EndBlock cfiBlock387

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond388 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
          CFI Conditional ??CrossCallReturnLabel_166
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond389 Using cfiCommon0
          CFI (cfiCond389) Function ZDO_SrcRtgIndCB
          CFI (cfiCond389) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond389) CFA_SP SP+-2
          CFI (cfiCond389) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker390 Using cfiCommon1
          CFI (cfiPicker390) NoFunction
          CFI (cfiPicker390) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond388
          CFI EndBlock cfiCond389
          CFI EndBlock cfiPicker390
        REQUIRE ??Subroutine79_0
        ; // Fall through to label ??Subroutine79_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine79_0:
          CFI Block cfiCond391 Using cfiCommon0
          CFI Function ZDApp_RestoreNetworkState
          CFI Conditional ??CrossCallReturnLabel_161
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond392 Using cfiCommon0
          CFI (cfiCond392) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond392) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond392) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond392) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond392) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond392) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond392) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond392) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond392) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond392) CFA_SP SP+-2
          CFI (cfiCond392) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond393 Using cfiCommon0
          CFI (cfiCond393) Function ZDO_JoinConfirmCB
          CFI (cfiCond393) Conditional ??CrossCallReturnLabel_163
          CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond393) CFA_SP SP+-2
          CFI (cfiCond393) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond394 Using cfiCommon0
          CFI (cfiCond394) Function ZDO_JoinConfirmCB
          CFI (cfiCond394) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond394) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond394) CFA_SP SP+-2
          CFI (cfiCond394) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond395 Using cfiCommon0
          CFI (cfiCond395) Function ZDO_RegisterForZdoCB
          CFI (cfiCond395) Conditional ??CrossCallReturnLabel_165
          CFI (cfiCond395) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond395) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond395) CFA_SP SP+-7
          CFI Block cfiCond396 Using cfiCommon0
          CFI (cfiCond396) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond396) Conditional ??CrossCallReturnLabel_166
          CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond396) CFA_SP SP+-2
          CFI (cfiCond396) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond397 Using cfiCommon0
          CFI (cfiCond397) Function ZDO_SrcRtgIndCB
          CFI (cfiCond397) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond397) CFA_SP SP+-2
          CFI (cfiCond397) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker398 Using cfiCommon1
          CFI (cfiPicker398) NoFunction
          CFI (cfiPicker398) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond391
          CFI EndBlock cfiCond392
          CFI EndBlock cfiCond393
          CFI EndBlock cfiCond394
          CFI EndBlock cfiCond395
          CFI EndBlock cfiCond396
          CFI EndBlock cfiCond397
          CFI EndBlock cfiPicker398
// 3734 
// 3735 /*********************************************************************
// 3736  * @fn          ZDO_DeregisterForZdoCB
// 3737  *
// 3738  * @brief       Call this function to de-register the higher layer (for
// 3739  *              example, the Application layer or MT layer) with ZDO
// 3740  *              callbacks to get notified of some ZDO indication like
// 3741  *              existence of a concentrator or receipt of a source
// 3742  *              route record.
// 3743  *
// 3744  * @param       indID - ZDO Indication ID
// 3745  *
// 3746  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3747  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3748 ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
ZDO_DeregisterForZdoCB:
          CFI Block cfiBlock399 Using cfiCommon0
          CFI Function ZDO_DeregisterForZdoCB
        CODE
// 3749 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
// 3750   // Check the range of the indication ID
// 3751   if ( indID < MAX_ZDO_CB_FUNC )
        CLR       C
        SUBB      A,#0x9
        JNC       ??ZDO_DeregisterForZdoCB_0
// 3752   {
// 3753     zdoCBFunc[indID] = NULL;
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_26:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3754     return ZSuccess;
        MOV       R1,A
        SJMP      ??ZDO_DeregisterForZdoCB_1
// 3755   }
// 3756 
// 3757   return ZInvalidParameter;
??ZDO_DeregisterForZdoCB_0:
        MOV       R1,#0x2
??ZDO_DeregisterForZdoCB_1:
        LJMP      ??Subroutine64_0 & 0xFFFF
// 3758 }
          CFI EndBlock cfiBlock399

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond400 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
          CFI Conditional ??CrossCallReturnLabel_25
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond401 Using cfiCommon0
          CFI (cfiCond401) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond401) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond401) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond401) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond401) CFA_SP SP+-7
          CFI Block cfiPicker402 Using cfiCommon1
          CFI (cfiPicker402) NoFunction
          CFI (cfiPicker402) Picker
        MOV       A,R1
        ADD       A,R1
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
          CFI EndBlock cfiCond400
          CFI EndBlock cfiCond401
          CFI EndBlock cfiPicker402

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond403 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
          CFI Conditional ??CrossCallReturnLabel_39
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function ZDO_RegisterForZdoCB
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_25
          CFI (cfiCond404) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond404) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond404) CFA_SP SP+-9
          CFI Block cfiCond405 Using cfiCommon0
          CFI (cfiCond405) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond405) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_26
          CFI (cfiCond405) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond405) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond405) CFA_SP SP+-9
          CFI Block cfiPicker406 Using cfiCommon1
          CFI (cfiPicker406) NoFunction
          CFI (cfiPicker406) Picker
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,#zdoCBFunc & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(zdoCBFunc >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiCond405
          CFI EndBlock cfiPicker406
// 3759 
// 3760 #if defined ( ZDP_BIND_VALIDATION )
// 3761 #if defined ( REFLECTOR )
// 3762 /*********************************************************************
// 3763  * @fn          ZDApp_SetPendingBindDefault
// 3764  *
// 3765  * @brief       This function initializes a specific entry of pending
// 3766  *              Bind Request.
// 3767  *
// 3768  * @param       pendBindReq - pointer to the entry in the table
// 3769  *
// 3770  * @return      none
// 3771  */
// 3772 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
// 3773 {
// 3774   // Set it to an initial value
// 3775   osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
// 3776 
// 3777   // We are checking for age 0 for aged-out records
// 3778   pendBindReq->age = 0;
// 3779 }
// 3780 
// 3781 /*********************************************************************
// 3782  * @fn          ZDApp_InitPendingBind
// 3783  *
// 3784  * @brief       This function initializes the buffer that holds
// 3785  *              pending Bind Request messages if no valid NWK address
// 3786  *              exists in Address Manager and a Network Address Req
// 3787  *              has been sent out.
// 3788  *
// 3789  * @param       none
// 3790  *
// 3791  * @return      none
// 3792  */
// 3793 void ZDApp_InitPendingBind( void )
// 3794 {
// 3795   if ( ZDAppPendingBindReq == NULL )
// 3796   {
// 3797     if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
// 3798     {
// 3799       uint8 i;
// 3800 
// 3801       for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3802       {
// 3803         // Set to default values
// 3804         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3805       }
// 3806     }
// 3807   }
// 3808 }
// 3809 
// 3810 /*********************************************************************
// 3811  * @fn          ZDApp_GetEmptyPendingBindReq
// 3812  *
// 3813  * @brief       This function looks for an empty entry.
// 3814  *
// 3815  * @param       none
// 3816  *
// 3817  * @return      Pointer to entry
// 3818  */
// 3819 ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
// 3820 {
// 3821   uint8 i;
// 3822 
// 3823   if ( ZDAppPendingBindReq != NULL )
// 3824   {
// 3825     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3826     {
// 3827       if ( ZDAppPendingBindReq[i].age == 0 )
// 3828       {
// 3829         return ( &ZDAppPendingBindReq[i] );
// 3830       }
// 3831     }
// 3832   }
// 3833 
// 3834   // No empty entry was found
// 3835   return NULL;
// 3836 }
// 3837 
// 3838 /*********************************************************************
// 3839  * @fn          ZDApp_ProcessPendingBindReq
// 3840  *
// 3841  * @brief       Process pending entry based on EXT address.
// 3842  *
// 3843  * @param       extAddr - of device to look up
// 3844  *
// 3845  * @return      none
// 3846  */
// 3847 void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
// 3848 {
// 3849   uint8 i;
// 3850 
// 3851   // Loop through all the pending entries for that Ext Address
// 3852   // to create Bind Entries and send Bind Rsp
// 3853   if ( ZDAppPendingBindReq != NULL )
// 3854   {
// 3855     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3856     {
// 3857       if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
// 3858                         extAddr, Z_EXTADDR_LEN ) == TRUE )
// 3859       {
// 3860         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
// 3861 
// 3862         // Add Bind entry
// 3863         if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
// 3864                                 ZDAppPendingBindReq[i].bindReq.clusterID,
// 3865                                 &(ZDAppPendingBindReq[i].bindReq.dstAddress),
// 3866                                 ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
// 3867         {
// 3868           // valid entry
// 3869           bindStat = ZDP_SUCCESS;
// 3870 
// 3871           // Notify to save info into NV
// 3872           ZDApp_NVUpdate();
// 3873         }
// 3874 
// 3875         // Send back a response message
// 3876         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
// 3877                      bindStat, ZDAppPendingBindReq[i].securityUse );
// 3878 
// 3879         // Set the pending request entry to default values
// 3880         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3881       }
// 3882     }
// 3883   }
// 3884 }
// 3885 
// 3886 /*********************************************************************
// 3887  * @fn          ZDApp_AgeOutPendingBindEntry
// 3888  *
// 3889  * @brief       Age out pending Bind Req entries.
// 3890  *
// 3891  * @param       none
// 3892  *
// 3893  * @return      none
// 3894  */
// 3895 void ZDApp_AgeOutPendingBindEntry( void )
// 3896 {
// 3897   uint8 i;
// 3898   bool entryFound = FALSE;
// 3899 
// 3900   if ( ZDAppPendingBindReq != NULL )
// 3901   {
// 3902     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
// 3903     {
// 3904       if ( ZDAppPendingBindReq[i].age > 1 )
// 3905       {
// 3906         ZDAppPendingBindReq[i].age--;
// 3907 
// 3908         entryFound = TRUE;
// 3909       }
// 3910       else if ( ZDAppPendingBindReq[i].age == 1 )
// 3911       {
// 3912         // The record has aged out and has valid data
// 3913         AddrMgrEntry_t entry;
// 3914         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
// 3915 
// 3916         entry.user = ADDRMGR_USER_BINDING;
// 3917 
// 3918         // Remove the entry in address manager so we do not keep entries
// 3919         // with invalid addresses
// 3920         AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
// 3921 
// 3922         if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
// 3923         {
// 3924           if ( entry.nwkAddr == INVALID_NODE_ADDR )
// 3925           {
// 3926             // Release the entry that contains an invalid NWK address
// 3927             AddrMgrEntryRelease( &entry );
// 3928           }
// 3929         }
// 3930 
// 3931         // Send the Bind Response with failure status
// 3932         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
// 3933                      &(ZDAppPendingBindReq[i].srcAddr),
// 3934                      bindStat, ZDAppPendingBindReq[i].securityUse );
// 3935 
// 3936         // Clear the record and set to default values
// 3937         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
// 3938       }
// 3939     }
// 3940   }
// 3941 
// 3942   if ( entryFound == FALSE )
// 3943   {
// 3944     osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
// 3945   }
// 3946   else
// 3947   {
// 3948     osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
// 3949                         AGE_OUT_PEND_BIND_REQ_DELAY );
// 3950   }
// 3951 }
// 3952 #endif
// 3953 #endif
// 3954 
// 3955 /*********************************************************************
// 3956  * @fn          ZDO_ChangeState
// 3957  *
// 3958  * @brief       Chance the device state
// 3959  *
// 3960  * @param       state - new state
// 3961  *
// 3962  * @return      none
// 3963  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3964 void ZDApp_ChangeState( devStates_t state )
ZDApp_ChangeState:
          CFI Block cfiBlock407 Using cfiCommon0
          CFI Function ZDApp_ChangeState
        CODE
// 3965 {
        FUNCALL ZDApp_ChangeState, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3966   if ( devState != state )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??CrossCallReturnLabel_143
// 3967   {
// 3968     devState = state;
        MOV       A,R1
        MOVX      @DPTR,A
// 3969     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
// 3970   }
// 3971 }
??CrossCallReturnLabel_143:
        LJMP      ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock407
// 3972 
// 3973 /*********************************************************************
// 3974  * @fn      ZDApp_SetRejoinScanDuration()
// 3975  *
// 3976  * @brief   Sets scan duration for rejoin for an end device
// 3977  *
// 3978  * @param   rejoinScanDuration - milliseconds
// 3979  *
// 3980  * @return  none
// 3981  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3982 void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
ZDApp_SetRejoinScanDuration:
          CFI Block cfiBlock408 Using cfiCommon0
          CFI Function ZDApp_SetRejoinScanDuration
        CODE
// 3983 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 3984   zgDefaultRejoinScan = rejoinScanDuration;
        MOV       DPTR,#zgDefaultRejoinScan
          CFI EndBlock cfiBlock408
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 3985 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock409 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
        LJMP      ??Subroutine63_0 & 0xFFFF
          CFI EndBlock cfiBlock409
// 3986 
// 3987 /*********************************************************************
// 3988  * @fn      ZDApp_SetRejoinBackoffDuration()
// 3989  *
// 3990  * @brief   Sets rejoin backoff duration for rejoin for an end device
// 3991  *
// 3992  * @param   rejoinBackoffDuration - milliseconds
// 3993  *
// 3994  * @return  none
// 3995  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3996 void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
ZDApp_SetRejoinBackoffDuration:
          CFI Block cfiBlock410 Using cfiCommon0
          CFI Function ZDApp_SetRejoinBackoffDuration
        CODE
// 3997 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 3998   zgDefaultRejoinBackoff = rejoinBackoffDuration;
        MOV       DPTR,#zgDefaultRejoinBackoff
        SJMP      ?Subroutine7
// 3999 }
          CFI EndBlock cfiBlock410
// 4000 
// 4001 /*********************************************************************
// 4002  * @fn          ZDApp_SetParentAnnceTimer
// 4003  *
// 4004  * @brief       This function sets up the link status timer.
// 4005  *
// 4006  * @param       none
// 4007  *
// 4008  * @return      none
// 4009  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4010 void ZDApp_SetParentAnnceTimer( void )
ZDApp_SetParentAnnceTimer:
          CFI Block cfiBlock411 Using cfiCommon0
          CFI Function ZDApp_SetParentAnnceTimer
        CODE
// 4011 {
        FUNCALL ZDApp_SetParentAnnceTimer, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SetParentAnnceTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 4012   // Parent Announce shall be sent no earlier than 10 seconds
// 4013   uint32 timeout = 10000;
// 4014 
// 4015   // Add with jitter of up to 10 seconds
// 4016   timeout += (osal_rand() & 0x2710);
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
// 4017 
// 4018   // Set timer to send the message
// 4019   osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       A,R2
        ANL       A,#0x10
        MOV       ?V0,A
        MOV       A,R3
        ANL       A,#0x27
        MOV       ?V1,A
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       DPTR,#__Constant_2710
        MOV       R0,#?V0
        LCALL     ?L_ADD_X
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        LJMP      ?Subroutine6 & 0xFFFF
// 4020 }
          CFI EndBlock cfiBlock411

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for prevDevState>`:
        DATA8
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devStartMode>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DATA8
        DB 0
        DB 0
        DATA16
        DW ZDAppTaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_SavedPollRate>`:
        DATA32
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SecInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDOInitDeviceEx::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDOInitDeviceEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ReadNetworkRestoreState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppDetermineDeviceType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkStartEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceAuthEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNetworkStateEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNetworkState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNetworkState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitUserDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppCheckForHoldKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RegisterCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessNetworkJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StoreNwkSecMaterial::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StoreNwkSecMaterial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ForceConcentratorChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ForceConcentratorChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkSecMaterial::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkSecMaterial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerCancel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlBypass::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlStartup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkDiscoveryReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_JoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_JoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceConfigured::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceConfigured

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendEventMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkDiscoveryConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkDescListProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkDescListProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkFormationConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_beaconNotifyIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_beaconNotifyIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_StartRouterConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PermitJoinCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PermitJoinCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_AddrChangeIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ConcentratorIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SyncIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ManytoOneFailureIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PollConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AddrMgrWriteNVRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateDeviceIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeMatchDescRespPermission::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkStateUpdateCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NodeProfileSync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StartJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StopJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AnnounceNewAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendParentAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendParentAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NVUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_CoordStartPANIDConflictCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SrcRtgIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitZdoCBFunc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitZdoCBFunc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_DeregisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_DeregisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinScanDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinScanDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinBackoffDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinBackoffDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetParentAnnceTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetParentAnnceTimer

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4e2:
        DD 1250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_258:
        DD 600

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2bc:
        DD 700

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        END
// 4021 
// 4022 /*********************************************************************
// 4023 *********************************************************************/
// 
// 7 916 bytes in segment BANKED_CODE
//   450 bytes in segment BANK_RELAYS
//    14 bytes in segment XDATA_I
//    14 bytes in segment XDATA_ID
//    48 bytes in segment XDATA_ROM_C
//    65 bytes in segment XDATA_Z
// 
//   464 bytes of CODE     memory
//    24 bytes of CONST    memory (+ 24 bytes shared)
// 7 916 bytes of HUGECODE memory
//    79 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
