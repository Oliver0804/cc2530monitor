###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               08/Feb/2022  22:10:24
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\usertemp\AppData\Local\Temp\EWAA9E.tmp ("I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\zdo\ZDApp.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D ZCL_REPORT -D
#        HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D xHAL_LCD_OLED12864 -D
#        HAL_ADC=TRUE -D HAL_UART=TRUE -D INT_HEAP_LEN=2048 -lC
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\ZDApp.lst
#    Object file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\ZDApp.r51
#
###############################################################################

I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66             
     67          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     68          #include "gp_common.h"
     69          #endif
     70             
     71          #include "bdb.h"
     72          #include "bdb_interface.h"
     73          
     74          #include "ssp.h"
     75          
     76          /* HAL */
     77          #include "hal_led.h"
     78          #include "hal_lcd.h"
     79          #include "hal_key.h"
     80          
     81          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     82            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     83          #endif
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          #if !defined( NWK_START_DELAY )
     90            #define NWK_START_DELAY             100   // in milliseconds
     91          #endif
     92          
     93          #if !defined( LEAVE_RESET_DELAY )
     94            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     95          #endif
     96          
     97          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     98            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     99          #endif
    100          
    101          #if !defined( BEACON_REQUEST_DELAY )
    102            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    103          #endif
    104          
    105          #if !defined( BEACON_REQ_DELAY_MASK )
    106            #define BEACON_REQ_DELAY_MASK       0x007F
    107          #endif
    108          
    109          #define MAX_RESUME_RETRY            3
    110          
    111          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    112          
    113          // Beacon Order Settings (see NLMEDE.h)
    114          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    115          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    116          
    117          // Leave control bits
    118          #define ZDAPP_LEAVE_CTRL_INIT 0
    119          #define ZDAPP_LEAVE_CTRL_SET  1
    120          #define ZDAPP_LEAVE_CTRL_RA   2
    121          
    122          // Address Manager Stub Implementation
    123          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    124          
    125          
    126          #if !defined ZDO_NV_SAVE_RFDs
    127          #define ZDO_NV_SAVE_RFDs  TRUE
    128          #endif
    129          
    130          // Delay time before updating NWK NV data to force fewer writes during high activity.
    131          #if ZDO_NV_SAVE_RFDs
    132          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    133          #else
    134          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    135          #endif
    136          
    137          // Timeout value to process New Devices
    138          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    139          
    140          
    141          //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
    142          #if defined ( ZDP_BIND_VALIDATION )
    143          #if !defined MAX_PENDING_BIND_REQ
    144          #define MAX_PENDING_BIND_REQ 3
    145          #endif
    146          #endif
    147          
    148          #ifdef LEGACY_ZDO_LEDS
    149          #define zdoHalLedSet HalLedSet
    150          #else
    151          #define zdoHalLedSet(...)
    152          #endif
    153          
    154          /******************************************************************************
    155           * TYPEDEFS
    156           */
    157          typedef struct
    158          {
    159            void   *next;
    160            uint16 shortAddr;
    161            uint16 timeDelta;
    162          } ZDAppNewDevice_t;
    163          
    164          /*********************************************************************
    165           * GLOBAL VARIABLES
    166           */
    167          
    168          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          #endif
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    188          
    189          #if defined ( ZDP_BIND_VALIDATION )
    190          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
    191          #endif
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 FrameCounterUpdated = FALSE;
   \                     FrameCounterUpdated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          /*********************************************************************
    196           * EXTERNAL VARIABLES
    197           */
    198          
    199          extern bool    requestNewTrustCenterLinkKey;
    200          extern uint32  requestLinkKeyTimeout;
    201          extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    202          /*********************************************************************
    203           * EXTERNAL FUNCTIONS
    204           */
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          void ZDApp_NetworkStartEvt( void );
    210          void ZDApp_DeviceAuthEvt( void );
    211          void ZDApp_SaveNetworkStateEvt( void );
    212          
    213          uint8 ZDApp_ReadNetworkRestoreState( void );
    214          uint8 ZDApp_RestoreNetworkState( void );
    215          void ZDAppDetermineDeviceType( void );
    216          void ZDApp_InitUserDesc( void );
    217          void ZDAppCheckForHoldKey( void );
    218          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    219          void ZDApp_ProcessNetworkJoin( void );
    220          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    221          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    222          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    223          
    224          void ZDApp_SecInit( uint8 state );
    225          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    226          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    227          
    228          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    229          
    230          void ZDApp_ResetTimerStart( uint16 delay );
    231          void ZDApp_ResetTimerCancel( void );
    232          void ZDApp_LeaveCtrlInit( void );
    233          void ZDApp_LeaveCtrlSet( uint8 ra );
    234          uint8 ZDApp_LeaveCtrlBypass( void );
    235          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    236          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
    237          void ZDApp_NodeProfileSync( uint8 stackProfile );
    238          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    239          void ZDApp_RegisterCBs( void );
    240          void ZDApp_InitZdoCBFunc(void);
    241          #if defined ( ZDP_BIND_VALIDATION )
    242          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    243          void ZDApp_InitPendingBind( void );
    244          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    245          void ZDApp_AgeOutPendingBindEntry( void );
    246          #endif
    247          
    248          void ZDApp_SetParentAnnceTimer( void );
    249          void ZDApp_StoreNwkSecMaterial(void);
    250          
    251          /*********************************************************************
    252           * LOCAL VARIABLES
    253           */
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    261          
    262          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          
    265          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
    266            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
    267            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    268                                  // to parent. Set to make the device do an Orphan scan.
    269          #else
    270            // Set the default to coodinator

   \                                 In  segment XDATA_I, align 1, keep-with-next
    271            devStartModes_t devStartMode = MODE_HARD;
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devStartMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    272          #endif
    273          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    274          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000007                REQUIRE __INIT_XDATA_I
    277          {
    278            ZDO_EP,
    279            0,
    280            &ZDAppTaskID,
    281            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    282            (afNetworkLatencyReq_t)0            // No Network Latency req
    283          };
    284          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    285          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    286          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    287          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    288          
    289          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    290          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    291          
    292          /*********************************************************************
    293           * @fn      ZDApp_Init
    294           *
    295           * @brief   ZDApp Initialization function.
    296           *
    297           * @param   task_id - ZDApp Task ID
    298           *
    299           * @return  None
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    302          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    303            // Save the task ID
    304            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    305          
    306            // Initialize the ZDO global device short address storage
    307            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    308            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    309            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    310          
    311            // Initialize ZDO items and setup the device - type of device to create.
    312            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    313          
    314            // Register the endpoint description with the AF
    315            // This task doesn't have a Simple description, but we still need
    316            // to register the endpoint.
    317            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    318          
    319          #if defined( ZDO_USERDESC_RESPONSE )
    320            ZDApp_InitUserDesc();
    321          #endif // ZDO_USERDESC_RESPONSE
    322          
    323            // Initialize the ZDO callback function pointers zdoCBFunc[]
    324            ZDApp_InitZdoCBFunc();
   \   000026                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000026   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    325          
    326            ZDApp_RegisterCBs();
   \   000029                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000029   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    327          
    328          #if defined ( ZDP_BIND_VALIDATION )
    329          #if defined ( REFLECTOR )
    330            ZDApp_InitPendingBind();
    331          #endif
    332          #endif
    333          } /* ZDApp_Init() */
   \   00002C   02....       LJMP      ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    334          
    335          /*********************************************************************
    336           * @fn          ZDApp_SecInit
    337           *
    338           * @brief       ZDApp initialize security.
    339           *
    340           * @param       state - device initialization state
    341           *
    342           * @return      none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    345          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    346            uint8 zgPreConfigKey[SEC_KEY_LEN];
    347          
    348            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    349            {
    350              // Set the Trust Center bit
    351              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
   \   00000C   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   4401         ORL       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
    352            }
    353          
    354            // Initialize ZigBee Device Security Manager
    355            ZDSecMgrInit(state);
   \   000013                ; Setup parameters for call to function ZDSecMgrInit
   \   000013   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    356          
    357            if ( ZG_SECURE_ENABLED )
    358            {
    359              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   000016   E5..         MOV       A,?V0
   \   000018   602C         JZ        ??ZDApp_SecInit_0
    360              {
    361                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001A   90....       MOV       DPTR,#_NIB + 61
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   7026         JNZ       ??ZDApp_SecInit_0
    362                {
    363                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    364                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    365                  {
    366                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000020                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   7A62         MOV       R2,#0x62
   \   000026   7B00         MOV       R3,#0x0
   \   000028   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    367                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   00002B                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   AA..         MOV       R2,?XSP + 0
   \   00002F   AB..         MOV       R3,?XSP + 1
   \   000031   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    368                      SSP_SwitchNwkKey( 0 );
   \   000034                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000034   7900         MOV       R1,#0x0
   \   000036   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    369          
    370                      // clear local copy of key
    371                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   7C10         MOV       R4,#0x10
   \   00003B   7D00         MOV       R5,#0x0
   \   00003D   7900         MOV       R1,#0x0
   \   00003F   AA..         MOV       R2,?XSP + 0
   \   000041   AB..         MOV       R3,?XSP + 1
   \   000043   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    372                  }
    373                }
    374              }
    375          
    376              // clean the new devices list when Security module is initialized
    377              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000046   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000049   6014         JZ        ??ZDApp_SecInit_1
    378              {
    379                ZDAppNewDevice_t *pNewDeviceNext;
    380          
    381                while ( ZDApp_NewDeviceList )
    382                {
    383                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   00004B   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00004E   FE           MOV       R6,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FF           MOV       R7,A
    384                  osal_mem_free( ZDApp_NewDeviceList );
   \   000052                ; Setup parameters for call to function osal_mem_free
   \   000052   12....       LCALL     ?Subroutine24 & 0xFFFF
    385                  ZDApp_NewDeviceList = pNewDeviceNext;
    386                }
   \                     ??CrossCallReturnLabel_14:
   \   000055   EE           MOV       A,R6
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   EF           MOV       A,R7
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   F9           MOV       R1,A
   \   00005B   EE           MOV       A,R6
   \   00005C   49           ORL       A,R1
   \   00005D   70EC         JNZ       ??ZDApp_SecInit_2
    387              }
    388            }
    389          }
   \                     ??ZDApp_SecInit_1:
   \   00005F   7410         MOV       A,#0x10
   \   000061   02....       LJMP      ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00000B   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine70_0
   \   000003                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    390          
    391          /*********************************************************************
    392           * @fn      ZDApp_event_loop()
    393           *
    394           * @brief   Main event loop for Zigbee device objects task. This function
    395           *          should be called at periodic intervals.
    396           *
    397           * @param   task_id - Task ID
    398           * @param   events  - Bitmap of events
    399           *
    400           * @return  none
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    403          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    404            uint8 *msg_ptr;
    405          
    406            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL       A,#0x80
   \   00000D   702D         JNZ       ??ZDApp_event_loop_0
    407            {
    408              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    409              {
    410                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    411          
    412                // Release the memory
    413                osal_msg_deallocate( msg_ptr );
    414              }
    415          
    416              // Return unprocessed events
    417              return (events ^ SYS_EVENT_MSG);
    418            }
    419          
    420            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EA           MOV       A,R2
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5040         JNC       ??ZDApp_event_loop_1
    421            {
    422              // Initialize apps and start the network
    423              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    424          
    425              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    426                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV       R4,#0xf
   \   00001B   7B0F         MOV       R3,#0xf
   \   00001D   90....       MOV       DPTR,#devStartMode
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    427          
    428              // Return unprocessed events
    429              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV       A,R6
   \   00002D   6401         XRL       A,#0x1
   \   00002F   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    430            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV       R2,?V0
   \   000037   AB..         MOV       R3,?V1
   \   000039   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV       DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV       ?V0,R2
   \   000046   8B..         MOV       ?V1,R3
   \   000048   EA           MOV       A,R2
   \   000049   4B           ORL       A,R3
   \   00004A   70E6         JNZ       ??ZDApp_event_loop_3
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   6480         XRL       A,#0x80
   \   000051   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    431          
    432            if ( ZSTACK_ROUTER_BUILD )
    433            {
    434              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_1:
   \   000054   5402         ANL       A,#0x2
   \   000056   6009         JZ        ??ZDApp_event_loop_5
    435              {
    436                ZDApp_NetworkStartEvt();
   \   000058                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000058   12....       LCALL     `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    437          
    438                // Return unprocessed events
    439                return (events ^ ZDO_NETWORK_START);
   \   00005B   EE           MOV       A,R6
   \   00005C   6402         XRL       A,#0x2
   \   00005E   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    440              }
    441          
    442              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_5:
   \   000061   EA           MOV       A,R2
   \   000062   5420         ANL       A,#0x20
   \   000064   602B         JZ        ??ZDApp_event_loop_6
    443              {
    444                if ( nwkStatus == ZSuccess )
   \   000066   90....       MOV       DPTR,#nwkStatus
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   701D         JNZ       ??ZDApp_event_loop_7
    445                {
    446                  if ( devState == DEV_END_DEVICE )
   \   00006C   90....       MOV       DPTR,#devState
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   6406         XRL       A,#0x6
   \   000072   7005         JNZ       ??ZDApp_event_loop_8
    447                  {
    448                    ZDApp_ChangeState( DEV_ROUTER );
   \   000074                ; Setup parameters for call to function ZDApp_ChangeState
   \   000074   7907         MOV       R1,#0x7
   \   000076   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    449                  }
    450          
    451                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_8:
   \   000079                ; Setup parameters for call to function osal_pwrmgr_device
   \   000079   7900         MOV       R1,#0x0
   \   00007B   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    452          
    453                  if ( zgChildAgingEnable == TRUE )
   \   00007E   90....       MOV       DPTR,#zgChildAgingEnable
   \   000081   E0           MOVX      A,@DPTR
   \   000082   6401         XRL       A,#0x1
   \   000084   7003         JNZ       ??ZDApp_event_loop_7
    454                  {
    455                    // Once the device has changed its state to a ROUTER set the timer to send
    456                    // Parent annce
    457                    ZDApp_SetParentAnnceTimer();
   \   000086                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000086   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
    458                  }
    459                }
    460                else
    461                {
    462                  // remain as end device
    463                }
    464                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_7:
   \   000089                ; Setup parameters for call to function osal_set_event
   \   000089   12....       LCALL     ?Subroutine18 & 0xFFFF
    465          
    466                // Return unprocessed events
    467                return (events ^ ZDO_ROUTER_START);
   \                     ??CrossCallReturnLabel_138:
   \   00008C   EE           MOV       A,R6
   \   00008D   6420         XRL       A,#0x20
   \   00008F   8074         SJMP      ??ZDApp_event_loop_2
    468              }
    469          
    470              if ( events & ZDO_PARENT_ANNCE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   000091   EB           MOV       A,R3
   \   000092   5440         ANL       A,#0x40
   \   000094   600B         JZ        ??ZDApp_event_loop_9
    471              {
    472                ZDApp_SendParentAnnce();
   \   000096                ; Setup parameters for call to function ZDApp_SendParentAnnce
   \   000096   12....       LCALL     `??ZDApp_SendParentAnnce::?relay`; Banked call to: ZDApp_SendParentAnnce
    473          
    474                // Return unprocessed events
    475                return (events ^ ZDO_PARENT_ANNCE_EVT);
   \   000099   EE           MOV       A,R6
   \   00009A   FA           MOV       R2,A
   \   00009B   EF           MOV       A,R7
   \   00009C   6440         XRL       A,#0x40
   \   00009E   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    476              }
    477            }
    478          
    479            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_9:
   \   0000A1   EB           MOV       A,R3
   \   0000A2   5420         ANL       A,#0x20
   \   0000A4   6034         JZ        ??ZDApp_event_loop_10
    480            {
    481              if( devState == DEV_NWK_BACKOFF )
   \   0000A6   90....       MOV       DPTR,#devState
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   640C         XRL       A,#0xc
   \   0000AC   700D         JNZ       ??ZDApp_event_loop_11
    482              {
    483                ZDApp_ChangeState(DEV_NWK_DISC);
   \   0000AE                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000AE   7902         MOV       R1,#0x2
   \   0000B0   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    484                // Restart scan for rejoin
    485                ZDApp_StartJoiningCycle();
   \   0000B3                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   0000B3   12....       LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    486                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   0000B6                ; Setup parameters for call to function osal_start_timerEx
   \   0000B6   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   0000B9   800B         SJMP      ??ZDApp_event_loop_12
    487              }
    488              else
    489              {
    490                // Rejoin backoff, silent period
    491                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_11:
   \   0000BB                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000BB   790C         MOV       R1,#0xc
   \   0000BD   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    492                ZDApp_StopJoiningCycle();
   \   0000C0                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   0000C0   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    493                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   0000C3                ; Setup parameters for call to function osal_start_timerEx
   \   0000C3   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_12:
   \   0000C6   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000C9   7A00         MOV       R2,#0x0
   \   0000CB   7B20         MOV       R3,#0x20
    494              }
   \   0000CD   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
    495          
    496              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   0000D3   EE           MOV       A,R6
   \   0000D4   FA           MOV       R2,A
   \   0000D5   EF           MOV       A,R7
   \   0000D6   6420         XRL       A,#0x20
   \   0000D8   8056         SJMP      ??ZDApp_event_loop_4
    497            }
    498          
    499            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_10:
   \   0000DA   EA           MOV       A,R2
   \   0000DB   5410         ANL       A,#0x10
   \   0000DD   602A         JZ        ??ZDApp_event_loop_13
    500            {
    501              ZDO_UpdateNwkStatus( devState );
   \   0000DF                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000DF   90....       MOV       DPTR,#devState
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F9           MOV       R1,A
   \   0000E4   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    502          
    503              // At start up, do one MTO route discovery if the device is a concentrator
    504              if ( zgConcentratorEnable == TRUE )
   \   0000E7   90....       MOV       DPTR,#zgConcentratorEnable
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   6401         XRL       A,#0x1
   \   0000ED   7013         JNZ       ??ZDApp_event_loop_14
    505              {
    506                // Start next event
    507                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000EF                ; Setup parameters for call to function osal_start_timerEx
   \   0000EF   90....       MOV       DPTR,#__Constant_64
   \   0000F2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F5   7A00         MOV       R2,#0x0
   \   0000F7   7B08         MOV       R3,#0x8
   \   0000F9   90....       MOV       DPTR,#NWK_TaskID
   \   0000FC   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    508              }
   \                     ??CrossCallReturnLabel_87:
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
    509          
    510              // Return unprocessed events
    511              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_14:
   \   000102   EE           MOV       A,R6
   \   000103   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   000105   FA           MOV       R2,A
   \   000106   EF           MOV       A,R7
   \   000107   8027         SJMP      ??ZDApp_event_loop_4
    512            }
    513          
    514            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_13:
   \   000109   EA           MOV       A,R2
   \   00010A   5408         ANL       A,#0x8
   \   00010C   6006         JZ        ??ZDApp_event_loop_15
    515            {
    516              // User defined logic
    517          
    518              // Return unprocessed events
    519              return (events ^ ZDO_COMMAND_CNF);
   \   00010E   EA           MOV       A,R2
   \   00010F   6408         XRL       A,#0x8
   \   000111   FA           MOV       R2,A
   \   000112   8037         SJMP      ??ZDApp_event_loop_16
    520            }
    521          
    522            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_15:
   \   000114   EB           MOV       A,R3
   \   000115   5401         ANL       A,#0x1
   \   000117   601A         JZ        ??ZDApp_event_loop_17
    523            {
    524              // Save only in valid state
    525              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   000119   90....       MOV       DPTR,#_NIB + 35
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F8           MOV       R0,A
   \   00011E   7408         MOV       A,#0x8
   \   000120   68           XRL       A,R0
   \   000121   6005         JZ        ??ZDApp_event_loop_18
   \   000123   7404         MOV       A,#0x4
   \   000125   68           XRL       A,R0
   \   000126   7003         JNZ       ??ZDApp_event_loop_19
    526              {
    527                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_18:
   \   000128                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   000128   12....       LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    528              }
    529          
    530              // Return unprocessed events
    531              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_19:
   \   00012B   EE           MOV       A,R6
   \   00012C   FA           MOV       R2,A
   \   00012D   EF           MOV       A,R7
   \   00012E   6401         XRL       A,#0x1
   \                     ??ZDApp_event_loop_4:
   \   000130   FB           MOV       R3,A
   \   000131   8018         SJMP      ??ZDApp_event_loop_16
    532            }
    533          
    534            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_17:
   \   000133   EA           MOV       A,R2
   \   000134   5404         ANL       A,#0x4
   \   000136   600A         JZ        ??ZDApp_event_loop_20
    535            {
    536          #ifdef ZBA_FALLBACK_NWKKEY
    537              if ( devState == DEV_END_DEVICE_UNAUTH )
    538              {
    539                ZDSecMgrFallbackNwkKey();
    540              }
    541              else
    542          #endif
    543              {
    544                // Set the NV startup option to force a "new" join.
    545                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000138                ; Setup parameters for call to function zgWriteStartupOptions
   \   000138   7A02         MOV       R2,#0x2
   \   00013A   79FF         MOV       R1,#-0x1
   \   00013C   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    546          
    547                // The device has been in the UNAUTH state, so reset
    548                // Note: there will be no return from this call
    549                SystemResetSoft();
   \   00013F                ; Setup parameters for call to function Onboard_soft_reset
   \   00013F   12....       LCALL     Onboard_soft_reset & 0xFFFF
    550              }
    551            }
    552          
    553          #if defined ( ZDP_BIND_VALIDATION )
    554            if ( events & ZDO_PENDING_BIND_REQ_EVT )
    555            {
    556          #if defined ( REFLECTOR )
    557              ZDApp_AgeOutPendingBindEntry();
    558          #endif
    559              // Return unprocessed events
    560              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
    561            }
    562          #endif
    563          
    564            if ( ZG_SECURE_ENABLED )
    565            {
    566              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_20:
   \   000142                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000142   EE           MOV       A,R6
   \   000143   FA           MOV       R2,A
   \   000144   EF           MOV       A,R7
   \   000145   FB           MOV       R3,A
   \   000146   A9..         MOV       R1,?V2
   \   000148   12....       LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    567            }
   \                     ??ZDApp_event_loop_16:
   \   00014B   02....       LJMP      ??Subroutine66_0 & 0xFFFF
    568            else
    569            {
    570              // Discard or make more handlers
    571              return 0;
    572            }
    573          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine74_0
   \   000002                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine75_0
   \   000002                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000008   22           RET
    574          
    575          /*********************************************************************
    576           * @fn      ZDApp_ProcessSecEvent()
    577           *
    578           * @brief   Process incoming security events.
    579           *
    580           * @param   task_id - Task ID
    581           * @param   events  - Bitmap of events
    582           *
    583           * @return  none
    584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    585          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    586          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    587            (void)task_id;  // Intentionally unreferenced parameter
    588          
    589            if ( ZSTACK_ROUTER_BUILD )
    590            {
    591              if ( events & ZDO_NEW_DEVICE )
   \   000009   EA           MOV       A,R2
   \   00000A   5440         ANL       A,#0x40
   \   00000C   6074         JZ        ??ZDApp_ProcessSecEvent_0
    592              {
    593                // process the new device event
    594                if ( ZDApp_NewDeviceList )
   \   00000E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000011   606A         JZ        ??ZDApp_ProcessSecEvent_1
    595                {
    596                  ZDAppNewDevice_t *pNewDevice;
    597                  uint16 timeDelta;
    598          
    599                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000013                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000013   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00001B   12....       LCALL     `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
    600          
    601                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   00001E   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000021   F5..         MOV       ?V0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V1,A
    602                  osal_mem_free( ZDApp_NewDeviceList );
   \   000027                ; Setup parameters for call to function osal_mem_free
   \   000027   12....       LCALL     ?Subroutine24 & 0xFFFF
    603                  ZDApp_NewDeviceList = pNewDevice;
   \                     ??CrossCallReturnLabel_15:
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V1
   \   000030   F0           MOVX      @DPTR,A
    604          
    605                  if ( pNewDevice )
   \   000031   E5..         MOV       A,?V0
   \   000033   45..         ORL       A,?V1
   \   000035   6046         JZ        ??ZDApp_ProcessSecEvent_1
    606                  {
    607                    timeDelta = pNewDevice->timeDelta;
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   85..83       MOV       DPH,?V1
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   12....       LCALL     ??Subroutine67_0 & 0xFFFF
    608                    pNewDevice = pNewDevice->next;
   \                     ??CrossCallReturnLabel_94:
   \   000044   8014         SJMP      ??ZDApp_ProcessSecEvent_2
    609          
    610                    while ( pNewDevice )
    611                    {
    612                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000046   85..82       MOV       DPL,?V0
   \   000049   85..83       MOV       DPH,?V1
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   C3           CLR       C
   \   000051   E0           MOVX      A,@DPTR
   \   000052   95..         SUBB      A,?V4
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   95..         SUBB      A,?V5
   \   000059   F0           MOVX      @DPTR,A
    613                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00005A   85..82       MOV       DPL,?V0
   \   00005D   85..83       MOV       DPH,?V1
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F5..         MOV       ?V0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V1,A
    614                    }
   \   000067   E5..         MOV       A,?V0
   \   000069   45..         ORL       A,?V1
   \   00006B   70D9         JNZ       ??ZDApp_ProcessSecEvent_3
    615          
    616                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   00006D                ; Setup parameters for call to function osal_start_timerEx
   \   00006D   E4           CLR       A
   \   00006E   F5..         MOV       ?V6,A
   \   000070   F5..         MOV       ?V7,A
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000077   12....       LCALL     ?Subroutine15 & 0xFFFF
    617                  }
    618                }
   \                     ??CrossCallReturnLabel_81:
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
    619          
    620                // Return unprocessed events
    621                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00007D   EE           MOV       A,R6
   \   00007E   6440         XRL       A,#0x40
   \   000080   801A         SJMP      ??ZDApp_ProcessSecEvent_4
    622              }
    623            }
    624          
    625            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000082   EA           MOV       A,R2
   \   000083   5480         ANL       A,#0x80
   \   000085   6019         JZ        ??ZDApp_ProcessSecEvent_5
    626            {
    627              ZDApp_StoreNwkSecMaterial();
   \   000087                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000087   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
    628              
    629              ZDApp_DeviceAuthEvt();
   \   00008A                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00008A   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    630          
    631              bdb_setNodeIsOnANetwork(TRUE);
   \   00008D                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00008D   7901         MOV       R1,#0x1
   \   00008F   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    632              
    633              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
   \   000092                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000092   7A01         MOV       R2,#0x1
   \   000094   7903         MOV       R1,#0x3
   \   000096   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    634          
    635              // Return unprocessed events
    636              return (events ^ ZDO_DEVICE_AUTH);
   \   000099   EE           MOV       A,R6
   \   00009A   6480         XRL       A,#0x80
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00009C   FA           MOV       R2,A
   \   00009D   EF           MOV       A,R7
   \   00009E   802B         SJMP      ??ZDApp_ProcessSecEvent_6
    637            }
    638          
    639            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000A0   EB           MOV       A,R3
   \   0000A1   5402         ANL       A,#0x2
   \   0000A3   600A         JZ        ??ZDApp_ProcessSecEvent_7
    640            {
    641              ZDApp_SaveNwkKey();
   \   0000A5                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000A5   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    642          
    643              // Return unprocessed events
    644              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000A8   EE           MOV       A,R6
   \   0000A9   FA           MOV       R2,A
   \   0000AA   EF           MOV       A,R7
   \   0000AB   6402         XRL       A,#0x2
   \   0000AD   801C         SJMP      ??ZDApp_ProcessSecEvent_6
    645            }
    646          
    647            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000AF   EB           MOV       A,R3
   \   0000B0   5408         ANL       A,#0x8
   \   0000B2   600A         JZ        ??ZDApp_ProcessSecEvent_8
    648            {
    649          #if defined (NV_RESTORE)
    650              ZDSecMgrSaveApsLinkKey();
   \   0000B4                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   0000B4   12....       LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    651          #endif // (NV_RESTORE)
    652          
    653              // Return unprocessed events
    654              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000B7   EE           MOV       A,R6
   \   0000B8   FA           MOV       R2,A
   \   0000B9   EF           MOV       A,R7
   \   0000BA   6408         XRL       A,#0x8
   \   0000BC   800D         SJMP      ??ZDApp_ProcessSecEvent_6
    655            }
    656          
    657            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000BE   EB           MOV       A,R3
   \   0000BF   5404         ANL       A,#0x4
   \   0000C1   600B         JZ        ??ZDApp_ProcessSecEvent_9
    658            {
    659              ZDSecMgrSaveTCLinkKey();
   \   0000C3                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000C3   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    660          
    661              // Return unprocessed events
    662              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000C6   EE           MOV       A,R6
   \   0000C7   FA           MOV       R2,A
   \   0000C8   EF           MOV       A,R7
   \   0000C9   6404         XRL       A,#0x4
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000CB   FB           MOV       R3,A
   \   0000CC   8004         SJMP      ??ZDApp_ProcessSecEvent_10
    663            }
    664          
    665            // Discard or make more handlers
    666            return 0;
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000CE   7A00         MOV       R2,#0x0
   \   0000D0   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000D2   80..         SJMP      ??Subroutine47_0
    667          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7A40         MOV       R2,#0x40
   \   000002                REQUIRE ??Subroutine59_0
   \   000002                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine60_0
   \   000002                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
    668          
    669          /*********************************************************************
    670           * Application Functions
    671           */
    672          
    673          /*********************************************************************
    674           * @fn      ZDOInitDevice
    675           *
    676           * @brief   Start the device in the network.  This function will read
    677           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    678           *   restore the network state of the device.
    679           *
    680           * @param   startDelay - timeDelay to start device (in milliseconds).
    681           *                       There is a jitter added to this delay:
    682           *                       ((NWK_START_DELAY + startDelay)
    683           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    684           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    685           *                       this function will hold the network init. Application
    686           *                       can start the device.
    687           * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
    688           *                       which mode should the device start with (only has effect on 
    689           *                       Router devices)
    690           *
    691           * NOTE:    If the application would like to force a "new" join, the
    692           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    693           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    694           *          this function. "new" join means to not restore the network
    695           *          state of the device. Use zgWriteStartupOptions() to set these
    696           *          options.
    697           *
    698           * @return
    699           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    700           *          restored.
    701           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    702           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    703           *          it could mean that there was no network state to restore.
    704           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    705          uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
   \                     ZDOInitDeviceEx:
    706          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   89..         MOV       ?V5,R1
    707            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   75..01       MOV       ?V4,#0x1
    708            uint16 extendedDelay = 0;
   \   000013   7E00         MOV       R6,#0x0
   \   000015   7F00         MOV       R7,#0x0
    709            
    710            if ( devState == DEV_HOLD )
   \   000017   90....       MOV       DPTR,#devState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   7008         JNZ       ??ZDOInitDeviceEx_0
    711            {
    712              byte temp = FALSE;
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
    713              // Initialize the RAM items table, in case an NV item has been updated.
    714              zgInitItems( FALSE );
   \   000025                ; Setup parameters for call to function zgInitItems
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    715              
    716              //Turn off the radio
    717              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000029                ; Setup parameters for call to function ZMacSetReq
   \   000029   8003         SJMP      ??ZDOInitDeviceEx_1
    718            }
    719            else
    720            {
    721              byte temp = TRUE;
   \                     ??ZDOInitDeviceEx_0:
   \   00002B   7401         MOV       A,#0x1
   \   00002D   F0           MOVX      @DPTR,A
    722              //Turn on the radio
    723              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \                     ??ZDOInitDeviceEx_1:
   \   00002E   AA..         MOV       R2,?XSP + 0
   \   000030   AB..         MOV       R3,?XSP + 1
   \   000032   7952         MOV       R1,#0x52
   \   000034   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    724            }
    725          
    726            ZDConfig_InitDescriptors();
   \   000037                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000037   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    727            //devtag.071807.todo - fix this temporary solution
    728            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00003A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   90....       MOV       DPTR,#_NIB + 14
   \   000041   F0           MOVX      @DPTR,A
    729          
    730          #if defined ( NV_RESTORE )
    731            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    732            // while booting to skip past NV Restore.
    733            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000042   90....       MOV       DPTR,#zdappHoldKeys
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6404         XRL       A,#0x4
   \   000048   6003         JZ        $+5
   \   00004A   02....       LJMP      ??ZDOInitDeviceEx_2 & 0xFFFF
    734            {
    735              zdappHoldKeys = 0;   // Only once
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
    736              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    737            }
    738            else
    739            {
    740          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    741              if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
    742              {
    743                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    744              }
    745              else
    746              {
    747                // Determine if NV should be restored
    748                networkStateNV = ZDApp_ReadNetworkRestoreState();
    749              }
    750          #else
    751              // Determine if NV should be restored
    752              networkStateNV = ZDApp_ReadNetworkRestoreState();
    753          #endif
    754            }
    755          
    756            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    757            {
    758              networkStateNV = ZDApp_RestoreNetworkState();
    759          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    760              if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
    761              {
    762                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    763              }
    764          #endif
    765              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    766            }
    767            else
    768            {
    769              // Wipe out the network state in NV
    770              NLME_InitNV();
   \                     ??ZDOInitDeviceEx_3:
   \   00004F                ; Setup parameters for call to function NLME_InitNV
   \   00004F   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    771              NLME_SetDefaultNV();
   \   000052                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000052   12....       LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    772              // clear NWK key values
    773              ZDSecMgrClearNVKeyValues();
   \   000055                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000055   12....       LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    774            }
    775          #endif
    776          
    777            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDeviceEx_4:
   \   000058   7401         MOV       A,#0x1
   \   00005A   65..         XRL       A,?V4
   \   00005C   6003         JZ        $+5
   \   00005E   02....       LJMP      ??ZDOInitDeviceEx_5 & 0xFFFF
    778            {
    779              ZDAppDetermineDeviceType();
   \   000061                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000061   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    780          
    781              // Only delay if joining network - not restoring network state
    782              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    783                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000064                ; Setup parameters for call to function osal_rand
   \   000064   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000067   EA           MOV       A,R2
   \   000068   547F         ANL       A,#0x7f
   \   00006A   F8           MOV       R0,A
   \   00006B   E5..         MOV       A,?V6
   \   00006D   28           ADD       A,R0
   \   00006E   F8           MOV       R0,A
   \   00006F   E4           CLR       A
   \   000070   35..         ADDC      A,?V7
   \   000072   F9           MOV       R1,A
   \   000073   E8           MOV       A,R0
   \   000074   2464         ADD       A,#0x64
   \   000076   FE           MOV       R6,A
   \   000077   E4           CLR       A
   \   000078   39           ADDC      A,R1
   \   000079   FF           MOV       R7,A
    784          
    785              runtimeChannel = zgDefaultChannelList;
   \   00007A   90....       MOV       DPTR,#zgDefaultChannelList
   \   00007D   12....       LCALL     ?XLOAD_R0123
   \   000080   90....       MOV       DPTR,#runtimeChannel
   \   000083   12....       LCALL     ?XSTORE_R0123
    786              
    787              // Set the NV startup option to force a "new" join.
    788              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000086                ; Setup parameters for call to function zgWriteStartupOptions
   \   000086   7A02         MOV       R2,#0x2
   \   000088   79FF         MOV       R1,#-0x1
   \   00008A   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    789              
    790          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    791              gp_ProxyTblInit( TRUE );
   \   00008D                ; Setup parameters for call to function gp_ProxyTblInit
   \   00008D   7901         MOV       R1,#0x1
   \   00008F   12....       LCALL     `??gp_ProxyTblInit::?relay`; Banked call to: gp_ProxyTblInit
    792          #endif
    793          
    794              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000092   90....       MOV       DPTR,#_NIB + 20
   \   000095   74FE         MOV       A,#-0x2
   \   000097   F0           MOVX      @DPTR,A
   \   000098   A3           INC       DPTR
   \   000099   04           INC       A
   \   00009A   F0           MOVX      @DPTR,A
    795              _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   00009B   90....       MOV       DPTR,#_NIB + 23
   \   00009E   14           DEC       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   04           INC       A
   \   0000A2   F0           MOVX      @DPTR,A
    796              _NIB.nwkPanId = 0xFFFF;
   \   0000A3   90....       MOV       DPTR,#_NIB + 33
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   F0           MOVX      @DPTR,A
    797              osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
   \   0000A9                ; Setup parameters for call to function osal_memset
   \   0000A9   7C08         MOV       R4,#0x8
   \   0000AB   7D00         MOV       R5,#0x0
   \   0000AD   7900         MOV       R1,#0x0
   \   0000AF   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   0000B1   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   0000B3   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    798              NLME_SetUpdateID( 0 );
   \   0000B6                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000B6   7900         MOV       R1,#0x0
   \   0000B8   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    799              
    800              if(ZG_DEVICE_RTRONLY_TYPE)
   \   0000BB   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   6401         XRL       A,#0x1
   \   0000C1   705A         JNZ       ??ZDOInitDeviceEx_6
    801              {
    802                if(1 == mode)
   \   0000C3   7401         MOV       A,#0x1
   \   0000C5   65..         XRL       A,?V5
   \   0000C7   703E         JNZ       ??ZDOInitDeviceEx_7
    803                {
    804                  //Update TC address as distributed network (TC none)
    805                  ZDSecMgrUpdateTCAddress(0);
   \   0000C9                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0000C9   7A00         MOV       R2,#0x0
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   804B         SJMP      ??ZDOInitDeviceEx_8
    806                }
   \                     ??ZDOInitDeviceEx_2:
   \   0000CF                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000CF   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   0000D2   E9           MOV       A,R1
   \   0000D3   F5..         MOV       ?V4,A
   \   0000D5   6003         JZ        $+5
   \   0000D7   02....       LJMP      ??ZDOInitDeviceEx_3 & 0xFFFF
   \   0000DA                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000DA   12....       LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   0000DD   E9           MOV       A,R1
   \   0000DE   F5..         MOV       ?V4,A
   \   0000E0   75..01       MOV       ?V0,#0x1
   \   0000E3   8E..         MOV       ?V1,R6
   \   0000E5   8E..         MOV       ?V2,R6
   \   0000E7   8E..         MOV       ?V3,R6
   \   0000E9   90....       MOV       DPTR,#_NIB + 22
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   78..         MOV       R0,#?V0
   \   0000EF   12....       LCALL     ?L_SHL
   \   0000F2   90....       MOV       DPTR,#runtimeChannel
   \   0000F5   E5..         MOV       A,?V0
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E5..         MOV       A,?V1
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E5..         MOV       A,?V2
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   A3           INC       DPTR
   \   000101   E5..         MOV       A,?V3
   \   000103   F0           MOVX      @DPTR,A
   \   000104   02....       LJMP      ??ZDOInitDeviceEx_4 & 0xFFFF
    807                else
    808                {
    809                  // Centralized mode
    810                  uint8 tmp[Z_EXTADDR_LEN];
    811                  osal_memset(tmp,0x00,Z_EXTADDR_LEN);
   \                     ??ZDOInitDeviceEx_7:
   \   000107                ; Setup parameters for call to function osal_memset
   \   000107   7C08         MOV       R4,#0x8
   \   000109   7D00         MOV       R5,#0x0
   \   00010B   7900         MOV       R1,#0x0
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP101_8
   \   000112   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    812                  ZDSecMgrUpdateTCAddress(tmp);
   \   000115                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000115   7401         MOV       A,#0x1
   \   000117   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??ZDOInitDeviceEx_8:
   \   00011A   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    813                }
    814              }
    815          
    816              // Update NIB in NV
    817              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \                     ??ZDOInitDeviceEx_6:
   \   00011D                ; Setup parameters for call to function osal_nv_write
   \   00011D   75....       MOV       ?V0,#_NIB & 0xff
   \   000120   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000123   78..         MOV       R0,#?V0
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000128   75..6E       MOV       ?V0,#0x6e
   \   00012B   75..00       MOV       ?V1,#0x0
   \   00012E   78..         MOV       R0,#?V0
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000133   7C00         MOV       R4,#0x0
   \   000135   7D00         MOV       R5,#0x0
   \   000137   7A21         MOV       R2,#0x21
   \   000139   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
    818          
    819              // Reset the NV startup option to resume from NV by clearing
    820              // the "New" join option.
    821              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00013F                ; Setup parameters for call to function zgWriteStartupOptions
   \   00013F   7A02         MOV       R2,#0x2
   \   000141   7900         MOV       R1,#0x0
   \   000143   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    822            
    823            }
    824          
    825            // Initialize the security for type of device
    826            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDeviceEx_5:
   \   000146                ; Setup parameters for call to function ZDApp_SecInit
   \   000146   A9..         MOV       R1,?V4
   \   000148   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    827          
    828            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   00014B   74FF         MOV       A,#-0x1
   \   00014D   65..         XRL       A,?V6
   \   00014F   7004         JNZ       ??ZDOInitDeviceEx_9
   \   000151   74FF         MOV       A,#-0x1
   \   000153   65..         XRL       A,?V7
   \                     ??ZDOInitDeviceEx_9:
   \   000155   6010         JZ        ??ZDOInitDeviceEx_10
    829            {
    830              devState = DEV_INIT;    // Remove the Hold state
   \   000157   90....       MOV       DPTR,#devState
   \   00015A   7401         MOV       A,#0x1
   \   00015C   F0           MOVX      @DPTR,A
    831          
    832              // Initialize leave control logic
    833              ZDApp_LeaveCtrlInit();
   \   00015D                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00015D   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    834          
    835              // Trigger the network start
    836              ZDApp_NetworkInit( extendedDelay );
   \   000160                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000160   EE           MOV       A,R6
   \   000161   FA           MOV       R2,A
   \   000162   EF           MOV       A,R7
   \   000163   FB           MOV       R3,A
   \   000164   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    837            }
    838          
    839            // set broadcast address mask to support broadcast filtering
    840            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDeviceEx_10:
   \   000167                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000167   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   F9           MOV       R1,A
   \   00016C   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    841          
    842            return ( networkStateNV );
   \   00016F   A9..         MOV       R1,?V4
   \   000171   7409         MOV       A,#0x9
   \   000173   02....       LJMP      ?Subroutine2 & 0xFFFF
    843          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET
    844          
    845          /*********************************************************************
    846           * @fn      ZDApp_ReadNetworkRestoreState
    847           *
    848           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    849           *          or not to restore the network state.
    850           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    851           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    852           *
    853           * @param   none
    854           *
    855           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    856           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    857           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    858           *          ZCD_NV_STARTUP_OPTION
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    861          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    862            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    863          
    864            // Look for the New Network State option.
    865            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5007         JNC       ??ZDApp_ReadNetworkRestoreState_0
    866            {
    867              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    868              bdb_setNodeIsOnANetwork(FALSE);
   \   000012                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000012   7900         MOV       R1,#0x0
   \   000014   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    869            }
    870          
    871            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000017   EE           MOV       A,R6
   \   000018   F9           MOV       R1,A
   \   000019   80..         SJMP      ??Subroutine51_0
    872          }
    873          
    874          /*********************************************************************
    875           * @fn      ZDAppDetermineDeviceType()
    876           *
    877           * @brief   Determines the type of device to start.
    878           *
    879           *          Looks at zgDeviceLogicalType and determines what type of
    880           *          device to start.  The types are:
    881           *            ZG_DEVICETYPE_COORDINATOR
    882           *            ZG_DEVICETYPE_ROUTER
    883           *            ZG_DEVICETYPE_ENDDEVICE
    884           *
    885           * @param   none
    886           *
    887           * @return  none
    888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    889          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    890          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    891            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    892            {
    893              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    894              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   8036         SJMP      ??ZDAppDetermineDeviceType_1
    895            }
    896            else
    897            {
    898              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   54F8         ANL       A,#0xf8
   \   00001E   F8           MOV       R0,A
   \   00001F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6401         XRL       A,#0x1
   \   000025   7004         JNZ       ??ZDAppDetermineDeviceType_2
    899                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV       A,#0x1
   \   000029   8007         SJMP      ??ZDAppDetermineDeviceType_3
    900              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7007         JNZ       ??ZDAppDetermineDeviceType_4
    901                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL       A,R0
   \   000033   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX      @DPTR,A
    902          
    903              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    904              // The device shall do rejoin the network. Otherwise, do normal join
    905              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV       A,R1
   \   00003F   90....       MOV       DPTR,#devStartMode
   \   000042   7003         JNZ       ??ZDAppDetermineDeviceType_5
    906              {
    907                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR       A
   \   000045   8007         SJMP      ??ZDAppDetermineDeviceType_1
    908              }
    909              else
    910              {
    911                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV       A,#0x3
   \   000049   F0           MOVX      @DPTR,A
    912                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00004A   90....       MOV       DPTR,#prevDevState
   \   00004D   04           INC       A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004E   F0           MOVX      @DPTR,A
    913              }
    914            }
    915          }
   \   00004F   02....       LJMP      ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    916          
    917          /*********************************************************************
    918           * @fn      ZDApp_NetworkStartEvt()
    919           *
    920           * @brief   Process the Network Start Event
    921           *
    922           * @param   none
    923           *
    924           * @return  none
    925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    926          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    927          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    928            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7045         JNZ       ??ZDApp_NetworkStartEvt_0
    929            {
    930              // Successfully started a ZigBee network
    931              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7033         JNZ       ??ZDApp_NetworkStartEvt_1
    932              {
    933                //save NIB to NV before child joins if NV_RESTORE is defined
    934                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    935                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV       R1,#0x9
   \   000017   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    936                
    937                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
   \   00001A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6405         XRL       A,#0x5
   \   000020   700A         JNZ       ??ZDApp_NetworkStartEvt_2
    938                {
    939                  bdb_nwkFormationAttempt(TRUE);
   \   000022                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000022   7901         MOV       R1,#0x1
   \   000024   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    940                  ZDApp_StoreNwkSecMaterial();
   \   000027                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000027   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
   \   00002A   800C         SJMP      ??ZDApp_NetworkStartEvt_3
    941                }
    942                else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6407         XRL       A,#0x7
   \   00002F   7007         JNZ       ??ZDApp_NetworkStartEvt_3
    943                {
    944                  bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
   \   000031                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000031   7A01         MOV       R2,#0x1
   \   000033   7907         MOV       R1,#0x7
   \   000035   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    945                }
    946          
    947                if ( zgChildAgingEnable == TRUE )
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000038   90....       MOV       DPTR,#zgChildAgingEnable
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6401         XRL       A,#0x1
   \   00003E   7008         JNZ       ??CrossCallReturnLabel_139
    948                {
    949                  // Once the device has changed its state to a COORDINATOR set the timer to send
    950                  // Parent annce
    951                  ZDApp_SetParentAnnceTimer();
   \   000040                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000040   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000043   8003         SJMP      ??CrossCallReturnLabel_139
    952                }
    953              }
    954              else
    955              {
    956                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000045                ; Setup parameters for call to function osal_set_event
   \   000045   12....       LCALL     ?Subroutine18 & 0xFFFF
    957              }
    958          
    959              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??CrossCallReturnLabel_139:
   \   000048                ; Setup parameters for call to function osal_pwrmgr_device
   \   000048   7900         MOV       R1,#0x0
   \   00004A   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   00004D   8030         SJMP      ??ZDApp_NetworkStartEvt_4
    960            }
    961            else
    962            {
    963              // Try again with a higher energy threshold
    964              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00004F                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00004F   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000052   E9           MOV       A,R1
   \   000053   7900         MOV       R1,#0x0
   \   000055   2410         ADD       A,#0x10
   \   000057   5001         JNC       ??ZDApp_NetworkStartEvt_5
   \   000059   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00005A   C3           CLR       C
   \   00005B   94FF         SUBB      A,#-0x1
   \   00005D   E9           MOV       A,R1
   \   00005E   9400         SUBB      A,#0x0
   \   000060   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000062   65D0         XRL       A,PSW
   \   000064   33           RLC       A
   \   000065   5013         JNC       ??ZDApp_NetworkStartEvt_6
    965              {
    966                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000067                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000067   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00006A   E9           MOV       A,R1
   \   00006B   F8           MOV       R0,A
   \   00006C                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00006C   7410         MOV       A,#0x10
   \   00006E   29           ADD       A,R1
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    967                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000073                ; Setup parameters for call to function osal_set_event
   \   000073   7A01         MOV       R2,#0x1
   \   000075   12....       LCALL     ??Subroutine74_0 & 0xFFFF
    968              }
   \                     ??CrossCallReturnLabel_144:
   \   000078   8005         SJMP      ??ZDApp_NetworkStartEvt_4
    969              else
    970              {
    971                bdb_nwkFormationAttempt(FALSE);
   \                     ??ZDApp_NetworkStartEvt_6:
   \   00007A                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    972              }
    973            }
    974          }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00007F   02....       LJMP      ??Subroutine64_0 & 0xFFFF
    975          
    976          /*********************************************************************
    977           * @fn      ZDApp_DeviceAuthEvt()
    978           *
    979           * @brief   Process the Device Authentic Event
    980           *
    981           * @param   none
    982           *
    983           * @return  none
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    986          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    987            // received authentication from trust center
    988            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   702F         JNZ       ??ZDApp_DeviceAuthEvt_0
    989            {
    990              // Stop the reset timer so it doesn't reset
    991              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    992          
    993              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   12....       LCALL     ?Subroutine26 & 0xFFFF
    994          
    995              // Set the Power Manager Device
    996          #if defined ( POWER_SAVING )
    997              osal_pwrmgr_device( PWRMGR_BATTERY );
    998          #endif
    999          
   1000              if ( ZSTACK_ROUTER_BUILD )
   1001              {
   1002                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_133:
   \   000012   6009         JZ        ??ZDApp_DeviceAuthEvt_1
   1003                {
   1004                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1005                  NLME_StartRouterRequest( 0, 0, false );
   \   000014                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000014   7B00         MOV       R3,#0x0
   \   000016   7A00         MOV       R2,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1006                }
   1007              }
   1008          
   1009              // Notify to save info into NV
   1010              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00001D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00001D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1011          
   1012              // Save off the security
   1013              ZDApp_SaveNwkKey();
   \   000020                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000020   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
   1014          
   1015              ZDApp_AnnounceNewAddress();
   \   000023                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000023   12....       LCALL     ?Subroutine36 & 0xFFFF
   1016          
   1017              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1018                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1019                    && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_27:
   \   000026   5008         JNC       ??ZDApp_DeviceAuthEvt_2
   \   000028   90....       MOV       DPTR,#zgChildAgingEnable
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6401         XRL       A,#0x1
   \   00002E   700E         JNZ       ??ZDApp_DeviceAuthEvt_3
   1020              {
   1021                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000030                ; Setup parameters for call to function NLME_SetPollRate
   \   000030   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000033   12....       LCALL     ?XLOAD_R2345
   \   000036   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000039   8003         SJMP      ??ZDApp_DeviceAuthEvt_3
   1022              }
   1023            }
   1024            else
   1025            {
   1026              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00003B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00003B   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1027            }
   1028          }
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   00003E   02....       LJMP      ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   000003   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000006   E0           MOVX      A,@DPTR
   \   000007   A2E3         MOV       C,0xE0 /* A   */.3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7906         MOV       R1,#0x6
   \   000002   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000005                REQUIRE ??Subroutine73_0
   \   000005                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX      A,@DPTR
   \   000004   5407         ANL       A,#0x7
   \   000006   6402         XRL       A,#0x2
   \   000008   22           RET
   1029          
   1030          /*********************************************************************
   1031           * @fn      ZDApp_SaveNetworkStateEvt()
   1032           *
   1033           * @brief   Process the Save the Network State Event
   1034           *
   1035           * @param   none
   1036           *
   1037           * @return  none
   1038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1039          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
   1040          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1041          #if defined ( NV_RESTORE )
   1042           #if defined ( NV_TURN_OFF_RADIO )
   1043            // Turn off the radio's receiver during an NV update
   1044            uint8 RxOnIdle;
   1045            uint8 x = false;
   1046            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
   1047            ZMacSetReq( ZMacRxOnIdle, &x );
   1048           #endif
   1049          
   1050            // Update the Network State in NV
   1051            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
   1052                           NWK_NV_DEVICELIST_ENABLE |
   1053                           NWK_NV_BINDING_ENABLE    |
   1054                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV       R1,#0xf
   \   000006   12....       LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
   1055          
   1056            // Reset the NV startup option to resume from NV by
   1057            // clearing the "New" join option.
   1058            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV       R2,#0x2
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1059          
   1060           #if defined ( NV_TURN_OFF_RADIO )
   1061            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1062           #endif
   1063          #endif // NV_RESTORE
   1064          }
   \   000010   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   1065          
   1066          #if defined ( NV_RESTORE )
   1067          /*********************************************************************
   1068           * @fn      ZDApp_RestoreNetworkState()
   1069           *
   1070           * @brief   This function will restore the network state of the
   1071           *          device if the network state is stored in NV.
   1072           *
   1073           * @param   none
   1074           *
   1075           * @return
   1076           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1077           *          restored.
   1078           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1079           *          This could mean that zgStartupOption said to not restore, or
   1080           *          it could mean that there was no network state to restore.
   1081           *
   1082           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1083          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1084          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1085            uint8 nvStat;
   1086          
   1087            // Initialize NWK NV items
   1088            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
   1089          
   1090            if ( nvStat == SUCCESS )
   \   00000A   7044         JNZ       ??ZDApp_RestoreNetworkState_0
   1091            {
   1092              if ( NLME_RestoreFromNV() )
   \   00000C                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000C   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   00000F   E9           MOV       A,R1
   \   000010   6030         JZ        ??ZDApp_RestoreNetworkState_1
   1093              {
   1094                // Are we a coordinator
   1095                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000015   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000018   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   1096                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_161:
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7007         JNZ       ??ZDApp_RestoreNetworkState_2
   1097                {
   1098                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000020   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000023   E0           MOVX      A,@DPTR
   \   000024   54F8         ANL       A,#0xf8
   \   000026   F0           MOVX      @DPTR,A
   1099                }
   1100                if(ZG_DEVICE_ENDDEVICE_TYPE) 
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000027   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6402         XRL       A,#0x2
   \   00002D   90....       MOV       DPTR,#devStartMode
   \   000030   7009         JNZ       ??ZDApp_RestoreNetworkState_3
   1101                {
   1102                  devStartMode = MODE_REJOIN;
   \   000032   7403         MOV       A,#0x3
   \   000034   F0           MOVX      @DPTR,A
   1103                  _NIB.nwkState = NWK_INIT;
   \   000035   90....       MOV       DPTR,#_NIB + 35
   \   000038   E4           CLR       A
   \   000039   8002         SJMP      ??ZDApp_RestoreNetworkState_4
   1104                }
   1105                else
   1106                {
   1107                  devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00003B   7401         MOV       A,#0x1
   1108                }
   1109                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1110              }
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00003D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000040   8002         SJMP      ??ZDApp_RestoreNetworkState_5
   1111              else
   1112                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000042   7E09         MOV       R6,#0x9
   1113          
   1114              if ( ZG_SECURE_ENABLED )
   1115              {
   1116                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_5:
   \   000044   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000047   E4           CLR       A
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
   1117          
   1118                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1119                {
   1120                  ZDApp_RestoreNwkKey( TRUE );
   \   00004B                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   1121                }
   1122              }
   1123          
   1124              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1125              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1126              // other than default.
   1127            }
   1128          
   1129            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000050   EE           MOV       A,R6
   \   000051   7004         JNZ       ??ZDApp_RestoreNetworkState_6
   1130              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000053   7900         MOV       R1,#0x0
   \   000055   8002         SJMP      ??ZDApp_RestoreNetworkState_7
   1131            else
   1132              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_6:
   \   000057   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_7:
   \   000059   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   1133          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1134          #endif // NV_RESTORE
   1135          
   1136          /*********************************************************************
   1137           * @fn      ZDApp_InitUserDesc()
   1138           *
   1139           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1140           *          when needed.  If you want to initialize the User descriptor to
   1141           *          something other than all zero, do it here.
   1142           *
   1143           * @param   none
   1144           *
   1145           * @return  none
   1146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1147          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1149            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1150          
   1151            // Initialize the User Descriptor, the descriptor is read from NV
   1152            // when needed.  If you want to initialize the User descriptor to something
   1153            // other than all zero, do it here.
   1154            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   12....       LCALL     ?Subroutine31 & 0xFFFF
   1155            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1156                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_21:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV       R4,#0x11
   \   000014   7D00         MOV       R5,#0x0
   \   000016   7A81         MOV       R2,#-0x7f
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001D   7402         MOV       A,#0x2
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   702F         JNZ       ??ZDApp_InitUserDesc_0
   1157            {
   1158              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1159                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV       ?V0,#0x11
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A81         MOV       R2,#-0x7f
   \   00003B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7010         JNZ       ??ZDApp_InitUserDesc_0
   1160              {
   1161                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6007         JZ        ??ZDApp_InitUserDesc_0
   1162                {
   1163                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00004D   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000050   E0           MOVX      A,@DPTR
   \   000051   D2E4         SETB      0xE0 /* A   */.4
   \   000053   F0           MOVX      @DPTR,A
   1164                }
   1165              }
   1166            }
   1167          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000054   7411         MOV       A,#0x11
   \   000056   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   7900         MOV       R1,#0x0
   \   000004   AA..         MOV       R2,?XSP + 0
   \   000006   AB..         MOV       R3,?XSP + 1
   \   000008   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B                ; Setup parameters for call to function osal_memcmp
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   22           RET
   1168          
   1169          /*********************************************************************
   1170           * @fn      ZDAppCheckForHoldKey()
   1171           *
   1172           * @brief   Check for key to set the device into Hold Auto Start
   1173           *
   1174           * @param   none
   1175           *
   1176           * @return  none
   1177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1178          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1179          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1180          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1181          
   1182            // Get Keypad directly to see if a HOLD is needed
   1183            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV       A,R1
   \   000008   90....       MOV       DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX      @DPTR,A
   1184          
   1185            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1186            // while booting to avoid starting up the device.
   1187            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL       A,#0x1
   \   00000E   7005         JNZ       ??ZDAppCheckForHoldKey_0
   1188            {
   1189              // Change the device state to HOLD on start up
   1190              devState = DEV_HOLD;
   \   000010   90....       MOV       DPTR,#devState
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   1191            }
   1192          #endif // HAL_KEY
   1193          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   1194          
   1195          /*********************************************************************
   1196           * @fn      ZDApp_ProcessOSALMsg()
   1197           *
   1198           * @brief   Process the incoming task message.
   1199           *
   1200           * @param   msgPtr - message to process
   1201           *
   1202           * @return  none
   1203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1204          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1205          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1206            // Data Confirmation message fields
   1207            uint8 sentEP;       // This should always be 0
   1208            uint8 sentStatus;
   1209            afDataConfirm_t *afDataConfirm;
   1210          
   1211          
   1212            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   14           DEC       A
   \   00000A   602E         JZ        ??ZDApp_ProcessOSALMsg_0
   \   00000C   14           DEC       A
   \   00000D   602B         JZ        ??ZDApp_ProcessOSALMsg_0
   \   00000F   24E8         ADD       A,#-0x18
   \   000011   600A         JZ        ??ZDApp_ProcessOSALMsg_1
   \   000013   2447         ADD       A,#0x47
   \   000015   600B         JZ        ??ZDApp_ProcessOSALMsg_2
   \   000017   24D6         ADD       A,#-0x2a
   \   000019   600C         JZ        ??ZDApp_ProcessOSALMsg_3
   \   00001B   801A         SJMP      ??ZDApp_ProcessOSALMsg_4
   1213            {
   1214              // Incoming ZDO Message
   1215              case AF_INCOMING_MSG_CMD:
   1216                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00001D                ; Setup parameters for call to function ZDP_IncomingData
   \   00001D   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1217                break;
   \   000020   8018         SJMP      ??ZDApp_ProcessOSALMsg_0
   1218          
   1219              case ZDO_CB_MSG:
   1220                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000022                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000022   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1221                break;
   \   000025   8013         SJMP      ??ZDApp_ProcessOSALMsg_0
   1222          
   1223              case AF_DATA_CONFIRM_CMD:
   1224                // This message is received as a confirmation of a data packet sent.
   1225                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1226                // The message fields are defined in AF.h
   1227                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1228                sentEP = afDataConfirm->endpoint;
   1229                sentStatus = afDataConfirm->hdr.status;
   1230          
   1231                // Action taken when confirmation is received.
   1232          #if defined ( ZIGBEE_FREQ_AGILITY )
   1233                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000027   90....       MOV       DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00002A   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00002D   600B         JZ        ??ZDApp_ProcessOSALMsg_0
   1234                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   00002F                ; Setup parameters for indirect call
   \   00002F   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8003         SJMP      ??ZDApp_ProcessOSALMsg_0
   1235          #endif
   1236                (void)sentEP;
   1237                (void)sentStatus;
   1238                break;
   1239          
   1240              case ZDO_NWK_DISC_CNF:
   1241                if (devState != DEV_NWK_DISC)
   1242                {
   1243                  break;
   1244                }
   1245                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1246                {
   1247                  //Rejoin or resume
   1248                  if(bdb_isDeviceNonFactoryNew()) 
   1249                  {
   1250                    if(bdb_rejoinNwk() == ZSuccess)
   1251                    {
   1252                      return;
   1253                    }
   1254          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1255                    else
   1256                    {
   1257                      if(ZG_DEVICE_ENDDEVICE_TYPE)
   1258                      {
   1259                        bdb_parentLost();
   1260                        return;
   1261                      }
   1262                    }
   1263          #endif
   1264                  }
   1265                  
   1266                  if(nwk_getNwkDescList())
   1267                  {
   1268                    bdb_nwkDiscoveryAttempt(TRUE);
   1269                  }
   1270                  else
   1271                  {
   1272                    bdb_nwkDiscoveryAttempt(FALSE);
   1273                  }
   1274                }
   1275              break;
   1276          
   1277              case ZDO_NWK_JOIN_IND:
   1278                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1279                {
   1280                  if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
   1281                  {
   1282                    bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
   1283                  }
   1284                  ZDApp_ProcessNetworkJoin();
   1285                }
   1286                break;
   1287          
   1288              default:
   1289                if ( ZG_SECURE_ENABLED )
   1290                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000037                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000037   12....       LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1291                break;
   1292            }
   1293          
   1294          }
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00003A   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   1295          
   1296          /*********************************************************************
   1297           * @fn      ZDApp_ProcessMsgCBs()
   1298           *
   1299           * @brief   Process response messages
   1300           *
   1301           * @param   none
   1302           *
   1303           * @return  none
   1304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1305          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1306          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV       A,#-0x2c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1307            switch ( inMsg->clusterID )
   \   00000E   EA           MOV       A,R2
   \   00000F   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000012   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000015   8A..         MOV       ?V0,R2
   \   000017   F5..         MOV       ?V1,A
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   00001E   0300         DW        3
   \   000020   2100         DW        33
   \   000022   2200         DW        34
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000026   0080         DW        32768
   \   000028   0180         DW        32769
   \   00002A   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   00002C   2180         DW        32801
   \   00002E   2280         DW        32802
   \   000030   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000032   0100         DW        1
   \   000034   2000         DW        32
   \   000036   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000038   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1308            {
   1309          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1310              case NWK_addr_rsp:
   1311              case IEEE_addr_rsp:
   1312                {
   1313                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1314          
   1315                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000041   8A..         MOV       ?V0,R2
   \   000043   8B..         MOV       ?V1,R3
   \   000045   AF..         MOV       R7,?V1
   1316                  if ( pAddrRsp )
   \   000047   EA           MOV       A,R2
   \   000048   4F           ORL       A,R7
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1317                  {
   1318                    if ( pAddrRsp->status == ZSuccess )
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   E0           MOVX      A,@DPTR
   \   000053   700E         JNZ       ??ZDApp_ProcessMsgCBs_5
   1319                    {
   1320                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000055                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000055   EA           MOV       A,R2
   \   000056   2403         ADD       A,#0x3
   \   000058   FC           MOV       R4,A
   \   000059   E4           CLR       A
   \   00005A   3F           ADDC      A,R7
   \   00005B   FD           MOV       R5,A
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   1321                    }
   \                     ??CrossCallReturnLabel_106:
   \   000060   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1322          
   1323          #if defined ( ZDP_BIND_VALIDATION )
   1324                    // look for pending bind entry for NWK_addr_rsp Only
   1325                    if ( inMsg->clusterID == NWK_addr_rsp )
   1326                    {
   1327          #if defined ( REFLECTOR )
   1328                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   1329          #endif
   1330                    }
   1331          #endif
   1332          
   1333                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000063                ; Setup parameters for call to function osal_mem_free
   \   000063   AA..         MOV       R2,?V0
   \   000065   EF           MOV       A,R7
   \   000066   8078         SJMP      ??ZDApp_ProcessMsgCBs_6
   1334                  }
   1335                }
   1336                break;
   1337          #endif
   1338          
   1339          #if defined ( REFLECTOR )
   1340              case Bind_req:
   1341              case Unbind_req:
   1342                {
   1343                  ZDO_BindUnbindReq_t bindReq;
   1344                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000068                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000068   7417         MOV       A,#0x17
   \   00006A   12....       LCALL     ?XSTACK_DISP102_8
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1345                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000074                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000074   7417         MOV       A,#0x17
   \   000076   12....       LCALL     ?XSTACK_DISP102_8
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1346                }
   1347                break;
   \   000080   8062         SJMP      ??ZDApp_ProcessMsgCBs_4
   1348          #endif
   1349          
   1350          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1351              case Bind_rsp:
   1352              case Unbind_rsp:
   1353                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000082   90....       MOV       DPTR,#matchED
   \   000085   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000088   605A         JZ        ??ZDApp_ProcessMsgCBs_4
   1354                {
   1355                  ZDMatchSendState(
   1356                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1357                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   00008A   7421         MOV       A,#0x21
   \   00008C   6A           XRL       A,R2
   \   00008D   7003         JNZ       ??ZDApp_ProcessMsgCBs_7
   \   00008F   7480         MOV       A,#-0x80
   \   000091   6B           XRL       A,R3
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000092   7004         JNZ       ??ZDApp_ProcessMsgCBs_8
   \   000094   7903         MOV       R1,#0x3
   \   000096   8002         SJMP      ??ZDApp_ProcessMsgCBs_9
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   000098   7902         MOV       R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   00009A                ; Setup parameters for call to function ZDMatchSendState
   \   00009A   12....       LCALL     ?Subroutine38 & 0xFFFF
   1358                }
   \                     ??CrossCallReturnLabel_29:
   \   00009D   FB           MOV       R3,A
   \   00009E   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000A1   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000A4   FA           MOV       R2,A
   \   0000A5   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0000A8   803A         SJMP      ??ZDApp_ProcessMsgCBs_4
   1359                break;
   1360          
   1361              case End_Device_Bind_req:
   1362          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1363                if (ZG_DEVICE_COORDINATOR_TYPE)
   1364                {
   1365                  ZDEndDeviceBind_t bindReq;
   1366                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000AA                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000AA   AC..         MOV       R4,?XSP + 0
   \   0000AC   AD..         MOV       R5,?XSP + 1
   \   0000AE   EE           MOV       A,R6
   \   0000AF   FA           MOV       R2,A
   \   0000B0   EF           MOV       A,R7
   \   0000B1   FB           MOV       R3,A
   \   0000B2   12....       LCALL     `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1367                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000B5                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000B5   AA..         MOV       R2,?XSP + 0
   \   0000B7   AB..         MOV       R3,?XSP + 1
   \   0000B9   12....       LCALL     `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1368          
   1369                  // Freeing the cluster lists - if allocated.
   1370                  if ( bindReq.numInClusters )
   \   0000BC   7411         MOV       A,#0x11
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   600B         JZ        ??ZDApp_ProcessMsgCBs_10
   1371                    osal_mem_free( bindReq.inClusters );
   \   0000C4                ; Setup parameters for call to function osal_mem_free
   \   0000C4   7412         MOV       A,#0x12
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000CC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1372                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000CF   7414         MOV       A,#0x14
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   600D         JZ        ??ZDApp_ProcessMsgCBs_4
   1373                    osal_mem_free( bindReq.outClusters );
   \   0000D7                ; Setup parameters for call to function osal_mem_free
   \   0000D7   7415         MOV       A,#0x15
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FA           MOV       R2,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   0000E0   FB           MOV       R3,A
   \   0000E1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1374                }
   1375          #endif
   1376                break;
   1377          #endif
   1378            }
   1379          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000E4   742C         MOV       A,#0x2c
   \   0000E6   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV       A,R6
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   1380          
   1381          /*********************************************************************
   1382           * @fn      ZDApp_RegisterCBs()
   1383           *
   1384           * @brief   Process response messages
   1385           *
   1386           * @param   none
   1387           *
   1388           * @return  none
   1389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1390          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1391          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1392          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1393            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   12....       LCALL     ?Subroutine19 & 0xFFFF
   1394          #endif
   1395          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1396            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_55:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   12....       LCALL     ?Subroutine19 & 0xFFFF
   1397          #endif
   1398          #if ZG_BUILD_COORDINATOR_TYPE
   1399            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \                     ??CrossCallReturnLabel_56:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV       R2,#0x21
   \   000010   12....       LCALL     ?Subroutine19 & 0xFFFF
   1400            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \                     ??CrossCallReturnLabel_57:
   \   000013                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000013   7A22         MOV       R2,#0x22
   \   000015   12....       LCALL     ?Subroutine19 & 0xFFFF
   1401          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1402            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \                     ??CrossCallReturnLabel_58:
   \   000018                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000018   7A20         MOV       R2,#0x20
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   1403          #endif
   1404          #endif
   1405          #if defined ( REFLECTOR )
   1406            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_59:
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001F   7A21         MOV       R2,#0x21
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   1407            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_60:
   \   000026                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000026   7A22         MOV       R2,#0x22
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   1408          #endif
   1409          }
   \                     ??CrossCallReturnLabel_61:
   \   00002D   02....       LJMP      ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7B80         MOV       R3,#-0x80
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000008   22           RET
   1410          
   1411          /*********************************************************************
   1412           * @fn      ZDApp_ProcessSecMsg()
   1413           *
   1414           * @brief   Process the incoming security message.
   1415           *
   1416           * @param   msgPtr - message to process
   1417           *
   1418           * @return  none
   1419           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1420          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1422            switch ( msgPtr->event )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   24FB         ADD       A,#-0x5
   \   000015   6011         JZ        ??ZDApp_ProcessSecMsg_0
   \   000017   24FE         ADD       A,#-0x2
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??ZDApp_ProcessSecMsg_1 & 0xFFFF
   \   00001E   24FE         ADD       A,#-0x2
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??ZDApp_ProcessSecMsg_2 & 0xFFFF
   \   000025   02....       LJMP      ??ZDApp_ProcessSecMsg_3 & 0xFFFF
   1423            {
   1424              case ZDO_TRANSPORT_KEY_IND:
   1425                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1426                {
   1427                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   1428                }
   1429                break;
   1430          
   1431              case ZDO_UPDATE_DEVICE_IND:
   1432                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1433                {
   1434                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000028                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   000028   12....       LCALL     `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   1435                  
   1436                  // Look at GP proxy table for posible conflict with GPD alias NwkAddr
   1437          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   1438                  ZDO_DeviceAnnce_t devAnnce;
   1439                  uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
   \   00002B   90....       MOV       DPTR,#`?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`
   \   00002E   740B         MOV       A,#0xb
   \   000030   12....       LCALL     ?XSTACK_DISP102_8
   \   000033   7408         MOV       A,#0x8
   \   000035   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1440                  
   1441                  osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   EE           MOV       A,R6
   \   000039   2404         ADD       A,#0x4
   \   00003B   F5..         MOV       ?V0,A
   \   00003D   E4           CLR       A
   \   00003E   3F           ADDC      A,R7
   \   00003F   F5..         MOV       ?V1,A
   \   000041   75..00       MOV       ?V2,#0x0
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000049   7C08         MOV       R4,#0x8
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7405         MOV       A,#0x5
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   1442                  devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
   \   000058   EE           MOV       A,R6
   \   000059   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   E8           MOV       A,R0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E9           MOV       A,R1
   \   000066   F0           MOVX      @DPTR,A
   1443                  
   1444                  // Check GP proxy table to update the entry if necesary
   1445                  if( osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN ) )
   \   000067                ; Setup parameters for call to function osal_memcmp
   \   000067   740B         MOV       A,#0xb
   \   000069   12....       LCALL     ?XSTACK_DISP100_8
   \   00006C   88..         MOV       ?V0,R0
   \   00006E   89..         MOV       ?V1,R1
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000075   7C08         MOV       R4,#0x8
   \   000077   7D00         MOV       R5,#0x0
   \   000079   7405         MOV       A,#0x5
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   E9           MOV       A,R1
   \   000085   6035         JZ        ??ZDApp_ProcessSecMsg_4
   1446                  {
   1447                    if( osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT ) )
   \   000087                ; Setup parameters for call to function osal_get_timeoutEx
   \   000087   7A10         MOV       R2,#0x10
   \   000089   7B00         MOV       R3,#0x0
   \   00008B   90....       MOV       DPTR,#gp_TaskID
   \   00008E   12....       LCALL     ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000091   6072         JZ        ??ZDApp_ProcessSecMsg_3
   1448                    {
   1449                      if ( osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) ) )
   \   000093                ; Setup parameters for call to function osal_memcmp
   \   000093   75....       MOV       ?V0,#GP_aliasConflictAnnce & 0xff
   \   000096   75....       MOV       ?V1,#(GP_aliasConflictAnnce >> 8) & 0xff
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009E   7C0B         MOV       R4,#0xb
   \   0000A0   7D00         MOV       R5,#0x0
   \   0000A2   7403         MOV       A,#0x3
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AD   E9           MOV       A,R1
   \   0000AE   6055         JZ        ??ZDApp_ProcessSecMsg_3
   1450                      {
   1451                        osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   \   0000B0                ; Setup parameters for call to function osal_stop_timerEx
   \   0000B0   7A10         MOV       R2,#0x10
   \   0000B2   7B00         MOV       R3,#0x0
   \   0000B4   90....       MOV       DPTR,#gp_TaskID
   \   0000B7   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1452                      }
   1453                    }
   1454                  }
   \                     ??CrossCallReturnLabel_91:
   \   0000BA   8049         SJMP      ??ZDApp_ProcessSecMsg_3
   1455                  else
   1456                  {
   1457                    if(GP_CheckAnnouncedDeviceGCB != NULL)
   \                     ??ZDApp_ProcessSecMsg_4:
   \   0000BC   90....       MOV       DPTR,#GP_CheckAnnouncedDeviceGCB
   \   0000BF   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000C2   6041         JZ        ??ZDApp_ProcessSecMsg_3
   1458                    {
   1459                      GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );
   \   0000C4                ; Setup parameters for indirect call
   \   0000C4   85..82       MOV       DPL,?XSP + 0
   \   0000C7   85..83       MOV       DPH,?XSP + 1
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   FC           MOV       R4,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   FD           MOV       R5,A
   \   0000CF   7402         MOV       A,#0x2
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   AA82         MOV       R2,DPL
   \   0000D6   AB83         MOV       R3,DPH
   \   0000D8   90....       MOV       DPTR,#GP_CheckAnnouncedDeviceGCB + 1
   \   0000DB   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   1460                    }          
   1461                  }
   1462          #endif
   1463                }
   \                     ??CrossCallReturnLabel_157:
   \   0000DE   12....       LCALL     ?CALL_IND
   \   0000E1   8022         SJMP      ??ZDApp_ProcessSecMsg_3
   1464                break;
   1465          
   1466              case ZDO_REMOVE_DEVICE_IND:
   1467                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1468                {
   1469                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1470                }
   1471                break;
   1472          
   1473              case ZDO_REQUEST_KEY_IND:
   1474                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1475                {
   1476                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1477                  {
   1478                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_1:
   \   0000E3                ; Setup parameters for call to function ZDSecMgrRequestKeyInd
   \   0000E3   12....       LCALL     `??ZDSecMgrRequestKeyInd::?relay`; Banked call to: ZDSecMgrRequestKeyInd
   1479                  }
   1480                }
   1481                break;
   \   0000E6   801D         SJMP      ??ZDApp_ProcessSecMsg_3
   1482              case ZDO_VERIFY_KEY_IND:
   1483          #if (ZG_BUILD_COORDINATOR_TYPE)
   1484                if(ZG_DEVICE_COORDINATOR_TYPE)
   1485                {
   1486                  if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
   \                     ??ZDApp_ProcessSecMsg_2:
   \   0000E8   EA           MOV       A,R2
   \   0000E9   241D         ADD       A,#0x1d
   \   0000EB   F582         MOV       DPL,A
   \   0000ED   E4           CLR       A
   \   0000EE   3F           ADDC      A,R7
   \   0000EF   F583         MOV       DPH,A
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   700A         JNZ       ??ZDApp_ProcessSecMsg_5
   1487                  {
   1488                    bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
   \   0000F4                ; Setup parameters for call to function bdb_TCjoiningDeviceComplete
   \   0000F4   EA           MOV       A,R2
   \   0000F5   2405         ADD       A,#0x5
   \   0000F7   FA           MOV       R2,A
   \   0000F8   E4           CLR       A
   \   0000F9   3F           ADDC      A,R7
   \   0000FA   FB           MOV       R3,A
   \   0000FB   12....       LCALL     `??bdb_TCjoiningDeviceComplete::?relay`; Banked call to: bdb_TCjoiningDeviceComplete
   1489                  }
   1490                }
   1491            
   1492                ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   0000FE                ; Setup parameters for call to function ZDSecMgrVerifyKeyInd
   \   0000FE   EE           MOV       A,R6
   \   0000FF   FA           MOV       R2,A
   \   000100   EF           MOV       A,R7
   \   000101   FB           MOV       R3,A
   \   000102   12....       LCALL     `??ZDSecMgrVerifyKeyInd::?relay`; Banked call to: ZDSecMgrVerifyKeyInd
   1493          #endif
   1494                break;
   1495          
   1496              case ZDO_SWITCH_KEY_IND:
   1497                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1498                {
   1499                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   1500                }
   1501                break;
   1502          
   1503              default:
   1504                // Unsupported messages
   1505                break;
   1506            }
   1507          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000105   7413         MOV       A,#0x13
   \   000107                REQUIRE ?Subroutine5
   \   000107                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F03         MOV       R7,#0x3
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine53_0
   \   000004                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004                REQUIRE ??Subroutine57_0
   \   000004                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003                REQUIRE ??Subroutine68_0
   \   000003                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   4C           ORL       A,R4
   \   000008   4D           ORL       A,R5
   \   000009   22           RET
   1508          
   1509          /*********************************************************************
   1510           * @fn      ZDApp_ProcessNetworkJoin()
   1511           *
   1512           * @brief
   1513           *
   1514           *   Save off the Network key information.
   1515           *
   1516           * @param   none
   1517           *
   1518           * @return  none
   1519           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1520          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1521          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1522            if ( (devState == DEV_NWK_JOINING) ||
   1523                ((devState == DEV_NWK_ORPHAN)  &&
   1524                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   000005   90....       MOV       DPTR,#devState
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6403         XRL       A,#0x3
   \   00000B   600F         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   640A         XRL       A,#0xa
   \   000010   7071         JNZ       ??ZDApp_ProcessNetworkJoin_1
   \   000012   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   6401         XRL       A,#0x1
   \   00001A   707E         JNZ       ??ZDApp_ProcessNetworkJoin_2
   1525            {
   1526              // Result of a Join attempt by this device.
   1527              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00001C   90....       MOV       DPTR,#nwkStatus
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   7059         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1528              {
   1529                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000022                ; Setup parameters for call to function osal_set_event
   \   000022   12....       LCALL     ?Subroutine18 & 0xFFFF
   1530          
   1531          #if defined ( POWER_SAVING )
   1532                osal_pwrmgr_device( PWRMGR_BATTERY );
   1533          #endif
   1534          
   1535                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \                     ??CrossCallReturnLabel_140:
   \   000025                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000025   7901         MOV       R1,#0x1
   \   000027   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00002A   E9           MOV       A,R1
   \   00002B   7009         JNZ       ??ZDApp_ProcessNetworkJoin_4
   1536                {
   1537                  // wait for auth from trust center
   1538                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   00002D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00002D   7905         MOV       R1,#0x5
   \   00002F   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1539                  
   1540                  bdb_nwkAssocAttemt(TRUE);
   \   000032                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000032   7901         MOV       R1,#0x1
   \   000034   8047         SJMP      ??ZDApp_ProcessNetworkJoin_5
   1541                }
   1542                else
   1543                {
   1544                  if ( ZSTACK_ROUTER_BUILD )
   1545                  {
   1546                    if ( devState == DEV_NWK_ORPHAN
   1547                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000036   90....       MOV       DPTR,#devState
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   640A         XRL       A,#0xa
   \   00003C   700D         JNZ       ??ZDApp_ProcessNetworkJoin_6
   \   00003E   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000041   6024         JZ        ??ZDApp_ProcessNetworkJoin_7
   1548                    {
   1549                      // Change NIB state to router for restore
   1550                      _NIB.nwkState = NWK_ROUTER;
   \   000043   90....       MOV       DPTR,#_NIB + 35
   \   000046   7408         MOV       A,#0x8
   \   000048   F0           MOVX      @DPTR,A
   \   000049   801C         SJMP      ??ZDApp_ProcessNetworkJoin_7
   1551                    }
   1552                  }
   1553          
   1554                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   6403         XRL       A,#0x3
   \   00004E   7017         JNZ       ??ZDApp_ProcessNetworkJoin_7
   1555                  {
   1556                    ZDApp_AnnounceNewAddress();
   \   000050                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000050   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1557                    if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   000053   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000056   E0           MOVX      A,@DPTR
   \   000057   6402         XRL       A,#0x2
   \   000059   700C         JNZ       ??ZDApp_ProcessNetworkJoin_7
   1558                    {
   1559                      bdb_setNodeIsOnANetwork(TRUE);
   \   00005B                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00005B   7901         MOV       R1,#0x1
   \   00005D   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1560                      bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000060                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000060   7A01         MOV       R2,#0x1
   \   000062   7902         MOV       R1,#0x2
   \   000064   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1561                    }
   1562                  }
   1563          
   1564                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000067                ; Setup parameters for call to function ZDApp_ChangeState
   \   000067   12....       LCALL     ?Subroutine26 & 0xFFFF
   1565          
   1566                  if ( ZSTACK_ROUTER_BUILD )
   1567                  {
   1568                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1569                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_134:
   \   00006A   7003         JNZ       $+5
   \   00006C   02....       LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
   1570                    {
   1571                      NLME_StartRouterRequest( 0, 0, false );
   \   00006F                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   7A00         MOV       R2,#0x0
   \   000073   7900         MOV       R1,#0x0
   \   000075   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000078   02....       LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
   1572                    }
   1573                  }
   1574                }
   1575              }
   1576              else
   1577              {
   1578          
   1579                bdb_nwkAssocAttemt(FALSE);
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00007B                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   00007B   7900         MOV       R1,#0x0
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00007D   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000080   02....       LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
   1580              }
   1581            }
   1582            else if ( devState == DEV_NWK_ORPHAN ||
   1583                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1584                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1585                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1586                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   000083   E0           MOVX      A,@DPTR
   \   000084   6404         XRL       A,#0x4
   \   000086   6012         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000088   E0           MOVX      A,@DPTR
   \   000089   640E         XRL       A,#0xe
   \   00008B   600D         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   640F         XRL       A,#0xf
   \   000090   6008         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000092   E0           MOVX      A,@DPTR
   \   000093   640D         XRL       A,#0xd
   \   000095   6003         JZ        $+5
   \   000097   02....       LJMP      ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
   1587            {
   1588              // results of an orphaning attempt by this device
   1589              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   00009A   90....       MOV       DPTR,#nwkStatus
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   6003         JZ        $+5
   \   0000A0   02....       LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1590              {
   1591                //When the device has successfully rejoined then reset retryCnt
   1592                retryCnt = 0;
   \   0000A3   90....       MOV       DPTR,#retryCnt
   \   0000A6   E4           CLR       A
   \   0000A7   F0           MOVX      @DPTR,A
   1593          
   1594                // Verify NWK key is available before sending Device_annce
   1595                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   0000A8                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000A8   7901         MOV       R1,#0x1
   \   0000AA   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000AD   E9           MOV       A,R1
   \   0000AE   700F         JNZ       ??ZDApp_ProcessNetworkJoin_10
   1596                {
   1597                  // wait for auth from trust center
   1598                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   0000B0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000B0   7905         MOV       R1,#0x5
   \   0000B2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1599          
   1600                  // Start the reset timer for MAX UNAUTH time
   1601                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   0000B5                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000B5   7A10         MOV       R2,#0x10
   \   0000B7   7B27         MOV       R3,#0x27
   \   0000B9   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0000BC   02....       LJMP      ??CrossCallReturnLabel_141 & 0xFFFF
   1602                }
   1603                else
   1604                {
   1605                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000BF                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000BF   7906         MOV       R1,#0x6
   \   0000C1   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1606          
   1607                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   0000C4                ; Setup parameters for call to function osal_stop_timerEx
   \   0000C4   7A00         MOV       R2,#0x0
   \   0000C6   7B20         MOV       R3,#0x20
   \   0000C8   12....       LCALL     ?Subroutine23 & 0xFFFF
   1608          
   1609                  // setup Power Manager Device
   1610          #if defined ( POWER_SAVING )
   1611                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1612          #endif
   1613          
   1614                  // The receiver is on, turn network layer polling off.
   1615                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_89:
   \   0000CB   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000D1   501D         JNC       ??ZDApp_ProcessNetworkJoin_11
   1616                  {
   1617                    // if Child Table Management process is not enabled
   1618                    if ( zgChildAgingEnable == FALSE )
   \   0000D3   90....       MOV       DPTR,#zgChildAgingEnable
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   7017         JNZ       ??ZDApp_ProcessNetworkJoin_11
   1619                    {
   1620                      NLME_SetPollRate( 0 );
   \   0000D9                ; Setup parameters for call to function NLME_SetPollRate
   \   0000D9   90....       MOV       DPTR,#__Constant_0
   \   0000DC   12....       LCALL     ?XLOAD_R2345
   \   0000DF   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1621                      NLME_SetQueuedPollRate( 0 );
   \   0000E2                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000E2   7A00         MOV       R2,#0x0
   \   0000E4   7B00         MOV       R3,#0x0
   \   0000E6   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1622                      NLME_SetResponseRate( 0 );
   \   0000E9                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000E9   7A00         MOV       R2,#0x0
   \   0000EB   7B00         MOV       R3,#0x0
   \   0000ED   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1623                    }
   1624                  }
   1625          
   1626                  if ( ZSTACK_ROUTER_BUILD )
   1627                  {
   1628                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1629                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000F0   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000F3   6009         JZ        ??ZDApp_ProcessNetworkJoin_12
   1630                    {
   1631                      NLME_StartRouterRequest( 0, 0, false );
   \   0000F5                ; Setup parameters for call to function NLME_StartRouterRequest
   \   0000F5   7B00         MOV       R3,#0x0
   \   0000F7   7A00         MOV       R2,#0x0
   \   0000F9   7900         MOV       R1,#0x0
   \   0000FB   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1632                    }
   1633                  }
   1634          
   1635                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000FE                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000FE   12....       LCALL     ?Subroutine36 & 0xFFFF
   1636          
   1637                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1638                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1639                        && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_28:
   \   000101   5008         JNC       ??ZDApp_ProcessNetworkJoin_13
   \   000103   90....       MOV       DPTR,#zgChildAgingEnable
   \   000106   E0           MOVX      A,@DPTR
   \   000107   6401         XRL       A,#0x1
   \   000109   7073         JNZ       ??CrossCallReturnLabel_141
   1640                  {
   1641                    if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   00010B   90....       MOV       DPTR,#devStartMode
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   6403         XRL       A,#0x3
   \   000111   7010         JNZ       ??ZDApp_ProcessNetworkJoin_14
   1642                    {
   1643                      NLME_SetPollRate( zgRejoinPollRate );
   \   000113                ; Setup parameters for call to function NLME_SetPollRate
   \   000113   90....       MOV       DPTR,#zgRejoinPollRate
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F5..         MOV       ?V0,A
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   AA..         MOV       R2,?V0
   \   00011D   FB           MOV       R3,A
   \   00011E   E4           CLR       A
   \   00011F   FC           MOV       R4,A
   \   000120   FD           MOV       R5,A
   \   000121   8006         SJMP      ??ZDApp_ProcessNetworkJoin_15
   1644                    }
   1645                    else
   1646                    {
   1647                      NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000123                ; Setup parameters for call to function NLME_SetPollRate
   \   000123   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000126   12....       LCALL     ?XLOAD_R2345
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000129   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   00012C   8050         SJMP      ??CrossCallReturnLabel_141
   1648                    }
   1649                  }
   1650                }
   1651              }
   1652              else
   1653              {
   1654                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00012E   90....       MOV       DPTR,#devStartMode
   \   000131   E0           MOVX      A,@DPTR
   \   000132   6401         XRL       A,#0x1
   \   000134   7037         JNZ       ??ZDApp_ProcessNetworkJoin_16
   1655                {
   1656                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000136   90....       MOV       DPTR,#retryCnt
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   04           INC       A
   \   00013B   F0           MOVX      @DPTR,A
   \   00013C   C3           CLR       C
   \   00013D   9404         SUBB      A,#0x4
   \   00013F   501F         JNC       ??ZDApp_ProcessNetworkJoin_17
   1657                  {
   1658                    if ( _NIB.nwkPanId == 0xFFFF )
   \   000141   90....       MOV       DPTR,#_NIB + 33
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F4           CPL       A
   \   000146   7003         JNZ       ??ZDApp_ProcessNetworkJoin_18
   \   000148   A3           INC       DPTR
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00014B   601B         JZ        ??ZDApp_ProcessNetworkJoin_19
   1659                      devStartMode = MODE_JOIN;
   1660                    else
   1661                    {
   1662                      devStartMode = MODE_REJOIN;
   \   00014D   90....       MOV       DPTR,#devStartMode
   \   000150   7403         MOV       A,#0x3
   \   000152   F0           MOVX      @DPTR,A
   1663                      _tmpRejoinState = true;
   \   000153   90....       MOV       DPTR,#_tmpRejoinState
   \   000156   7401         MOV       A,#0x1
   \   000158   F0           MOVX      @DPTR,A
   1664                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000159   90....       MOV       DPTR,#prevDevState
   \   00015C   7404         MOV       A,#0x4
   \   00015E   800C         SJMP      ??ZDApp_ProcessNetworkJoin_20
   1665                    }
   1666                  }
   1667                  // Do a normal join to the network after certain times of rejoin retries
   1668                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000160   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   000163   E0           MOVX      A,@DPTR
   \   000164   6401         XRL       A,#0x1
   \   000166   7005         JNZ       ??ZDApp_ProcessNetworkJoin_16
   1669                  {
   1670                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000168   90....       MOV       DPTR,#devStartMode
   \   00016B   E4           CLR       A
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00016C   F0           MOVX      @DPTR,A
   1671                  }
   1672                }
   1673                else if(devStartMode == MODE_REJOIN)
   1674                {
   1675                  if ( ZSTACK_END_DEVICE_BUILD )
   1676                  {
   1677                    devStartMode = MODE_REJOIN;
   1678                    _tmpRejoinState = true;
   1679                    _NIB.nwkState = NWK_INIT;
   1680          
   1681                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   1682                    {
   1683                      runtimeChannel = MAX_CHANNELS_24GHZ;
   1684                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1685                    }
   1686                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   1687                    {
   1688                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1689                      _NIB.nwkKeyLoaded = FALSE;
   1690                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   1691                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   1692                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   1693                    }
   1694                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   1695                    {
   1696                      runtimeChannel = MAX_CHANNELS_24GHZ;
   1697                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1698                    }
   1699          
   1700                  }
   1701                }
   1702          
   1703                // Clear the neighbor Table and network discovery tables.
   1704                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00016D                ; Setup parameters for call to function nwkNeighborInitTable
   \   00016D   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1705                NLME_NwkDiscTerm();
   \   000170                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000170   12....       LCALL     ?Subroutine33 & 0xFFFF
   1706          
   1707                // setup a retry for later...
   1708                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1709                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   1710              }
   1711            }
   \                     ??CrossCallReturnLabel_23:
   \   000173   8009         SJMP      ??CrossCallReturnLabel_141
   1712          #if defined ( ZIGBEEPRO )
   1713            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000175   E0           MOVX      A,@DPTR
   \   000176   6006         JZ        ??CrossCallReturnLabel_141
   1714            {
   1715              // Assume from address conflict
   1716          
   1717              // Notify the network
   1718              ZDApp_AnnounceNewAddress();
   \   000178                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000178   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1719          
   1720              // Notify apps
   1721              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00017B                ; Setup parameters for call to function osal_set_event
   \   00017B   12....       LCALL     ?Subroutine18 & 0xFFFF
   1722            }
   1723          #endif
   1724          }
   \                     ??CrossCallReturnLabel_141:
   \   00017E   80..         SJMP      ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   \   000003                ; Setup parameters for call to function osal_rand
   \   000003                ; Setup parameters for call to function osal_rand
   \   000003   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000006                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000006                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000006   EA           MOV       A,R2
   \   000007   547F         ANL       A,#0x7f
   \   000009   2464         ADD       A,#0x64
   \   00000B   FA           MOV       R2,A
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine65_0
   \   000003                ; // Fall through to label ??Subroutine65_0
   1725          
   1726          /******************************************************************************
   1727           * @fn          ZDApp_StoreNwkSecMaterial
   1728           *
   1729           * @brief       Stores new entries in the NwkSecMaterial
   1730           *
   1731           * @param       none
   1732           *
   1733           * @return      none
   1734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1735          void ZDApp_StoreNwkSecMaterial(void)
   \                     ZDApp_StoreNwkSecMaterial:
   1736          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1737            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1738            uint8 i;
   1739            uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
   1740            
   1741            //Search if we do have security material for this network
   1742            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   75....       MOV       ?V0,#(_NIB + 53) & 0xff
   \   00000F   75....       MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000012   8E..         MOV       ?V2,R6
   \   000014   8001         SJMP      ??ZDApp_StoreNwkSecMaterial_0
   \                     ??ZDApp_StoreNwkSecMaterial_1:
   \   000016   0E           INC       R6
   \                     ??ZDApp_StoreNwkSecMaterial_0:
   \   000017   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00001A   E4           CLR       A
   \   00001B   93           MOVC      A,@A+DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   EE           MOV       A,R6
   \   00001E   C3           CLR       C
   \   00001F   98           SUBB      A,R0
   \   000020   4003         JC        $+5
   \   000022   02....       LJMP      ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
   1743            {
   1744              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V4,R0
   \   00002B   89..         MOV       ?V5,R1
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..0C       MOV       ?V4,#0xc
   \   000035   75..00       MOV       ?V5,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   2475         ADD       A,#0x75
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3400         ADDC      A,#0x0
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1745              {
   1746                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V4,R1
   \   00005A   8A..         MOV       ?V5,R2
   \   00005C   75..00       MOV       ?V6,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C08         MOV       R4,#0x8
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   AA..         MOV       R2,?V1
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   E9           MOV       A,R1
   \   000075   7059         JNZ       ??ZDApp_StoreNwkSecMaterial_2
   1747                {
   1748                  break;
   1749                }
   1750                if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
   \   000077                ; Setup parameters for call to function osal_isbufset
   \   000077   7C08         MOV       R4,#0x8
   \   000079   7900         MOV       R1,#0x0
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   AA82         MOV       R2,DPL
   \   000082   AB83         MOV       R3,DPH
   \   000084   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000087   E9           MOV       A,R1
   \   000088   608C         JZ        ??ZDApp_StoreNwkSecMaterial_1
   1751                {
   1752                  emptyEntryIndexOffset = i;
   \   00008A   EE           MOV       A,R6
   \   00008B   FF           MOV       R7,A
   1753                  break;
   1754                }
   1755              }
   1756            }
   1757            
   1758            //ExtPanID not found and found an empty entry, save the extended PANID
   1759            if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
   1760            {
   1761              osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000091   7C08         MOV       R4,#0x8
   \   000093   7D00         MOV       R5,#0x0
   \   000095   7407         MOV       A,#0x7
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   1762              nwkSecMaterialDesc.FrameCounter = 0;
   \   0000A0   85..82       MOV       DPL,?XSP + 0
   \   0000A3   85..83       MOV       DPH,?XSP + 1
   \   0000A6   E4           CLR       A
   \   0000A7   F0           MOVX      @DPTR,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   12....       LCALL     ?Subroutine9 & 0xFFFF
   1763              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   1764            }
   \                     ??CrossCallReturnLabel_2:
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   75..0C       MOV       ?V0,#0xc
   \   0000B6   75..00       MOV       ?V1,#0x0
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7C00         MOV       R4,#0x0
   \   0000C0   7D00         MOV       R5,#0x0
   \   0000C2   EF           MOV       A,R7
   \   0000C3   2475         ADD       A,#0x75
   \   0000C5   FA           MOV       R2,A
   \   0000C6   E4           CLR       A
   \   0000C7   3400         ADDC      A,#0x0
   \   0000C9   FB           MOV       R3,A
   \   0000CA   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   1765          
   1766          }
   \                     ??ZDApp_StoreNwkSecMaterial_2:
   \   0000D0   740C         MOV       A,#0xc
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   7F07         MOV       R7,#0x7
   \   0000D7   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
   1767          
   1768          
   1769          /*********************************************************************
   1770           * @fn      ZDApp_SaveNwkKey()
   1771           *
   1772           * @brief   Save off the Network key information.
   1773           *
   1774           * @param   none
   1775           *
   1776           * @return  none
   1777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A82         MOV       R2,#-0x7e
   \   000006                REQUIRE ??Subroutine48_0
   \   000006                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1778          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1779          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1780            nwkActiveKeyItems keyItems;
   1781            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1782            uint8 found = 0;
   1783            uint8 i;
   1784            
   1785            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP101_8
   \   00000F   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1786          
   1787            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1788                          (void *)&keyItems );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   740C         MOV       A,#0xc
   \   000014   12....       LCALL     ?XSTACK_DISP100_8
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..15       MOV       ?V0,#0x15
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   1789            
   1790            //Search for the security material to update its framecounter
   1791            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   000031   75..00       MOV       ?V3,#0x0
   \   000034   8002         SJMP      ??ZDApp_SaveNwkKey_0
   \                     ??ZDApp_SaveNwkKey_1:
   \   000036   05..         INC       ?V3
   \                     ??ZDApp_SaveNwkKey_0:
   \   000038   AE..         MOV       R6,?V3
   \   00003A   7F00         MOV       R7,#0x0
   \   00003C   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00003F   E4           CLR       A
   \   000040   93           MOVC      A,@A+DPTR
   \   000041   F8           MOV       R0,A
   \   000042   EE           MOV       A,R6
   \   000043   C3           CLR       C
   \   000044   98           SUBB      A,R0
   \   000045   4003         JC        $+5
   \   000047   02....       LJMP      ??ZDApp_SaveNwkKey_2 & 0xFFFF
   1792            {
   1793              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   00004A   EE           MOV       A,R6
   \   00004B   2475         ADD       A,#0x75
   \   00004D   FE           MOV       R6,A
   \   00004E   5001         JNC       ??ZDApp_SaveNwkKey_3
   \   000050   0F           INC       R7
   \                     ??ZDApp_SaveNwkKey_3:
   \   000051                ; Setup parameters for call to function osal_nv_read
   \   000051   A8..         MOV       R0,?XSP + 0
   \   000053   A9..         MOV       R1,?XSP + 1
   \   000055   88..         MOV       ?V0,R0
   \   000057   89..         MOV       ?V1,R1
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   75..0C       MOV       ?V0,#0xc
   \   000061   75..00       MOV       ?V1,#0x0
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV       R4,#0x0
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   1794              {
   1795                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000077                ; Setup parameters for call to function osal_memcmp
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   A982         MOV       R1,DPL
   \   00007E   AA83         MOV       R2,DPH
   \   000080   89..         MOV       ?V0,R1
   \   000082   8A..         MOV       ?V1,R2
   \   000084   75..00       MOV       ?V2,#0x0
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008C   7C08         MOV       R4,#0x8
   \   00008E   7D00         MOV       R5,#0x0
   \   000090   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000092   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   000094   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   E9           MOV       A,R1
   \   00009B   6099         JZ        ??ZDApp_SaveNwkKey_1
   1796                {
   1797                  nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   00009D   741D         MOV       A,#0x1d
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?XLOAD_R0123
   \   0000A5   85..82       MOV       DPL,?XSP + 0
   \   0000A8   85..83       MOV       DPH,?XSP + 1
   \   0000AB   12....       LCALL     ?XSTORE_R0123
   1798                  found = TRUE;
   1799                  //update the framecounter associated to this ExtPanID
   1800                  osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000AE                ; Setup parameters for call to function osal_nv_write
   \   0000AE   A8..         MOV       R0,?XSP + 0
   \   0000B0   A9..         MOV       R1,?XSP + 1
   \   0000B2   88..         MOV       ?V0,R0
   \   0000B4   89..         MOV       ?V1,R1
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   75..0C       MOV       ?V0,#0xc
   \   0000BE   75..00       MOV       ?V1,#0x0
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7C00         MOV       R4,#0x0
   \   0000C8   7D00         MOV       R5,#0x0
   \   0000CA   EE           MOV       A,R6
   \   0000CB   FA           MOV       R2,A
   \   0000CC   EF           MOV       A,R7
   \   0000CD   8045         SJMP      ??ZDApp_SaveNwkKey_4
   1801                  break;
   1802                }
   1803              }
   1804            }
   1805            
   1806            //If not found, then use the generic
   1807            if(!found)
   1808            {
   1809              osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \                     ??ZDApp_SaveNwkKey_2:
   \   0000CF                ; Setup parameters for call to function osal_memset
   \   0000CF   7C08         MOV       R4,#0x8
   \   0000D1   7D00         MOV       R5,#0x0
   \   0000D3   79FF         MOV       R1,#-0x1
   \   0000D5   7404         MOV       A,#0x4
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV       R2,DPL
   \   0000DC   AB83         MOV       R3,DPH
   \   0000DE   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1810              nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   0000E1   741D         MOV       A,#0x1d
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL     ?XLOAD_R0123
   \   0000E9   85..82       MOV       DPL,?XSP + 0
   \   0000EC   85..83       MOV       DPH,?XSP + 1
   \   0000EF   12....       LCALL     ?XSTORE_R0123
   1811              //update the framecounter associated to this ExtPanID
   1812              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000F2                ; Setup parameters for call to function osal_nv_write
   \   0000F2   A8..         MOV       R0,?XSP + 0
   \   0000F4   A9..         MOV       R1,?XSP + 1
   \   0000F6   88..         MOV       ?V0,R0
   \   0000F8   89..         MOV       ?V1,R1
   \   0000FA   78..         MOV       R0,#?V0
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FF   75..0C       MOV       ?V0,#0xc
   \   000102   8F..         MOV       ?V1,R7
   \   000104   78..         MOV       R0,#?V0
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000109   7C00         MOV       R4,#0x0
   \   00010B   7D00         MOV       R5,#0x0
   \   00010D   EE           MOV       A,R6
   \   00010E   2474         ADD       A,#0x74
   \   000110   FA           MOV       R2,A
   \   000111   E4           CLR       A
   \   000112   3400         ADDC      A,#0x0
   \                     ??ZDApp_SaveNwkKey_4:
   \   000114   FB           MOV       R3,A
   1813            }
   \   000115   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   1814            
   1815            
   1816            nwkFrameCounterChanges = 0;
   \   00011B   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00011E   E4           CLR       A
   \   00011F   F0           MOVX      @DPTR,A
   \   000120   A3           INC       DPTR
   \   000121   F0           MOVX      @DPTR,A
   1817            
   1818            // Clear copy in RAM before return.
   1819            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000122                ; Setup parameters for call to function osal_memset
   \   000122   7C15         MOV       R4,#0x15
   \   000124   FD           MOV       R5,A
   \   000125   F9           MOV       R1,A
   \   000126   740C         MOV       A,#0xc
   \   000128   12....       LCALL     ?XSTACK_DISP101_8
   \   00012B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1820          
   1821          }
   \   00012E   7421         MOV       A,#0x21
   \   000130   02....       LJMP      ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine63_0
   \   000003                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1822          
   1823          /*********************************************************************
   1824           * @fn      ZDApp_ForceConcentratorChange()
   1825           *
   1826           * @brief   Force a network concentrator change by resetting
   1827           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1828           *          from NV and set nwk event.
   1829           *
   1830           * @param   none
   1831           *
   1832           * @return  none
   1833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1834          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1836            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V0,#0x1
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A32         MOV       R2,#0x32
   \   000021   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000024   12....       LCALL     ?DEALLOC_XSTACK8
   1837            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   000027                ; Setup parameters for call to function osal_nv_read
   \   000027   75....       MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002A   75....       MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..01       MOV       ?V0,#0x1
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A33         MOV       R2,#0x33
   \   000043   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   1838          
   1839            if ( zgConcentratorEnable == TRUE )
   \   000049   90....       MOV       DPTR,#zgConcentratorEnable
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6401         XRL       A,#0x1
   \   00004F   7015         JNZ       ??ZDApp_ForceConcentratorChange_0
   1840            {
   1841              // Start next event
   1842              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000051                ; Setup parameters for call to function osal_start_timerEx
   \   000051   90....       MOV       DPTR,#__Constant_64
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   7A00         MOV       R2,#0x0
   \   000059   7B08         MOV       R3,#0x8
   \   00005B   90....       MOV       DPTR,#NWK_TaskID
   \   00005E   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1843            }
   \                     ??CrossCallReturnLabel_88:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   800A         SJMP      ??CrossCallReturnLabel_92
   1844            else
   1845            {
   1846              // Stop the next event
   1847              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000066                ; Setup parameters for call to function osal_stop_timerEx
   \   000066   7A00         MOV       R2,#0x0
   \   000068   7B08         MOV       R3,#0x8
   \   00006A   90....       MOV       DPTR,#NWK_TaskID
   \   00006D   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1848            }
   1849          }
   \                     ??CrossCallReturnLabel_92:
   \   000070   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   1850          
   1851          /*********************************************************************
   1852           * @fn      ZDApp_ResetNwkKey()
   1853           *
   1854           * @brief   Reset the Network key information in NV.
   1855           *
   1856           * @param   none
   1857           *
   1858           * @return  none
   1859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1860          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1862            nwkActiveKeyItems keyItems;
   1863          
   1864            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   12....       LCALL     ?Subroutine31 & 0xFFFF
   1865            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1866                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_22:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV       ?V0,#0x15
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   1867          }
   \   000023   7415         MOV       A,#0x15
   \   000025   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   1868          
   1869          /*********************************************************************
   1870           * @fn      ZDApp_RestoreNwkSecMaterial()
   1871           *
   1872           * @brief   Restore the network frame counter associated to this ExtPanID and 
   1873           *          increment it if found. This can only happens once per reset
   1874           *
   1875           * @param   none
   1876           *
   1877           * @return  none
   1878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1879          void ZDApp_RestoreNwkSecMaterial(void)
   \                     ZDApp_RestoreNwkSecMaterial:
   1880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1881            uint8 Found = FALSE;
   1882            uint8 i;
   1883            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1884            uint8 UpdateFrameCounter = FALSE;
   1885          
   1886            //Search if we do have security material for this network
   1887            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   75..00       MOV       ?V3,#0x0
   \   00000D   804E         SJMP      ??ZDApp_RestoreNwkSecMaterial_0
   1888            {
   1889              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \                     ??ZDApp_RestoreNwkSecMaterial_1:
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   A8..         MOV       R0,?XSP + 0
   \   000011   A9..         MOV       R1,?XSP + 1
   \   000013   88..         MOV       ?V0,R0
   \   000015   89..         MOV       ?V1,R1
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75..0C       MOV       ?V0,#0xc
   \   00001F   75..00       MOV       ?V1,#0x0
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   1890              {
   1891                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000035                ; Setup parameters for call to function osal_memcmp
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   A982         MOV       R1,DPL
   \   00003C   AA83         MOV       R2,DPH
   \   00003E   89..         MOV       ?V0,R1
   \   000040   8A..         MOV       ?V1,R2
   \   000042   75..00       MOV       ?V2,#0x0
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   7C08         MOV       R4,#0x8
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000050   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   000052   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   1892                {
   1893                  UpdateFrameCounter = TRUE;
   1894                  Found = TRUE;
   1895                  break;
   1896                }
   1897              }
   1898            }    
   \                     ??CrossCallReturnLabel_79:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   E9           MOV       A,R1
   \   000059   7025         JNZ       ??ZDApp_RestoreNwkSecMaterial_2
   \   00005B   05..         INC       ?V3
   \                     ??ZDApp_RestoreNwkSecMaterial_0:
   \   00005D   E5..         MOV       A,?V3
   \   00005F   2475         ADD       A,#0x75
   \   000061   FE           MOV       R6,A
   \   000062   E4           CLR       A
   \   000063   3400         ADDC      A,#0x0
   \   000065   FF           MOV       R7,A
   \   000066   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000069   E4           CLR       A
   \   00006A   93           MOVC      A,@A+DPTR
   \   00006B   F8           MOV       R0,A
   \   00006C   E5..         MOV       A,?V3
   \   00006E   98           SUBB      A,R0
   \   00006F   409E         JC        ??ZDApp_RestoreNwkSecMaterial_1
   1899            //Check if we do have frame counter stored in the generic
   1900            if(!Found)
   1901            {
   1902              //The last entry readed has the Generic item, thefore, no need to read it again
   1903              if(nwkSecMaterialDesc.FrameCounter)
   \   000071   85..82       MOV       DPL,?XSP + 0
   \   000074   85..83       MOV       DPH,?XSP + 1
   \   000077   12....       LCALL     ?XLOAD_R0123
   \   00007A   E8           MOV       A,R0
   \   00007B   49           ORL       A,R1
   \   00007C   4A           ORL       A,R2
   \   00007D   4B           ORL       A,R3
   \   00007E   6058         JZ        ??ZDApp_RestoreNwkSecMaterial_3
   \                     ??ZDApp_RestoreNwkSecMaterial_2:
   \   000080   90....       MOV       DPTR,#FrameCounterUpdated
   \   000083   E0           MOVX      A,@DPTR
   \   000084   7052         JNZ       ??ZDApp_RestoreNwkSecMaterial_3
   1904              {
   1905                UpdateFrameCounter = TRUE;
   1906              }
   1907            }  
   1908          
   1909            if(UpdateFrameCounter && (!FrameCounterUpdated))
   1910            {
   1911              FrameCounterUpdated = TRUE;
   \   000086   7401         MOV       A,#0x1
   \   000088   F0           MOVX      @DPTR,A
   1912              
   1913              // Increment the frame counter stored in NV
   1914              nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1915                                        NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000089   90....       MOV       DPTR,#__Constant_4e2
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?L_MOV_X
   \   000091   85..82       MOV       DPL,?XSP + 0
   \   000094   85..83       MOV       DPH,?XSP + 1
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?L_ADD_TO_X
   1916              
   1917              nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   12....       LCALL     ?XLOAD_R0123
   \   0000A5   90....       MOV       DPTR,#nwkFrameCounter
   \   0000A8   12....       LCALL     ?XSTORE_R0123
   1918              
   1919              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000AB                ; Setup parameters for call to function osal_nv_write
   \   0000AB   A8..         MOV       R0,?XSP + 0
   \   0000AD   A9..         MOV       R1,?XSP + 1
   \   0000AF   88..         MOV       ?V0,R0
   \   0000B1   89..         MOV       ?V1,R1
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   75..0C       MOV       ?V0,#0xc
   \   0000BB   75..00       MOV       ?V1,#0x0
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   7C00         MOV       R4,#0x0
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   EE           MOV       A,R6
   \   0000C8   FA           MOV       R2,A
   \   0000C9   EF           MOV       A,R7
   \   0000CA   FB           MOV       R3,A
   \   0000CB   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000CE   12....       LCALL     ?DEALLOC_XSTACK8
   1920              
   1921              nwkFrameCounterChanges = 0;
   \   0000D1   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   0000D4   E4           CLR       A
   \   0000D5   F0           MOVX      @DPTR,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   F0           MOVX      @DPTR,A
   1922            }
   1923            return;
   \                     ??ZDApp_RestoreNwkSecMaterial_3:
   \   0000D8   740C         MOV       A,#0xc
   \   0000DA   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   1924          }
   1925          
   1926          /*********************************************************************
   1927           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1928           *
   1929           * @brief
   1930           *
   1931           *   Save off the Network key information.
   1932           *
   1933           * @param   incrFrmCnt - set to true if we want to increment the network
   1934                      frame counter, else set to false
   1935           *
   1936           * @return  true if restored from NV, false if not
   1937           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1938          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1939          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1940            nwkActiveKeyItems keyItems;
   1941            uint8 ret = FALSE;
   \   00000A   7E00         MOV       R6,#0x0
   1942          
   1943            ZDApp_RestoreNwkSecMaterial();
   \   00000C                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00000C   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1944          
   1945            // Restore the key information
   1946            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1947                == ZSUCCESS )
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP100_8
   \   000014   88..         MOV       ?V0,R0
   \   000016   89..         MOV       ?V1,R1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV       ?V0,#0x15
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A82         MOV       R2,#-0x7e
   \   00002D   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033   E9           MOV       A,R1
   \   000034   702E         JNZ       ??ZDApp_RestoreNwkKey_0
   1948            {
   1949              uint8 nullKey[SEC_KEY_LEN];
   1950          
   1951              // initialize default value to compare to
   1952              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C10         MOV       R4,#0x10
   \   000038   12....       LCALL     ?Subroutine43 & 0xFFFF
   1953          
   1954              // if stored key is different than default value, then a key has been established
   1955              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \                     ??CrossCallReturnLabel_38:
   \   00003B   8E..         MOV       ?V2,R6
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000042   7C10         MOV       R4,#0x10
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7414         MOV       A,#0x14
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   E9           MOV       A,R1
   \   000052   7010         JNZ       ??ZDApp_RestoreNwkKey_0
   1956              {
   1957                ret = TRUE;
   \   000054   7E01         MOV       R6,#0x1
   1958          
   1959                // Clear copy in RAM before return.
   1960                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C15         MOV       R4,#0x15
   \   000058   7D00         MOV       R5,#0x0
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   7410         MOV       A,#0x10
   \   00005E   12....       LCALL     ?XSTACK_DISP101_8
   \   000061   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1961              }
   1962            }
   1963          
   1964            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000064   EE           MOV       A,R6
   \   000065   F9           MOV       R1,A
   \   000066   7425         MOV       A,#0x25
   \   000068   02....       LJMP      ?Subroutine5 & 0xFFFF
   1965          }
   1966          
   1967          /*********************************************************************
   1968           * @fn      ZDApp_ResetTimerStart
   1969           *
   1970           * @brief   Start the reset timer.
   1971           *
   1972           * @param   delay - delay time(ms) before reset
   1973           *
   1974           * @return  none
   1975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1976          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1977          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1978            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00000C   7012         JNZ       ??ZDApp_ResetTimerStart_0
   1979            {
   1980              // Start the rest timer
   1981              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   E4           CLR       A
   \   00000F   F5..         MOV       ?V2,A
   \   000011   F5..         MOV       ?V3,A
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000018   7A04         MOV       R2,#0x4
   \   00001A   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   1982            }
   \                     ??CrossCallReturnLabel_83:
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   1983          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000020   80..         SJMP      ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7A04         MOV       R2,#0x4
   \   000002   7B00         MOV       R3,#0x0
   \   000004                REQUIRE ??Subroutine76_0
   \   000004                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine77_0
   \   000003                ; // Fall through to label ??Subroutine77_0
   1984          
   1985          /*********************************************************************
   1986           * @fn      ZDApp_ResetTimerCancel
   1987           *
   1988           * @brief   Cancel the reset timer.
   1989           *
   1990           * @param   none
   1991           *
   1992           * @return  none
   1993           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1994          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1995          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1996            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     ?Subroutine23 & 0xFFFF
   1997            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \                     ??CrossCallReturnLabel_90:
   \   00000B                ; Setup parameters for call to function osal_clear_event
   \   00000B   7A04         MOV       R2,#0x4
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   90....       MOV       DPTR,#ZDAppTaskID
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1998          }
   \   000017   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   1999          
   2000          /*********************************************************************
   2001           * @fn      ZDApp_LeaveCtrlInit
   2002           *
   2003           * @brief   Initialize the leave control logic.
   2004           *
   2005           * @param   none
   2006           *
   2007           * @return  none
   2008           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2009          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   2010          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2011            uint8 status;
   2012          
   2013          
   2014            // Initialize control state
   2015            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2016          
   2017            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   2018                                        sizeof(ZDApp_LeaveCtrl),
   2019                                        &ZDApp_LeaveCtrl );
   2020          
   2021            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV       R4,#0x1
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7A85         MOV       R2,#-0x7b
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   E9           MOV       A,R1
   \   000026   701C         JNZ       ??ZDApp_LeaveCtrlInit_0
   2022            {
   2023              // Read saved control
   2024              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   2025                            0,
   2026                            sizeof( uint8 ),
   2027                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A85         MOV       R2,#-0x7b
   \   00003E   12....       LCALL     ?Subroutine32 & 0xFFFF
   2028            }
   \                     ??CrossCallReturnLabel_70:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   2029          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000044   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   2030          
   2031          /*********************************************************************
   2032           * @fn      ZDApp_LeaveCtrlSet
   2033           *
   2034           * @brief   Set the leave control logic.
   2035           *
   2036           * @param   ra - reassociate flag
   2037           *
   2038           * @return  none
   2039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV       R0,#?V0
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV       ?V0,#0x1
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV       R4,#0x0
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A85         MOV       R2,#-0x7b
   \   00001C   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00001F                REQUIRE ??Subroutine54_0
   \   00001F                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2040          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   2041          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2042            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   2043          
   2044            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   2045            {
   2046              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   2047            }
   2048          
   2049            // Write the leave control
   2050            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2051                           0,
   2052                           sizeof( uint8 ),
   2053                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP      ?Subroutine4 & 0xFFFF
   2054          }
   2055          
   2056          /*********************************************************************
   2057           * @fn      ZDApp_LeaveCtrlReset
   2058           *
   2059           * @brief   Re-initialize the leave control logic.
   2060           *
   2061           * @param   none
   2062           *
   2063           * @return  none
   2064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2065          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   2066          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2067            // Set leave control to initialized state
   2068            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2069          
   2070            // Write initialized control
   2071            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2072                          0,
   2073                          sizeof( uint8 ),
   2074                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP      ?Subroutine4 & 0xFFFF
   2075          }
   2076          
   2077          /*********************************************************************
   2078           * @fn      ZDApp_LeaveCtrlBypass
   2079           *
   2080           * @brief   Check if NV restore should be skipped during a leave reset.
   2081           *
   2082           * @param   none
   2083           *
   2084           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   2085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2086          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   2087          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2088            uint8 bypass;
   2089          
   2090            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   2091            {
   2092              bypass = TRUE;
   2093            }
   2094            else
   2095            {
   2096              bypass = FALSE;
   2097            }
   2098          
   2099            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   80..         SJMP      ??Subroutine64_0
   2100          }
   2101          
   2102          /*********************************************************************
   2103           * @fn      ZDApp_LeaveCtrlStartup
   2104           *
   2105           * @brief   Check for startup conditions during a leave reset.
   2106           *
   2107           * @param   state      - devState_t determined by leave control logic
   2108           * @param   startDelay - startup delay
   2109           *
   2110           * @return  none
   2111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2112          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2113          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2114            *startDelay = 0;
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   2115          
   2116            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5019         JNC       ??ZDApp_LeaveCtrlStartup_0
   2117            {
   2118              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV       C,0xE0 /* A   */.1
   \   000016   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   2119              {
   2120                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   7488         MOV       A,#-0x78
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   7413         MOV       A,#0x13
   \   000022   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   2121              }
   2122              else
   2123              {
   2124                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX      @DPTR,A
   2125              }
   2126          
   2127              // Reset leave control logic
   2128              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2129            }
   2130          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP      ??Subroutine64_0
   2131          
   2132          /*********************************************************************
   2133           * @fn      ZDApp_LeaveReset
   2134           *
   2135           * @brief   Setup a device reset due to a leave indication/confirm.
   2136           *
   2137           * @param   ra - reassociate flag
   2138           *
   2139           * @return  none
   2140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2141          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2142          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2143            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2144          
   2145            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV       R2,#-0x78
   \   00000C   7B13         MOV       R3,#0x13
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2146          
   2147            if ( ZSTACK_ROUTER_BUILD )
   2148            {
   2149              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \   000011                ; Setup parameters for call to function osal_stop_timerEx
   \   000011   7A00         MOV       R2,#0x0
   \   000013   7B01         MOV       R3,#0x1
   \   000015   90....       MOV       DPTR,#NWK_TaskID
   \   000018   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2150              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \                     ??CrossCallReturnLabel_93:
   \   00001B                ; Setup parameters for call to function osal_clear_event
   \   00001B   7A00         MOV       R2,#0x0
   \   00001D   7B01         MOV       R3,#0x1
   \   00001F   90....       MOV       DPTR,#NWK_TaskID
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   2151            }
   2152          
   2153            if (ZG_DEVICE_ENDDEVICE_TYPE)
   \   000027   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6402         XRL       A,#0x2
   \   00002D   7044         JNZ       ??ZDApp_LeaveReset_0
   2154            {
   2155              // Save polling values to be restored after rejoin
   2156              if ( ra == TRUE )
   \   00002F   7401         MOV       A,#0x1
   \   000031   6E           XRL       A,R6
   \   000032   7028         JNZ       ??ZDApp_LeaveReset_1
   2157              {
   2158                 ZDApp_SavedPollRate = zgPollRate;
   \   000034   90....       MOV       DPTR,#zgPollRate
   \   000037   12....       LCALL     ?XLOAD_R0123
   \   00003A   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00003D   12....       LCALL     ?XSTORE_R0123
   2159                 savedResponseRate = zgResponsePollRate;
   \   000040   90....       MOV       DPTR,#zgResponsePollRate
   \   000043   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000046   90....       MOV       DPTR,#savedResponseRate
   \   000049   E8           MOV       A,R0
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   E9           MOV       A,R1
   \   00004D   F0           MOVX      @DPTR,A
   2160                 savedQueuedPollRate = zgQueuedPollRate;
   \   00004E   90....       MOV       DPTR,#zgQueuedPollRate
   \   000051   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   2161              }
   \                     ??CrossCallReturnLabel_98:
   \   000054   90....       MOV       DPTR,#savedQueuedPollRate
   \   000057   E8           MOV       A,R0
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   E9           MOV       A,R1
   \   00005B   F0           MOVX      @DPTR,A
   2162          
   2163              // Disable polling
   2164              NLME_SetPollRate(0);
   \                     ??ZDApp_LeaveReset_1:
   \   00005C                ; Setup parameters for call to function NLME_SetPollRate
   \   00005C   90....       MOV       DPTR,#__Constant_0
   \   00005F   12....       LCALL     ?XLOAD_R2345
   \   000062   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2165              NLME_SetResponseRate(0);
   \   000065                ; Setup parameters for call to function NLME_SetResponseRate
   \   000065   7A00         MOV       R2,#0x0
   \   000067   7B00         MOV       R3,#0x0
   \   000069   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2166              NLME_SetQueuedPollRate(0);
   \   00006C                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00006C   7A00         MOV       R2,#0x0
   \   00006E   7B00         MOV       R3,#0x0
   \   000070   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2167            }
   2168          
   2169            if ( ra == TRUE )
   \                     ??ZDApp_LeaveReset_0:
   \   000073   7401         MOV       A,#0x1
   \   000075   6E           XRL       A,R6
   \   000076   701E         JNZ       ??ZDApp_LeaveReset_2
   2170            {
   2171              devState = DEV_NWK_DISC;
   \   000078   90....       MOV       DPTR,#devState
   \   00007B   7402         MOV       A,#0x2
   \   00007D   F0           MOVX      @DPTR,A
   2172              devStartMode = MODE_REJOIN;
   \   00007E   90....       MOV       DPTR,#devStartMode
   \   000081   04           INC       A
   \   000082   F0           MOVX      @DPTR,A
   2173              _tmpRejoinState = true;
   \   000083   90....       MOV       DPTR,#_tmpRejoinState
   \   000086   7401         MOV       A,#0x1
   \   000088   12....       LCALL     ?Subroutine8 & 0xFFFF
   2174          
   2175              // For rejoin, specify the extended PANID to look for
   2176              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   2177          
   2178              _NIB.nwkState = NWK_DISC;
   \                     ??CrossCallReturnLabel_1:
   \   00008B   90....       MOV       DPTR,#_NIB + 35
   \   00008E   7402         MOV       A,#0x2
   \   000090   F0           MOVX      @DPTR,A
   2179               NLME_NwkDiscTerm();
   \   000091                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000091   12....       LCALL     ?Subroutine33 & 0xFFFF
   2180          
   2181              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   2182            }
   \                     ??CrossCallReturnLabel_24:
   \   000094   8007         SJMP      ??ZDApp_LeaveReset_3
   2183            else
   2184            {
   2185              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_2:
   \   000096                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000096   7A88         MOV       R2,#-0x78
   \   000098   7B13         MOV       R3,#0x13
   \   00009A   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2186            }
   2187          }
   \                     ??ZDApp_LeaveReset_3:
   \   00009D   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   2188          
   2189          /*********************************************************************
   2190           * @fn      ZDApp_LeaveUpdate
   2191           *
   2192           * @brief   Update local device data related to leaving device.
   2193           *
   2194           * @param   nwkAddr        - NWK address of leaving device
   2195           * @param   extAddr        - EXT address of leaving device
   2196           * @param   removeChildren - remove children of leaving device
   2197           * @param   rejoin         - if device will rejoin or not
   2198           *
   2199           * @return  none
   2200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2201          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2202                                  uint8 removeChildren, uint8 rejoin )
   2203          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V3,R1
   2204            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2205            // Remove Apps Key for leaving device
   2206            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EC           MOV       A,R4
   \   000015   FA           MOV       R2,A
   \   000016   ED           MOV       A,R5
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2207          
   2208            // Clear SECURITY bit from Address Manager
   2209            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV       A,R6
   \   00001C   FA           MOV       R2,A
   \   00001D   EF           MOV       A,R7
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2210          
   2211            if ( pbindRemoveDev )
   \   000022   90....       MOV       DPTR,#pbindRemoveDev
   \   000025   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000028   6032         JZ        ??ZDApp_LeaveUpdate_0
   2212            {
   2213              zAddrType_t devAddr;
   2214          
   2215              // Remove bind entry and all related data
   2216              devAddr.addrMode = Addr64Bit;
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   7403         MOV       A,#0x3
   \   000031   F0           MOVX      @DPTR,A
   2217              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV       ?V0,R6
   \   000034   8F..         MOV       ?V1,R7
   \   000036   75..00       MOV       ?V2,#0x0
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV       R4,#0x8
   \   000040   7D00         MOV       R5,#0x0
   \   000042   740C         MOV       A,#0xc
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   2218          
   2219              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   7409         MOV       A,#0x9
   \   00004F   12....       LCALL     ?XSTACK_DISP101_8
   \   000052   90....       MOV       DPTR,#pbindRemoveDev
   \   000055   E0           MOVX      A,@DPTR
   \   000056   12....       LCALL     ?Subroutine21 & 0xFFFF
   2220            }
   \                     ??CrossCallReturnLabel_159:
   \   000059   12....       LCALL     ?CALL_IND
   2221          
   2222            // Remove if child
   2223            if ( ZSTACK_ROUTER_BUILD )
   2224            {
   2225              // Router shall notify the Trust Center that a child End Device or
   2226              // a neighbor Router (within radius=1) has left the network
   2227              APSME_UpdateDeviceReq_t req;
   2228          
   2229              // forward authorization to the Trust Center
   2230              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005C   7401         MOV       A,#0x1
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E4           CLR       A
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   F0           MOVX      @DPTR,A
   2231              req.devAddr    = nwkAddr;
   \   000065   7403         MOV       A,#0x3
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E5..         MOV       A,?V4
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   A3           INC       DPTR
   \   00006E   E5..         MOV       A,?V5
   \   000070   F0           MOVX      @DPTR,A
   2232              req.devExtAddr = extAddr;
   \   000071   7405         MOV       A,#0x5
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   EE           MOV       A,R6
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   EF           MOV       A,R7
   \   00007A   F0           MOVX      @DPTR,A
   2233              req.status = APSME_UD_DEVICE_LEFT;
   \   00007B   7407         MOV       A,#0x7
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   7402         MOV       A,#0x2
   \   000082   F0           MOVX      @DPTR,A
   2234          
   2235              if ( rejoin == FALSE )
   \   000083   7428         MOV       A,#0x28
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E0           MOVX      A,@DPTR
   \   000089   705C         JNZ       ??ZDApp_LeaveUpdate_1
   2236              {
   2237                if(!APSME_IsDistributedSecurity())
   \   00008B                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00008B   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00008E   E9           MOV       A,R1
   \   00008F   7056         JNZ       ??ZDApp_LeaveUpdate_1
   2238                {
   2239                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2240                  {
   2241                    uint8 found;
   2242                    APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \   000091                ; Setup parameters for call to function APSME_GetRequest
   \   000091   7412         MOV       A,#0x12
   \   000093   12....       LCALL     ?XSTACK_DISP102_8
   \   000096   7A00         MOV       R2,#0x0
   \   000098   7B00         MOV       R3,#0x0
   \   00009A   79AB         MOV       R1,#-0x55
   \   00009C   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   2243                    
   2244                    APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
   \   00009F                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00009F   E4           CLR       A
   \   0000A0   F5..         MOV       ?V0,A
   \   0000A2   F5..         MOV       ?V1,A
   \   0000A4   78..         MOV       R0,#?V0
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   7402         MOV       A,#0x2
   \   0000AB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AE   EE           MOV       A,R6
   \   0000AF   FA           MOV       R2,A
   \   0000B0   EF           MOV       A,R7
   \   0000B1   FB           MOV       R3,A
   \   0000B2   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   2245                    
   2246                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2247                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2248                    // with legacy Coordinator devices which can only handle one or the other.
   2249                    if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
   \   0000BA   90....       MOV       DPTR,#zgApsLinkKeyType
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   6401         XRL       A,#0x1
   \   0000C0   7017         JNZ       ??ZDApp_LeaveUpdate_2
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   700E         JNZ       ??ZDApp_LeaveUpdate_2
   2250                    {
   2251                      req.apsSecure = FALSE;
   \   0000CB   7408         MOV       A,#0x8
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   E4           CLR       A
   \   0000D1   F0           MOVX      @DPTR,A
   2252          
   2253                      // send and APSME_UPDATE_DEVICE request to the trust center
   2254                      APSME_UpdateDeviceReq( &req );
   \   0000D2                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000D2   04           INC       A
   \   0000D3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D6   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2255                    }
   2256          
   2257                    // send the message APS encrypted
   2258                    req.apsSecure = TRUE;
   \                     ??ZDApp_LeaveUpdate_2:
   \   0000D9   7408         MOV       A,#0x8
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   7401         MOV       A,#0x1
   \   0000E0   F0           MOVX      @DPTR,A
   2259          
   2260                    // send and APSME_UPDATE_DEVICE request to the trust center
   2261                    APSME_UpdateDeviceReq( &req );
   \   0000E1                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000E1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E4   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2262                  }
   2263                  else
   2264                  {
   2265                    req.apsSecure = FALSE;
   2266          
   2267                    // send and APSME_UPDATE_DEVICE request to the trust center
   2268                    APSME_UpdateDeviceReq( &req );
   2269                  }
   2270                }
   2271              }
   2272          
   2273              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_1:
   \   0000E7                ; Setup parameters for call to function NLME_RemoveChild
   \   0000E7   A9..         MOV       R1,?V3
   \   0000E9   EE           MOV       A,R6
   \   0000EA   FA           MOV       R2,A
   \   0000EB   EF           MOV       A,R7
   \   0000EC   FB           MOV       R3,A
   \   0000ED   12....       LCALL     `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2274            }
   2275          
   2276            // Remove Routing table related entry
   2277            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \   0000F0                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000F0   7900         MOV       R1,#0x0
   \   0000F2   AA..         MOV       R2,?V4
   \   0000F4   AB..         MOV       R3,?V5
   \   0000F6   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2278          
   2279            // Remove entry from neighborTable
   2280            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000F9                ; Setup parameters for call to function nwkNeighborRemove
   \   0000F9   90....       MOV       DPTR,#_NIB + 33
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   FC           MOV       R4,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   FD           MOV       R5,A
   \   000101   AA..         MOV       R2,?V4
   \   000103   AB..         MOV       R3,?V5
   \   000105   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2281          
   2282            // Schedule to save data to NV
   2283            ZDApp_NwkWriteNVRequest();
   \   000108                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000108   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2284          }
   \   00010B   741A         MOV       A,#0x1a
   \   00010D   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine78_0
   \   000002                ; // Fall through to label ??Subroutine78_0
   2285          
   2286          /*********************************************************************
   2287           * @fn      ZDApp_NetworkDiscoveryReq
   2288           *
   2289           * @brief   Request a network discovery.
   2290           *
   2291           * @param  scanChannels -
   2292           * @param  scanDuration -
   2293           *
   2294           * @return  ZStatus_t
   2295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2296          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2298            // Setup optional filters - tbd
   2299          
   2300            // Request NLME network discovery
   2301            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP      ??Subroutine63_0 & 0xFFFF
   2302          }
   2303          
   2304          /*********************************************************************
   2305           * @fn      ZDApp_JoinReq
   2306           *
   2307           * @brief   Request the device to join a parent in a network.
   2308           *
   2309           * @param   channel -
   2310           * @param   panID -
   2311           *
   2312           * @return  ZStatus_t
   2313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2314          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2315                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2316          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   2317            // Sync up the node with the stack profile (In the case where a pro device
   2318            // joins a non-pro network, or verse versa)
   2319            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV       A,#0xf
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2320          
   2321            // Request NLME Join Request
   2322            return NLME_JoinRequest(extendedPanID, panID,channel,
   2323                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2324                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV       A,#0xe
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V3,A
   \   000021   78..         MOV       R0,#?V3
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V3
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV       R1,?V2
   \   00003B   EE           MOV       A,R6
   \   00003C   FC           MOV       R4,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FD           MOV       R5,A
   \   00003F   AA..         MOV       R2,?V0
   \   000041   AB..         MOV       R3,?V1
   \   000043   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   02....       LJMP      ?Subroutine6 & 0xFFFF
   2325          
   2326          }
   2327          
   2328          /*********************************************************************
   2329           * @fn      ZDApp_DeviceConfigured
   2330           *
   2331           * @brief   Check to see if the local device is configured (i.e., part
   2332           *          of a network).
   2333           *
   2334           * @param   none
   2335           *
   2336           * @return  TRUE if configured. FALSE, otherwise.
   2337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2338          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2340            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   74FE         MOV       A,#-0x2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   04           INC       A
   \   000015   12....       LCALL     ?Subroutine9 & 0xFFFF
   2341          
   2342            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2343                          sizeof( uint16), &nwkAddr );
   \                     ??CrossCallReturnLabel_3:
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75..02       MOV       ?V0,#0x2
   \   00001E   75..00       MOV       ?V1,#0x0
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7C14         MOV       R4,#0x14
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A21         MOV       R2,#0x21
   \   00002C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   2344          
   2345            // Does the NIB have anything more than default?
   2346            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   64FE         XRL       A,#0xfe
   \   00003B   7003         JNZ       ??ZDApp_DeviceConfigured_0
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F4           CPL       A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000040   7004         JNZ       ??ZDApp_DeviceConfigured_1
   \   000042   7900         MOV       R1,#0x0
   \   000044   8002         SJMP      ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000046   7901         MOV       R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000048   7402         MOV       A,#0x2
   \   00004A   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   2347          }
   2348          
   2349          /*********************************************************************
   2350           * CALLBACK FUNCTIONS
   2351           */
   2352          
   2353          
   2354          /*********************************************************************
   2355           * @fn      ZDApp_SendEventMsg()
   2356           *
   2357           * @brief
   2358           *
   2359           *   Sends a Network Join message
   2360           *
   2361           * @param  cmd - command ID
   2362           * @param  len - length (in bytes) of the buf field
   2363           * @param  buf - buffer for the rest of the message.
   2364           *
   2365           * @return  none
   2366           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2367          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2368          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   2369            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000006                ; Setup parameters for call to function ZDApp_SendMsg
   \   000006   FB           MOV       R3,A
   \   000007   E9           MOV       A,R1
   \   000008   FA           MOV       R2,A
   \   000009   12....       LCALL     ?Subroutine29 & 0xFFFF
   2370          }
   \                     ??CrossCallReturnLabel_18:
   \   00000C   02....       LJMP      ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   \   000008   22           RET
   2371          
   2372          /*********************************************************************
   2373           * @fn      ZDApp_SendMsg()
   2374           *
   2375           * @brief   Sends a OSAL message
   2376           *
   2377           * @param  taskID - Where to send the message
   2378           * @param  cmd - command ID
   2379           * @param  len - length (in bytes) of the buf field
   2380           * @param  buf - buffer for the rest of the message.
   2381           *
   2382           * @return  none
   2383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2384          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2385          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   EA           MOV       A,R2
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   F0           MOVX      @DPTR,A
   \   000019   8B..         MOV       ?V3,R3
   \   00001B   8C..         MOV       ?V6,R4
   \   00001D   8D..         MOV       ?V7,R5
   2386            osal_event_hdr_t *msgPtr;
   2387          
   2388            // Send the address to the task
   2389            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00001F   AE..         MOV       R6,?V3
   \   000021                ; Setup parameters for call to function osal_msg_allocate
   \   000021   EB           MOV       A,R3
   \   000022   FA           MOV       R2,A
   \   000023   7B00         MOV       R3,#0x0
   \   000025   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000028   8A..         MOV       ?V4,R2
   \   00002A   8B..         MOV       ?V5,R3
   2390            if ( msgPtr )
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   603D         JZ        ??ZDApp_SendMsg_0
   2391            {
   2392              if ( (len > 0) && (buf != NULL) )
   \   000030   EE           MOV       A,R6
   \   000031   601E         JZ        ??ZDApp_SendMsg_1
   \   000033   E5..         MOV       A,?V6
   \   000035   45..         ORL       A,?V7
   \   000037   6018         JZ        ??ZDApp_SendMsg_1
   2393                osal_memcpy( msgPtr, buf, len );
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039   85....       MOV       ?V0,?V6
   \   00003C   85....       MOV       ?V1,?V7
   \   00003F   75..00       MOV       ?V2,#0x0
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000047   EE           MOV       A,R6
   \   000048   FC           MOV       R4,A
   \   000049   7D00         MOV       R5,#0x0
   \   00004B   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   2394          
   2395              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   E0           MOVX      A,@DPTR
   \   000058   85..82       MOV       DPL,?V4
   \   00005B   85..83       MOV       DPH,?V5
   \   00005E   F0           MOVX      @DPTR,A
   2396              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00005F                ; Setup parameters for call to function osal_msg_send
   \   00005F   AA..         MOV       R2,?V4
   \   000061   AB..         MOV       R3,?V5
   \   000063   7401         MOV       A,#0x1
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F9           MOV       R1,A
   \   00006A   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2397            }
   2398          }
   \                     ??ZDApp_SendMsg_0:
   \   00006D   7402         MOV       A,#0x2
   \   00006F   02....       LJMP      ?Subroutine2 & 0xFFFF
   2399          
   2400          /*********************************************************************
   2401           * Call Back Functions from NWK  - API
   2402           */
   2403          
   2404          /*********************************************************************
   2405           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2406           *
   2407           * @brief       This function returns a choice of PAN to join.
   2408           *
   2409           * @param       status - return status of the nwk discovery confirm
   2410           *
   2411           * @return      ZStatus_t
   2412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2413          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2414          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2415            osal_event_hdr_t msg;
   2416          
   2417            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2418            // Send ZDO_MGMT_NWK_DISC_RSP back
   2419          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2420            if ( zdappMgmtNwkDiscReqInProgress )
   2421            {
   2422              zdappMgmtNwkDiscReqInProgress = false;
   2423              ZDO_FinishProcessingMgmtNwkDiscReq();
   2424            }
   2425            else
   2426          #endif
   2427            {
   2428              // Pass the confirm to another task if it registers the callback
   2429              // Otherwise, pass the confirm to ZDApp.
   2430              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000017   6009         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   2431              {
   2432                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   \   000020   8012         SJMP      ??CrossCallReturnLabel_19
   2433              }
   2434              else
   2435              {
   2436                // Otherwise, send scan confirm to ZDApp task to proceed
   2437                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   2438          
   2439                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC       A
   \   00002A   12....       LCALL     ?XSTACK_DISP102_8
   \   00002D   7B02         MOV       R3,#0x2
   \   00002F   7A01         MOV       R2,#0x1
   \   000031   12....       LCALL     ?Subroutine29 & 0xFFFF
   2440              }
   2441            }
   2442            return (ZSuccess);
   \                     ??CrossCallReturnLabel_19:
   \   000034   7900         MOV       R1,#0x0
   \   000036   7403         MOV       A,#0x3
   \   000038   02....       LJMP      ?Subroutine3 & 0xFFFF
   2443          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E582         MOV       A,DPL
   \   00000A   4583         ORL       A,DPH
   \   00000C   22           RET
   2444          
   2445          /*********************************************************************
   2446           * @fn          ZDApp_NwkDescListProcessing
   2447           *
   2448           * @brief       This function process the network discovery result and select
   2449           *              a parent device to join itself.
   2450           *
   2451           * @param       none
   2452           *
   2453           * @return      ZStatus_t
   2454           */
   2455          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2456          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2457          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2458            networkDesc_t *pNwkDesc;
   2459            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V3,#0x0
   2460            uint8 stackProfile;
   2461            uint8 stackProfilePro;
   2462            uint8 selected;
   2463          
   2464            // Count the number of nwk descriptors in the list
   2465            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V0,R2
   \   00000D   8B..         MOV       ?V1,R3
   \   00000F   AE..         MOV       R6,?V0
   \   000011   AF..         MOV       R7,?V1
   \   000013   8005         SJMP      ??CrossCallReturnLabel_127
   2466            while (pNwkDesc)
   2467            {
   2468              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC       ?V3
   2469              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL     ?Subroutine22 & 0xFFFF
   2470            }
   \                     ??CrossCallReturnLabel_127:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   70F7         JNZ       ??ZDApp_NwkDescListProcessing_0
   2471          
   2472            // process discovery results
   2473            stackProfilePro = FALSE;
   \   00001E   75..00       MOV       ?V0,#0x0
   2474            selected = FALSE;
   2475          
   2476          
   2477            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV       ?V2,#0x0
   2478            {
   2479              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
   2480              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV       ?V1,#0x0
   \   000032   8019         SJMP      ??CrossCallReturnLabel_128
   2481              {
   2482                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2483                {
   2484                  // If the extended Pan ID is commissioned to a non zero value
   2485                  // Only join the Pan that has match EPID
   2486                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2487                    continue;
   2488          
   2489                }
   2490                else if ( zgConfigPANID != 0xFFFF )
   2491                {
   2492                  // PAN Id is preconfigured. check if it matches
   2493                  if ( pNwkDesc->panId != zgConfigPANID )
   2494                    continue;
   2495                }
   2496          
   2497                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2498                {
   2499                  // check that network is allowing joining
   2500                  if ( ZSTACK_ROUTER_BUILD )
   2501                  {
   2502                    if ( stackProfilePro == FALSE )
   2503                    {
   2504                      if ( !pNwkDesc->routerCapacity )
   2505                      {
   2506                        continue;
   2507                      }
   2508                    }
   2509                    else
   2510                    {
   2511                      if ( !pNwkDesc->deviceCapacity )
   2512                      {
   2513                        continue;
   2514                      }
   2515                    }
   2516                  }
   2517                  else if ( ZSTACK_END_DEVICE_BUILD )
   2518                  {
   2519                    if ( !pNwkDesc->deviceCapacity )
   2520                    {
   2521                      continue;
   2522                    }
   2523                  }
   2524                }
   2525          
   2526                // check version of zigbee protocol
   2527                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2528                  continue;
   2529          
   2530                // check version of stack profile
   2531                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2532                {
   2533                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2534                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6402         XRL       A,#0x2
   \   000037   7008         JNZ       ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV       A,#0x1
   \   00003B   68           XRL       A,R0
   \   00003C   7003         JNZ       ??ZDApp_NwkDescListProcessing_3
   2535                  {
   2536                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV       ?V0,#0x1
   2537                  }
   2538          
   2539                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV       A,?V2
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC       ?V1
   \   00004A   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00004D   E5..         MOV       A,?V1
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V3
   \   000052   4003         JC        $+5
   \   000054   02....       LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV       A,R1
   \   00005F   6401         XRL       A,#0x1
   \   000061   7013         JNZ       ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV       A,R6
   \   000064   240B         ADD       A,#0xb
   \   000066   FC           MOV       R4,A
   \   000067   E4           CLR       A
   \   000068   3F           ADDC      A,R7
   \   000069   FD           MOV       R5,A
   \   00006A   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV       A,R1
   \   000072   7021         JNZ       ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV       DPTR,#zgConfigPANID
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F4           CPL       A
   \   00007B   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   6013         JZ        ??ZDApp_NwkDescListProcessing_9
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000089   90....       MOV       DPTR,#zgConfigPANID
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   68           XRL       A,R0
   \   00008E   7003         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000093   70B3         JNZ       ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000095   90....       MOV       DPTR,#_NIB + 23
   \   000098   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   68           XRL       A,R0
   \   0000A8   7003         JNZ       ??ZDApp_NwkDescListProcessing_12
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000AD   700A         JNZ       ??ZDApp_NwkDescListProcessing_13
   \   0000AF   74FE         MOV       A,#-0x2
   \   0000B1   68           XRL       A,R0
   \   0000B2   7003         JNZ       ??ZDApp_NwkDescListProcessing_14
   \   0000B4   74FF         MOV       A,#-0x1
   \   0000B6   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000B7   7018         JNZ       ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000B9   E5..         MOV       A,?V0
   \   0000BB   8E82         MOV       DPL,R6
   \   0000BD   8F83         MOV       DPH,R7
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   7006         JNZ       ??ZDApp_NwkDescListProcessing_16
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   700A         JNZ       ??ZDApp_NwkDescListProcessing_15
   \   0000C7   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000CA   A3           INC       DPTR
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   7003         JNZ       $+5
   \   0000CE   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F8           MOV       R0,A
   \   0000DC   90....       MOV       DPTR,#_NIB + 17
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   68           XRL       A,R0
   \   0000E1   6003         JZ        $+5
   \   0000E3   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F8           MOV       R0,A
   \   0000F2   90....       MOV       DPTR,#zgStackProfile
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   68           XRL       A,R0
   \   0000F7   6032         JZ        ??ZDApp_NwkDescListProcessing_5
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   6401         XRL       A,#0x1
   \   0000FC   6003         JZ        $+5
   \   0000FE   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   000101   7402         MOV       A,#0x2
   \   000103   68           XRL       A,R0
   \   000104   6003         JZ        $+5
   \   000106   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   000109   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2540                  {
   2541                    continue;
   2542                  }
   2543                }
   2544          
   2545                break;
   2546              }
   2547          
   2548              if (i < ResultCount)
   2549              {
   2550               selected = TRUE;
   2551                break;
   2552              }
   2553          
   2554              // break if selected or stack profile pro wasn't found
   2555              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   00010C   E5..         MOV       A,?V0
   \   00010E   600C         JZ        ??ZDApp_NwkDescListProcessing_17
   2556              {
   2557                break;
   2558              }
   2559            }
   \   000110   05..         INC       ?V2
   \   000112   E5..         MOV       A,?V2
   \   000114   C3           CLR       C
   \   000115   9402         SUBB      A,#0x2
   \   000117   5003         JNC       $+5
   \   000119   02....       LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2560          
   2561            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   00011C   E5..         MOV       A,?V3
   \   00011E   65..         XRL       A,?V1
   \   000120   7009         JNZ       ??ZDApp_NwkDescListProcessing_5
   2562            {
   2563              nwk_desc_list_free();
   \   000122                ; Setup parameters for call to function nwk_desc_list_free
   \   000122   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2564              return (NULL);   // couldn't find appropriate PAN to join !
   \   000125   7A00         MOV       R2,#0x0
   \   000127   7B00         MOV       R3,#0x0
   \   000129   8004         SJMP      ??ZDApp_NwkDescListProcessing_18
   2565            }
   2566            else
   2567            {
   2568              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00012B   EE           MOV       A,R6
   \   00012C   FA           MOV       R2,A
   \   00012D   EF           MOV       A,R7
   \   00012E   FB           MOV       R3,A
   2569            }
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   00012F   80..         SJMP      ??Subroutine66_0
   2570          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine71_0
   \   000009                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
   2571          
   2572          /*********************************************************************
   2573           * @fn          ZDO_NetworkFormationConfirmCB
   2574           *
   2575           * @brief       This function reports the results of the request to
   2576           *              initialize a coordinator in a network.
   2577           *
   2578           * @param       Status - Result of NLME_NetworkFormationRequest()
   2579           *
   2580           * @return      none
   2581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2582          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2583          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   2584            nwkStatus = (byte)Status;
   \   00000B   90....       MOV       DPTR,#nwkStatus
   \   00000E   F0           MOVX      @DPTR,A
   2585          
   2586            if ( Status == ZSUCCESS )
   \   00000F   6003         JZ        $+5
   \   000011   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2587            {
   2588              bdb_setNodeIsOnANetwork(TRUE);
   \   000014                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2589              
   2590              if(ZG_DEVICE_COORDINATOR_TYPE)
   2591              {
   2592                // LED on shows Coordinator started
   2593                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2594          
   2595                zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2596          
   2597                  #if defined ( ZBIT )
   2598                      SIM_SetColor(0xd0ffd0);
   2599                  #endif
   2600          
   2601                if ( devState == DEV_HOLD )
   \   000019   90....       MOV       DPTR,#devState
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2602                {
   2603                  ZDApp_ChangeState( DEV_COORD_STARTING );
   \   00001F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00001F   7908         MOV       R1,#0x8
   \   000021   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2604                }
   2605              }
   2606          
   2607              if(ZG_DEVICE_RTR_TYPE)
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   000024   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6007         JZ        ??ZDO_NetworkFormationConfirmCB_2
   \   00002A   6401         XRL       A,#0x1
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2608              {
   2609                uint8 x;
   2610                uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   \                     ??ZDO_NetworkFormationConfirmCB_2:
   \   000031   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000034   7401         MOV       A,#0x1
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   7410         MOV       A,#0x10
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2611                
   2612                if(APSME_IsDistributedSecurity())
   \   00003E                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00003E   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000041   E9           MOV       A,R1
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2613                {
   2614                  //Check if we have an extended PANID assigned
   2615                  if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
   \   000047                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000047   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000049   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00004B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00004E   E9           MOV       A,R1
   \   00004F   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_3
   2616                  {
   2617                    //Set the extended PANID as the extended address
   2618                    osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000053   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000055   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000057   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000059   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2619                  } 
   2620                  
   2621                  ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
   \                     ??ZDO_NetworkFormationConfirmCB_3:
   \   00005C                ; Setup parameters for call to function ZMacSetReq
   \   00005C   7A00         MOV       R2,#0x0
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   79F0         MOV       R1,#-0x10
   \   000062   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2622                  
   2623                  //Set the MAC address
   2624                  ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
   \   000065                ; Setup parameters for call to function ZMacSetReq
   \   000065   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   000067   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   000069   7953         MOV       R1,#0x53
   \   00006B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2625          
   2626                  if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   2627                    x = true;
   2628                  else
   2629                    x = false;
   \   00006E   90....       MOV       DPTR,#_NIB + 14
   \   000071   E0           MOVX      A,@DPTR
   \   000072   A2E3         MOV       C,0xE0 /* A   */.3
   \   000074   5004         JNC       ??ZDO_NetworkFormationConfirmCB_4
   \   000076   D2F0         SETB      B.0
   \   000078   8002         SJMP      ??ZDO_NetworkFormationConfirmCB_5
   \                     ??ZDO_NetworkFormationConfirmCB_4:
   \   00007A   C2F0         CLR       B.0
   \                     ??ZDO_NetworkFormationConfirmCB_5:
   \   00007C   A2F0         MOV       C,B.0
   \   00007E   E4           CLR       A
   \   00007F   33           RLC       A
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   F0           MOVX      @DPTR,A
   2630                  ZMacSetReq( ZMacRxOnIdle, &x );
   \   000087                ; Setup parameters for call to function ZMacSetReq
   \   000087   AA..         MOV       R2,?XSP + 0
   \   000089   AB..         MOV       R3,?XSP + 1
   \   00008B   7952         MOV       R1,#0x52
   \   00008D   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2631          
   2632                  // Change NIB state to router for restore
   2633                  _NIB.nwkState = NWK_ROUTER;
   \   000090   90....       MOV       DPTR,#_NIB + 35
   \   000093   7408         MOV       A,#0x8
   \   000095   F0           MOVX      @DPTR,A
   2634                  NLME_SetAssocFlags();
   \   000096                ; Setup parameters for call to function NLME_SetAssocFlags
   \   000096   12....       LCALL     `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
   2635          
   2636                  //Restore the nwk security material using the generic index
   2637                  ZDApp_RestoreNwkSecMaterial();
   \   000099                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   000099   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   2638                  
   2639                  //Be sure to store the nwk FrameCounter if
   2640                  if(nwkFrameCounter == 0)
   \   00009C   90....       MOV       DPTR,#nwkFrameCounter
   \   00009F   12....       LCALL     ?XLOAD_R0123
   \   0000A2   E8           MOV       A,R0
   \   0000A3   49           ORL       A,R1
   \   0000A4   4A           ORL       A,R2
   \   0000A5   4B           ORL       A,R3
   \   0000A6   700D         JNZ       ??ZDO_NetworkFormationConfirmCB_6
   2641                  {
   2642                    nwkFrameCounter = 1;
   \   0000A8   90....       MOV       DPTR,#nwkFrameCounter
   \   0000AB   7401         MOV       A,#0x1
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   E4           CLR       A
   \   0000B0   F0           MOVX      @DPTR,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   F0           MOVX      @DPTR,A
   2643                  }
   2644                  
   2645                  osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDO_NetworkFormationConfirmCB_6:
   \   0000B5                ; Setup parameters for call to function osal_set_event
   \   0000B5   7A00         MOV       R2,#0x0
   \   0000B7   7B03         MOV       R3,#0x3
   \   0000B9   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   2646                  
   2647                  ZDSecMgrGenerateRndKey(tmpKey);
   \                     ??CrossCallReturnLabel_148:
   \   0000BC                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C1   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2648                   
   2649                  //Set the nwk key as the default and initialize the keySeqNum
   2650                  SSP_UpdateNwkKey( tmpKey, 0 );
   \   0000C4                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000C4   7900         MOV       R1,#0x0
   \   0000C6   7401         MOV       A,#0x1
   \   0000C8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CB   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2651                  if ( !_NIB.nwkKeyLoaded )
   \   0000CE   90....       MOV       DPTR,#_NIB + 61
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_7
   2652                  {
   2653                    SSP_SwitchNwkKey( 0 );
   \   0000D4                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000D4   7900         MOV       R1,#0x0
   \   0000D6   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2654                  }
   2655                  
   2656                  // Clear copy in RAM after use 
   2657                  osal_memset(tmpKey,0,SEC_KEY_LEN);
   \                     ??ZDO_NetworkFormationConfirmCB_7:
   \   0000D9                ; Setup parameters for call to function osal_memset
   \   0000D9   7C10         MOV       R4,#0x10
   \   0000DB   7D00         MOV       R5,#0x0
   \   0000DD   7900         MOV       R1,#0x0
   \   0000DF   7401         MOV       A,#0x1
   \   0000E1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E4   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2658                  
   2659                  //Success formation of distributed nwk
   2660                  bdb_nwkFormationAttempt(TRUE);
   \   0000E7                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   0000E7   7901         MOV       R1,#0x1
   \   0000E9   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   2661                }
   2662              }
   2663            }
   2664          
   2665            else
   2666            {
   2667              #if defined(BLINK_LEDS)
   2668                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2669              #endif
   2670            }
   2671          
   2672          
   2673            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   0000EC                ; Setup parameters for call to function osal_set_event
   \   0000EC   7A02         MOV       R2,#0x2
   \   0000EE   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   2674          }
   \                     ??CrossCallReturnLabel_145:
   \   0000F1   7411         MOV       A,#0x11
   \   0000F3   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   2675          
   2676          /****************************************************************************
   2677           * @fn          ZDApp_beaconIndProcessing
   2678           *
   2679           * @brief       This function processes the incoming beacon indication.
   2680           *
   2681           *              When another task (MT or App) is registered to process
   2682           *              beacon indication themselves, this function will parse the
   2683           *              beacon payload and pass the beacon descriptor to that task
   2684           *              If no other tasks registered, this function will process
   2685           *              the beacon payload and generate the network descriptor link
   2686           *              list.
   2687           *
   2688           * @param
   2689           *
   2690           * @return      none
   2691           *
   2692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2693          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2694          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2695            // Pass the beacon Indication to another task if it registers the callback
   2696            // Otherwise, process the beacon notification here.
   2697            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   6006         JZ        ??ZDO_beaconNotifyIndCB_0
   2698            {
   2699              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL     ?CALL_IND
   \   000014   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2700            }
   2701            else
   2702            {
   2703              networkDesc_t *pNwkDesc;
   2704              networkDesc_t *pLastNwkDesc;
   2705              uint8 found = false;
   2706          
   2707              // Add the network to the Network Descriptor List
   2708              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV       DPTR,#NwkDescList
   \   00001A   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   2709              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_124:
   \   00001D   90....       MOV       DPTR,#NwkDescList
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V2,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V3,A
   \   000027   EA           MOV       A,R2
   \   000028   2402         ADD       A,#0x2
   \   00002A   F5..         MOV       ?V6,A
   \   00002C   E4           CLR       A
   \   00002D   35..         ADDC      A,?V1
   \   00002F   F5..         MOV       ?V7,A
   \   000031   8031         SJMP      ??CrossCallReturnLabel_129
   2710              while (pNwkDesc)
   2711              {
   2712                if ((pNwkDesc->panId == pBeacon->panID) &&
   2713                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00003A   85..82       MOV       DPL,?V6
   \   00003D   85..83       MOV       DPH,?V7
   \   000040   E0           MOVX      A,@DPTR
   \   000041   68           XRL       A,R0
   \   000042   7003         JNZ       ??ZDO_beaconNotifyIndCB_3
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   000047   7014         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   68           XRL       A,R0
   \   00005B   6067         JZ        ??ZDO_beaconNotifyIndCB_5
   2714                {
   2715                  found = true;
   2716                  break;
   2717                }
   2718                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   00005D   8E..         MOV       ?V2,R6
   \   00005F   8F..         MOV       ?V3,R7
   2719                pNwkDesc = pNwkDesc->nextDesc;
   \   000061   12....       LCALL     ?Subroutine22 & 0xFFFF
   2720              }
   \                     ??CrossCallReturnLabel_129:
   \   000064   EE           MOV       A,R6
   \   000065   4F           ORL       A,R7
   \   000066   70CB         JNZ       ??ZDO_beaconNotifyIndCB_2
   2721          
   2722              // If no existing descriptor found, make a new one and add to the list
   2723              if (found == false)
   2724              {
   2725                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   7A16         MOV       R2,#0x16
   \   00006A   7B00         MOV       R3,#0x0
   \   00006C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006F   8A..         MOV       ?V4,R2
   \   000071   8B..         MOV       ?V5,R3
   \   000073   AE..         MOV       R6,?V4
   \   000075   AF..         MOV       R7,?V5
   2726                if ( !pNwkDesc )
   \   000077   EA           MOV       A,R2
   \   000078   4F           ORL       A,R7
   \   000079   7003         JNZ       $+5
   \   00007B   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2727                {
   2728                  // Memory alloc failed, discard this beacon
   2729                  return;
   2730                }
   2731          
   2732                // Clear the network descriptor
   2733                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   00007E                ; Setup parameters for call to function osal_memset
   \   00007E   7C16         MOV       R4,#0x16
   \   000080   7D00         MOV       R5,#0x0
   \   000082   7900         MOV       R1,#0x0
   \   000084   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2734          
   2735                // Initialize the descriptor
   2736                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   74FE         MOV       A,#-0x2
   \   000094   F0           MOVX      @DPTR,A
   \   000095   A3           INC       DPTR
   \   000096   04           INC       A
   \   000097   F0           MOVX      @DPTR,A
   2737                pNwkDesc->chosenRouterDepth = 0xFF;
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   F0           MOVX      @DPTR,A
   2738          
   2739                // Save new entry into the descriptor list
   2740                if ( !NwkDescList )
   \   0000A7   90....       MOV       DPTR,#NwkDescList
   \   0000AA   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000AD   7005         JNZ       ??ZDO_beaconNotifyIndCB_6
   2741                {
   2742                  NwkDescList = pNwkDesc;
   \   0000AF   90....       MOV       DPTR,#NwkDescList
   \   0000B2   800B         SJMP      ??ZDO_beaconNotifyIndCB_7
   2743                }
   2744                else
   2745                {
   2746                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B4   E5..         MOV       A,?V2
   \   0000B6   2414         ADD       A,#0x14
   \   0000B8   F582         MOV       DPL,A
   \   0000BA   E4           CLR       A
   \   0000BB   35..         ADDC      A,?V3
   \   0000BD   F583         MOV       DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000BF   EE           MOV       A,R6
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   EF           MOV       A,R7
   \   0000C3   F0           MOVX      @DPTR,A
   2747                }
   2748              }
   2749          
   2750              // Update the descriptor with the incoming beacon
   2751              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C4   85..82       MOV       DPL,?V0
   \   0000C7   85..83       MOV       DPH,?V1
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000D6   A3           INC       DPTR
   \   0000D7   F0           MOVX      @DPTR,A
   2752              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000D8   E5..         MOV       A,?V0
   \   0000DA   2408         ADD       A,#0x8
   \   0000DC   F8           MOV       R0,A
   \   0000DD   E4           CLR       A
   \   0000DE   35..         ADDC      A,?V1
   \   0000E0   F9           MOV       R1,A
   \   0000E1   8882         MOV       DPL,R0
   \   0000E3   F583         MOV       DPH,A
   \   0000E5   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000E8   12....       LCALL     ?Subroutine10 & 0xFFFF
   2753              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_4:
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   8E82         MOV       DPL,R6
   \   0000EE   8F83         MOV       DPH,R7
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   F0           MOVX      @DPTR,A
   2754              pNwkDesc->panId          = pBeacon->panID;
   \   0000F3   85..82       MOV       DPL,?V6
   \   0000F6   85..83       MOV       DPH,?V7
   \   0000F9   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   2755              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_162:
   \   000103   E5..         MOV       A,?V0
   \   000105   240C         ADD       A,#0xc
   \   000107   F582         MOV       DPL,A
   \   000109   E4           CLR       A
   \   00010A   35..         ADDC      A,?V1
   \   00010C   F583         MOV       DPH,A
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   C0E0         PUSH      A
   \   000111   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000114   D0E0         POP       A
   \   000116   F0           MOVX      @DPTR,A
   2756          
   2757              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2758              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000117   EE           MOV       A,R6
   \   000118   240B         ADD       A,#0xb
   \   00011A   FA           MOV       R2,A
   \   00011B   E4           CLR       A
   \   00011C   3F           ADDC      A,R7
   \   00011D   FB           MOV       R3,A
   \   00011E   8882         MOV       DPL,R0
   \   000120   8983         MOV       DPH,R1
   \   000122   E0           MOVX      A,@DPTR
   \   000123   6401         XRL       A,#0x1
   \   000125   600E         JZ        ??ZDO_beaconNotifyIndCB_8
   2759              {
   2760                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000127                ; Setup parameters for call to function sAddrExtCpy
   \   000127   E5..         MOV       A,?V0
   \   000129   240D         ADD       A,#0xd
   \   00012B   FC           MOV       R4,A
   \   00012C   E4           CLR       A
   \   00012D   35..         ADDC      A,?V1
   \   00012F   FD           MOV       R5,A
   \   000130   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000133   8009         SJMP      ??ZDO_beaconNotifyIndCB_9
   2761              }
   2762              else
   2763              {
   2764                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000135                ; Setup parameters for call to function osal_memset
   \   000135   7C08         MOV       R4,#0x8
   \   000137   7D00         MOV       R5,#0x0
   \   000139   79FF         MOV       R1,#-0x1
   \   00013B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00013E   85..82       MOV       DPL,?V0
   \   000141   85..83       MOV       DPH,?V1
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   F8           MOV       R0,A
   \   000150   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   000153   E0           MOVX      A,@DPTR
   \   000154   C3           CLR       C
   \   000155   98           SUBB      A,R0
   \   000156   4003         JC        $+5
   \   000158   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   00015B   85..82       MOV       DPL,?V0
   \   00015E   85..83       MOV       DPH,?V1
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   E0           MOVX      A,@DPTR
   \   000167   6401         XRL       A,#0x1
   \   000169   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   00016B                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   2765              }
   2766          
   2767              // check if this device is a better choice to join...
   2768              // ...dont bother checking assocPermit flag is doing a rejoin
   2769              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2770                  ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
   \   00016B   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00016E   E9           MOV       A,R1
   \   00016F   7003         JNZ       $+5
   \   000171   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2771              {
   2772                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000174   C2F0         CLR       B.0
   2773                uint8 capacity = FALSE;
   2774          
   2775          #if defined ( ZIGBEEPRO )
   2776                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2777                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2778                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2779                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000176   85..82       MOV       DPL,?V0
   \   000179   85..83       MOV       DPH,?V1
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   A3           INC       DPTR
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   E0           MOVX      A,@DPTR
   \   000187   F5..         MOV       ?V2,A
   \   000189   EE           MOV       A,R6
   \   00018A   2409         ADD       A,#0x9
   \   00018C   F8           MOV       R0,A
   \   00018D   E4           CLR       A
   \   00018E   3F           ADDC      A,R7
   \   00018F   F9           MOV       R1,A
   \   000190   8882         MOV       DPL,R0
   \   000192   F583         MOV       DPH,A
   \   000194   E0           MOVX      A,@DPTR
   \   000195   F5..         MOV       ?V3,A
   \   000197   EE           MOV       A,R6
   \   000198   240A         ADD       A,#0xa
   \   00019A   FA           MOV       R2,A
   \   00019B   E4           CLR       A
   \   00019C   3F           ADDC      A,R7
   \   00019D   FB           MOV       R3,A
   \   00019E   E5..         MOV       A,?V0
   \   0001A0   240B         ADD       A,#0xb
   \   0001A2   FC           MOV       R4,A
   \   0001A3   E4           CLR       A
   \   0001A4   35..         ADDC      A,?V1
   \   0001A6   FD           MOV       R5,A
   \   0001A7   E5..         MOV       A,?V3
   \   0001A9   C3           CLR       C
   \   0001AA   95..         SUBB      A,?V2
   \   0001AC   500C         JNC       ??ZDO_beaconNotifyIndCB_11
   \   0001AE   8C82         MOV       DPL,R4
   \   0001B0   8D83         MOV       DPH,R5
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   C3           CLR       C
   \   0001B4   9414         SUBB      A,#0x14
   \   0001B6   4019         JC        ??ZDO_beaconNotifyIndCB_12
   \   0001B8   8019         SJMP      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001BA   E5..         MOV       A,?V3
   \   0001BC   65..         XRL       A,?V2
   \   0001BE   7013         JNZ       ??ZDO_beaconNotifyIndCB_13
   \   0001C0   8A82         MOV       DPL,R2
   \   0001C2   8B83         MOV       DPH,R3
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   F5..         MOV       ?V2,A
   \   0001C7   8C82         MOV       DPL,R4
   \   0001C9   8D83         MOV       DPH,R5
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   C3           CLR       C
   \   0001CD   95..         SUBB      A,?V2
   \   0001CF   5002         JNC       ??ZDO_beaconNotifyIndCB_13
   2780                {
   2781                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D1   D2F0         SETB      B.0
   2782                }
   2783          #else
   2784                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2785                {
   2786                  selected = TRUE;
   2787                }
   2788          #endif
   2789          
   2790                if ( ZSTACK_ROUTER_BUILD )
   2791                {
   2792                  capacity = pBeacon->routerCapacity;
   2793                }
   2794                else if ( ZSTACK_END_DEVICE_BUILD )
   2795                {
   2796                  capacity = pBeacon->deviceCapacity;
   2797                }
   2798          
   2799                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D3   E5..         MOV       A,?V0
   \   0001D5   2406         ADD       A,#0x6
   \   0001D7   F5..         MOV       ?V2,A
   \   0001D9   E4           CLR       A
   \   0001DA   35..         ADDC      A,?V1
   \   0001DC   F5..         MOV       ?V3,A
   \   0001DE   85..82       MOV       DPL,?V2
   \   0001E1   F583         MOV       DPH,A
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   7011         JNZ       ??ZDO_beaconNotifyIndCB_14
   \   0001E6   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0001E9   90....       MOV       DPTR,#_NIB + 23
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   65..         XRL       A,?V4
   \   0001EF   7004         JNZ       ??ZDO_beaconNotifyIndCB_15
   \   0001F1   A3           INC       DPTR
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   65..         XRL       A,?V5
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001F5   7031         JNZ       ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001F7   A2F0         MOV       C,B.0
   \   0001F9   502D         JNC       ??ZDO_beaconNotifyIndCB_16
   2800                {
   2801                  // this is the new chosen router for joining...
   2802                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001FB   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001FE   8E82         MOV       DPL,R6
   \   000200   8F83         MOV       DPH,R7
   \   000202   A3           INC       DPTR
   \   000203   A3           INC       DPTR
   \   000204   A3           INC       DPTR
   \   000205   A3           INC       DPTR
   \   000206   A3           INC       DPTR
   \   000207   A3           INC       DPTR
   \   000208   A3           INC       DPTR
   \   000209   E5..         MOV       A,?V4
   \   00020B   F0           MOVX      @DPTR,A
   \   00020C   A3           INC       DPTR
   \   00020D   E5..         MOV       A,?V5
   \   00020F   12....       LCALL     ?Subroutine10 & 0xFFFF
   2803                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_5:
   \   000212   A3           INC       DPTR
   \   000213   A3           INC       DPTR
   \   000214   A3           INC       DPTR
   \   000215   A3           INC       DPTR
   \   000216   A3           INC       DPTR
   \   000217   A3           INC       DPTR
   \   000218   E0           MOVX      A,@DPTR
   \   000219   8882         MOV       DPL,R0
   \   00021B   8983         MOV       DPH,R1
   \   00021D   F0           MOVX      @DPTR,A
   2804                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   00021E   8C82         MOV       DPL,R4
   \   000220   8D83         MOV       DPH,R5
   \   000222   E0           MOVX      A,@DPTR
   \   000223   8A82         MOV       DPL,R2
   \   000225   8B83         MOV       DPH,R3
   \   000227   F0           MOVX      @DPTR,A
   2805                }
   2806          
   2807                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000228   85..82       MOV       DPL,?V0
   \   00022B   85..83       MOV       DPH,?V1
   \   00022E   A3           INC       DPTR
   \   00022F   A3           INC       DPTR
   \   000230   A3           INC       DPTR
   \   000231   A3           INC       DPTR
   \   000232   A3           INC       DPTR
   \   000233   A3           INC       DPTR
   \   000234   A3           INC       DPTR
   \   000235   E0           MOVX      A,@DPTR
   \   000236   600B         JZ        ??ZDO_beaconNotifyIndCB_17
   2808                  pNwkDesc->deviceCapacity = 1;
   \   000238   8E82         MOV       DPL,R6
   \   00023A   8F83         MOV       DPH,R7
   \   00023C   A3           INC       DPTR
   \   00023D   A3           INC       DPTR
   \   00023E   A3           INC       DPTR
   \   00023F   A3           INC       DPTR
   \   000240   7401         MOV       A,#0x1
   \   000242   F0           MOVX      @DPTR,A
   2809          
   2810                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000243   85..82       MOV       DPL,?V2
   \   000246   85..83       MOV       DPH,?V3
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2811                  pNwkDesc->routerCapacity = 1;
   \   00024C   8E82         MOV       DPL,R6
   \   00024E   8F83         MOV       DPH,R7
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   7401         MOV       A,#0x1
   \   000255   F0           MOVX      @DPTR,A
   2812              }
   2813            }
   2814          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000256   02....       LJMP      ??Subroutine47_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine67_0
   \   000006                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET
   2815          
   2816          /*********************************************************************
   2817           * @fn          ZDO_StartRouterConfirmCB
   2818           *
   2819           * @brief       This function reports the results of the request to
   2820           *              start functioning as a router in a network.
   2821           *
   2822           * @param       Status - Result of NLME_StartRouterRequest()
   2823           *
   2824           * @return      none
   2825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2827          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2828            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2829          
   2830            if ( Status == ZSUCCESS )
   \   00000A   700B         JNZ       ??ZDO_StartRouterConfirmCB_0
   2831            {
   2832              // LED on shows Router started
   2833              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2834              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2835              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7005         JNZ       ??ZDO_StartRouterConfirmCB_0
   2836              {
   2837                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7906         MOV       R1,#0x6
   \   000014   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2838              }
   2839            }
   2840          #if defined(BLINK_LEDS)
   2841            else
   2842            {
   2843              zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2844            }
   2845          #endif
   2846          
   2847            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A20         MOV       R2,#0x20
   \   000019   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   2848          }
   \                     ??CrossCallReturnLabel_146:
   \   00001C   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   2849          
   2850          /*********************************************************************
   2851           * @fn          ZDO_JoinConfirmCB
   2852           *
   2853           * @brief       This function allows the next higher layer to be notified
   2854           *              of the results of its request to join itself or another
   2855           *              device to a network.
   2856           *
   2857           * @param       Status - Result of NLME_JoinRequest()
   2858           *
   2859           * @return      none
   2860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7405         MOV       A,#0x5
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2861          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2862          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2863            (void)PanId;  // remove if this parameter is used.
   2864          
   2865            nwkStatus = (byte)Status;
   \   00000C   90....       MOV       DPTR,#nwkStatus
   \   00000F   F0           MOVX      @DPTR,A
   2866          
   2867            if ( Status == ZSUCCESS )
   \   000010   700B         JNZ       ??ZDO_JoinConfirmCB_0
   2868            {
   2869              if ( ZSTACK_END_DEVICE_BUILD
   2870                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2871              {
   2872                neighborEntry_t *pItem;
   2873          
   2874                // We don't need the neighbor table entries.
   2875                // Clear the neighbor Table to remove beacon information
   2876                nwkNeighborInitTable();
   2877          
   2878                // Force a neighbor table entry for the parent
   2879                pItem = nwkNeighborFindEmptySlot();
   2880                if ( pItem != NULL )
   2881                {
   2882                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   2883                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   2884                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   2885                  pItem->panId = _NIB. nwkPanId;
   2886                  pItem->linkInfo.rxLqi = DEF_LQI;
   2887                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   2888                  pItem->linkInfo.txCost = DEF_LINK_COST;
   2889                }
   2890              }
   2891          
   2892              // LED on shows device joined
   2893              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2894              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2895              if ( (devState == DEV_HOLD) )
   \   000012   90....       MOV       DPTR,#devState
   \   000015   E0           MOVX      A,@DPTR
   \   000016   7005         JNZ       ??ZDO_JoinConfirmCB_0
   2896              {
   2897                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000018                ; Setup parameters for call to function ZDApp_ChangeState
   \   000018   7903         MOV       R1,#0x3
   \   00001A   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2898              }
   2899          
   2900              if ( !ZG_SECURE_ENABLED )
   2901              {
   2902                // Notify to save info into NV
   2903                ZDApp_NVUpdate();
   2904              }
   2905            }
   2906            else
   2907            {
   2908          #if defined(BLINK_LEDS)
   2909              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2910          #endif
   2911            }
   2912          
   2913            // Pass the join confirm to higher layer if callback registered
   2914            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   00001D   90....       MOV       DPTR,#zdoCBFunc + 8
   \   000020   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000023   602F         JZ        ??ZDO_JoinConfirmCB_1
   2915            {
   2916              zdoJoinCnf_t joinCnf;
   2917          
   2918              joinCnf.status = Status;
   \   000025   EE           MOV       A,R6
   \   000026   85..82       MOV       DPL,?XSP + 0
   \   000029   85..83       MOV       DPH,?XSP + 1
   \   00002C   F0           MOVX      @DPTR,A
   2919              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   00002D   90....       MOV       DPTR,#_NIB + 20
   \   000030   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   2920              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_163:
   \   00003B   90....       MOV       DPTR,#_NIB + 23
   \   00003E   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   2921          
   2922              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_164:
   \   000049                ; Setup parameters for indirect call
   \   000049   AA..         MOV       R2,?XSP + 0
   \   00004B   AB..         MOV       R3,?XSP + 1
   \   00004D   8882         MOV       DPL,R0
   \   00004F   8983         MOV       DPH,R1
   \   000051   12....       LCALL     ?CALL_IND
   2923            }
   2924            
   2925            // Notify ZDApp
   2926            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   000054                ; Setup parameters for call to function ZDApp_SendMsg
   \   000054   7C00         MOV       R4,#0x0
   \   000056   7D00         MOV       R5,#0x0
   \   000058   7B02         MOV       R3,#0x2
   \   00005A   7A02         MOV       R2,#0x2
   \   00005C   12....       LCALL     ?Subroutine29 & 0xFFFF
   2927          
   2928          }
   \                     ??CrossCallReturnLabel_20:
   \   00005F   02....       LJMP      ?Subroutine0 & 0xFFFF
   2929          
   2930          /*********************************************************************
   2931           * @fn          ZDO_PermitJoinCB
   2932           *
   2933           * @brief      This function is called when there is a change in the
   2934           *             device's permit join status.
   2935           *
   2936           * @param       duration - the new duration
   2937           *
   2938           * @return      none
   2939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2940          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2941          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2942            // Pass the Permit Join status to higher layer if callback registered
   2943            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000017   6007         JZ        ??ZDO_PermitJoinCB_0
   2944            {
   2945              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   2946            }
   2947          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV       A,#0x1
   \   000022   02....       LJMP      ?Subroutine3 & 0xFFFF
   2948          
   2949          /*********************************************************************
   2950           * @fn          ZDO_AddrChangeIndicationCB
   2951           *
   2952           * @brief       This function notifies the application that this
   2953           *              device's address has changed.  Could happen in
   2954           *              a network with stochastic addressing (PRO).
   2955           *
   2956           * @param       newAddr - the new address
   2957           *
   2958           * @return      none
   2959           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2960          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2961          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   2962            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2963            epList_t *pItem = epList;
   \   000009   90....       MOV       DPTR,#epList
   \   00000C   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   2964          
   2965            // Notify to save info into NV
   2966            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_125:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2967          
   2968            // Notify the applications
   2969            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000015   803D         SJMP      ??CrossCallReturnLabel_126
   2970          
   2971            while (pItem != NULL)
   2972            {
   2973              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000017   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00001A   85..82       MOV       DPL,?V0
   \   00001D   F583         MOV       DPH,A
   \   00001F   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000022   6029         JZ        ??ZDO_AddrChangeIndicationCB_1
   2974              {
   2975                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000024                ; Setup parameters for call to function osal_msg_allocate
   \   000024   7A04         MOV       R2,#0x4
   \   000026   7B00         MOV       R3,#0x0
   \   000028   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2976                if (pZDOAddrChangeMsg != NULL)
   \   00002B   EA           MOV       A,R2
   \   00002C   4B           ORL       A,R3
   \   00002D   601E         JZ        ??ZDO_AddrChangeIndicationCB_1
   2977                {
   2978                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   74D6         MOV       A,#-0x2a
   \   000035   F0           MOVX      @DPTR,A
   2979                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E5..         MOV       A,?V2
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E5..         MOV       A,?V3
   \   00003E   12....       LCALL     ?Subroutine12 & 0xFFFF
   2980                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2981                }
   2982              }
   \                     ??CrossCallReturnLabel_6:
   \   000041   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000049   F9           MOV       R1,A
   \   00004A   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2983              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   2984            }
   \                     ??CrossCallReturnLabel_126:
   \   000054   EE           MOV       A,R6
   \   000055   4F           ORL       A,R7
   \   000056   70BF         JNZ       ??ZDO_AddrChangeIndicationCB_0
   2985          
   2986            // Send out a device announce
   2987            ZDApp_AnnounceNewAddress();
   \   000058                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000058   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2988          }
   \   00005B   02....       LJMP      ??Subroutine66_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
   2989          
   2990          /*********************************************************************
   2991           * @fn          ZDO_JoinIndicationCB
   2992           *
   2993           * @brief       This function allows the next higher layer of a
   2994           *              coordinator to be notified of a remote join request.
   2995           *
   2996           * @param       ShortAddress - 16-bit address
   2997           * @param       ExtendedAddress - IEEE (64-bit) address
   2998           * @param       CapabilityFlags - Association Capability Flags
   2999           * @param       type - of joining -
   3000           *                          NWK_ASSOC_JOIN
   3001           *                          NWK_ASSOC_REJOIN_UNSECURE
   3002           *                          NWK_ASSOC_REJOIN_SECURE
   3003           *
   3004           * @return      ZStatus_t
   3005           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3006          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   3007                                          uint8 CapabilityFlags, uint8 type)
   3008          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   3009            (void)ExtendedAddress;
   3010            //check if the device is leaving before responding to rejoin request
   3011            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00000C   6005         JZ        ??ZDO_JoinIndicationCB_0
   3012            {
   3013              return ZFailure; // device leaving , hence do not allow rejoin
   \   00000E   7901         MOV       R1,#0x1
   \   000010   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3014            }
   3015          
   3016          #if ZDO_NV_SAVE_RFDs
   3017              (void)CapabilityFlags;
   3018          
   3019          #else  // if !ZDO_NV_SAVE_RFDs
   3020              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   3021          #endif
   3022              {
   3023                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   000013                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000013   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000016   740E         MOV       A,#0xe
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   3024              }
   3025          
   3026              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   3027              {
   3028                if ( type == NWK_ASSOC_JOIN ||
   3029                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   3030                      type == NWK_ASSOC_REJOIN_SECURE )
   \   00001D   600D         JZ        ??ZDO_JoinIndicationCB_2
   \   00001F   7401         MOV       A,#0x1
   \   000021   68           XRL       A,R0
   \   000022   6008         JZ        ??ZDO_JoinIndicationCB_2
   \   000024   7402         MOV       A,#0x2
   \   000026   68           XRL       A,R0
   \   000027   6003         JZ        $+5
   \   000029   02....       LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
   3031                {
   3032                  uint16 timeToFire;
   3033                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   3034          
   3035                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   7A06         MOV       R2,#0x6
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V0,R2
   \   000035   8B..         MOV       ?V1,R3
   \   000037   AE..         MOV       R6,?V0
   \   000039   AF..         MOV       R7,?V1
   3036          
   3037                  if ( pNewDevice == NULL )
   \   00003B   EA           MOV       A,R2
   \   00003C   4F           ORL       A,R7
   \   00003D   7004         JNZ       ??ZDO_JoinIndicationCB_4
   3038                  {
   3039                    // Memory alloc failed
   3040                    return ZMemError;
   \   00003F   7910         MOV       R1,#0x10
   \   000041   807F         SJMP      ??ZDO_JoinIndicationCB_1
   3041                  }
   3042          
   3043                  // Add the new device to the New Device List
   3044                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000043   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000046   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000049   7006         JNZ       ??ZDO_JoinIndicationCB_5
   3045                  {
   3046                    // The list is empty, add the first element
   3047                    ZDApp_NewDeviceList = pNewDevice;
   \   00004B   EA           MOV       A,R2
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EB           MOV       A,R3
   \   00004F   801B         SJMP      ??ZDO_JoinIndicationCB_6
   3048                  }
   3049                  else
   3050                  {
   3051                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FA           MOV       R2,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   8003         SJMP      ??ZDO_JoinIndicationCB_7
   3052          
   3053                    // Walk the list to last element
   3054                    while ( pDeviceList->next )
   3055                    {
   3056                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000057   E8           MOV       A,R0
   \   000058   FA           MOV       R2,A
   \   000059   E9           MOV       A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   00005A   FB           MOV       R3,A
   3057                    }
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000062   70F3         JNZ       ??ZDO_JoinIndicationCB_8
   3058          
   3059                    // Add new device at the end
   3060                    pDeviceList->next = pNewDevice;
   \   000064   8A82         MOV       DPL,R2
   \   000066   8B83         MOV       DPH,R3
   \   000068   EE           MOV       A,R6
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   EF           MOV       A,R7
   \                     ??ZDO_JoinIndicationCB_6:
   \   00006C   F0           MOVX      @DPTR,A
   3061                  }
   3062          
   3063                  // get the remaining time of the timer
   3064                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   00006D                ; Setup parameters for call to function osal_get_timeoutEx
   \   00006D   7A40         MOV       R2,#0x40
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   90....       MOV       DPTR,#ZDAppTaskID
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F9           MOV       R1,A
   \   000076   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000079   8A..         MOV       ?V0,R2
   \   00007B   8B..         MOV       ?V1,R3
   3065          
   3066                  pNewDevice->next = NULL;
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   E4           CLR       A
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   F0           MOVX      @DPTR,A
   3067                  pNewDevice->shortAddr = ShortAddress;
   \   000085   8E82         MOV       DPL,R6
   \   000087   8F83         MOV       DPH,R7
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   E5..         MOV       A,?V4
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   E5..         MOV       A,?V5
   \   000091   F0           MOVX      @DPTR,A
   3068                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   000092   7458         MOV       A,#0x58
   \   000094   C3           CLR       C
   \   000095   95..         SUBB      A,?V0
   \   000097   F8           MOV       R0,A
   \   000098   7402         MOV       A,#0x2
   \   00009A   95..         SUBB      A,?V1
   \   00009C   F9           MOV       R1,A
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E8           MOV       A,R0
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E9           MOV       A,R1
   \   0000A9   F0           MOVX      @DPTR,A
   3069          
   3070                  // Start the timer only if there is no pending timer
   3071                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   0000AA   7458         MOV       A,#0x58
   \   0000AC   68           XRL       A,R0
   \   0000AD   7003         JNZ       ??ZDO_JoinIndicationCB_9
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   69           XRL       A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000B2   700C         JNZ       ??ZDO_JoinIndicationCB_3
   3072                  {
   3073                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000B4                ; Setup parameters for call to function osal_start_timerEx
   \   0000B4   90....       MOV       DPTR,#__Constant_258
   \   0000B7   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000BA   12....       LCALL     ?Subroutine15 & 0xFFFF
   3074                  }
   3075                }
   3076              }
   \                     ??CrossCallReturnLabel_82:
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   3077          
   3078              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000C0   7900         MOV       R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000C2   02....       LJMP      ??Subroutine66_0 & 0xFFFF
   3079          
   3080          }
   3081          
   3082          /*********************************************************************
   3083           * @fn          ZDO_ConcentratorIndicationCB
   3084           *
   3085           * @brief       This function allows the next higher layer of a
   3086           *              device to be notified of existence of the concentrator.
   3087           *
   3088           * @param       nwkAddr - 16-bit NWK address of the concentrator
   3089           * @param       extAddr - pointer to extended Address
   3090           *                        NULL if not available
   3091           * @param       pktCost - PktCost from RREQ
   3092           *
   3093           * @return      void
   3094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3095          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   3096          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3097            zdoConcentratorInd_t conInd;
   3098          
   3099            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   3100            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_166:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   3101            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   3102          
   3103            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000024   6007         JZ        ??ZDO_ConcentratorIndicationCB_0
   3104            {
   3105              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ?CALL_IND
   3106            }
   3107          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine79_0
   \   000006                ; // Fall through to label ??Subroutine79_0
   3108          
   3109          /*********************************************************************
   3110           * @fn          ZDO_LeaveCnf
   3111           *
   3112           * @brief       This function allows the next higher layer to be
   3113           *              notified of the results of its request for this or
   3114           *              a child device to leave the network.
   3115           *
   3116           * @param       cnf - NLME_LeaveCnf_t
   3117           *
   3118           * @return      none
   3119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine69_0
   \   000004                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3120          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   3121          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3122            // Check for this device
   3123            if ( osal_ExtAddrEqual( cnf->extAddr,
   3124                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
   \   000014   EE           MOV       A,R6
   \   000015   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000018   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00001B                ; Setup parameters for call to function sAddrExtCmp
   \   00001B   AA..         MOV       R2,?V0
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000021   E9           MOV       A,R1
   \   000022   6401         XRL       A,#0x1
   \   000024   701E         JNZ       ??ZDO_LeaveCnf_0
   3125            {
   3126              // Pass the leave confirm to higher layer if callback registered
   3127              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   3128                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000026   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000029   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002C   600B         JZ        ??ZDO_LeaveCnf_1
   \   00002E                ; Setup parameters for indirect call
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   EA           MOV       A,R2
   \   000036   4B           ORL       A,R3
   \   000037   7038         JNZ       ??ZDO_LeaveCnf_2
   3129              {
   3130                // Prepare to leave with reset
   3131                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000039                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   3132              }
   3133            }
   \                     ??CrossCallReturnLabel_132:
   \   000042   802D         SJMP      ??ZDO_LeaveCnf_2
   3134            else if ( ZSTACK_ROUTER_BUILD )
   3135            {
   3136              // Remove device address(optionally descendents) from data
   3137              ZDApp_LeaveUpdate( cnf->dstAddr,
   3138                                 cnf->extAddr,
   3139                                 cnf->removeChildren,
   3140                                 cnf->rejoin );
   \                     ??ZDO_LeaveCnf_0:
   \   000044                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F5..         MOV       ?V2,A
   \   00004D   78..         MOV       R0,#?V2
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F9           MOV       R1,A
   \   000062   AC..         MOV       R4,?V0
   \   000064   AD..         MOV       R5,?V1
   \   000066   12....       LCALL     ?Subroutine25 & 0xFFFF
   3141            }
   \                     ??CrossCallReturnLabel_111:
   \   000069   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   00006C   7401         MOV       A,#0x1
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   3142          }
   \                     ??ZDO_LeaveCnf_2:
   \   000071   02....       LJMP      ??Subroutine63_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   240B         ADD       A,#0xb
   \   000002   F5..         MOV       ?V2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F5..         MOV       ?V3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000005   22           RET
   3143          
   3144          /*********************************************************************
   3145           * @fn          ZDO_LeaveInd
   3146           *
   3147           * @brief       This function allows the next higher layer of a
   3148           *              device to be notified of a remote leave request or
   3149           *              indication.
   3150           *
   3151           * @param       ind - NLME_LeaveInd_t
   3152           *
   3153           * @return      none
   3154           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3155          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   3156          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3157            uint8 leave;
   3158          
   3159            // NWK layer filters out illegal requests
   3160            if ( ind->request == TRUE )
   \   00000E   EA           MOV       A,R2
   \   00000F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000012   EA           MOV       A,R2
   \   000013   240C         ADD       A,#0xc
   \   000015   F5..         MOV       ?V0,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   F5..         MOV       ?V1,A
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6401         XRL       A,#0x1
   \   00002C   7039         JNZ       ??ZDO_LeaveInd_0
   3161            {
   3162              byte temp = FALSE;
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E4           CLR       A
   \   000034   12....       LCALL     ?Subroutine12 & 0xFFFF
   3163              
   3164              // Only respond if we are not rejoining the network
   3165              if ( ind->rejoin == FALSE )
   \                     ??CrossCallReturnLabel_7:
   \   000037   701F         JNZ       ??ZDO_LeaveInd_1
   3166              {
   3167                // Notify network of leave
   3168                NLME_LeaveRsp_t rsp;
   3169                rsp.rejoin = ind->rejoin;
   \   000039   7401         MOV       A,#0x1
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
   3170          
   3171                if ( ZSTACK_ROUTER_BUILD )
   3172                {
   3173                  rsp.removeChildren = ind->removeChildren;
   \   000040   85..82       MOV       DPL,?V2
   \   000043   85..83       MOV       DPH,?V3
   \   000046   E0           MOVX      A,@DPTR
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   F0           MOVX      @DPTR,A
   3174                }
   3175                else if ( ZSTACK_END_DEVICE_BUILD )
   3176                {
   3177                  NLME_SetResponseRate(0);
   3178                  NLME_SetQueuedPollRate(0);
   3179                  rsp.removeChildren = 0;
   3180                }
   3181                
   3182                bdb_setFN();
   \   00004E                ; Setup parameters for call to function bdb_setFN
   \   00004E   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   3183                 
   3184                NLME_LeaveRsp( &rsp );
   \   000051                ; Setup parameters for call to function NLME_LeaveRsp
   \   000051   AA..         MOV       R2,?XSP + 0
   \   000053   AB..         MOV       R3,?XSP + 1
   \   000055   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   3185              }
   3186          
   3187              if ( ZSTACK_END_DEVICE_BUILD )
   3188              {
   3189                // Stop polling and get ready to reset
   3190                NLME_SetPollRate( 0 );
   3191              }
   3192          
   3193              // Prepare to leave with reset
   3194              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   000058                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000058   12....       LCALL     ?Subroutine30 & 0xFFFF
   3195              
   3196              //Turn on the radio to avoid sending packets after sending the leave    
   3197              ZMacSetReq(ZMacRxOnIdle, &temp);
   \                     ??CrossCallReturnLabel_130:
   \   00005B                ; Setup parameters for call to function ZMacSetReq
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   7952         MOV       R1,#0x52
   \   000062   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000065   8051         SJMP      ??ZDO_LeaveInd_2
   3198            }
   3199            else
   3200            {
   3201              leave = FALSE;
   3202          
   3203              // Check if this device needs to leave as a child or descendent
   3204              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000067                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000067   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00006A   8A..         MOV       ?V4,R2
   \   00006C   8B..         MOV       ?V5,R3
   \   00006E   85..82       MOV       DPL,?V2
   \   000071   85..83       MOV       DPH,?V3
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F9           MOV       R1,A
   \   000076   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000079   E5..         MOV       A,?V4
   \   00007B   6A           XRL       A,R2
   \   00007C   7003         JNZ       ??ZDO_LeaveInd_3
   \   00007E   E5..         MOV       A,?V5
   \   000080   6B           XRL       A,R3
   \                     ??ZDO_LeaveInd_3:
   \   000081   7018         JNZ       ??ZDO_LeaveInd_4
   3205              {
   3206                if ( ( ind->removeChildren == TRUE )   )
   \   000083   7401         MOV       A,#0x1
   \   000085   69           XRL       A,R1
   \   000086   600E         JZ        ??ZDO_LeaveInd_5
   3207                {
   3208                  leave = TRUE;
   3209                }
   3210                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   000088   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00008B   700E         JNZ       ??ZDO_LeaveInd_4
   3211                {
   3212                  // old parents is leaving the network, child needs to search for a new parent
   3213                  ind->rejoin = TRUE;
   \   00008D   85..82       MOV       DPL,?V0
   \   000090   85..83       MOV       DPH,?V1
   \   000093   7401         MOV       A,#0x1
   \   000095   F0           MOVX      @DPTR,A
   3214                  leave = TRUE;
   3215                }
   3216          
   3217              }
   3218              else if ( ind->removeChildren == TRUE )
   3219              {
   3220                // Check NWK address allocation algorithm
   3221                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3222              }
   3223          
   3224              if ( leave == TRUE )
   3225              {
   3226                // Prepare to leave with reset
   3227                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_5:
   \   000096                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000096   12....       LCALL     ?Subroutine30 & 0xFFFF
   3228              }
   \                     ??CrossCallReturnLabel_131:
   \   000099   801D         SJMP      ??ZDO_LeaveInd_2
   3229              else
   3230              {
   3231                // Remove device address(optionally descendents) from data
   3232                ZDApp_LeaveUpdate( ind->srcAddr,
   3233                                   ind->extAddr,
   3234                                   ind->removeChildren,
   3235                                   ind->rejoin );
   \                     ??ZDO_LeaveInd_4:
   \   00009B                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F5..         MOV       ?V0,A
   \   0000A4   78..         MOV       R0,#?V0
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A9   EE           MOV       A,R6
   \   0000AA   2402         ADD       A,#0x2
   \   0000AC   FC           MOV       R4,A
   \   0000AD   E4           CLR       A
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   FD           MOV       R5,A
   \   0000B0   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   0000B3   7401         MOV       A,#0x1
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   3236              }
   3237            }
   3238          
   3239            // Pass the leave indication to higher layer if callback registered.
   3240            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   0000B8   90....       MOV       DPTR,#zdoCBFunc + 12
   \   0000BB   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000BE   6007         JZ        ??ZDO_LeaveInd_6
   3241            {
   3242              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000C0                ; Setup parameters for indirect call
   \   0000C0   EE           MOV       A,R6
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FB           MOV       R3,A
   \   0000C4   12....       LCALL     ?CALL_IND
   3243            }
   3244          }
   \                     ??ZDO_LeaveInd_6:
   \   0000C7   7403         MOV       A,#0x3
   \   0000C9   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine72_0
   \   000006                ; // Fall through to label ??Subroutine72_0
   3245          
   3246          /*********************************************************************
   3247           * @fn          ZDO_SyncIndicationCB
   3248           *
   3249           * @brief       This function allows the next higher layer of a
   3250           *              coordinator to be notified of a loss of synchronization
   3251           *                          with the parent/child device.
   3252           *
   3253           * @param       type: 0 - child; 1 - parent
   3254           *
   3255           *
   3256           * @return      none
   3257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3258          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3259          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3260            (void)shortAddr;  // Remove this line if this parameter is used.
   3261          
   3262            if ( ZSTACK_END_DEVICE_BUILD
   3263              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3264            {
   3265              if ( type == 1 && retryCnt == 0 )
   3266              {
   3267                // We lost contact with our parent.  Clear the neighbor Table.
   3268                nwkNeighborInitTable();
   3269                
   3270                //If we are Factory new, then report fail on association
   3271                if(!bdb_isDeviceNonFactoryNew())
   3272                {
   3273                  bdb_nwkAssocAttemt(FALSE);
   3274                }
   3275          #if (ZG_BUILD_ENDDEVICE_TYPE)
   3276                else
   3277                {
   3278                  //We lost our parent
   3279                  bdb_parentLost();
   3280                }
   3281          #endif
   3282              }
   3283            }
   3284          }
   \   000000   02....       LJMP      ?BRET
   3285          
   3286          /*********************************************************************
   3287           * @fn          ZDO_ManytoOneFailureIndicationCB
   3288           *
   3289           * @brief       This function allows the next higher layer of a
   3290           *              concentrator to be notified of a many-to-one route
   3291           *              failure.
   3292           *
   3293           * @param       none
   3294           *
   3295           *
   3296           * @return      none
   3297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3298          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3299          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3300            // By default, the concentrator automatically redo many-to-one route
   3301            // discovery to update all many-to-one routes in the network
   3302            // If you want anything processing other than the default,
   3303            // please replace the following code.
   3304          
   3305            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3306          }
   \   000007   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3307          
   3308          /*********************************************************************
   3309           * @fn          ZDO_PollConfirmCB
   3310           *
   3311           * @brief       This function allows the next higher layer to be
   3312           *              notified of a Poll Confirm.
   3313           *
   3314           * @param       none
   3315           *
   3316           * @return      none
   3317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3318          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3319          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3320            (void)status;  // Remove this line if this parameter is used.
   3321            return;
   \   000000   02....       LJMP      ?BRET
   3322          }
   3323          
   3324          /*********************************************************************
   3325           * @fn          ZDO_NetworkStatusCB
   3326           *
   3327           * @brief       Network Status Callback function
   3328           *
   3329           * @param       nwkDstAddr - message's destination address- used to determine
   3330           *                           if the message was intended for this device or
   3331           *                           a sleeping end device.
   3332           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3333           * @param       dstAddr - the destination address related to the status code
   3334           *
   3335           * @return      none
   3336           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3337          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3338          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3339            (void)dstAddr;     // Remove this line if this parameter is used.
   3340          
   3341            if ( (nwkDstAddr == NLME_GetShortAddr())
   3342                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3343            {
   3344              // Routing error for dstAddr, this is informational and a Route
   3345              // Request should happen automatically.
   3346            }
   3347          }
   \   000007   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3348          
   3349          /******************************************************************************
   3350           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3351           *
   3352           * @brief       Stub routine implemented by NHLE. NHLE should call
   3353           *              <AddrMgrWriteNV> when appropriate.
   3354           *
   3355           * @param       none
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3360          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3361          #if defined ( NV_RESTORE )
   3362            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000B   7003         JNZ       ??AddrMgrWriteNVRequest_0
   3363            {
   3364              // Trigger to save info into NV
   3365              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3366            }
   3367          #endif
   3368          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000010   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3369          
   3370          /*********************************************************************
   3371           * Call Back Functions from Security  - API
   3372           */
   3373          
   3374           /*********************************************************************
   3375           * @fn          ZDO_UpdateDeviceIndication
   3376           *
   3377           * @brief       This function notifies the "Trust Center" of a
   3378           *              network when a device joins or leaves the network.
   3379           *
   3380           * @param       extAddr - pointer to 64 bit address of new device
   3381           * @param       status  - 0 if a new device joined securely
   3382           *                      - 1 if a new device joined un-securely
   3383           *                      - 2 if a device left the network
   3384           *
   3385           * @return      true if newly joined device should be allowed to
   3386           *                                              remain on network
   3387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3388          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3389          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3390            // can implement a network access policy based on the
   3391            // IEEE address of newly joining devices...
   3392            (void)extAddr;
   3393            (void)status;
   3394          
   3395            return ZSuccess;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   3396          }
   3397          
   3398          /*********************************************************************
   3399           * @fn          ZDApp_InMsgCB
   3400           *
   3401           * @brief       This function is called to pass up any message that is
   3402           *              not yet supported.  This allows for the developer to
   3403           *              support features themselves..
   3404           *
   3405           * @return      none
   3406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3407          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3409            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00000D   5480         ANL       A,#0x80
   \   00000F   704B         JNZ       ??ZDApp_InMsgCB_0
   3410            {
   3411              // Handle the response message
   3412            }
   3413            else
   3414            {
   3415              // Handle the request message by sending a generic "not supported".
   3416              // Device Announce doesn't have a response.
   3417              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000011   EA           MOV       A,R2
   \   000012   240B         ADD       A,#0xb
   \   000014   F582         MOV       DPL,A
   \   000016   E4           CLR       A
   \   000017   3F           ADDC      A,R7
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   703F         JNZ       ??ZDApp_InMsgCB_0
   \   00001D   7413         MOV       A,#0x13
   \   00001F   68           XRL       A,R0
   \   000020   7001         JNZ       ??ZDApp_InMsgCB_1
   \   000022   E9           MOV       A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000023   6037         JZ        ??ZDApp_InMsgCB_0
   3418              {
   3419                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3420                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000025                ; Setup parameters for call to function ZDP_GenericRsp
   \   000025   E8           MOV       A,R0
   \   000026   F5..         MOV       ?V0,A
   \   000028   E9           MOV       A,R1
   \   000029   4480         ORL       A,#0x80
   \   00002B   F5..         MOV       ?V1,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   E4           CLR       A
   \   000033   F5..         MOV       ?V0,A
   \   000035   F5..         MOV       ?V1,A
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   EA           MOV       A,R2
   \   00003D   240E         ADD       A,#0xe
   \   00003F   F582         MOV       DPL,A
   \   000041   E4           CLR       A
   \   000042   3F           ADDC      A,R7
   \   000043   F583         MOV       DPH,A
   \   000045   E0           MOVX      A,@DPTR
   \   000046   FD           MOV       R5,A
   \   000047   7C84         MOV       R4,#-0x7c
   \   000049   EA           MOV       A,R2
   \   00004A   2402         ADD       A,#0x2
   \   00004C   FA           MOV       R2,A
   \   00004D   E4           CLR       A
   \   00004E   3F           ADDC      A,R7
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     ?Subroutine38 & 0xFFFF
   3421              }
   3422            }
   \                     ??CrossCallReturnLabel_30:
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   3423          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005C   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   3424          
   3425          
   3426          /*********************************************************************
   3427           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3428           *
   3429           * @brief   Changes the Match Descriptor Response permission.
   3430           *
   3431           * @param   endpoint - endpoint to allow responses
   3432           * @param   action - true to allow responses, false to not
   3433           *
   3434           * @return  none
   3435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3436          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3437          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3438            // Store the action
   3439            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   3440          }
   \   000008   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   3441          
   3442          /*********************************************************************
   3443           * @fn      ZDApp_NetworkInit()
   3444           *
   3445           * @brief   Used to start the network joining process
   3446           *
   3447           * @param   delay - mSec delay to wait before starting
   3448           *
   3449           * @return  none
   3450           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3451          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3452          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3453            if ( delay )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6018         JZ        ??ZDApp_NetworkInit_0
   3454            {
   3455              // Wait awhile before starting the device
   3456              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV       ?V0,R2
   \   00000B   8B..         MOV       ?V1,R3
   \   00000D   E4           CLR       A
   \   00000E   F5..         MOV       ?V2,A
   \   000010   F5..         MOV       ?V3,A
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV       R2,#0x1
   \   000019   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   3457            }
   \                     ??CrossCallReturnLabel_84:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   8005         SJMP      ??CrossCallReturnLabel_147
   3458            else
   3459            {
   3460              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000021                ; Setup parameters for call to function osal_set_event
   \   000021   7A01         MOV       R2,#0x1
   \   000023   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   3461            }
   3462          }
   \                     ??CrossCallReturnLabel_147:
   \   000026   02....       LJMP      ??Subroutine63_0 & 0xFFFF
   3463          
   3464          /*********************************************************************
   3465           * @fn      ZDApp_NwkStateUpdateCB()
   3466           *
   3467           * @brief   This function notifies that this device's network
   3468           *          state info has been changed.
   3469           *
   3470           * @param   none
   3471           *
   3472           * @return  none
   3473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3474          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3475          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3476            // Notify to save info into NV
   3477            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00000B   7003         JNZ       ??ZDApp_NwkStateUpdateCB_0
   3478            {
   3479              // Trigger to save info into NV
   3480              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3481            }
   3482          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000010   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3483          
   3484          /*********************************************************************
   3485           * @fn      ZDApp_NodeProfileSync()
   3486           *
   3487           * @brief   Sync node with stack profile.
   3488           *
   3489           * @param   stackProfile - stack profile of the network to join
   3490           *
   3491           * @return  none
   3492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3493          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3494          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3495            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   501A         JNC       ??ZDApp_NodeProfileSync_0
   3496            {
   3497              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   6013         JZ        ??ZDApp_NodeProfileSync_0
   3498              {
   3499                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   3500                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV       A,#0xc
   \   000024   F0           MOVX      @DPTR,A
   3501                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3502              }
   3503            }
   3504          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   3505          
   3506          /*********************************************************************
   3507           * @fn      ZDApp_StartJoiningCycle()
   3508           *
   3509           * @brief   Starts the joining cycle of a device.  This will only
   3510           *          continue an already started (or stopped) joining cycle.
   3511           *
   3512           * @param   none
   3513           *
   3514           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3516          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3517          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3518            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   3519            {
   3520              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   3521              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3522          
   3523              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   3524            }
   3525            else
   3526              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3527          }
   3528          
   3529          /*********************************************************************
   3530           * @fn      ZDApp_StopJoiningCycle()
   3531           *
   3532           * @brief   Stops the joining or rejoining process of a device.
   3533           *
   3534           * @param   none
   3535           *
   3536           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3537           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3538          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3539          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3540            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   600A         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX      A,@DPTR
   \   000012   640C         XRL       A,#0xc
   \   000014   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   3541            {
   3542              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV       DPTR,#continueJoining
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
   3543              return ( TRUE );
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   3544            }
   3545            else
   3546              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3547          }
   3548          
   3549          /*********************************************************************
   3550           * @fn      ZDApp_AnnounceNewAddress()
   3551           *
   3552           * @brief   Send Device Announce and hold all transmissions for
   3553           *          new address timeout.
   3554           *
   3555           * @param   none
   3556           *
   3557           * @return  none
   3558           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3559          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3560          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3561          #if defined ( ZIGBEEPRO )
   3562            // Turn off data request hold
   3563            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3564          #endif
   3565          
   3566            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3567                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV       ?V0,R2
   \   000011   8B..         MOV       ?V1,R3
   \   000013   AE..         MOV       R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV       ?V0,#0x0
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   EE           MOV       A,R6
   \   000026   FC           MOV       R4,A
   \   000027   AD..         MOV       R5,?V1
   \   000029   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV       A,#0x1
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   3568          
   3569          #if defined ( ZIGBEEPRO )
   3570            // Setup the timeout
   3571            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV       R2,#0x0
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3572          #endif
   3573          
   3574            if ( ZSTACK_END_DEVICE_BUILD )
   3575            {
   3576              if ( zgChildAgingEnable == TRUE )
   3577              {
   3578                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3579          
   3580                // Send the message to parent
   3581                NLME_GetCoordExtAddr( coordExtAddr );
   3582                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3583                                           zgEndDeviceTimeoutValue,
   3584                                           zgEndDeviceConfiguration );
   3585              }
   3586            }
   3587          }
   \   000038   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   3588          
   3589          /*********************************************************************
   3590           * @fn      ZDApp_SendParentAnnce()
   3591           *
   3592           * @brief   Send Parent Announce message.
   3593           *
   3594           * @param   none
   3595           *
   3596           * @return  none
   3597           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3598          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3599          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3600            uint8 count;
   3601            uint8 *childInfo;
   3602          
   3603            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   3604          
   3605            if ( childInfo != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6054         JZ        ??ZDApp_SendParentAnnce_0
   3606            {
   3607              if ( count > 0 )
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6044         JZ        ??ZDApp_SendParentAnnce_1
   3608              {
   3609                zAddrType_t dstAddr;
   3610          
   3611                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000022   7409         MOV       A,#0x9
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   740F         MOV       A,#0xf
   \   000029   F0           MOVX      @DPTR,A
   3612                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   74FC         MOV       A,#-0x4
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
   3613          
   3614                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000036                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000036   75..00       MOV       ?V2,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75..1F       MOV       ?V2,#0x1f
   \   000041   75..00       MOV       ?V3,#0x0
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   7406         MOV       A,#0x6
   \   000057   12....       LCALL     ?XSTACK_DISP102_8
   \   00005A   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00005C   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00005E   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   3615              }
   3616          
   3617              // Free the list after the message has been sent
   3618              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   AA..         MOV       R2,?V0
   \   000068   AB..         MOV       R3,?V1
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3619            }
   3620          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006D   740A         MOV       A,#0xa
   \   00006F   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3621          
   3622          /*********************************************************************
   3623           * @fn          ZDApp_NVUpdate
   3624           *
   3625           * @brief       Set the NV Update Timer.
   3626           *
   3627           * @param       none
   3628           *
   3629           * @return      none
   3630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3631          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3632          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3633          #if defined ( NV_RESTORE )
   3634            if ( (ZSTACK_END_DEVICE_BUILD)
   3635                 || (ZSTACK_ROUTER_BUILD
   3636                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   \   000004   90....       MOV       DPTR,#_NIB + 14
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000A   4009         JC        ??ZDApp_NVUpdate_0
   3637            {
   3638              // No need to wait, set the event to save the state
   3639              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A00         MOV       R2,#0x0
   \   00000E   7B01         MOV       R3,#0x1
   \   000010   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   3640            }
   \                     ??CrossCallReturnLabel_149:
   \   000013   8010         SJMP      ??ZDApp_NVUpdate_1
   3641            else
   3642            {
   3643              // To allow for more changes to the network state before saving
   3644              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \                     ??ZDApp_NVUpdate_0:
   \   000015                ; Setup parameters for call to function osal_start_timerEx
   \   000015   90....       MOV       DPTR,#__Constant_2bc
   \   000018   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001B   7A00         MOV       R2,#0x0
   \   00001D   7B01         MOV       R3,#0x1
   \   00001F   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   3645            }
   \                     ??CrossCallReturnLabel_86:
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   3646          #endif
   3647          }
   \                     ??ZDApp_NVUpdate_1:
   \   000025   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3648          
   3649          /*********************************************************************
   3650           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3651           *
   3652           * @brief   Returns a PAN ID for the network layer to use during
   3653           *          a coordinator start and there is another network with
   3654           *          the intended PANID.
   3655           *
   3656           * @param   panid - the intended PAN ID
   3657           *
   3658           * @return  PANID to try
   3659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3660          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3661          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3662            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   3663          }
   3664          
   3665          /*********************************************************************
   3666           * @fn          ZDO_SrcRtgIndCB
   3667           *
   3668           * @brief       This function notifies the ZDO available src route record received.
   3669           *
   3670           * @param       srcAddr - source address of the source route
   3671           * @param       relayCnt - number of devices in the relay list
   3672           * @param       relayList - relay list of the source route
   3673           *
   3674           * @return      none
   3675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3676          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3677          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3678            zdoSrcRtg_t srcRtg;
   3679          
   3680            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   3681            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_167:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   3682            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   3683          
   3684            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000024   600A         JZ        ??ZDO_SrcRtgIndCB_0
   3685            {
   3686              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   3687            }
   \                     ??CrossCallReturnLabel_158:
   \   00002D   12....       LCALL     ?CALL_IND
   3688          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   3689          
   3690          /*********************************************************************
   3691           * @fn          ZDApp_InitZdoCBFunc
   3692           *
   3693           * @brief       Call this function to initialize zdoCBFunc[]
   3694           *
   3695           * @param       none
   3696           *
   3697           * @return      none
   3698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3699          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3700          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3701            uint8 i;
   3702          
   3703            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   3704            {
   3705              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   12....       LCALL     ?Subroutine44 & 0xFFFF
   3706            }
   \                     ??CrossCallReturnLabel_39:
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   0A           INC       R2
   \   000011   EA           MOV       A,R2
   \   000012   C3           CLR       C
   \   000013   9409         SUBB      A,#0x9
   \   000015   40EF         JC        ??ZDApp_InitZdoCBFunc_0
   3707          }
   \   000017   02....       LJMP      ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#zdoCBFunc & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
   3708          
   3709          /*********************************************************************
   3710           * @fn          ZDO_RegisterForZdoCB
   3711           *
   3712           * @brief       Call this function to register the higher layer (for
   3713           *              example, the Application layer or MT layer) with ZDO
   3714           *              callbacks to get notified of some ZDO indication like
   3715           *              existence of a concentrator or receipt of a source
   3716           *              route record.
   3717           *
   3718           * @param       indID - ZDO Indication ID
   3719           * @param       pFn   - Callback function pointer
   3720           *
   3721           * @return      ZSuccess - successful, ZInvalidParameter if not
   3722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3723          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3724          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3725            // Check the range of the indication ID
   3726            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   500A         JNC       ??ZDO_RegisterForZdoCB_0
   3727            {
   3728              zdoCBFunc[indID] = pFn;
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00000D   12....       LCALL     ??Subroutine79_0 & 0xFFFF
   3729              return ZSuccess;
   \                     ??CrossCallReturnLabel_165:
   \   000010   7900         MOV       R1,#0x0
   \   000012   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   3730            }
   3731          
   3732            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000014   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000016   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3733          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E9           MOV       A,R1
   \   000001   29           ADD       A,R1
   \   000002   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000005   22           RET
   3734          
   3735          /*********************************************************************
   3736           * @fn          ZDO_DeregisterForZdoCB
   3737           *
   3738           * @brief       Call this function to de-register the higher layer (for
   3739           *              example, the Application layer or MT layer) with ZDO
   3740           *              callbacks to get notified of some ZDO indication like
   3741           *              existence of a concentrator or receipt of a source
   3742           *              route record.
   3743           *
   3744           * @param       indID - ZDO Indication ID
   3745           *
   3746           * @return      ZSuccess - successful, ZInvalidParameter if not
   3747           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3748          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3749          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3750            // Check the range of the indication ID
   3751            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   500A         JNC       ??ZDO_DeregisterForZdoCB_0
   3752            {
   3753              zdoCBFunc[indID] = NULL;
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
   3754              return ZSuccess;
   \   000011   F9           MOV       R1,A
   \   000012   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   3755            }
   3756          
   3757            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000014   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000016   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3758          }
   3759          
   3760          #if defined ( ZDP_BIND_VALIDATION )
   3761          #if defined ( REFLECTOR )
   3762          /*********************************************************************
   3763           * @fn          ZDApp_SetPendingBindDefault
   3764           *
   3765           * @brief       This function initializes a specific entry of pending
   3766           *              Bind Request.
   3767           *
   3768           * @param       pendBindReq - pointer to the entry in the table
   3769           *
   3770           * @return      none
   3771           */
   3772          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   3773          {
   3774            // Set it to an initial value
   3775            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   3776          
   3777            // We are checking for age 0 for aged-out records
   3778            pendBindReq->age = 0;
   3779          }
   3780          
   3781          /*********************************************************************
   3782           * @fn          ZDApp_InitPendingBind
   3783           *
   3784           * @brief       This function initializes the buffer that holds
   3785           *              pending Bind Request messages if no valid NWK address
   3786           *              exists in Address Manager and a Network Address Req
   3787           *              has been sent out.
   3788           *
   3789           * @param       none
   3790           *
   3791           * @return      none
   3792           */
   3793          void ZDApp_InitPendingBind( void )
   3794          {
   3795            if ( ZDAppPendingBindReq == NULL )
   3796            {
   3797              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   3798              {
   3799                uint8 i;
   3800          
   3801                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3802                {
   3803                  // Set to default values
   3804                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3805                }
   3806              }
   3807            }
   3808          }
   3809          
   3810          /*********************************************************************
   3811           * @fn          ZDApp_GetEmptyPendingBindReq
   3812           *
   3813           * @brief       This function looks for an empty entry.
   3814           *
   3815           * @param       none
   3816           *
   3817           * @return      Pointer to entry
   3818           */
   3819          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   3820          {
   3821            uint8 i;
   3822          
   3823            if ( ZDAppPendingBindReq != NULL )
   3824            {
   3825              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3826              {
   3827                if ( ZDAppPendingBindReq[i].age == 0 )
   3828                {
   3829                  return ( &ZDAppPendingBindReq[i] );
   3830                }
   3831              }
   3832            }
   3833          
   3834            // No empty entry was found
   3835            return NULL;
   3836          }
   3837          
   3838          /*********************************************************************
   3839           * @fn          ZDApp_ProcessPendingBindReq
   3840           *
   3841           * @brief       Process pending entry based on EXT address.
   3842           *
   3843           * @param       extAddr - of device to look up
   3844           *
   3845           * @return      none
   3846           */
   3847          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   3848          {
   3849            uint8 i;
   3850          
   3851            // Loop through all the pending entries for that Ext Address
   3852            // to create Bind Entries and send Bind Rsp
   3853            if ( ZDAppPendingBindReq != NULL )
   3854            {
   3855              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3856              {
   3857                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3858                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   3859                {
   3860                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3861          
   3862                  // Add Bind entry
   3863                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3864                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3865                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3866                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   3867                  {
   3868                    // valid entry
   3869                    bindStat = ZDP_SUCCESS;
   3870          
   3871                    // Notify to save info into NV
   3872                    ZDApp_NVUpdate();
   3873                  }
   3874          
   3875                  // Send back a response message
   3876                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3877                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3878          
   3879                  // Set the pending request entry to default values
   3880                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3881                }
   3882              }
   3883            }
   3884          }
   3885          
   3886          /*********************************************************************
   3887           * @fn          ZDApp_AgeOutPendingBindEntry
   3888           *
   3889           * @brief       Age out pending Bind Req entries.
   3890           *
   3891           * @param       none
   3892           *
   3893           * @return      none
   3894           */
   3895          void ZDApp_AgeOutPendingBindEntry( void )
   3896          {
   3897            uint8 i;
   3898            bool entryFound = FALSE;
   3899          
   3900            if ( ZDAppPendingBindReq != NULL )
   3901            {
   3902              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3903              {
   3904                if ( ZDAppPendingBindReq[i].age > 1 )
   3905                {
   3906                  ZDAppPendingBindReq[i].age--;
   3907          
   3908                  entryFound = TRUE;
   3909                }
   3910                else if ( ZDAppPendingBindReq[i].age == 1 )
   3911                {
   3912                  // The record has aged out and has valid data
   3913                  AddrMgrEntry_t entry;
   3914                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3915          
   3916                  entry.user = ADDRMGR_USER_BINDING;
   3917          
   3918                  // Remove the entry in address manager so we do not keep entries
   3919                  // with invalid addresses
   3920                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   3921          
   3922                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   3923                  {
   3924                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   3925                    {
   3926                      // Release the entry that contains an invalid NWK address
   3927                      AddrMgrEntryRelease( &entry );
   3928                    }
   3929                  }
   3930          
   3931                  // Send the Bind Response with failure status
   3932                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3933                               &(ZDAppPendingBindReq[i].srcAddr),
   3934                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3935          
   3936                  // Clear the record and set to default values
   3937                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3938                }
   3939              }
   3940            }
   3941          
   3942            if ( entryFound == FALSE )
   3943            {
   3944              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   3945            }
   3946            else
   3947            {
   3948              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3949                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   3950            }
   3951          }
   3952          #endif
   3953          #endif
   3954          
   3955          /*********************************************************************
   3956           * @fn          ZDO_ChangeState
   3957           *
   3958           * @brief       Chance the device state
   3959           *
   3960           * @param       state - new state
   3961           *
   3962           * @return      none
   3963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3964          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3965          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3966            if ( devState != state )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   6005         JZ        ??CrossCallReturnLabel_143
   3967            {
   3968              devState = state;
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
   3969              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   12....       LCALL     ?Subroutine18 & 0xFFFF
   3970            }
   3971          }
   \                     ??CrossCallReturnLabel_143:
   \   000013   02....       LJMP      ??Subroutine51_0 & 0xFFFF
   3972          
   3973          /*********************************************************************
   3974           * @fn      ZDApp_SetRejoinScanDuration()
   3975           *
   3976           * @brief   Sets scan duration for rejoin for an end device
   3977           *
   3978           * @param   rejoinScanDuration - milliseconds
   3979           *
   3980           * @return  none
   3981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3982          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3983          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3984            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine7
   \   000010                ; // Fall through to label ?Subroutine7
   3985          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?L_MOV_TO_X
   \   000005   02....       LJMP      ??Subroutine63_0 & 0xFFFF
   3986          
   3987          /*********************************************************************
   3988           * @fn      ZDApp_SetRejoinBackoffDuration()
   3989           *
   3990           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3991           *
   3992           * @param   rejoinBackoffDuration - milliseconds
   3993           *
   3994           * @return  none
   3995           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3996          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   3997          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3998            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP      ?Subroutine7
   3999          }
   4000          
   4001          /*********************************************************************
   4002           * @fn          ZDApp_SetParentAnnceTimer
   4003           *
   4004           * @brief       This function sets up the link status timer.
   4005           *
   4006           * @param       none
   4007           *
   4008           * @return      none
   4009           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4010          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   4011          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4012            // Parent Announce shall be sent no earlier than 10 seconds
   4013            uint32 timeout = 10000;
   4014          
   4015            // Add with jitter of up to 10 seconds
   4016            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   4017          
   4018            // Set timer to send the message
   4019            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   5410         ANL       A,#0x10
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   EB           MOV       A,R3
   \   00000E   5427         ANL       A,#0x27
   \   000010   F5..         MOV       ?V1,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   90....       MOV       DPTR,#__Constant_2710
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_ADD_X
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B40         MOV       R3,#0x40
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP      ?Subroutine6 & 0xFFFF
   4020          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devStartMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   ....         DW ZDAppTaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDeviceEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDeviceEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StoreNwkSecMaterial::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StoreNwkSecMaterial

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkSecMaterial::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkSecMaterial

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinScanDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinScanDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinBackoffDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinBackoffDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetParentAnnceTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetParentAnnceTimer

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   FF           DB 255
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   4021          
   4022          /*********************************************************************
   4023          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     40   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      0   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     25   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     25   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     35   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     16   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     39   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     27   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_clear_event
        0     10   -> osal_rand
        0     10   -> osal_stop_timerEx
        0     10   -> sAddrExtCpy
      0     61   ZDApp_LeaveUpdate
        0     40   -> APSME_GetRequest
        0     40   -> APSME_IsDistributedSecurity
        0     42   -> APSME_SearchTCLinkKeyEntry
        0     40   -> APSME_UpdateDeviceReq
        0     40   -> AddrMgrWriteNVRequest
        0     40   -> NLME_RemoveChild
        0     40   -> RTG_RemoveRtgEntry
        0     40   -> ZDSecMgrAddrClear
        0     40   -> ZDSecMgrDeviceRemoveByExtAddr
        0     40   -> nwkNeighborRemove
        0     43   -> osal_memcpy
      2     18   ZDApp_NVUpdate
        2      0   -> osal_set_event
        2      4   -> osal_start_timerEx
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     41   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> ZDApp_StoreNwkSecMaterial
        2      0   -> bdb_nwkFormationAttempt
        2      0   -> bdb_reportCommissioningState
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     21   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     14   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     54   ZDApp_ProcessMsgCBs
        0     54   -> ZDMatchSendState
        0     54   -> ZDO_MatchEndDeviceBind
        0     54   -> ZDO_ParseAddrRsp
        0     54   -> ZDO_ParseBindUnbindReq
        0     54   -> ZDO_ParseEndDeviceBindReq
        0     54   -> ZDO_ProcessBindUnbindReq
        0     54   -> ZDO_UpdateAddrManager
        0     54   -> osal_mem_free
      0     10   ZDApp_ProcessNetworkJoin
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> NLME_StartRouterRequest
        0     10   -> ZDApp_AnnounceNewAddress
        0     10   -> ZDApp_ChangeState
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> ZDApp_RestoreNwkKey
        0     10   -> bdb_nwkAssocAttemt
        0     10   -> bdb_reportCommissioningState
        0     10   -> bdb_setNodeIsOnANetwork
        0     10   -> nwkNeighborInitTable
        0     10   -> osal_rand
        0     10   -> osal_set_event
        0     10   -> osal_stop_timerEx
      2     14   ZDApp_ProcessOSALMsg
        2      0   -> ZDApp_ProcessMsgCBs
        2      0   -> ZDApp_ProcessSecMsg
        2      0   -> ZDP_IncomingData
      0     34   ZDApp_ProcessSecEvent
        0     16   -> ZDApp_DeviceAuthEvt
        0     16   -> ZDApp_SaveNwkKey
        0     16   -> ZDApp_StoreNwkSecMaterial
        0     16   -> ZDSecMgrNewDeviceEvent
        0     16   -> ZDSecMgrSaveApsLinkKey
        0     16   -> ZDSecMgrSaveTCLinkKey
        0     16   -> bdb_reportCommissioningState
        0     16   -> bdb_setNodeIsOnANetwork
        0     16   -> osal_mem_free
        0     20   -> osal_start_timerEx
      0     33   ZDApp_ProcessSecMsg
        0     30   -> ZDSecMgrRequestKeyInd
        0     30   -> ZDSecMgrUpdateDeviceInd
        0     30   -> ZDSecMgrVerifyKeyInd
        0     30   -> bdb_TCjoiningDeviceComplete
        0     30   -> osal_get_timeoutEx
        0     33   -> osal_memcmp
        0     33   -> osal_memcpy
        0     30   -> osal_stop_timerEx
      0     34   ZDApp_ReadNetworkRestoreState
        0      9   -> bdb_setNodeIsOnANetwork
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     26   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     34   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> ZDApp_RestoreNwkKey
        0      9   -> sAddrExtCpy
      0     62   ZDApp_RestoreNwkKey
        0     48   -> ZDApp_RestoreNwkSecMaterial
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
      0     76   ZDApp_RestoreNwkSecMaterial
        0     27   -> osal_memcmp
        0     28   -> osal_nv_read
        0     28   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     65   ZDApp_SaveNwkKey
        0     45   -> SSP_ReadNwkActiveKey
        0     48   -> osal_memcmp
        0     45   -> osal_memset
        0     49   -> osal_nv_read
        0     49   -> osal_nv_write
      0     50   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     35   ZDApp_SendMsg
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      0     41   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     30   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     47   ZDApp_StoreNwkSecMaterial
        0     27   -> osal_isbufset
        0     30   -> osal_memcmp
        0     30   -> osal_memcpy
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_SendParentAnnce
        0     14   -> ZDApp_SetParentAnnceTimer
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     29   ZDOInitDeviceEx
        0     25   -> NLME_InitNV
        0     25   -> NLME_SetBroadcastFilter
        0     25   -> NLME_SetDefaultNV
        0     25   -> NLME_SetUpdateID
        0     25   -> ZDAppDetermineDeviceType
        0     25   -> ZDApp_LeaveCtrlInit
        0     25   -> ZDApp_NetworkInit
        0     25   -> ZDApp_ReadNetworkRestoreState
        0     25   -> ZDApp_RestoreNetworkState
        0     25   -> ZDApp_SecInit
        0     25   -> ZDConfig_InitDescriptors
        0     25   -> ZDSecMgrClearNVKeyValues
        0     25   -> ZDSecMgrUpdateTCAddress
        0     25   -> ZMacSetReq
        0     25   -> gp_ProxyTblInit
        0     25   -> osal_memset
        0     29   -> osal_nv_write
        0     25   -> osal_rand
        0     25   -> zgInitItems
        0     25   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     14   ZDO_JoinConfirmCB
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_SendMsg
      0     19   ZDO_JoinIndicationCB
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_get_timeoutEx
        0     14   -> osal_mem_alloc
        0     18   -> osal_start_timerEx
      0     13   ZDO_LeaveCnf
        0     12   -> NLME_GetExtAddr
        0     12   -> ZDApp_LeaveReset
        0     13   -> ZDApp_LeaveUpdate
        0     12   -> sAddrExtCmp
      1     18   ZDO_LeaveInd
        0     17   -> NLME_GetCoordShortAddr
        0     17   -> NLME_LeaveRsp
        0     17   -> ZDApp_LeaveReset
        0     18   -> ZDApp_LeaveUpdate
        0     17   -> ZMacSetReq
        0     17   -> bdb_setFN
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      1     26   ZDO_NetworkFormationConfirmCB
        0     26   -> APSME_IsDistributedSecurity
        0     26   -> NLME_SetAssocFlags
        0     26   -> SSP_SwitchNwkKey
        0     26   -> SSP_UpdateNwkKey
        0     26   -> ZDApp_ChangeState
        0     26   -> ZDApp_RestoreNwkSecMaterial
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> ZMacSetReq
        0     26   -> bdb_nwkFormationAttempt
        0     26   -> bdb_setNodeIsOnANetwork
        0     26   -> nwk_ExtPANIDValid
        0     26   -> osal_memset
        0     26   -> osal_set_event
        0     26   -> sAddrExtCpy
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDO_SyncIndicationCB
      0      0   ZDO_UpdateDeviceIndication
      1     16   ZDO_beaconNotifyIndCB
        0     16   -> bdb_isDeviceNonFactoryNew
        0     16   -> osal_mem_alloc
        0     16   -> osal_memset
        0     16   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       8  ?<Constant {255, 0, 0, 0, 0, 0, 0, 0}>
       4  ?<Initializer for ZDApp_SavedPollRate>
       7  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devStartMode>
       1  ?<Initializer for prevDevState>
      10  ??Subroutine46_0
       5  ??Subroutine47_0
       2  ??Subroutine48_0
       6  ??Subroutine49_0
       3  ??Subroutine50_0
       5  ??Subroutine51_0
       9  ??Subroutine52_0
       6  ??Subroutine53_0
       3  ??Subroutine54_0
       5  ??Subroutine55_0
       6  ??Subroutine56_0
       2  ??Subroutine57_0
       6  ??Subroutine58_0
       2  ??Subroutine59_0
       3  ??Subroutine60_0
       8  ??Subroutine61_0
       3  ??Subroutine62_0
       5  ??Subroutine63_0
       7  ??Subroutine64_0
       6  ??Subroutine65_0
       5  ??Subroutine66_0
       8  ??Subroutine67_0
       6  ??Subroutine68_0
       6  ??Subroutine69_0
       8  ??Subroutine70_0
       6  ??Subroutine71_0
       6  ??Subroutine72_0
       9  ??Subroutine73_0
       2  ??Subroutine74_0
       9  ??Subroutine75_0
       3  ??Subroutine76_0
      10  ??Subroutine77_0
       6  ??Subroutine78_0
       6  ??Subroutine79_0
       2  ?Subroutine0
       3  ?Subroutine1
      12  ?Subroutine10
       6  ?Subroutine11
       9  ?Subroutine12
      13  ?Subroutine13
       3  ?Subroutine14
       2  ?Subroutine15
       3  ?Subroutine16
       4  ?Subroutine17
       2  ?Subroutine18
       2  ?Subroutine19
       3  ?Subroutine2
       3  ?Subroutine20
       2  ?Subroutine21
       9  ?Subroutine22
       3  ?Subroutine23
      15  ?Subroutine24
       4  ?Subroutine25
       5  ?Subroutine26
       6  ?Subroutine27
      11  ?Subroutine28
       9  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
       6  ?Subroutine31
       2  ?Subroutine32
      18  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
      10  ?Subroutine36
       4  ?Subroutine37
      11  ?Subroutine38
       4  ?Subroutine39
      31  ?Subroutine4
      10  ?Subroutine40
       9  ?Subroutine41
      10  ?Subroutine42
      20  ?Subroutine43
      15  ?Subroutine44
       9  ?Subroutine45
       8  ?Subroutine5
       2  ?Subroutine6
       8  ?Subroutine7
      13  ?Subroutine8
      12  ?Subroutine9
      19  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  FrameCounterUpdated
       1  MatchRsps
      24  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      82  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       1  ZDAppTaskID
      59  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      22  ZDApp_ChangeState
       6  ZDApp_ChangeState::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      65  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      77  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     115  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      95  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      47  ZDApp_Init
       6  ZDApp_Init::?relay
      89  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      26  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      73  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      71  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
     160  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     272  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
      40  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      41  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
     130  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     305  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      19  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     233  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     384  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
      61  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     212  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
     263  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      27  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      48  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      40  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      26  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      34  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      92  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     107  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
     221  ZDApp_RestoreNwkSecMaterial
       6  ZDApp_RestoreNwkSecMaterial::?relay
      19  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
     307  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       4  ZDApp_SavedPollRate
     100  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      15  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
     114  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
     114  ZDApp_SendParentAnnce
       6  ZDApp_SendParentAnnce::?relay
      51  ZDApp_SetParentAnnceTimer
       6  ZDApp_SetParentAnnceTimer::?relay
      18  ZDApp_SetRejoinBackoffDuration
       6  ZDApp_SetRejoinBackoffDuration::?relay
      16  ZDApp_SetRejoinScanDuration
       6  ZDApp_SetRejoinScanDuration::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      36  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
     218  ZDApp_StoreNwkSecMaterial
       6  ZDApp_StoreNwkSecMaterial::?relay
       7  ZDApp_epDesc
     334  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     374  ZDOInitDeviceEx
       6  ZDOInitDeviceEx::?relay
      94  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      48  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      25  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
      98  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     197  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
     116  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     204  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      59  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
     246  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      37  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      25  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      51  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      31  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
       3  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     601  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_2bc
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc

 
 7 916 bytes in segment BANKED_CODE
   450 bytes in segment BANK_RELAYS
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    48 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
   464 bytes of CODE     memory
    24 bytes of CONST    memory (+ 24 bytes shared)
 7 916 bytes of HUGECODE memory
    79 bytes of XDATA    memory

Errors: none
Warnings: none
