///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.20.1.5333 for 8051              08/Feb/2022  22:10:08
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Components\stack\bdb\bdb_FindingAndBinding.c
//    Command line       =  
//        -f C:\usertemp\AppData\Local\Temp\EW6C2A.tmp ("I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Components\stack\bdb\bdb_FindingAndBinding.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D
//        ZCL_REPORT -D HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D
//        HAL_UART=TRUE -D INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D
//        xHAL_LCD_OLED12864 -D HAL_ADC=TRUE -D HAL_UART=TRUE -D
//        INT_HEAP_LEN=2048 -lC "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        -lA "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
//        -I "I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        I:\ZigBee3.0\Zigbee3.0
//        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\bdb_FindingAndBinding.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb_FindingAndBinding

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_FindIfAppCluster::?relay`
        FUNCTION `??bdb_FindIfAppCluster::?relay`,0203H
        PUBLIC `??bdb_GetFBInitiatorStatus::?relay`
        FUNCTION `??bdb_GetFBInitiatorStatus::?relay`,0203H
        PUBLIC `??bdb_ProcessIEEEAddrRsp::?relay`
        FUNCTION `??bdb_ProcessIEEEAddrRsp::?relay`,0203H
        PUBLIC `??bdb_ProcessRespondentList::?relay`
        FUNCTION `??bdb_ProcessRespondentList::?relay`,0203H
        PUBLIC `??bdb_ProcessSimpleDesc::?relay`
        FUNCTION `??bdb_ProcessSimpleDesc::?relay`,0203H
        PUBLIC `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,0203H
        PUBLIC `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,0203H
        PUBLIC `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,0203H
        PUBLIC `??bdb_SetIdentifyActiveEndpoint::?relay`
        FUNCTION `??bdb_SetIdentifyActiveEndpoint::?relay`,0203H
        PUBLIC `??bdb_StopInitiatorFindingBinding::?relay`
        FUNCTION `??bdb_StopInitiatorFindingBinding::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyQueryCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyQueryCmdInd::?relay`,0203H
        PUBLIC `??bdb_checkMatchingEndpoints::?relay`
        FUNCTION `??bdb_checkMatchingEndpoints::?relay`,0203H
        PUBLIC `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,0203H
        PUBLIC `??bdb_findRespondentNode::?relay`
        FUNCTION `??bdb_findRespondentNode::?relay`,0203H
        PUBLIC `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,0203H
        PUBLIC `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,0203H
        FUNCTION `??bdb_zclFindingBindingAddBindEntry::?relay`,0203H
        PUBLIC `??bdb_zclFindingBindingEpType::?relay`
        FUNCTION `??bdb_zclFindingBindingEpType::?relay`,0203H
        FUNCTION `??bdb_zclSimpleDescClusterListClean::?relay`,0203H
        PUBWEAK __Constant_1388
        PUBWEAK __Constant_3e7
        PUBWEAK __Constant_3e8
        PUBLIC bdbIndentifyActiveEndpoint
        PUBLIC bdb_FindIfAppCluster
        FUNCTION bdb_FindIfAppCluster,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_FindingBindingTargetSimpleDesc
        PUBLIC bdb_GetFBInitiatorStatus
        FUNCTION bdb_GetFBInitiatorStatus,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_ProcessIEEEAddrRsp
        FUNCTION bdb_ProcessIEEEAddrRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC bdb_ProcessRespondentList
        FUNCTION bdb_ProcessRespondentList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bdb_ProcessSimpleDesc
        FUNCTION bdb_ProcessSimpleDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC bdb_SetIdentifyActiveEndpoint
        FUNCTION bdb_SetIdentifyActiveEndpoint,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_StopInitiatorFindingBinding
        FUNCTION bdb_StopInitiatorFindingBinding,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_ZclIdentifyQueryCmdInd
        FUNCTION bdb_ZclIdentifyQueryCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_ZclType1Clusters
        PUBLIC bdb_ZclType2Clusters
        PUBLIC bdb_checkMatchingEndpoints
        FUNCTION bdb_checkMatchingEndpoints,0a1203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_findRespondentNode
        FUNCTION bdb_findRespondentNode,0203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_zclFindingBindingAddBindEntry,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_zclFindingBindingEpType
        FUNCTION bdb_zclFindingBindingEpType,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION bdb_zclSimpleDescClusterListClean,0a1203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC grpName
        PUBLIC pfnBindNotificationCB
        PUBLIC pfnIdentifyTimeChangeCB
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
`??AddrMgrExtAddrLookup::?relay` SYMBOL "?relay", AddrMgrExtAddrLookup
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
ZDO_AnyClusterMatches SYMBOL "ZDO_AnyClusterMatches"
`??ZDO_AnyClusterMatches::?relay` SYMBOL "?relay", ZDO_AnyClusterMatches
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseSimpleDescBuf SYMBOL "ZDO_ParseSimpleDescBuf"
`??ZDO_ParseSimpleDescBuf::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescBuf
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
`??ZDP_IEEEAddrReq::?relay` SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_SendAddGroupRequest SYMBOL "zclGeneral_SendAddGroupRequest"
`??zclGeneral_SendAddGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendAddGroupRequest
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_registerClusterOptionList SYMBOL "zcl_registerClusterOptionList"
`??zcl_registerClusterOptionList::?relay` SYMBOL "?relay", zcl_registerClusterOptionList
bdb_FindIfAppCluster SYMBOL "bdb_FindIfAppCluster"
`??bdb_FindIfAppCluster::?relay` SYMBOL "?relay", bdb_FindIfAppCluster
bdb_GetFBInitiatorStatus SYMBOL "bdb_GetFBInitiatorStatus"
`??bdb_GetFBInitiatorStatus::?relay` SYMBOL "?relay", bdb_GetFBInitiatorStatus
bdb_ProcessIEEEAddrRsp SYMBOL "bdb_ProcessIEEEAddrRsp"
`??bdb_ProcessIEEEAddrRsp::?relay` SYMBOL "?relay", bdb_ProcessIEEEAddrRsp
bdb_ProcessRespondentList SYMBOL "bdb_ProcessRespondentList"
`??bdb_ProcessRespondentList::?relay` SYMBOL "?relay", bdb_ProcessRespondentList
bdb_ProcessSimpleDesc SYMBOL "bdb_ProcessSimpleDesc"
`??bdb_ProcessSimpleDesc::?relay` SYMBOL "?relay", bdb_ProcessSimpleDesc
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_SetIdentifyActiveEndpoint SYMBOL "bdb_SetIdentifyActiveEndpoint"
`??bdb_SetIdentifyActiveEndpoint::?relay` SYMBOL "?relay", bdb_SetIdentifyActiveEndpoint
bdb_StopInitiatorFindingBinding SYMBOL "bdb_StopInitiatorFindingBinding"
`??bdb_StopInitiatorFindingBinding::?relay` SYMBOL "?relay", bdb_StopInitiatorFindingBinding
bdb_ZclIdentifyQueryCmdInd SYMBOL "bdb_ZclIdentifyQueryCmdInd"
`??bdb_ZclIdentifyQueryCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyQueryCmdInd
bdb_checkMatchingEndpoints SYMBOL "bdb_checkMatchingEndpoints"
`??bdb_checkMatchingEndpoints::?relay` SYMBOL "?relay", bdb_checkMatchingEndpoints
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_findRespondentNode SYMBOL "bdb_findRespondentNode"
`??bdb_findRespondentNode::?relay` SYMBOL "?relay", bdb_findRespondentNode
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
bdb_zclFindingBindingEpType SYMBOL "bdb_zclFindingBindingEpType"
`??bdb_zclFindingBindingEpType::?relay` SYMBOL "?relay", bdb_zclFindingBindingEpType

        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrLookup::?relay`
        FUNCTION `??AddrMgrExtAddrLookup::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??ZDO_AnyClusterMatches::?relay`
        FUNCTION `??ZDO_AnyClusterMatches::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseSimpleDescBuf::?relay`
        FUNCTION `??ZDO_ParseSimpleDescBuf::?relay`,00H
        EXTERN `??ZDP_IEEEAddrReq::?relay`
        FUNCTION `??ZDP_IEEEAddrReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,00H
        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,00H
        EXTERN `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_SendAddGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendAddGroupRequest::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_registerClusterOptionList::?relay`
        FUNCTION `??zcl_registerClusterOptionList::?relay`,00H
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_AnyClusterMatches
        FUNCTION ZDO_AnyClusterMatches,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescBuf
        FUNCTION ZDO_ParseSimpleDescBuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbAttributes
        EXTERN bdbCommissioningProcedureState
        EXTERN bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_CurrEpDescriptorList
        EXTERN bdb_FB_InitiatorCurrentCyclesNumber
        EXTERN bdb_HeadEpDescriptorList
        EXTERN bdb_TaskID
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pRespondentCurr
        EXTERN pRespondentHead
        EXTERN pRespondentNext
        EXTERN pbindAddEntry
        EXTERN zclGeneral_SendAddGroupRequest
        FUNCTION zclGeneral_SendAddGroupRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerClusterOptionList
        FUNCTION zcl_registerClusterOptionList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\bdb\bdb_FindingAndBinding.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb_FindingAndBinding.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDObject.h"
//   46 #include "bdb_interface.h"
//   47 #include "AddrMgr.h"
//   48    
//   49 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
//   50    
//   51 /*********************************************************************
//   52  * MACROS
//   53  */
//   54 
//   55 
//   56 
//   57    
//   58 /*********************************************************************
//   59  * CONSTANTS
//   60  */
//   61 /*********************************************************************
//   62  * TYPEDEFS
//   63  */
//   64  
//   65  
//   66 /*********************************************************************
//   67  * GLOBAL VARIABLES
//   68  */
//   69 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   70 uint8 grpName[6] = {'G','r','o','u','p','\0'};
grpName:
        DATA8
        DS 6
        REQUIRE `?<Initializer for grpName>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   71 bdbGCB_IdentifyTimeChange_t      pfnIdentifyTimeChangeCB = NULL; 
pfnIdentifyTimeChangeCB:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   72 bdbGCB_BindNotification_t        pfnBindNotificationCB = NULL;
pfnBindNotificationCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   73 
//   74 /*********************************************************************
//   75  * EXTERNAL VARIABLES
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * EXTERNAL FUNCTIONS
//   80  */
//   81 
//   82 
//   83 
//   84 /*********************************************************************
//   85  * LOCAL VARIABLES
//   86  */
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 SimpleDescriptionFormat_t  bdb_FindingBindingTargetSimpleDesc;
bdb_FindingBindingTargetSimpleDesc:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   89 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   90 uint8 bdbIndentifyActiveEndpoint  = 0xFF;
bdbIndentifyActiveEndpoint:
        DATA8
        DS 1
        REQUIRE `?<Initializer for bdbIndentifyActiveEndpoint>`
        REQUIRE __INIT_XDATA_I
//   91 
//   92 //Your JOB:
//   93 //Remove the clusters that your application do not use. This will save some flash and processing
//   94 //when looking into matching clusters during the finding & binding procedure

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   95 const cId_t bdb_ZclType1Clusters[] =
bdb_ZclType1Clusters:
        DATA16
        DW 5
        DW 6
        DW 8
        DW 9
        DW 22
        DW 258
        DW 514
        DW 515
        DW 768
        DW 769
        DW 1281
        DW 1282
        DW 1536
        DW 1537
        DW 2820
        DW 1556
        DW 1557
        DW 1559
        DW 1792
        DW 1793
        DW 1794
        DW 1795
        DW 2304
        DW 2309
//   96 {
//   97   ZCL_CLUSTER_ID_GEN_SCENES,
//   98   ZCL_CLUSTER_ID_GEN_ON_OFF,
//   99   ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
//  100   ZCL_CLUSTER_ID_GEN_ALARMS,
//  101   ZCL_CLUSTER_ID_GEN_PARTITION,
//  102   ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
//  103   ZCL_CLUSTER_ID_HVAC_FAN_CONTROL,
//  104   ZCL_CLUSTER_ID_HVAC_DIHUMIDIFICATION_CONTROL,
//  105   ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  106   ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
//  107   ZCL_CLUSTER_ID_SS_IAS_ACE,
//  108   ZCL_CLUSTER_ID_SS_IAS_WD,
//  109   ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL,
//  110   ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL,
//  111   ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT,
//  112   ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL,
//  113   ZCL_CLUSTER_ID_PI_ISO7818_PROTOCOL_TUNNEL,
//  114   ZCL_CLUSTER_ID_PI_RETAIL_TUNNEL,
//  115   ZCL_CLUSTER_ID_SE_PRICE,
//  116   ZCL_CLUSTER_ID_SE_DRLC,
//  117   ZCL_CLUSTER_ID_SE_METERING,
//  118   ZCL_CLUSTER_ID_SE_MESSAGING,
//  119   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
//  120   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_VOICE_OVER_ZIGBEE,
//  121 };
//  122 
//  123 //Your JOB:
//  124 //Remove the clusters that your application do not use. This will save some flash and processing
//  125 //when looking into matching clusters during the finding & binding procedure

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  126 const cId_t bdb_ZclType2Clusters[] =
bdb_ZclType2Clusters:
        DATA16
        DW 7
        DW 10
        DW 12
        DW 13
        DW 14
        DW 15
        DW 16
        DW 17
        DW 18
        DW 19
        DW 20
        DW 25
        DW 27
        DW 256
        DW 257
        DW 512
        DW 513
        DW 1026
        DW 1024
        DW 1025
        DW 1027
        DW 1028
        DW 1029
        DW 1030
        DW 1280
        DW 1538
        DW 1539
        DW 1540
        DW 1541
        DW 1542
        DW 1543
        DW 1544
        DW 1545
        DW 1546
        DW 1547
        DW 1548
        DW 1549
        DW 1550
        DW 1551
        DW 1552
        DW 1553
        DW 1554
        DW 1555
        DW 1796
        DW 2304
        DW 2816
        DW 2817
        DW 2818
        DW 2819
//  127 {
//  128   ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG,
//  129   ZCL_CLUSTER_ID_GEN_TIME,
//  130   ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC,
//  131   ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC,
//  132   ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC,
//  133   ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC,
//  134   ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC,
//  135   ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC,
//  136   ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC,
//  137   ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC,
//  138   ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
//  139   ZCL_CLUSTER_ID_OTA,
//  140   ZCL_CLUSTER_ID_GEN_APPLIANCE_CONTROL,
//  141   ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG,
//  142   ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
//  143   ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL,
//  144   ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
//  145   ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
//  146   ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT,
//  147   ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG,
//  148   ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT,
//  149   ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT,
//  150   ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY,
//  151   ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING,
//  152   ZCL_CLUSTER_ID_SS_IAS_ZONE,
//  153   ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG,
//  154   ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT,
//  155   ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG,
//  156   ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT,
//  157   ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG,
//  158   ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT,
//  159   ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG,
//  160   ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT,
//  161   ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG,
//  162   ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT,
//  163   ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG,
//  164   ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT,
//  165   ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG,
//  166   ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT,
//  167   ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG,
//  168   ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT,
//  169   ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG,
//  170   ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT,
//  171   ZCL_CLUSTER_ID_SE_TUNNELING,
//  172   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
//  173   ZCL_CLUSTER_ID_HA_APPLIANCE_IDENTIFICATION,
//  174   ZCL_CLUSTER_ID_HA_METER_IDENTIFICATION,
//  175   ZCL_CLUSTER_ID_HA_APPLIANCE_EVENTS_ALERTS,
//  176   ZCL_CLUSTER_ID_HA_APPLIANCE_STATISTICS,
//  177 };
//  178 
//  179 #ifdef ZCL_GROUPS

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 static zclOptionRec_t zcl_Groups_Options[] =
zcl_Groups_Options:
        DATA8
        DS 3
        REQUIRE `?<Initializer for zcl_Groups_Options>`
        REQUIRE __INIT_XDATA_I
//  181 {
//  182   {
//  183     ZCL_CLUSTER_ID_GEN_GROUPS,
//  184     ( AF_ACK_REQUEST ),
//  185   },
//  186 };
//  187 #endif
//  188 
//  189 
//  190  /*********************************************************************
//  191  * LOCAL FUNCTIONS
//  192  */
//  193 static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
//  194                                   uint16 BindClusterId,
//  195                                   byte Cnt,                 
//  196                                   uint16 * ClusterList,
//  197                                   zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind );
//  198 
//  199 uint8 bdb_FindIfAppCluster( cId_t ClusterId );
//  200 
//  201 
//  202 static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc );
//  203 bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress);
//  204 bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  205 void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddress, bdbFindingBindingRespondent_t **pCurr);
//  206  /*********************************************************************
//  207  * PUBLIC FUNCTIONS
//  208  *********************************************************************/
//  209 
//  210 void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
//  211 void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
//  212 
//  213 /*********************************************************************
//  214  * @fn      bdb_SetIdentifyActiveEndpoint
//  215  *
//  216  * @brief   Set the endpoint which will perform the finding and binding (either Target or Initiator)
//  217  *
//  218  * @param   Active endpoint with which perform F&B. If set to 0xFF all endpoints with Identify will be attempted.
//  219  *
//  220  * @return  ZFailure - F&B commissioning mode already requested
//  221  *          ZInvalidParameter - Endpoint specified not found or reserved by Zigbee
//  222  *          ZSuccess - 
//  223  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  224 ZStatus_t bdb_SetIdentifyActiveEndpoint(uint8 activeEndpoint)
bdb_SetIdentifyActiveEndpoint:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_SetIdentifyActiveEndpoint
        CODE
//  225 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
        MOV       R2,A
//  226   epList_t *bdb_EpDescriptorListTemp = NULL;
//  227   
//  228   //Cannot process the request if no endpoints or F&B is under process
//  229   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??bdb_SetIdentifyActiveEndpoint_0
//  230   {
//  231     return ZFailure;
        MOV       R1,#0x1
        SJMP      ??bdb_SetIdentifyActiveEndpoint_1
//  232   }
//  233   
//  234   if(activeEndpoint == 0xFF)
??bdb_SetIdentifyActiveEndpoint_0:
        MOV       A,#-0x1
        XRL       A,R2
        JZ        ??bdb_SetIdentifyActiveEndpoint_2
//  235   {
//  236     bdbIndentifyActiveEndpoint = activeEndpoint;
//  237     return ZSuccess;
//  238   }
//  239   
//  240   if((activeEndpoint != 0) && (activeEndpoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
        MOV       A,R1
        JZ        ??bdb_SetIdentifyActiveEndpoint_3
        CLR       C
        SUBB      A,#-0xf
        JNC       ??bdb_SetIdentifyActiveEndpoint_3
//  241   {
//  242     bdb_EpDescriptorListTemp = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        SJMP      ??bdb_SetIdentifyActiveEndpoint_4
//  243     
//  244     while(bdb_EpDescriptorListTemp != NULL)
//  245     {
//  246       if(bdb_EpDescriptorListTemp->epDesc->endPoint == activeEndpoint)
//  247       {
//  248         bdbIndentifyActiveEndpoint = activeEndpoint;
//  249         return ZSuccess;
//  250       }
//  251       bdb_EpDescriptorListTemp = bdb_EpDescriptorListTemp->nextDesc;
??bdb_SetIdentifyActiveEndpoint_5:
        MOV       DPL,R0
        MOV       DPH,R1
??bdb_SetIdentifyActiveEndpoint_4:
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_115:
        JZ        ??bdb_SetIdentifyActiveEndpoint_3
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R3
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_SetIdentifyActiveEndpoint_5
??bdb_SetIdentifyActiveEndpoint_2:
        MOV       A,R2
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      @DPTR,A
        MOV       R1,#0x0
        SJMP      ??bdb_SetIdentifyActiveEndpoint_1
//  252     }
//  253   }
//  254   
//  255   return ZInvalidParameter;
??bdb_SetIdentifyActiveEndpoint_3:
        MOV       R1,#0x2
??bdb_SetIdentifyActiveEndpoint_1:
        LJMP      ??Subroutine39_0 & 0xFFFF
//  256 }
          CFI EndBlock cfiBlock0
//  257 
//  258 
//  259 /*********************************************************************
//  260  * @fn      bdb_setEpDescListToActiveEndpoint
//  261  *
//  262  * @brief   Set the endpoint list to the active endpoint selected by the application for F&B process
//  263  *
//  264  * @return  Current endpoint descriptor
//  265  */
//  266 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  267 endPointDesc_t* bdb_setEpDescListToActiveEndpoint(void)
bdb_setEpDescListToActiveEndpoint:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
        CODE
//  268 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  269   bdb_CurrEpDescriptorList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ?Subroutine27 & 0xFFFF
//  270  
//  271   //Check which active endpoit is being requested
//  272   if(bdbIndentifyActiveEndpoint != 0xFF)
??CrossCallReturnLabel_36:
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        CPL       A
        JZ        ??CrossCallReturnLabel_1
//  273   {
//  274     //Search for an specific endpoint
//  275     while(bdb_CurrEpDescriptorList != NULL)
??bdb_setEpDescListToActiveEndpoint_0:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_116:
        JZ        ??bdb_setEpDescListToActiveEndpoint_1
//  276     {
//  277       if(bdb_CurrEpDescriptorList->epDesc->endPoint == bdbIndentifyActiveEndpoint)
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV       R0,A
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??bdb_setEpDescListToActiveEndpoint_2
//  278       {
//  279         return bdb_CurrEpDescriptorList->epDesc;
//  280       }
//  281       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
        LCALL     ?Subroutine5 & 0xFFFF
//  282     }
//  283   }
??CrossCallReturnLabel_0:
        SJMP      ??bdb_setEpDescListToActiveEndpoint_0
//  284   else
//  285   {
//  286     //Look for the first endpoint that has Identify cluster
//  287     while(bdb_CurrEpDescriptorList != NULL)
//  288     {
//  289       if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
//  290       {
//  291         return bdb_CurrEpDescriptorList->epDesc;
//  292       }
//  293       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
??bdb_setEpDescListToActiveEndpoint_3:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_117:
        JZ        ??bdb_setEpDescListToActiveEndpoint_1
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ        ??bdb_setEpDescListToActiveEndpoint_3
        CLR       C
        SUBB      A,#-0xf
        JNC       ??bdb_setEpDescListToActiveEndpoint_3
??bdb_setEpDescListToActiveEndpoint_2:
        LCALL     ?Subroutine12 & 0xFFFF
//  294     }
//  295   }
??CrossCallReturnLabel_14:
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        SJMP      ??bdb_setEpDescListToActiveEndpoint_4
//  296   //not found
//  297   return NULL;
??bdb_setEpDescListToActiveEndpoint_1:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_setEpDescListToActiveEndpoint_4:
        LJMP      ??Subroutine39_0 & 0xFFFF
//  298 }
          CFI EndBlock cfiBlock1
//  299 
//  300 
//  301 /*********************************************************************
//  302  * @fn      bdb_ProcessIEEEAddrRsp
//  303  *
//  304  * @brief   Process IEEE addr response and mark the entry as done or remove the 
//  305  *          bind if not successful.
//  306  *
//  307  * @param   zdoIncomingMsg_t *pMsg
//  308  *
//  309  * @return  none
//  310  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  311 void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg)
bdb_ProcessIEEEAddrRsp:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
        CODE
//  312 {
        FUNCALL bdb_ProcessIEEEAddrRsp, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_findRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_checkMatchingEndpoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 15
        MOV       A,#-0xf
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  313   ZDO_NwkIEEEAddrResp_t *pAddrRsp = NULL;
//  314   bdbFindingBindingRespondent_t *pCurr = NULL;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  315 
//  316   pAddrRsp = ZDO_ParseAddrRsp( pMsg );
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
//  317   
//  318   if(pAddrRsp == NULL)
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_ProcessIEEEAddrRsp_0 & 0xFFFF
//  319   {
//  320     return;
//  321   }
//  322   
//  323   bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
//  324   
//  325   pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, pAddrRsp->nwkAddr);
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        ; Setup parameters for call to function bdb_findRespondentNode
        LCALL     ?Subroutine4 & 0xFFFF
//  326   
//  327   //Does the entry exist and we were waiting an IEEE addr rsp from this device?
//  328   if((pCurr != NULL) && (pCurr->attempts > FINDING_AND_BINDING_MISSING_IEEE_ADDR))
??CrossCallReturnLabel_113:
        JZ        ??bdb_ProcessIEEEAddrRsp_1
        MOV       A,R0
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        CLR       C
        SUBB      A,#-0x7f
        JC        ??bdb_ProcessIEEEAddrRsp_1
//  329   {
//  330     if(pAddrRsp->status == ZSuccess )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        JNZ       ??bdb_ProcessIEEEAddrRsp_2
//  331     {
//  332       uint8 extAddr[8]; 
//  333       AddrMgrEntry_t entry;
//  334       
//  335       entry.nwkAddr = pAddrRsp->nwkAddr;
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
//  336       entry.user = ADDRMGR_USER_BINDING;
??CrossCallReturnLabel_37:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
//  337       AddrMgrExtAddrSet(entry.extAddr, pAddrRsp->extAddr);
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,R6
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  338       
//  339       //Add it as bind entry
//  340       if(AddrMgrEntryUpdate(&entry) == FALSE)
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV       A,R1
        JNZ       ??bdb_ProcessIEEEAddrRsp_3
//  341       {
//  342         //No space, then report F&B table full
//  343         //If periodic was triggered, then finish it
//  344         if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
//  345         {
//  346           bdb_FB_InitiatorCurrentCyclesNumber = 0;
        LCALL     ?Subroutine7 & 0xFFFF
//  347           osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
//  348         }
//  349         
//  350         bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
//  351         osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
//  352         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
//  353         return;
??CrossCallReturnLabel_3:
        SJMP      ??bdb_ProcessIEEEAddrRsp_0
//  354       }
//  355 
//  356       //search for the matching clusters to be added this time as we have the IEEE addrs
//  357       bdb_checkMatchingEndpoints(TRUE, pAddrRsp->nwkAddr, &pCurr);
??bdb_ProcessIEEEAddrRsp_3:
        ; Setup parameters for call to function bdb_checkMatchingEndpoints
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV       R1,#0x1
        LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
//  358       (void)extAddr;  //dummy
//  359     }
//  360     //Bind cannot be added if the device was not found
//  361     pCurr->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
??bdb_ProcessIEEEAddrRsp_2:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine15 & 0xFFFF
//  362   }
??CrossCallReturnLabel_21:
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  363   
//  364   //release the memory
//  365   osal_mem_free( pAddrRsp );
??bdb_ProcessIEEEAddrRsp_1:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  366 }
??bdb_ProcessIEEEAddrRsp_0:
        MOV       A,#0xf
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock2
//  367 
//  368 
//  369 /*********************************************************************
//  370  * @fn      bdb_StopInitiatorFindingBinding
//  371  *
//  372  * @brief   Stops finding and binding for initiator devices.
//  373  *
//  374  * @param   none
//  375  *
//  376  * @return  none
//  377  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  378 void bdb_StopInitiatorFindingBinding(void)
bdb_StopInitiatorFindingBinding:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bdb_StopInitiatorFindingBinding
        CODE
//  379 {
        FUNCALL bdb_StopInitiatorFindingBinding, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StopInitiatorFindingBinding, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StopInitiatorFindingBinding, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StopInitiatorFindingBinding, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  380   //If periodic was triggered, then finish it
//  381   if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
//  382   {
//  383     bdb_FB_InitiatorCurrentCyclesNumber = 0;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        CLR       A
        MOVX      @DPTR,A
//  384     osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,A
        LCALL     ??Subroutine49_0 & 0xFFFF
//  385   }      
//  386   //Clean the respondent list and stop its timer
//  387   bdb_zclRespondentListClean( &pRespondentHead );
??CrossCallReturnLabel_84:
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
//  388   osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine26 & 0xFFFF
//  389   
//  390   //Notify status
//  391   bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
??CrossCallReturnLabel_82:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  392 
//  393 }
        SJMP      ??Subroutine39_0
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_96:
          CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock5
//  394 
//  395 
//  396 /*********************************************************************
//  397  * @fn      bdb_checkMatchingEndpoints
//  398  *
//  399  * @brief   Check active endpoints for F&B and the respondant simple descriptor 
//  400  *          for matching application clusters
//  401  *
//  402  * @param   pRespondant - Respondant to be process
//  403  * @param   bindIfMatch - Flag to indicate that binds for matching cluster must 
//  404  *                        be done
//  405  *
//  406  * @return  status - Result of the operation
//  407  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  408 void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddr, bdbFindingBindingRespondent_t **pCurr)
bdb_checkMatchingEndpoints:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
        CODE
//  409 {
        FUNCALL bdb_checkMatchingEndpoints, zcl_registerClusterOptionList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_zclFindingBindingAddBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_zclFindingBindingAddBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, zclGeneral_SendAddGroupRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 25
        MOV       A,#-0x19
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       ?V1,R1
//  410   uint8 matchFound;
//  411   endPointDesc_t *bdb_CurrEpDescriptor;
//  412   uint8 i, status;
//  413   zAddrType_t dstAddr;
//  414 #ifdef ZCL_GROUPS
//  415   afAddrType_t afDstAddr;
//  416 #endif  
//  417   
//  418   //Check all the endpoints active for F&B
//  419   while(bdb_CurrEpDescriptorList != NULL)
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_118:
        JNZ       $+5
        LJMP      ??bdb_checkMatchingEndpoints_0 & 0xFFFF
//  420   {
//  421     matchFound = FALSE;
??bdb_checkMatchingEndpoints_1:
        MOV       R7,#0x0
//  422 
//  423     bdb_CurrEpDescriptor = bdb_CurrEpDescriptorList->epDesc;
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
//  424 
//  425 #ifdef ZCL_GROUPS
//  426     if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )    
        MOV       DPTR,#bdbAttributes + 8
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_checkMatchingEndpoints_2
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_checkMatchingEndpoints_2:
        JZ        ??bdb_checkMatchingEndpoints_3
//  427     {
//  428       zcl_registerClusterOptionList(bdb_CurrEpDescriptor->endPoint,1,zcl_Groups_Options);      
        ; Setup parameters for call to function zcl_registerClusterOptionList
        MOV       R4,#zcl_Groups_Options & 0xff
        MOV       R5,#(zcl_Groups_Options >> 8) & 0xff
        MOV       R2,#0x1
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerClusterOptionList::?relay`; Banked call to: zcl_registerClusterOptionList
//  429       
//  430       dstAddr.addr.shortAddr = bdbAttributes.bdbCommissioningGroupID;
        MOV       DPTR,#bdbAttributes + 8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
//  431       dstAddr.addrMode = AddrGroup;
??CrossCallReturnLabel_38:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??CrossCallReturnLabel_34
//  432     }
//  433     else
//  434 #endif
//  435     {
//  436       dstAddr.addrMode = Addr64Bit;
??bdb_checkMatchingEndpoints_3:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
//  437       if(bindIfMatch)
        MOV       A,?V1
        JZ        ??CrossCallReturnLabel_34
//  438       {
//  439         //if bind is to be created, then we should have the ext address in addr mgr
//  440         AddrMgrExtAddrLookup( shortAddr, dstAddr.addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
//  441       }
//  442     }
//  443     for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumOutClusters; i++)
??CrossCallReturnLabel_34:
        MOV       R6,#0x0
        MOV       A,?V4
        ADD       A,#0x4
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V5
        MOV       ?V7,A
        SJMP      ??bdb_checkMatchingEndpoints_4
//  444     {
//  445       //Filter for Application clusters (to bind app clusters only)
//  446       status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
//  447                               bdb_CurrEpDescriptor->simpleDesc->pAppOutClusterList[i],
//  448                               bdb_FindingBindingTargetSimpleDesc.AppNumInClusters,
//  449                               bdb_FindingBindingTargetSimpleDesc.pAppInClusterList,
//  450                               &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch );
??bdb_checkMatchingEndpoints_5:
        ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
        MOV       A,?V1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 7
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 6
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,R1
        MOV       ?V0,A
//  451       
//  452       if ( status == ZApsTableFull )
        MOV       A,#-0x4e
        XRL       A,R1
        JZ        ??bdb_checkMatchingEndpoints_6
//  453       {
//  454         break;
//  455       }
//  456       else if(status == ZSuccess)
        MOV       A,R1
        JNZ       ??bdb_checkMatchingEndpoints_7
//  457       {
//  458         matchFound = TRUE;
        MOV       R7,#0x1
//  459         //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
//  460         if(!bindIfMatch)
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_8
//  461         {
//  462           break;
//  463         }
//  464       }
//  465     }
??bdb_checkMatchingEndpoints_7:
        INC       R6
??bdb_checkMatchingEndpoints_4:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_19:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        ??bdb_checkMatchingEndpoints_5
//  466     
//  467     //Only search for other matches if the table is not full and we have not 
//  468     //found any match or we have to add bind as many as we can
//  469     if( (status != ZApsTableFull) && (!matchFound || bindIfMatch) )      
        MOV       A,#-0x4e
        XRL       A,?V0
        JZ        ??bdb_checkMatchingEndpoints_6
        MOV       A,R7
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_checkMatchingEndpoints_9
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_6
//  470     {
//  471       for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumInClusters; i++)
??bdb_checkMatchingEndpoints_9:
        MOV       R6,#0x0
        SJMP      ??bdb_checkMatchingEndpoints_10
//  472       {
//  473         //Filter for Application clusters (to bind app clusters only)
//  474         status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
//  475                                 bdb_CurrEpDescriptor->simpleDesc->pAppInClusterList[i],
//  476                                 bdb_FindingBindingTargetSimpleDesc.AppNumOutClusters,
//  477                                 bdb_FindingBindingTargetSimpleDesc.pAppOutClusterList,
//  478                                 &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch );
//  479 
//  480         if ( status == ZApsTableFull )
//  481         {
//  482           break;
//  483         }
//  484         else if(status == ZSuccess)
??bdb_checkMatchingEndpoints_11:
        MOV       A,R1
        JNZ       ??bdb_checkMatchingEndpoints_12
//  485         {
//  486           matchFound = TRUE;
        MOV       R7,#0x1
//  487           
//  488           //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
//  489           if(!bindIfMatch)
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_8
//  490           {
//  491             break;
//  492           }
//  493         }
??bdb_checkMatchingEndpoints_12:
        INC       R6
??bdb_checkMatchingEndpoints_10:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_checkMatchingEndpoints_6
        ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
        MOV       A,?V1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 10
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 9
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,R1
        MOV       ?V0,A
        MOV       A,#-0x4e
        XRL       A,R1
        JNZ       ??bdb_checkMatchingEndpoints_11
//  494       }
//  495     }
//  496     
//  497     //Check if we have found any match
//  498     if( matchFound == TRUE )
??bdb_checkMatchingEndpoints_6:
        MOV       A,R7
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??bdb_checkMatchingEndpoints_13 & 0xFFFF
//  499     {
//  500       if(bindIfMatch)
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_8
//  501       {
//  502         //Mark respondent as complete as simple desc has been process and we do 
//  503         //have IEEE addrs
//  504         (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
        LCALL     ?Subroutine11 & 0xFFFF
//  505       }
??CrossCallReturnLabel_12:
        SJMP      ??bdb_checkMatchingEndpoints_14
//  506       else
//  507       {
//  508         //Mark as we need IEEE addrs
//  509         (*pCurr)->attempts = FINDING_AND_BINDING_MISSING_IEEE_ADDR;
??bdb_checkMatchingEndpoints_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ??Subroutine47_0 & 0xFFFF
//  510       }
??CrossCallReturnLabel_73:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV       A,#-0x80
??bdb_checkMatchingEndpoints_14:
        MOVX      @DPTR,A
//  511 
//  512 #ifdef ZCL_GROUPS
//  513       if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )
        MOV       DPTR,#bdbAttributes + 8
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV       A,#-0x1
        XRL       A,R2
        JNZ       ??bdb_checkMatchingEndpoints_15
        MOV       A,#-0x1
        XRL       A,R3
??bdb_checkMatchingEndpoints_15:
        JZ        ??bdb_checkMatchingEndpoints_16
//  514       {
//  515         afDstAddr.addr.shortAddr = shortAddr;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
//  516         afDstAddr.addrMode = afAddr16Bit;
??CrossCallReturnLabel_39:
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  517         afDstAddr.endPoint = bdb_FindingBindingTargetSimpleDesc.EndPoint;
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  518             
//  519         zclGeneral_SendAddGroupRequest( bdb_CurrEpDescriptor->endPoint, &afDstAddr,
//  520                                     COMMAND_GROUP_ADD, bdbAttributes.bdbCommissioningGroupID, grpName,
//  521                                     TRUE, 0x00 );
        ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       ?V2,#grpName & 0xff
        MOV       ?V3,#(grpName >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       R5,#0x1
        MOV       R4,#0x0
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP101_8
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        SJMP      ??bdb_checkMatchingEndpoints_16
//  522       }
//  523 #endif
//  524     }
//  525     else
//  526     {
//  527       //No matching cluster, then we are done with this respondent
//  528       (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
??bdb_checkMatchingEndpoints_13:
        LCALL     ?Subroutine11 & 0xFFFF
//  529     }
??CrossCallReturnLabel_13:
        MOVX      @DPTR,A
//  530     
//  531     if ( status == ZApsTableFull )
??bdb_checkMatchingEndpoints_16:
        MOV       A,#-0x4e
        XRL       A,?V0
        JNZ       ??bdb_checkMatchingEndpoints_17
//  532     {
//  533       //If periodic was triggered, then finish it
//  534       if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
//  535       {
//  536         bdb_FB_InitiatorCurrentCyclesNumber = 0;
        LCALL     ?Subroutine7 & 0xFFFF
//  537         osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
//  538       }      
//  539       
//  540       bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
//  541       osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
//  542       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
//  543       
//  544       return;
??CrossCallReturnLabel_4:
        SJMP      ??bdb_checkMatchingEndpoints_0
//  545     }
//  546     
//  547     //If an specific endpoint was requested, then don't go trough the rest of 
//  548     //the endpoints
//  549     if( bdbIndentifyActiveEndpoint != 0xFF )
??bdb_checkMatchingEndpoints_17:
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_checkMatchingEndpoints_0
//  550     {
//  551       break;
//  552     }
//  553     else
//  554     {
//  555       //If active endpoints 'all' is attempted, then process the next endpoint in 
//  556       //the list
//  557       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
        SJMP      ??bdb_checkMatchingEndpoints_18
//  558 
//  559       while(bdb_CurrEpDescriptorList != NULL)
//  560       {
//  561         //It has to be different from 0 or reserved for Zigbee
//  562         if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
??bdb_checkMatchingEndpoints_19:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ        ??bdb_checkMatchingEndpoints_18
        CLR       C
        SUBB      A,#-0xf
        JNC       $+5
        LJMP      ??bdb_checkMatchingEndpoints_1 & 0xFFFF
//  563         {
//  564           break;
//  565         }
//  566         bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
??bdb_checkMatchingEndpoints_18:
        LCALL     ?Subroutine5 & 0xFFFF
//  567       }
??CrossCallReturnLabel_2:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ??Subroutine56_0 & 0xFFFF
//  568     }
//  569   }
??CrossCallReturnLabel_119:
        JNZ       ??bdb_checkMatchingEndpoints_19
//  570 }
??bdb_checkMatchingEndpoints_0:
        MOV       A,#0x19
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 41)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_36
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function bdb_checkMatchingEndpoints
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function bdb_checkMatchingEndpoints
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function bdb_ProcessRespondentList
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function bdb_ProcessRespondentList
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_29
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function bdb_checkMatchingEndpoints
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function bdb_checkMatchingEndpoints
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function bdb_checkMatchingEndpoints
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function bdb_checkMatchingEndpoints
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_111:
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
          CFI Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function bdb_checkMatchingEndpoints
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_22
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function bdb_checkMatchingEndpoints
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_12
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function bdb_checkMatchingEndpoints
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_13
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function bdb_ProcessRespondentList
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_106
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-4
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function bdb_ProcessRespondentList
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_107
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function bdb_ProcessSimpleDesc
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_108
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-4
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function bdb_ProcessRespondentList
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_109
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_130:
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function bdb_checkMatchingEndpoints
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_14
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function bdb_checkMatchingEndpoints
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function bdb_ProcessSimpleDesc
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_80:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_14
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function bdb_checkMatchingEndpoints
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_15
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function bdb_ProcessSimpleDesc
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_16
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function bdb_checkMatchingEndpoints
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_12
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function bdb_checkMatchingEndpoints
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_13
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOVX      A,@DPTR
        MOV       R0,A
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function bdb_GetFBInitiatorStatus
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_77
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-5
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function bdb_checkMatchingEndpoints
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_73
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function bdb_ProcessSimpleDesc
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_74
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-4
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_75
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-4
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_14
          CFI (cfiCond55) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond55) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond55) CFA_SP SP+-9
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bdb_checkMatchingEndpoints
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_15
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function bdb_ProcessSimpleDesc
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_16
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bdb_checkMatchingEndpoints
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_12
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-4
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function bdb_checkMatchingEndpoints
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_13
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        INC       DPTR
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_6
          CFI (cfiCond62) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond62) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond62) CFA_SP SP+-9
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function bdb_checkMatchingEndpoints
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_7
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bdb_ProcessSimpleDesc
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_76
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function bdb_GetFBInitiatorStatus
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_77
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-5
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function bdb_checkMatchingEndpoints
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_73
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function bdb_ProcessSimpleDesc
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_74
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_75
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_14
          CFI (cfiCond69) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond69) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond69) CFA_SP SP+-9
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function bdb_checkMatchingEndpoints
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_15
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function bdb_ProcessSimpleDesc
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_16
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function bdb_checkMatchingEndpoints
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_12
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function bdb_checkMatchingEndpoints
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_13
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function bdb_checkMatchingEndpoints
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV       A,#-0x1
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function bdb_checkMatchingEndpoints
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
        MOV       A,#0x5
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond82) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond82) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond82) CFA_SP SP+-7
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function bdb_checkMatchingEndpoints
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker84 Using cfiCommon1
          CFI (cfiPicker84) NoFunction
          CFI (cfiPicker84) Picker
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_78:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_104:
        RET
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function bdb_checkMatchingEndpoints
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_stop_timerEx
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,A
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_85:
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
        ; Setup parameters for call to function osal_stop_timerEx
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_86:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xc
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond89) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond89) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond89) CFA_SP SP+-7
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function bdb_checkMatchingEndpoints
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
//  571 
//  572 
//  573 
//  574 /*********************************************************************
//  575  * @fn      bdb_ProcessSimpleDesc
//  576  *
//  577  * @brief   Process simple descriptor requested by F&B. Binds will be added if 
//  578  *          matching cluster is found and if IEEE addrs of the device is already 
//  579  *          stored
//  580  *
//  581  * @param   msgPtr - pointer to simple descriptor response indication message
//  582  *
//  583  * @return  none
//  584  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  585 void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr )
bdb_ProcessSimpleDesc:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
        CODE
//  586 {
        FUNCALL bdb_ProcessSimpleDesc, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, ZDO_ParseSimpleDescBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, bdb_findRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, bdb_checkMatchingEndpoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  587   zAddrType_t dstAddr;
//  588   bdbFindingBindingRespondent_t *pCurr = NULL;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  589   uint8 isRespondantReadyToBeAdded = FALSE;
        MOV       ?V0,#0x0
//  590 
//  591   bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
//  592   
//  593   if ( !(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR )) 
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV       R0,A
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_74:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??bdb_ProcessSimpleDesc_0 & 0xFFFF
//  594   {  
//  595     //We should not be processing these commands as we are not initiator
//  596     return;
//  597   }
//  598   
//  599   dstAddr.addr.shortAddr = BUILD_UINT16( msgPtr->asdu[1], msgPtr->asdu[2] );
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_27:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        LCALL     ??Subroutine52_0 & 0xFFFF
//  600   dstAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_93:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  601   
//  602   ZDO_ParseSimpleDescBuf( &msgPtr->asdu[4], &bdb_FindingBindingTargetSimpleDesc );
        ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
        MOV       R4,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV       R5,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        MOV       A,R0
        ADD       A,#0x4
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
//  603   
//  604   pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, dstAddr.addr.shortAddr);
        ; Setup parameters for call to function bdb_findRespondentNode
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
//  605   
//  606   //Just for safety check this is a valid entry
//  607   if(pCurr != NULL) 
??CrossCallReturnLabel_114:
        JZ        ??bdb_ProcessSimpleDesc_0
//  608   {
//  609     uint8 extAddr[Z_EXTADDR_LEN]; 
//  610     
//  611     if(AddrMgrExtAddrLookup( pCurr->data.addr.shortAddr, extAddr ))
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV       A,R1
        JZ        ??bdb_ProcessSimpleDesc_1
//  612     {
//  613       isRespondantReadyToBeAdded = TRUE;
        MOV       ?V0,#0x1
        SJMP      ??bdb_ProcessSimpleDesc_2
//  614     }
//  615     else
//  616     {
//  617       //Save the simple desc to don't ask for it again
//  618       pCurr->SimpleDescriptor = &bdb_FindingBindingTargetSimpleDesc;
??bdb_ProcessSimpleDesc_1:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine50_0 & 0xFFFF
//  619     }
??CrossCallReturnLabel_88:
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOV       A,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        MOVX      @DPTR,A
//  620     (void)extAddr;  //dummy
//  621   }
//  622   else
//  623   {
//  624     //This simple desc rsp was not requested by BDB F&B
//  625     return;
//  626   } 
//  627   
//  628   bdb_checkMatchingEndpoints(isRespondantReadyToBeAdded, dstAddr.addr.shortAddr, &pCurr);
??bdb_ProcessSimpleDesc_2:
        ; Setup parameters for call to function bdb_checkMatchingEndpoints
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV       R1,?V0
        LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
//  629   
//  630   //If the respondent got process complete, then release the entry
//  631   if(pCurr->attempts == FINDING_AND_BINDING_RESPONDENT_COMPLETE)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_108:
        CPL       A
        JNZ       ??bdb_ProcessSimpleDesc_0
//  632   {
//  633     bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );  
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
//  634   }
//  635 }
??bdb_ProcessSimpleDesc_0:
        MOV       A,#0x13
          CFI EndBlock cfiBlock92
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 28)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock93
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock94

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function bdb_ProcessSimpleDesc
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97
//  636 
//  637 /*********************************************************************
//  638  * @fn      bdb_zclFindingBindingEpType
//  639  *
//  640  * @brief   Gives the Ep Type according to application clusters in
//  641  *          simple descriptor
//  642  *
//  643  * @return  epType - If Target, Initiator or both
//  644  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  645 uint8 bdb_zclFindingBindingEpType( endPointDesc_t *epDesc )
bdb_zclFindingBindingEpType:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
        CODE
//  646 {
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  647   uint8 epType = 0;
        MOV       R6,#0x0
//  648   uint8 status;
//  649   uint8 type1ClusterCnt;
//  650   uint8 type2ClusterCnt;
//  651   
//  652   type1ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
//  653   type2ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
//  654   
//  655 
//  656   // Are there matching type 1 on server side?
//  657   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
//  658                                   epDesc->simpleDesc->pAppInClusterList,
//  659                                   type1ClusterCnt,
//  660                                   (uint16*)bdb_ZclType1Clusters);
//  661   
//  662   if( status == TRUE )
        MOV       A,R2
        ADD       A,#0x4
        MOV       ?V0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V1,A
        MOV       DPL,?V0
        MOV       DPH,A
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV       ?V4,#bdb_ZclType1Clusters & 0xff
        MOV       ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x18
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_zclFindingBindingEpType_0
//  663   {
//  664     epType |= BDB_FINDING_AND_BINDING_TARGET;
        MOV       R6,#0x2
//  665   }
//  666   
//  667   // Are there matching type 1 on client side?
//  668   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
//  669                                   epDesc->simpleDesc->pAppOutClusterList,
//  670                                   type1ClusterCnt,
//  671                                   (uint16*)bdb_ZclType1Clusters);
//  672   
//  673   if( status == TRUE )
??bdb_zclFindingBindingEpType_0:
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x18
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_zclFindingBindingEpType_1
//  674   {
//  675     epType |= BDB_FINDING_AND_BINDING_INITIATOR;
        MOV       A,R6
        SETB      0xE0 /* A   */.0
        MOV       R6,A
//  676   }
//  677   
//  678   // Are there matching type 2 on server side?
//  679   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
//  680                                   epDesc->simpleDesc->pAppInClusterList,
//  681                                   type2ClusterCnt,
//  682                                   (uint16*)bdb_ZclType2Clusters);
//  683   
//  684   if( status == TRUE )
??bdb_zclFindingBindingEpType_1:
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV       ?V4,#bdb_ZclType2Clusters & 0xff
        MOV       ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x31
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_zclFindingBindingEpType_2
//  685   {
//  686     epType |= BDB_FINDING_AND_BINDING_INITIATOR;
        MOV       A,R6
        SETB      0xE0 /* A   */.0
        MOV       R6,A
//  687   }
//  688   
//  689   // Are there matching type 2 on client side?
//  690   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
//  691                                   epDesc->simpleDesc->pAppOutClusterList,
//  692                                   type2ClusterCnt,
//  693                                   (uint16*)bdb_ZclType2Clusters);
//  694   
//  695   if( status == TRUE )
??bdb_zclFindingBindingEpType_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_125:
        MOV       ?V0,R0
        MOV       ?V1,A
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x31
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_zclFindingBindingEpType_3
//  696   {
//  697     epType |= BDB_FINDING_AND_BINDING_TARGET;
        MOV       A,R6
        SETB      0xE0 /* A   */.1
        MOV       R6,A
//  698   }
//  699 
//  700   return epType;
??bdb_zclFindingBindingEpType_3:
        MOV       A,R6
        MOV       R1,A
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  701 
//  702 }
          CFI EndBlock cfiBlock98

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function bdb_zclFindingBindingEpType
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function bdb_zclFindingBindingEpType
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_11
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-4
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function bdb_zclFindingBindingEpType
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function bdb_zclFindingBindingEpType
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function bdb_zclFindingBindingEpType
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function bdb_zclFindingBindingEpType
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function bdb_zclFindingBindingEpType
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function bdb_zclFindingBindingEpType
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_51:
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116
//  703 
//  704 /*********************************************************************
//  705  * @fn      bdb_zclFindingBindingAddBindEntry
//  706  *
//  707  * @brief   This function is used to Add an entry to the binding table
//  708  *
//  709  * @param   SrcEndpInt - source endpoint
//  710  * @param   BindClusterId - cluster to try bind
//  711  * @param   Cnt - list of remote clusters
//  712  * @param   ClusterList - pointer to the Object ID list
//  713  * @param   DstAddr - Address of remote node
//  714  * @param   DstEndpInt - EndPoint of remote node
//  715  * @param   addBind - Indicate wheter or not bind must be added or not
//  716  *
//  717  * @return  status - Success if added
//  718  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  719 static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
bdb_zclFindingBindingAddBindEntry:
          CFI Block cfiBlock117 Using cfiCommon0
          CFI Function bdb_zclFindingBindingAddBindEntry
        CODE
//  720                                   uint16 BindClusterId,
//  721                                   byte Cnt,                 
//  722                                   uint16 * ClusterList,
//  723                                   zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind )
//  724 {
        FUNCALL bdb_zclFindingBindingAddBindEntry, bdb_FindIfAppCluster
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingAddBindEntry, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       A,R1
        MOV       R7,A
        MOV       A,R4
        MOV       R6,A
        MOV       ?V0,R5
//  725   uint8 status;
//  726 
//  727   if ( bdb_FindIfAppCluster ( BindClusterId ) != SUCCESS )
        ; Setup parameters for call to function bdb_FindIfAppCluster
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     `??bdb_FindIfAppCluster::?relay`; Banked call to: bdb_FindIfAppCluster
        MOV       A,R1
        JNZ       ??bdb_zclFindingBindingAddBindEntry_0
//  728   {
//  729     return ( ZApsFail ); // No App cluster
//  730   }
//  731 
//  732   // Are there matching clusters?
//  733   status = ZDO_AnyClusterMatches( Cnt, 
//  734                                   ClusterList,
//  735                                   1,
//  736                                  &BindClusterId);
//  737   if ( status == FALSE )
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x1
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        JNZ       ??bdb_zclFindingBindingAddBindEntry_1
//  738   {
//  739     return ( ZApsFail ); // No matched Cluster
??bdb_zclFindingBindingAddBindEntry_0:
        MOV       R1,#-0x4f
        SJMP      ??bdb_zclFindingBindingAddBindEntry_2
//  740   }
//  741 
//  742   if(addBind)  
??bdb_zclFindingBindingAddBindEntry_1:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??bdb_zclFindingBindingAddBindEntry_3
//  743   {
//  744     if ( pbindAddEntry )
        MOV       DPTR,#pbindAddEntry
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_120:
        JZ        ??bdb_zclFindingBindingAddBindEntry_3
//  745     {
//  746       // Add the entry into the binding table
//  747       if (!pbindAddEntry( SrcEndpInt, DstAddr, DstEndpInt,
//  748                              1, &BindClusterId ) )
        ; Setup parameters for indirect call
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R5,#0x1
        MOV       R4,?V0
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV       A,R7
        MOV       R1,A
        MOV       DPTR,#pbindAddEntry
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?CALL_IND
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        ORL       A,R3
        JNZ       ??bdb_zclFindingBindingAddBindEntry_3
//  749       {
//  750         return ( ZApsTableFull );
        MOV       R1,#-0x4e
        SJMP      ??bdb_zclFindingBindingAddBindEntry_2
//  751       }
//  752     }
//  753   }
//  754   
//  755   return ( ZSuccess );
??bdb_zclFindingBindingAddBindEntry_3:
        MOV       R1,#0x0
??bdb_zclFindingBindingAddBindEntry_2:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  756 }
          CFI EndBlock cfiBlock117

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function bdb_zclSimpleDescClusterListClean
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        MOV       R6,A
        CLR       A
        ADDC      A,?V1
        MOV       R7,A
        MOV       DPL,R6
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function bdb_getRespondentRetry
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond122) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond122) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond122) CFA_SP SP+-7
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker125 Using cfiCommon1
          CFI (cfiPicker125) NoFunction
          CFI (cfiPicker125) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiPicker125
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond126 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function bdb_checkMatchingEndpoints
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function bdb_ProcessSimpleDesc
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function bdb_zclFindingBindingEpType
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function bdb_zclFindingBindingEpType
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function bdb_ProcessRespondentList
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function bdb_getRespondentRetry
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond134) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond134) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond134) CFA_SP SP+-7
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker137 Using cfiCommon1
          CFI (cfiPicker137) NoFunction
          CFI (cfiPicker137) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_72:
        RET
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiPicker137

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond138 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
          CFI Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function bdb_checkMatchingEndpoints
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_20
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function bdb_checkMatchingEndpoints
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_8
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function bdb_checkMatchingEndpoints
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_9
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function bdb_checkMatchingEndpoints
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_34
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function bdb_ProcessSimpleDesc
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_35
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function bdb_zclFindingBindingEpType
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_10
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function bdb_zclFindingBindingEpType
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_11
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_64
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_65
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function bdb_ProcessRespondentList
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_62
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-4
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function bdb_getRespondentRetry
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_63
          CFI (cfiCond149) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond149) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond149) CFA_SP SP+-9
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_55
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function bdb_checkMatchingEndpoints
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_56
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function bdb_ProcessSimpleDesc
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_57
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-4
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function bdb_zclFindingBindingEpType
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_58
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-4
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function bdb_zclFindingBindingEpType
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_59
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-4
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_60
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_61
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function bdb_ProcessRespondentList
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_17
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function bdb_ProcessRespondentList
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_18
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_113
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function bdb_ProcessSimpleDesc
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_114
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function bdb_GetFBInitiatorStatus
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function bdb_ProcessSimpleDesc
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function bdb_ProcessSimpleDesc
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function bdb_GetFBInitiatorStatus
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_81:
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170
//  757 
//  758 /*********************************************************************
//  759  * @fn      bdb_exitFindingBindingWStatus
//  760  *
//  761  * @brief   Clean respondent list and reports the status to bdb state machine
//  762  *
//  763  * @return  
//  764  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  765 void bdb_exitFindingBindingWStatus( uint8 status )
bdb_exitFindingBindingWStatus:
          CFI Block cfiBlock171 Using cfiCommon0
          CFI Function bdb_exitFindingBindingWStatus
        CODE
//  766 {
        FUNCALL bdb_exitFindingBindingWStatus, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  767   // bdb report status
//  768   bdbAttributes.bdbCommissioningStatus = status;
        MOV       DPTR,#bdbAttributes + 10
        MOVX      @DPTR,A
//  769   
//  770   bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_FINDING_BINDING, TRUE );
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x6
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  771 }
        LJMP      ??Subroutine42_0 & 0xFFFF
          CFI EndBlock cfiBlock171
//  772 
//  773 /*********************************************************************
//  774  * @fn      bdb_zclSimpleDescClusterListClean
//  775  *
//  776  * @brief   This function free Simple Descriptor cluster lists
//  777  *
//  778  * @param   pSimpleDesc - pointer to simple descriptor
//  779  *
//  780  * @return  status
//  781  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  782 static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc )
bdb_zclSimpleDescClusterListClean:
          CFI Block cfiBlock172 Using cfiCommon0
          CFI Function bdb_zclSimpleDescClusterListClean
        CODE
//  783 {
        FUNCALL bdb_zclSimpleDescClusterListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclSimpleDescClusterListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  784   if(pSimpleDesc->pAppInClusterList != NULL)
        MOV       A,R2
        ADD       A,#0x7
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_45
//  785   {
//  786     osal_mem_free( pSimpleDesc->pAppInClusterList );
        ; Setup parameters for call to function osal_mem_free
        LCALL     ?Subroutine29 & 0xFFFF
//  787     pSimpleDesc->pAppInClusterList = ( cId_t* )NULL;
//  788   }
//  789   if(pSimpleDesc->pAppOutClusterList != NULL)
??CrossCallReturnLabel_45:
        MOV       A,?V0
        ADD       A,#0xa
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_46
//  790   {
//  791     osal_mem_free( pSimpleDesc->pAppOutClusterList );
        ; Setup parameters for call to function osal_mem_free
        LCALL     ?Subroutine29 & 0xFFFF
//  792     pSimpleDesc->pAppOutClusterList = ( cId_t* )NULL;
//  793   }
//  794 }
??CrossCallReturnLabel_46:
        SJMP      ??Subroutine48_0
          CFI EndBlock cfiBlock172

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function bdb_zclSimpleDescClusterListClean
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function bdb_zclSimpleDescClusterListClean
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock176 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock176
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiBlock177 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock177
//  795 
//  796 /*********************************************************************
//  797  * @fn      bdb_RegisterIdentifyTimeChangeCB
//  798  *
//  799  * @brief   Register an Application's Identify Time change callback function
//  800  *          to let know the application when identify is active or not.
//  801  *
//  802  * @param   pfnIdentify - application callback
//  803  *
//  804  * @return  none
//  805  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  806 void bdb_RegisterIdentifyTimeChangeCB( bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChange )
bdb_RegisterIdentifyTimeChangeCB:
          CFI Block cfiBlock178 Using cfiCommon0
          CFI Function bdb_RegisterIdentifyTimeChangeCB
        CODE
//  807 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  808   pfnIdentifyTimeChangeCB = pfnIdentifyTimeChange;
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LJMP      ?Subroutine0 & 0xFFFF
//  809 }
          CFI EndBlock cfiBlock178
//  810 
//  811 #if (FINDING_AND_BINDING_PERIODIC_ENABLE==TRUE)
//  812 /*********************************************************************
//  813  * @fn      bdb_GetFBInitiatorStatus
//  814  *
//  815  * @brief   Get the F&B initiator status for periodic requests.
//  816  *
//  817  * @param   RemainingTime - in seconds
//  818  * @param   AttemptsLeft - number of attempts to be done
//  819  * @param   MatchesFound - Add the number of matches to this parameter
//  820  *                         since the last bdb_GetFBInitiatorStatus call
//  821  *
//  822  * @return  none
//  823  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  824 void bdb_GetFBInitiatorStatus(uint8 *RemainingTime, uint8* AttemptsLeft)
bdb_GetFBInitiatorStatus:
          CFI Block cfiBlock179 Using cfiCommon0
          CFI Function bdb_GetFBInitiatorStatus
        CODE
//  825 {
        FUNCALL bdb_GetFBInitiatorStatus, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  826   if(RemainingTime != NULL)  
        MOV       A,R2
        ORL       A,R7
        JZ        ??bdb_GetFBInitiatorStatus_0
//  827   {
//  828     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JNZ       ??bdb_GetFBInitiatorStatus_1
//  829     {
//  830       *RemainingTime = 0;
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        SJMP      ??bdb_GetFBInitiatorStatus_2
//  831     }
//  832     else
//  833     {
//  834       *RemainingTime = (bdb_FB_InitiatorCurrentCyclesNumber - 1) * FINDING_AND_BINDING_PERIODIC_TIME + ((osal_get_timeoutEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT) + 999) / 1000);
??bdb_GetFBInitiatorStatus_1:
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
        MOV       DPTR,#__Constant_3e7
        MOV       R0,#?V4
        LCALL     ?L_ADD_X
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?UL_DIV_MOD
        MOV       B,#0xf
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        DEC       A
        MUL       AB
        ADD       A,?V4
        MOV       DPL,R6
        MOV       DPH,R7
??bdb_GetFBInitiatorStatus_2:
        MOVX      @DPTR,A
//  835     }
//  836   }
//  837   
//  838   if(AttemptsLeft != NULL)
??bdb_GetFBInitiatorStatus_0:
        LCALL     ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_124:
        JZ        ??bdb_GetFBInitiatorStatus_3
//  839   {
//  840     *AttemptsLeft = bdb_FB_InitiatorCurrentCyclesNumber;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine19 & 0xFFFF
//  841   }
??CrossCallReturnLabel_77:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  842 }
??bdb_GetFBInitiatorStatus_3:
        MOV       A,#0x2
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock179
//  843 #endif
//  844 
//  845 /*********************************************************************
//  846  * @fn      bdb_RegisterBindNotificationCB
//  847  *
//  848  * @brief   Register an Application's notification callback function to let 
//  849  *          know the application when a new bind is added to the binding table.
//  850  *
//  851  * @param   pfnIdentify - application callback
//  852  *
//  853  * @return  none
//  854  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  855 void bdb_RegisterBindNotificationCB( bdbGCB_BindNotification_t pfnBindNotification )
bdb_RegisterBindNotificationCB:
          CFI Block cfiBlock180 Using cfiCommon0
          CFI Function bdb_RegisterBindNotificationCB
        CODE
//  856 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  857   pfnBindNotificationCB = pfnBindNotification;
        MOV       DPTR,#pfnBindNotificationCB
        LJMP      ?Subroutine0 & 0xFFFF
//  858 }
          CFI EndBlock cfiBlock180
//  859 
//  860 /*********************************************************************
//  861  * @fn      bdb_SendIdentifyQuery
//  862  *
//  863  * @brief   Sends Identify query from the given endpoint
//  864  *
//  865  * @param   endpoint
//  866  *
//  867  * @return  ZStatus_t
//  868  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  869 ZStatus_t bdb_SendIdentifyQuery( uint8 endpoint )
bdb_SendIdentifyQuery:
          CFI Block cfiBlock181 Using cfiCommon0
          CFI Function bdb_SendIdentifyQuery
        CODE
//  870 {
        FUNCALL bdb_SendIdentifyQuery, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendIdentifyQuery, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendIdentifyQuery, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R7,A
//  871   afAddrType_t dstAddr;
//  872   ZStatus_t    status;
//  873   
//  874   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  875   dstAddr.addrMode = afAddr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  876   dstAddr.endPoint = 0xFF;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  877 
//  878   status = zclGeneral_SendIdentifyQuery( endpoint, &dstAddr, TRUE, bdb_getZCLFrameCounter() ); 
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        MOV       R1,A
        ; Setup parameters for call to function zcl_SendCommand
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        MOV       A,R7
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R6,A
//  879   
//  880   if(status == ZSuccess)
        JNZ       ??bdb_SendIdentifyQuery_0
//  881   {
//  882     osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, IDENTIFY_QUERY_RSP_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  883   }
//  884   
//  885   return status;
??bdb_SendIdentifyQuery_0:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0xc
        LJMP      ?Subroutine1 & 0xFFFF
//  886 }
          CFI EndBlock cfiBlock181
//  887 
//  888 /*********************************************************************
//  889  * @fn      bdb_ZclIdentifyQueryCmdInd
//  890  *
//  891  * @brief   Callback from the ZCL General Cluster Library when
//  892  *          it received an Identity Query Response Command for this 
//  893  *          application.
//  894  *
//  895  * @param   srcAddr - source address and endpoint of the response message
//  896  * @param   identifyTime - the number of seconds to identify yourself
//  897  *
//  898  * @return  none
//  899  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  900 void bdb_ZclIdentifyQueryCmdInd( zclIdentifyQueryRsp_t *pCmd )
bdb_ZclIdentifyQueryCmdInd:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
        CODE
//  901 {
        FUNCALL bdb_ZclIdentifyQueryCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyQueryCmdInd, bdb_AddRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyQueryCmdInd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  902   bdbFindingBindingRespondent_t *pCurr;
//  903   
//  904   // Stop the timer before refresh
//  905   osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL     ?Subroutine26 & 0xFFFF
//  906   
//  907   // add new node to the list
//  908   pCurr = bdb_AddRespondentNode( &pRespondentHead, pCmd );
??CrossCallReturnLabel_83:
        ; Setup parameters for call to function bdb_AddRespondentNode
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
//  909   
//  910   if(pCurr != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_ZclIdentifyQueryCmdInd_0
//  911   {
//  912     pCurr->data.addrMode = pCmd->srcAddr->addrMode;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_25:
        MOVX      @DPTR,A
//  913     pCurr->data.addr.shortAddr = pCmd->srcAddr->addr.shortAddr;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  914     pCurr->data.endPoint = pCmd->srcAddr->endPoint;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_26:
        INC       DPTR
        MOVX      @DPTR,A
//  915     pCurr->data.panId = pCmd->srcAddr->panId;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_89:
        ADD       A,#0xa
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine27 & 0xFFFF
//  916     pCurr->attempts = FINDING_AND_BINDING_NEW_RESPONDENT;
??CrossCallReturnLabel_40:
        MOV       A,R2
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_47:
        CLR       A
        MOVX      @DPTR,A
//  917     pCurr->SimpleDescriptor = NULL;
        MOV       A,R2
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  918   }
//  919   
//  920   //Process the identify query rsp
//  921   osal_set_event(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT);
??bdb_ZclIdentifyQueryCmdInd_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  922 }
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock182

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function bdb_StopInitiatorFindingBinding
          CFI Conditional ??CrossCallReturnLabel_82
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker185 Using cfiCommon1
          CFI (cfiPicker185) NoFunction
          CFI (cfiPicker185) Picker
        MOV       R2,#0x0
        MOV       R3,#0x40
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiPicker185
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function bdb_StopInitiatorFindingBinding
          CFI Conditional ??CrossCallReturnLabel_84
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function bdb_StopInitiatorFindingBinding
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond187) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond187) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond187) CFA_SP SP+-7
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker189 Using cfiCommon1
          CFI (cfiPicker189) NoFunction
          CFI (cfiPicker189) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_87:
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiPicker189

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond190 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
          CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function bdb_checkMatchingEndpoints
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_4
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_3
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-4
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function bdb_checkMatchingEndpoints
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_4
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function bdb_StopInitiatorFindingBinding
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_82
          CFI (cfiCond194) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond194) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond194) CFA_SP SP+-9
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_83
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-4
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function bdb_StopInitiatorFindingBinding
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_84
          CFI (cfiCond196) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond196) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond196) CFA_SP SP+-9
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        RET
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_29
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_30
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-4
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function bdb_checkMatchingEndpoints
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_31
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function bdb_checkMatchingEndpoints
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_32
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-4
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_33
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-4
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_21
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-6
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function bdb_checkMatchingEndpoints
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_22
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-6
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function bdb_checkMatchingEndpoints
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_12
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-6
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function bdb_checkMatchingEndpoints
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_13
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-6
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function bdb_ProcessRespondentList
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_106
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-6
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function bdb_ProcessRespondentList
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_107
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-6
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function bdb_ProcessSimpleDesc
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_108
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-6
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function bdb_ProcessRespondentList
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_109
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-6
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function bdb_zclFindingBindingEpType
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function bdb_ProcessSimpleDesc
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_27
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_28
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function bdb_ProcessRespondentList
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_90
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function bdb_ProcessRespondentList
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_91
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-4
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function bdb_ProcessRespondentList
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_92
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-4
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function bdb_ProcessSimpleDesc
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_88
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-4
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_89
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-4
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_5
          CFI (cfiCond222) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond222) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond222) CFA_SP SP+-11
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_6
          CFI (cfiCond223) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond223) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond223) CFA_SP SP+-11
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function bdb_checkMatchingEndpoints
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_7
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-6
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_0
          CFI (cfiCond225) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond225) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond225) CFA_SP SP+-11
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_1
          CFI (cfiCond226) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond226) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond226) CFA_SP SP+-11
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function bdb_checkMatchingEndpoints
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_2
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-6
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function bdb_ProcessRespondentList
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_101
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-6
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function bdb_ProcessRespondentList
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_102
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-6
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function bdb_ProcessRespondentList
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_100
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-6
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_113
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-4
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function bdb_ProcessSimpleDesc
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_114
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-4
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function bdb_GetFBInitiatorStatus
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_124
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-4
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function bdb_SetIdentifyActiveEndpoint
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_115
          CFI (cfiCond234) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond234) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond234) CFA_SP SP+-9
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_116
          CFI (cfiCond235) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond235) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond235) CFA_SP SP+-9
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_117
          CFI (cfiCond236) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond236) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond236) CFA_SP SP+-9
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function bdb_checkMatchingEndpoints
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_118
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-4
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function bdb_checkMatchingEndpoints
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_119
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-4
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_120
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-4
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function bdb_ProcessRespondentList
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_121
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-4
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function bdb_ProcessRespondentList
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_122
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-4
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function bdb_ProcessRespondentList
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_123
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-4
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker243 Using cfiCommon1
          CFI (cfiPicker243) NoFunction
          CFI (cfiPicker243) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiPicker243
//  923 
//  924 /*********************************************************************
//  925  * @fn      bdb_ProcessRespondentList
//  926  *
//  927  * @brief   Process the respondent list by sending Simple Descriptor request to 
//  928  *          devices respondent in the list. Also send IEEE Addr Req to those 
//  929  *          device for which a bind is created buy IEEE addr is missing.
//  930  *
//  931  * @param   none
//  932  *
//  933  * @return  none
//  934  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond244 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function bdb_ProcessRespondentList
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function bdb_ProcessRespondentList
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker247 Using cfiCommon1
          CFI (cfiPicker247) NoFunction
          CFI (cfiPicker247) Picker
        MOV       DPTR,#pRespondentCurr
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiPicker247
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond248 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-2
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function bdb_ProcessRespondentList
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function bdb_ProcessRespondentList
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function bdb_ProcessRespondentList
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker253 Using cfiCommon1
          CFI (cfiPicker253) NoFunction
          CFI (cfiPicker253) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_128:
        XCH       A,R0
        RET
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiPicker253

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond254 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function bdb_ZclIdentifyQueryCmdInd
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  935 void bdb_ProcessRespondentList( void )
bdb_ProcessRespondentList:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
        CODE
//  936 {
        FUNCALL bdb_ProcessRespondentList, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  937   zAddrType_t dstAddr = { 0 };
        MOV       DPTR,#`?<Constant {{0}}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x9
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  938   
//  939   // Look for the first respondent
//  940   if ( pRespondentCurr == NULL )
        MOV       DPTR,#pRespondentCurr
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_121:
        JNZ       ??bdb_ProcessRespondentList_0
//  941   {
//  942     pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine13 & 0xFFFF
//  943     
//  944     // If null, then no responses from Identify query request
//  945     if ( (pRespondentCurr == NULL) )
??CrossCallReturnLabel_17:
        JNZ       ??CrossCallReturnLabel_41
//  946     {
//  947       //No responses, then no responses
//  948       if(pRespondentHead == NULL)
        MOV       DPTR,#pRespondentHead
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_122:
        JNZ       ??bdb_ProcessRespondentList_1
//  949       {
//  950         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        SJMP      ??bdb_ProcessRespondentList_2
//  951       }
//  952       //Responses and binded to all clusters possible
//  953       else
//  954       {
//  955         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
//  956       }
//  957       return;
//  958     }
//  959   }
//  960   else
//  961   {
//  962     //Validate that we are not processing a missing IEEE Address before chaning 
//  963     //the current respondent to be process
//  964     if((pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR) &&
//  965        (pRespondentCurr->attempts & ~FINDING_AND_BINDING_MISSING_IEEE_ADDR) >= FINDING_AND_BINDING_MAX_ATTEMPTS)
??bdb_ProcessRespondentList_0:
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        ADD       A,#0xc
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JNC       ??CrossCallReturnLabel_41
        ANL       A,#0x7f
        CLR       C
        SUBB      A,#0x4
        JC        ??CrossCallReturnLabel_41
//  966     {
//  967       if(pRespondentNext == NULL)
        MOV       DPTR,#pRespondentNext
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_123:
        JNZ       ??bdb_ProcessRespondentList_3
//  968       {
//  969         //Review the whole list if we have simple desc that we need to attempt.
//  970         pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine13 & 0xFFFF
//  971           
//  972         if(pRespondentCurr == NULL)
??CrossCallReturnLabel_18:
        JNZ       ??CrossCallReturnLabel_41
//  973         {
//  974           bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
??bdb_ProcessRespondentList_1:
        MOV       R1,#0x0
??bdb_ProcessRespondentList_2:
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  975           return;
        LJMP      ??CrossCallReturnLabel_95 & 0xFFFF
//  976         }
//  977       }
//  978       else
//  979       {
//  980         pRespondentCurr = pRespondentNext;
??bdb_ProcessRespondentList_3:
        MOV       DPTR,#pRespondentCurr
        LCALL     ?Subroutine27 & 0xFFFF
//  981       }
//  982     }
//  983   }
//  984   
//  985   //Start the timer to process the next respondent
//  986   osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
??CrossCallReturnLabel_41:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  987   
//  988   //If ParentLost is reported, then do not attempt send SimpleDesc, mark those as pending, 
//  989   //if Parent Lost is restored, then these simpleDesc attempts will be restored to 0
//  990   if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        MOV       DPTR,#pRespondentCurr
        JZ        ??bdb_ProcessRespondentList_4
//  991   {
//  992     dstAddr.addr.shortAddr = pRespondentCurr->data.addr.shortAddr;
        LCALL     ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine27 & 0xFFFF
//  993     dstAddr.addrMode = pRespondentCurr->data.addrMode;
??CrossCallReturnLabel_42:
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_90:
        ADD       A,#0x8
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine6 & 0xFFFF
//  994 
//  995     //Update the attempts, ahead of actually sending the frame, as this is done just below
//  996     pRespondentCurr->attempts++;
??CrossCallReturnLabel_106:
        INC       A
        LCALL     ?Subroutine6 & 0xFFFF
//  997     
//  998     //Send IEEE addr request or simple desc req
//  999     if(pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR)
??CrossCallReturnLabel_107:
        MOV       C,0xE0 /* A   */.7
        JNC       ??bdb_ProcessRespondentList_5
// 1000     {
// 1001       ZDP_IEEEAddrReq(pRespondentCurr->data.addr.shortAddr,0,0,0);
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV       R5,#0x0
        MOV       R4,#0x0
        MOV       R1,#0x0
        LCALL     ?Subroutine16 & 0xFFFF
// 1002     }
??CrossCallReturnLabel_101:
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
        SJMP      ??bdb_ProcessRespondentList_6
// 1003     else
// 1004     {
// 1005       //Send simple descriptor
// 1006       ZDP_SimpleDescReq( &dstAddr, pRespondentCurr->data.addr.shortAddr, pRespondentCurr->data.endPoint, 0 );
??bdb_ProcessRespondentList_5:
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine20 & 0xFFFF
// 1007     }
// 1008   }
??CrossCallReturnLabel_91:
        ADD       A,#0x9
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        SJMP      ??bdb_ProcessRespondentList_6
// 1009   else
// 1010   {
// 1011     //Stop any attempt due to parent lost
// 1012     pRespondentCurr->attempts |= FINDING_AND_BINDING_PARENT_LOST;
??bdb_ProcessRespondentList_4:
        LCALL     ??Subroutine54_0 & 0xFFFF
// 1013   }
??CrossCallReturnLabel_109:
        SETB      0xE0 /* A   */.6
        MOVX      @DPTR,A
// 1014   
// 1015   //Search for the next respondant that has not enough tries in the list
// 1016   pRespondentNext = bdb_getRespondentRetry(pRespondentCurr->pNext);
??bdb_ProcessRespondentList_6:
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_92:
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       DPTR,#pRespondentNext
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1017 }
??CrossCallReturnLabel_95:
        MOV       A,#0x9
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock257

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond258 Using cfiCommon0
          CFI Function bdb_zclFindingBindingAddBindEntry
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_113
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-4
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function bdb_ProcessSimpleDesc
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_114
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-4
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker261 Using cfiCommon1
          CFI (cfiPicker261) NoFunction
          CFI (cfiPicker261) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiPicker261
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond262 Using cfiCommon0
          CFI Function bdb_RegisterIdentifyTimeChangeCB
          CFI Conditional ??CrossCallReturnLabel_96
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function bdb_RegisterBindNotificationCB
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond263) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond263) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond263) CFA_SP SP+-7
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function bdb_checkMatchingEndpoints
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function bdb_ProcessRespondentList
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function bdb_ProcessRespondentList
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_17
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-4
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function bdb_ProcessRespondentList
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_18
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-4
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_113
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-4
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function bdb_ProcessSimpleDesc
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_114
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-4
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker271 Using cfiCommon1
          CFI (cfiPicker271) NoFunction
          CFI (cfiPicker271) Picker
        MOV       A,R2
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiPicker271
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond272 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function bdb_RegisterIdentifyTimeChangeCB
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond273) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond273) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond273) CFA_SP SP+-7
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function bdb_RegisterBindNotificationCB
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond274) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond274) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond274) CFA_SP SP+-7
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function bdb_checkMatchingEndpoints
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function bdb_ProcessRespondentList
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-2
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function bdb_ProcessRespondentList
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_17
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-4
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function bdb_ProcessRespondentList
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_18
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-4
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_113
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-4
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function bdb_ProcessSimpleDesc
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_114
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-4
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker282 Using cfiCommon1
          CFI (cfiPicker282) NoFunction
          CFI (cfiPicker282) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiPicker282

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond283 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function bdb_ProcessRespondentList
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-2
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker285 Using cfiCommon1
          CFI (cfiPicker285) NoFunction
          CFI (cfiPicker285) Picker
        MOV       DPTR,#pRespondentCurr
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiPicker285
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond286 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
          CFI Conditional ??CrossCallReturnLabel_100
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function bdb_ProcessRespondentList
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function bdb_ProcessRespondentList
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-2
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker289 Using cfiCommon1
          CFI (cfiPicker289) NoFunction
          CFI (cfiPicker289) Picker
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_105:
        RET
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiPicker289

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond290 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_6
          CFI (cfiCond291) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond291) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond291) CFA_SP SP+-9
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function bdb_checkMatchingEndpoints
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_7
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-4
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_0
          CFI (cfiCond293) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond293) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond293) CFA_SP SP+-9
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_1
          CFI (cfiCond294) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond294) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond294) CFA_SP SP+-9
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function bdb_checkMatchingEndpoints
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_2
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-4
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function bdb_ProcessRespondentList
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_101
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-4
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function bdb_ProcessRespondentList
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_102
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-4
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function bdb_ProcessRespondentList
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_100
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-4
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker299 Using cfiCommon1
          CFI (cfiPicker299) NoFunction
          CFI (cfiPicker299) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiPicker299

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond300 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function bdb_ProcessRespondentList
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-2
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker302 Using cfiCommon1
          CFI (cfiPicker302) NoFunction
          CFI (cfiPicker302) Picker
        MOV       DPTR,#pRespondentHead
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       DPTR,#pRespondentCurr
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        RET
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiPicker302

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond303 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function bdb_ProcessRespondentList
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker305 Using cfiCommon1
          CFI (cfiPicker305) NoFunction
          CFI (cfiPicker305) Picker
        MOVX      @DPTR,A
        MOV       DPTR,#pRespondentCurr
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiPicker305
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond306 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_108
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function bdb_ProcessRespondentList
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-2
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function bdb_ProcessRespondentList
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-2
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function bdb_ProcessRespondentList
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-2
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker310 Using cfiCommon1
          CFI (cfiPicker310) NoFunction
          CFI (cfiPicker310) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_112:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiPicker310

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond311 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
          CFI Conditional ??CrossCallReturnLabel_113
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function bdb_ProcessSimpleDesc
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-2
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker313 Using cfiCommon1
          CFI (cfiPicker313) NoFunction
          CFI (cfiPicker313) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_99:
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiPicker313
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond314 Using cfiCommon0
          CFI Function bdb_GetFBInitiatorStatus
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-2
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function bdb_ProcessSimpleDesc
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker317 Using cfiCommon1
          CFI (cfiPicker317) NoFunction
          CFI (cfiPicker317) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiPicker317
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond318 Using cfiCommon0
          CFI Function bdb_SetIdentifyActiveEndpoint
          CFI Conditional ??CrossCallReturnLabel_115
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond319) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond319) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond319) CFA_SP SP+-7
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function bdb_setEpDescListToActiveEndpoint
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond320) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond320) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond320) CFA_SP SP+-7
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function bdb_checkMatchingEndpoints
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-2
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function bdb_checkMatchingEndpoints
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-2
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function bdb_zclFindingBindingAddBindEntry
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond323) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond323) CFA_SP SP+-2
          CFI (cfiCond323) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function bdb_ProcessRespondentList
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond324) CFA_SP SP+-2
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function bdb_ProcessRespondentList
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-2
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function bdb_ProcessRespondentList
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function bdb_GetFBInitiatorStatus
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond328) CFA_SP SP+-2
          CFI (cfiCond328) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function bdb_ProcessSimpleDesc
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-2
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker330 Using cfiCommon1
          CFI (cfiPicker330) NoFunction
          CFI (cfiPicker330) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiPicker330

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {{0}}>`:
        DATA16
        DW 0
        DB 0, 0, 0, 0, 0, 0
        DB 0
// 1018 
// 1019 /*********************************************************************
// 1020  * @fn      bdb_FindIfAppCluster
// 1021  *
// 1022  * @brief   To verify if cluster is application type
// 1023  *
// 1024  * @param   none
// 1025  *
// 1026  * @return  true if success
// 1027  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1028 uint8 bdb_FindIfAppCluster( cId_t ClusterId )
bdb_FindIfAppCluster:
          CFI Block cfiBlock331 Using cfiCommon0
          CFI Function bdb_FindIfAppCluster
        CODE
// 1029 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1030   uint8 i;
// 1031   uint8 ClusterCnt;
// 1032 
// 1033   ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
// 1034   
// 1035   for ( i = 0; i < ClusterCnt; i++ )
        MOV       R0,#0x0
// 1036   {
// 1037     if ( bdb_ZclType1Clusters[i] == ClusterId )
??bdb_FindIfAppCluster_0:
        MOV       A,R0
        ADD       A,0xE0 /* A   */
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       A,#bdb_ZclType1Clusters & 0xff
        ADD       A,R4
        MOV       DPL,A
        MOV       A,#(bdb_ZclType1Clusters >> 8) & 0xff
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_FindIfAppCluster_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_FindIfAppCluster_1:
        JZ        ??bdb_FindIfAppCluster_2
// 1038     {
// 1039       return ( SUCCESS );
// 1040     }
// 1041   }
        INC       R0
        MOV       A,R0
        CLR       C
        SUBB      A,#0x18
        JC        ??bdb_FindIfAppCluster_0
// 1042   
// 1043   ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
// 1044   
// 1045   for ( i = 0; i < ClusterCnt; i++ )
        MOV       R0,#0x0
// 1046   {
// 1047     if ( bdb_ZclType2Clusters[i] == ClusterId )
??bdb_FindIfAppCluster_3:
        MOV       A,R0
        ADD       A,0xE0 /* A   */
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       A,#bdb_ZclType2Clusters & 0xff
        ADD       A,R4
        MOV       DPL,A
        MOV       A,#(bdb_ZclType2Clusters >> 8) & 0xff
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_FindIfAppCluster_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_FindIfAppCluster_4:
        JNZ       ??bdb_FindIfAppCluster_5
// 1048     {
// 1049       return ( SUCCESS );
??bdb_FindIfAppCluster_2:
        MOV       R1,#0x0
        SJMP      ??bdb_FindIfAppCluster_6
// 1050     }
// 1051   }
??bdb_FindIfAppCluster_5:
        INC       R0
        MOV       A,R0
        CLR       C
        SUBB      A,#0x31
        JC        ??bdb_FindIfAppCluster_3
// 1052   
// 1053   // If not found, take it as application cluster it will be filtered
// 1054   // by simple descriptor at some point
// 1055   return ( FAILURE );
        MOV       R1,#0x1
??bdb_FindIfAppCluster_6:
        LJMP      ??Subroutine39_0 & 0xFFFF
// 1056 }
          CFI EndBlock cfiBlock331
// 1057 
// 1058 
// 1059 /*********************************************************************
// 1060  * @fn      bdb_getRespondentRetry
// 1061  *
// 1062  * @brief   Get the next Respondant entry to retry
// 1063  *
// 1064  * @param   pHead - pointer to a pointer of the list head
// 1065  *
// 1066  * @return  respondant entry if found, otherwise NULL
// 1067  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1068 bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead)
bdb_getRespondentRetry:
          CFI Block cfiBlock332 Using cfiCommon0
          CFI Function bdb_getRespondentRetry
        CODE
// 1069 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1070   bdbFindingBindingRespondent_t *pTemp;
// 1071   
// 1072   pTemp = pRespondentHead;
        SJMP      ??CrossCallReturnLabel_63
// 1073   
// 1074   while(pTemp != NULL)
// 1075   {
// 1076     //does the next entry requires to perform an attempt on simple desc req or IEEE addr req?
// 1077     if((pTemp->attempts & ~FINDING_AND_BINDING_MISSING_IEEE_ADDR) < FINDING_AND_BINDING_MAX_ATTEMPTS)
// 1078     {
// 1079       return pTemp;
// 1080     }
// 1081    
// 1082     pTemp = pTemp->pNext;
??bdb_getRespondentRetry_0:
        MOV       A,R2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_getRespondentRetry_1
        MOV       A,R2
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_44:
        ANL       A,#0x7f
        CLR       C
        SUBB      A,#0x4
        JNC       ??bdb_getRespondentRetry_0
        SJMP      ??bdb_getRespondentRetry_2
// 1083   }
// 1084   return NULL;
??bdb_getRespondentRetry_1:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_getRespondentRetry_2:
        LJMP      ??Subroutine39_0 & 0xFFFF
// 1085 }
          CFI EndBlock cfiBlock332

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond333 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function bdb_getRespondentRetry
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond334) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond334) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond334) CFA_SP SP+-7
          CFI Block cfiPicker335 Using cfiCommon1
          CFI (cfiPicker335) NoFunction
          CFI (cfiPicker335) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_48:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiPicker335

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond336 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond337 Using cfiCommon0
          CFI (cfiCond337) Function bdb_ProcessIEEEAddrRsp
          CFI (cfiCond337) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_43
          CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond337) CFA_SP SP+-4
          CFI (cfiCond337) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function bdb_getRespondentRetry
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_44
          CFI (cfiCond338) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond338) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond338) CFA_SP SP+-9
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond336
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339
// 1086 
// 1087 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1088 bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress)
bdb_findRespondentNode:
          CFI Block cfiBlock340 Using cfiCommon0
          CFI Function bdb_findRespondentNode
        CODE
// 1089 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1090   bdbFindingBindingRespondent_t* pTemp = pRespondentHead;
        MOV       DPTR,#pRespondentHead
        SJMP      ??bdb_findRespondentNode_0
// 1091   
// 1092   while(pTemp != NULL)  
// 1093   {
// 1094     if((pTemp->data.addr.shortAddr == shortAddress) && (pTemp->data.endPoint == endpoint))
// 1095     {
// 1096       return pTemp;
// 1097     }
// 1098     
// 1099     pTemp = pTemp->pNext;
??bdb_findRespondentNode_1:
        MOV       A,R4
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
??bdb_findRespondentNode_0:
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_findRespondentNode_2
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_findRespondentNode_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_findRespondentNode_3:
        JNZ       ??bdb_findRespondentNode_1
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??bdb_findRespondentNode_1
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        SJMP      ??bdb_findRespondentNode_4
// 1100   }
// 1101   
// 1102   return NULL;
??bdb_findRespondentNode_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_findRespondentNode_4:
        LJMP      ??Subroutine39_0 & 0xFFFF
// 1103 }
          CFI EndBlock cfiBlock340

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for grpName>`:
        DATA8
        DB 71
        DB 114
        DB 111
        DB 117
        DB 112
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbIndentifyActiveEndpoint>`:
        DATA8
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zcl_Groups_Options>`:
        DATA16
        DW 4
        DATA8
        DB 16

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e7:
        DD 999

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SetIdentifyActiveEndpoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SetIdentifyActiveEndpoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setEpDescListToActiveEndpoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setEpDescListToActiveEndpoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessIEEEAddrRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessIEEEAddrRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StopInitiatorFindingBinding::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StopInitiatorFindingBinding

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_checkMatchingEndpoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_checkMatchingEndpoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessSimpleDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclFindingBindingEpType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclFindingBindingEpType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclFindingBindingAddBindEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclFindingBindingAddBindEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_exitFindingBindingWStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_exitFindingBindingWStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclSimpleDescClusterListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclSimpleDescClusterListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterIdentifyTimeChangeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterIdentifyTimeChangeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GetFBInitiatorStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GetFBInitiatorStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterBindNotificationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterBindNotificationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendIdentifyQuery::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendIdentifyQuery

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyQueryCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyQueryCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_FindIfAppCluster::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_FindIfAppCluster

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getRespondentRetry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getRespondentRetry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_findRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_findRespondentNode

        END
// 1104 
// 1105 #endif  
// 1106 
// 1107 /*********************************************************************
// 1108 *********************************************************************/
// 
// 2 861 bytes in segment BANKED_CODE
//   114 bytes in segment BANK_RELAYS
//    10 bytes in segment XDATA_I
//    10 bytes in segment XDATA_ID
//   167 bytes in segment XDATA_ROM_C
//    16 bytes in segment XDATA_Z
// 
//   124 bytes of CODE     memory
//   155 bytes of CONST    memory (+ 12 bytes shared)
// 2 861 bytes of HUGECODE memory
//    26 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
