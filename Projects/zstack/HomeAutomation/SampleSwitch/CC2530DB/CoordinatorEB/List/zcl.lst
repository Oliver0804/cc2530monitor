###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               08/Feb/2022  22:10:23
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\usertemp\AppData\Local\Temp\EW9D6C.tmp ("I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\zcl\zcl.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D ZCL_REPORT -D
#        HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D xHAL_LCD_OLED12864 -D
#        HAL_ADC=TRUE -D HAL_UART=TRUE -D INT_HEAP_LEN=2048 -lC
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl.lst
#    Object file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl.r51
#
###############################################################################

I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52             
     53          #ifdef BDB_REPORTING
     54            #include "bdb_Reporting.h"
     55          #endif
     56          #include "bdb_interface.h"
     57          
     58          #include "zcl_green_power.h"
     59          
     60             
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          /*** Frame Control ***/
     65          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     66          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     67          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     68          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     69          
     70          /*** Attribute Access Control ***/
     71          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     72          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     73          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     74          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     75          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     76          #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
     77          
     78          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     79          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     80          
     81          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     82                                                  (zclHdr).fc.manuSpecific == 0          && \
     83                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     84          
     85          // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
     86          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     87                                                  (cmd) == ZCL_CMD_WRITE                  || \
     88                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     89                                                  (cmd) == ZCL_CMD_WRITE_NO_RSP           || \
     90                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     91                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     92                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     93                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     94                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     95                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     96                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     97          #define  ZCL_VALID_MIN_HEADER_LEN  3
     98          
     99          /*********************************************************************
    100           * CONSTANTS
    101           */
    102          
    103          /*********************************************************************
    104           * TYPEDEFS
    105           */
    106          typedef struct zclLibPlugin
    107          {
    108            struct zclLibPlugin *next;
    109            uint16              startClusterID;    // starting cluster ID
    110            uint16              endClusterID;      // ending cluster ID
    111            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    112          } zclLibPlugin_t;
    113          
    114          // Command record list
    115          typedef struct zclCmdRecsList
    116          {
    117            struct zclCmdRecsList *pNext;
    118            uint8                 endpoint;
    119            uint8                 numCommands;
    120            CONST zclCommandRec_t *pCmdRecs;
    121          } zclCmdRecsList_t;
    122          
    123          
    124          // Cluster option list item
    125          typedef struct zclClusterOptionList
    126          {
    127            struct zclClusterOptionList *next;
    128            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    129            uint8                       numOptions; // Number of the following records
    130            zclOptionRec_t              *options;   // option records
    131          } zclClusterOptionList;
    132          
    133          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    134          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    135          
    136          typedef struct
    137          {
    138            zclParseInProfileCmd_t   pfnParseInProfile;
    139            zclProcessInProfileCmd_t pfnProcessInProfile;
    140          } zclCmdItems_t;
    141          
    142          
    143          // List record for external handler for unhandled ZCL Foundation commands/rsps
    144          typedef struct zclExternalFoundationHandlerList
    145          {
    146              struct zclExternalFoundationHandlerList *next;
    147              uint8 zcl_ExternalTaskID;
    148              uint8 zcl_ExternalEndPoint;
    149          } zclExternalFoundationHandlerList;
    150          
    151          
    152          /*********************************************************************
    153           * GLOBAL VARIABLES
    154           */
    155          
    156          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          #endif
    159          
    160          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          // ZCL Sequence number
    164          //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 zcl_InSeqNum = 0x00;
   \                     zcl_InSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          
    171          /*********************************************************************
    172           * EXTERNAL VARIABLES
    173           */
    174          
    175          /*********************************************************************
    176           * EXTERNAL FUNCTIONS
    177           */
    178          
    179          /*********************************************************************
    180           * LOCAL VARIABLES
    181           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    183          
    184          #if defined ( ZCL_DISCOVER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
   \                     gpCmdList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    186          #endif
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    190          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    192          
    193          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    195          #endif
    196          
    197          /*********************************************************************
    198           * LOCAL FUNCTIONS
    199           */
    200          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    201          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    202          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    203          
    204          #if !defined ( ZCL_STANDALONE )
    205          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    206          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    207          #endif // !defined ( ZCL_STANDALONE )
    208          
    209          #if defined ( ZCL_DISCOVER )
    210            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    211          #endif
    212          
    213          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    214          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    215          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    216          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    217          
    218          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    219          
    220          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    221          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    222          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    223          #endif // ZCL_READ || ZCL_WRITE
    224          
    225          #ifdef ZCL_READ
    226          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    227          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    228          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    229                                                   uint8 *pAttrData, uint16 *pDataLen );
    230          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    231          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    232          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    233          #endif // ZCL_READ
    234          
    235          #ifdef ZCL_WRITE
    236          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    237                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    238          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    239                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    240          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    241          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    242          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    243          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    244          #endif // ZCL_WRITE
    245          
    246          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    247          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    248          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    249          #endif
    250          
    251          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    252          
    253          #ifdef ZCL_DISCOVER
    254          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    255          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    256          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    257          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    258          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    259          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    260          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    261          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    262          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    263          #endif // ZCL_DISCOVER
    264          
    265          /*********************************************************************
    266           * Parse Profile Command Function Table
    267           */
    268          

   \                                 In  segment CODE_C, align 1
    269          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW `??zclParseInReadCmd::?relay`
   \   000002   ....         DW `??zclProcessInReadCmd::?relay`
   \   000004   ....         DW `??zclParseInReadRspCmd::?relay`
   \   000006   ....         DW `??zcl_HandleExternal::?relay`
   \   000008   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000A   ....         DW `??zclProcessInWriteCmd::?relay`
   \   00000C   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000E   ....         DW `??zclProcessInWriteUndividedCmd::?relay`
   \   000010   ....         DW `??zclParseInWriteRspCmd::?relay`
   \   000012   ....         DW `??zcl_HandleExternal::?relay`
   \   000014   ....         DW `??zclParseInWriteCmd::?relay`
   \   000016   ....         DW `??zclProcessInWriteCmd::?relay`
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   ....         DW `??zclParseInReportCmd::?relay`
   \   00002A   ....         DW `??zcl_HandleExternal::?relay`
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000032   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000034   ....         DW `??zclParseInDiscAttrsRspCmd::?relay`
   \   000036   ....         DW `??zcl_HandleExternal::?relay`
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   000046   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000048   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   00004A   ....         DW `??zcl_HandleExternal::?relay`
   \   00004C   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   00004E   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000050   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   000052   ....         DW `??zcl_HandleExternal::?relay`
   \   000054   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000056   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000058   ....         DW `??zclParseInDiscAttrsExtRspCmd::?relay`
   \   00005A   ....         DW `??zcl_HandleExternal::?relay`
    270          {
    271          #ifdef ZCL_READ
    272            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    273            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    274          #else
    275            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    276            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    277          #endif // ZCL_READ
    278          
    279          #ifdef ZCL_WRITE
    280            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    281            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    282            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    283            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    284          #else
    285            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    286            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    287            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    289          #endif // ZCL_WRITE
    290          
    291          #ifdef ZCL_REPORTING_DEVICE
    292              /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    293          #else
    294              /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    295          #endif
    296          
    297          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    298              /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    299          #else
    300              /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    301          #endif
    302          
    303          #ifdef ZCL_REPORTING_DEVICE
    304              /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    305          #else
    306              /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    307          #endif
    308          
    309          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    310              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    311          #else
    312              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    313          #endif
    314          
    315          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    316              /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    317          #else
    318              /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    319          #endif
    320          
    321            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    322          
    323          #ifdef ZCL_DISCOVER
    324            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    325            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    326            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    327            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    328            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    329            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    330            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    331            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    332            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    333            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    334            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    335          #else
    336            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    337            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    338            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    339            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    340            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    341            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    342            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    343            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    344            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    345            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    346            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    347          #endif // ZCL_DISCOVER
    348          };
    349          
    350          /*********************************************************************
    351           * PUBLIC FUNCTIONS
    352           *********************************************************************/
    353          
    354          #if !defined ( ZCL_STANDALONE )
    355          /*********************************************************************
    356           * @fn          zcl_Init
    357           *
    358           * @brief       Initialization function for the zcl layer.
    359           *
    360           * @param       task_id - ZCL task id
    361           *
    362           * @return      none
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    365          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    366            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    367          }
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    368          #endif
    369          
    370          #if !defined ( ZCL_STANDALONE )
    371          /*********************************************************************
    372           * @fn          zcl_event_loop
    373           *
    374           * @brief       Event Loop Processor for zcl.
    375           *
    376           * @param       task_id - task id
    377           * @param       events - event bitmap
    378           *
    379           * @return      unprocessed events
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    383            uint8 *msgPtr;
    384          
    385            (void)task_id;  // Intentionally unreferenced parameter
    386          
    387            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6049         JZ        ??zcl_event_loop_0
    388            {
    389              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   800A         SJMP      ??zcl_event_loop_1
    390              while ( msgPtr != NULL )
    391              {
    392                uint8 dealloc = TRUE;
    393          
    394                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    395                {
    396                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000014                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000014   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
    397                }
    398                else
    399                {
    400                  uint8 taskID;
    401                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
    402          
    403                  if ( taskID != TASK_NO_TASK )
    404                  {
    405                    // send it to another task to process.
    406                    osal_msg_send( taskID, msgPtr );
    407                    dealloc = FALSE;
    408                  }
    409                }
    410          
    411                // Release the memory
    412                if ( dealloc )
    413                {
    414                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   AA..         MOV       R2,?V0
   \   000019   AB..         MOV       R3,?V1
   \   00001B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    415                }
    416          
    417                // Next
    418                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   90....       MOV       DPTR,#zcl_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   E5..         MOV       A,?V0
   \   00002C   45..         ORL       A,?V1
   \   00002E   6022         JZ        ??zcl_event_loop_4
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   E0           MOVX      A,@DPTR
   \   000037   641A         XRL       A,#0x1a
   \   000039   AA..         MOV       R2,?V0
   \   00003B   AB..         MOV       R3,?V1
   \   00003D   60D5         JZ        ??zcl_event_loop_2
   \   00003F                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   00003F   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000042   E9           MOV       A,R1
   \   000043   F9           MOV       R1,A
   \   000044   74FF         MOV       A,#-0x1
   \   000046   69           XRL       A,R1
   \   000047   60CE         JZ        ??zcl_event_loop_3
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   AA..         MOV       R2,?V0
   \   00004B   AB..         MOV       R3,?V1
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000050   80CC         SJMP      ??zcl_event_loop_1
    419              }
    420          
    421              // return unprocessed events
    422              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   6480         XRL       A,#0x80
   \   000057   FB           MOV       R3,A
   \   000058   02....       LJMP      ??zcl_event_loop_5 & 0xFFFF
    423            }
    424          
    425          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    426            if ( events & ZCL_DATABUF_SEND )
   \                     ??zcl_event_loop_0:
   \   00005B   EA           MOV       A,R2
   \   00005C   5420         ANL       A,#0x20
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    427            {
    428              gpNotificationMsg_t *gpNotification = NULL;
    429              gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    430              uint8 appId;
    431              uint8 nwkSeqNum;
    432              uint16 nwkAddr;
    433              
    434              gpNotification = gp_GetHeadNotificationMsg( );
   \   000063                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   000063   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   000066   8A..         MOV       ?V6,R2
   \   000068   8B..         MOV       ?V7,R3
    435              
    436              if ( gpNotification == NULL )
   \   00006A   EA           MOV       A,R2
   \   00006B   4B           ORL       A,R3
   \   00006C   7003         JNZ       $+5
   \   00006E   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    437              {
    438                return 0;
    439              }
    440              
    441              pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
   \   000071   EA           MOV       A,R2
   \   000072   240D         ADD       A,#0xd
   \   000074   F582         MOV       DPL,A
   \   000076   E4           CLR       A
   \   000077   35..         ADDC      A,?V7
   \   000079   F583         MOV       DPH,A
   \   00007B   12....       LCALL     ??Subroutine262_0 & 0xFFFF
    442              appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
   \                     ??CrossCallReturnLabel_576:
   \   00007E   EE           MOV       A,R6
   \   00007F   2402         ADD       A,#0x2
   \   000081   F5..         MOV       ?V4,A
   \   000083   E4           CLR       A
   \   000084   3F           ADDC      A,R7
   \   000085   F5..         MOV       ?V5,A
   \   000087   85..82       MOV       DPL,?V4
   \   00008A   F583         MOV       DPH,A
   \   00008C   12....       LCALL     ??Subroutine285_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_701:
   \   00008F   5407         ANL       A,#0x7
   \   000091   F8           MOV       R0,A
    443              
    444              // To save the NIB nwk sequense number and use the GP alias nwk sequence number
    445              // for the GP notification
    446              nwkSeqNum = _NIB.SequenceNum;
   \   000092   90....       MOV       DPTR,#_NIB
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V3,A
    447              _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   90....       MOV       DPTR,#_NIB
   \   0000A0   F0           MOVX      @DPTR,A
    448              
    449              // To save the NIB nwk address and use the GP alias nwk address for the GP notification
    450              nwkAddr = _NIB.nwkDevAddress;
   \   0000A1   90....       MOV       DPTR,#_NIB + 20
   \   0000A4   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   0000A7   12....       LCALL     ?Subroutine37 & 0xFFFF
    451              
    452              if( appId == GP_OPT_APP_ID_GPD )
   \                     ??CrossCallReturnLabel_486:
   \   0000AA   E8           MOV       A,R0
   \   0000AB   701C         JNZ       ??zcl_event_loop_7
    453              {
    454                osal_memcpy( &_NIB.nwkDevAddress,( pCmdPayloadMsgCurr->pMsg + sizeof( uint16 ) ), sizeof(uint16) );
   \   0000AD                ; Setup parameters for call to function osal_memcpy
   \   0000AD   85..82       MOV       DPL,?V4
   \   0000B0   85..83       MOV       DPH,?V5
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   2402         ADD       A,#0x2
   \   0000B6   12....       LCALL     ?Subroutine120 & 0xFFFF
    455              }
   \                     ??CrossCallReturnLabel_232:
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BC   7C02         MOV       R4,#0x2
   \   0000BE   7D00         MOV       R5,#0x0
   \   0000C0   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000C2   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000C4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C7   801F         SJMP      ??zcl_event_loop_8
    456              else if( appId == GP_OPT_APP_ID_IEEE )
   \                     ??zcl_event_loop_7:
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   68           XRL       A,R0
   \   0000CC   701F         JNZ       ??zcl_event_loop_9
    457              {
    458                osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
   \   0000CE                ; Setup parameters for call to function osal_revmemcpy
   \   0000CE   85..82       MOV       DPL,?V4
   \   0000D1   85..83       MOV       DPH,?V5
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   2408         ADD       A,#0x8
   \   0000D7   12....       LCALL     ?Subroutine120 & 0xFFFF
    459              }
   \                     ??CrossCallReturnLabel_233:
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DD   7C02         MOV       R4,#0x2
   \   0000DF   7D00         MOV       R5,#0x0
   \   0000E1   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000E3   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000E5   12....       LCALL     `??osal_revmemcpy::?relay`; Banked call to: osal_revmemcpy
   \                     ??zcl_event_loop_8:
   \   0000E8   7403         MOV       A,#0x3
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
    460              
    461              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
    462                                    COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    463                                    TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
   \                     ??zcl_event_loop_9:
   \   0000ED                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0000ED   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   0000F0   E9           MOV       A,R1
   \   0000F1   F9           MOV       R1,A
   \   0000F2                ; Setup parameters for call to function zcl_SendCommand
   \   0000F2   85..82       MOV       DPL,?V4
   \   0000F5   85..83       MOV       DPH,?V5
   \   0000F8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000FB   8E82         MOV       DPL,R6
   \   0000FD   8F83         MOV       DPH,R7
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   F5..         MOV       ?V0,A
   \   000103   75..00       MOV       ?V1,#0x0
   \   000106   78..         MOV       R0,#?V0
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010B   E9           MOV       A,R1
   \   00010C   F5..         MOV       ?V0,A
   \   00010E   78..         MOV       R0,#?V0
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000113   E4           CLR       A
   \   000114   F5..         MOV       ?V0,A
   \   000116   78..         MOV       R0,#?V0
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   75..01       MOV       ?V0,#0x1
   \   00011E   78..         MOV       R0,#?V0
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000123   75..00       MOV       ?V0,#0x0
   \   000126   78..         MOV       R0,#?V0
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012B   75..01       MOV       ?V0,#0x1
   \   00012E   78..         MOV       R0,#?V0
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000133   75..00       MOV       ?V0,#0x0
   \   000136   78..         MOV       R0,#?V0
   \   000138   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013B   7C21         MOV       R4,#0x21
   \   00013D   7D00         MOV       R5,#0x0
   \   00013F   AA..         MOV       R2,?V6
   \   000141   AB..         MOV       R3,?V7
   \   000143   79F2         MOV       R1,#-0xe
   \   000145   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
    464              
    465              // Restore the NIB nwk sequence number
    466              _NIB.SequenceNum = nwkSeqNum;
   \   00014B   E5..         MOV       A,?V3
   \   00014D   90....       MOV       DPTR,#_NIB
   \   000150   12....       LCALL     ??Subroutine277_0 & 0xFFFF
    467              
    468              // Restore the NIB nwk address
    469              _NIB.nwkDevAddress = nwkAddr;
   \                     ??CrossCallReturnLabel_656:
   \   000153   F9           MOV       R1,A
   \   000154   90....       MOV       DPTR,#_NIB + 20
   \   000157   12....       LCALL     ??Subroutine271_0 & 0xFFFF
    470              
    471              gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
   \                     ??CrossCallReturnLabel_617:
   \   00015A                ; Setup parameters for call to function gp_GetPHeadNotification
   \   00015A   12....       LCALL     `??gp_GetPHeadNotification::?relay`; Banked call to: gp_GetPHeadNotification
   \   00015D                ; Setup parameters for call to function gp_NotificationMsgClean
   \   00015D   12....       LCALL     `??gp_NotificationMsgClean::?relay`; Banked call to: gp_NotificationMsgClean
    472              
    473              if ( gp_GetHeadNotificationMsg ( ) != NULL )
   \   000160                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   000160   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   000163   EA           MOV       A,R2
   \   000164   4B           ORL       A,R3
   \   000165   6017         JZ        ??zcl_event_loop_6
    474              {
    475                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   000167                ; Setup parameters for call to function osal_start_timerEx
   \   000167   90....       MOV       DPTR,#__Constant_32
   \   00016A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00016D   7A20         MOV       R2,#0x20
   \   00016F   7B00         MOV       R3,#0x0
   \   000171   90....       MOV       DPTR,#zcl_TaskID
   \   000174   E0           MOVX      A,@DPTR
   \   000175   F9           MOV       R1,A
   \   000176   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000179   7404         MOV       A,#0x4
   \   00017B   12....       LCALL     ?DEALLOC_XSTACK8
    476              }
    477            }
    478          #endif
    479          
    480            // Discard unknown events
    481            return 0;
   \                     ??zcl_event_loop_6:
   \   00017E   7A00         MOV       R2,#0x0
   \   000180   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   000182                REQUIRE ?Subroutine8
   \   000182                ; // Fall through to label ?Subroutine8
    482          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine245_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   F5..         MOV       ?V0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V1,A
   \   000008   75..00       MOV       ?V2,#0x0
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine246_0
   \   000003                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine248_0
   \   000006                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_751:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   12....       LCALL     ??Subroutine287_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_740:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine225:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine271_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine272_0
   \   000001                ; // Fall through to label ??Subroutine272_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine272_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine277_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine212 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine212:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine278_0
   \   000006                ; // Fall through to label ??Subroutine278_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine278_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine285_0:
   \   000000   12....       LCALL     ??Subroutine286_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_714:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine286_0:
   \   000000   12....       LCALL     ??Subroutine294_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_758:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine287_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine294_0:
   \   000000   12....       LCALL     ?Subroutine225 & 0xFFFF
   \                     ??CrossCallReturnLabel_761:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    483          #endif
    484          
    485          #if !defined ( ZCL_STANDALONE )
    486          /*********************************************************************
    487           * @fn      zcl_registerForMsg
    488           *
    489           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    490           *          messages that aren't processed to one task (if a task is
    491           *          registered).
    492           *
    493           * @param   taskId - task Id of the Application where commands will be sent to
    494           *
    495           * @return  TRUE if task registeration successful, FALSE otherwise
    496           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    498          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    499            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
    500          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000003                REQUIRE ??Subroutine250_0
   \   000003                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    501          
    502          /*********************************************************************
    503           * @fn      zcl_registerForMsgExt
    504           *
    505           * @brief   This function enables a Task to register to recieve all
    506           *          incoming Foundation Command/Response messages, for a particular
    507           *          End Point, that aren't processed by ZCL.
    508           *
    509           *          NOTE: Any Task registered for a unique end point will take
    510           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    511           *          value.  ie. If task A registers for End Point 1, task B registers
    512           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    513           *          sent to Task A and NOT Task B.
    514           *
    515           * @param   taskId - task Id of the Application where commands will be sent to
    516           * @param   endPointId - end point Id of interest
    517           *
    518           * @return  TRUE if task registeration successful, FALSE otherwise
    519           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    521          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    522            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   02....       LJMP      ?Subroutine2 & 0xFFFF
    523          }
    524          
    525          /*********************************************************************
    526           * @fn      zcl_addExternalFoundationHandler
    527           *
    528           * @brief   This function adds a record to the internal list of external
    529           *          handlers of unhandled incoming Foundation Command/Response messages.
    530           *
    531           * @param   taskId - task Id of the Application where commands will be sent to
    532           * @param   endPointId - end point Id of interest
    533           *
    534           * @return  TRUE if task registeration successful, FALSE otherwise
    535           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    537          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    538            zclExternalFoundationHandlerList *pNewItem;
    539            zclExternalFoundationHandlerList *pLoop;
    540            zclExternalFoundationHandlerList *pLoopPrev;
    541          
    542            // Fill in the new endpoint registrant list
    543            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     ?Subroutine213 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000010   A8..         MOV       R0,?V0
   \   000012   A9..         MOV       R1,?V1
    544            if ( pNewItem == NULL )
   \   000014   EA           MOV       A,R2
   \   000015   49           ORL       A,R1
   \   000016   603B         JZ        ??zcl_addExternalFoundationHandler_0
    545            {
    546              return ( false );
    547            }
    548          
    549            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   000018   EF           MOV       A,R7
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   F0           MOVX      @DPTR,A
    550            pNewItem->zcl_ExternalTaskID = taskId;
   \   000021   EE           MOV       A,R6
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   12....       LCALL     ?Subroutine177 & 0xFFFF
    551            pNewItem->next = NULL;
   \                     ??CrossCallReturnLabel_493:
   \   00002A   E4           CLR       A
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   F0           MOVX      @DPTR,A
    552          
    553            // Add to the list
    554            if ( externalEndPointHandlerList == NULL )
   \   00002E   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000031   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000034   7009         JNZ       ??zcl_addExternalFoundationHandler_1
    555            {
    556              externalEndPointHandlerList = pNewItem;
   \   000036   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000039   E8           MOV       A,R0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E9           MOV       A,R1
   \   00003D   8046         SJMP      ??zcl_addExternalFoundationHandler_2
    557            }
    558            else
    559            {
    560              // make sure no one else tried to register for this endpoint
    561              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FB           MOV       R3,A
    562              pLoopPrev = externalEndPointHandlerList;
    563          
    564              while ( pLoop != NULL )
    565              {
    566                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
   \                     ??zcl_addExternalFoundationHandler_3:
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   6F           XRL       A,R7
   \   00004A   700B         JNZ       ??zcl_addExternalFoundationHandler_4
    567                {
    568                  zcl_mem_free(pNewItem);
   \   00004C                ; Setup parameters for call to function osal_mem_free
   \   00004C   E8           MOV       A,R0
   \   00004D   FA           MOV       R2,A
   \   00004E   E9           MOV       A,R1
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    569                  return ( false );
   \                     ??zcl_addExternalFoundationHandler_0:
   \   000053   7900         MOV       R1,#0x0
   \   000055   8031         SJMP      ??zcl_addExternalFoundationHandler_5
    570                }
    571                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   000057   EA           MOV       A,R2
   \   000058   FC           MOV       R4,A
   \   000059   EB           MOV       A,R3
   \   00005A   FD           MOV       R5,A
    572                pLoop = pLoop->next;
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   12....       LCALL     ??Subroutine235_0 & 0xFFFF
    573              }
   \                     ??CrossCallReturnLabel_405:
   \   000062   70DD         JNZ       ??zcl_addExternalFoundationHandler_3
    574          
    575              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \   000064   74FF         MOV       A,#-0x1
   \   000066   6F           XRL       A,R7
   \   000067   700C         JNZ       ??zcl_addExternalFoundationHandler_6
    576              {
    577                // put new registration at the end of the list
    578                pLoopPrev->next = pNewItem;
   \   000069   8C82         MOV       DPL,R4
   \   00006B   8D83         MOV       DPH,R5
   \   00006D   12....       LCALL     ?Subroutine40 & 0xFFFF
    579                pNewItem->next = NULL;
    580              }
   \                     ??CrossCallReturnLabel_55:
   \   000070   E4           CLR       A
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   8010         SJMP      ??zcl_addExternalFoundationHandler_2
    581              else
    582              {
    583                // put new registration at the front of the list
    584                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_6:
   \   000075   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000078   12....       LCALL     ??Subroutine259_0 & 0xFFFF
    585                externalEndPointHandlerList = pNewItem;
   \                     ??CrossCallReturnLabel_521:
   \   00007B   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00007E   12....       LCALL     ?Subroutine40 & 0xFFFF
    586                pNewItem->next = temp;
    587              }
    588            }
   \                     ??CrossCallReturnLabel_56:
   \   000081   EA           MOV       A,R2
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   EB           MOV       A,R3
   \                     ??zcl_addExternalFoundationHandler_2:
   \   000085   F0           MOVX      @DPTR,A
    589          
    590            return ( true );
   \   000086   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000088   02....       LJMP      ??Subroutine251_0 & 0xFFFF
    591          
    592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine227_0
   \   000001                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine213:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    593          
    594          /*********************************************************************
    595           * @fn      zcl_getExternalFoundationHandler
    596           *
    597           * @brief   This function retrieves the Task ID of the task registered
    598           *          to received unhandled incoming Foundation Command/Response messages
    599           *          for a particular End Point ID.
    600           *
    601           * @param   pInMsg - recevied ZCL command
    602           *
    603           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    604           *          TASK_NO_TASK.
    605           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    606          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    607          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    608            zclExternalFoundationHandlerList *pLoop;
    609            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
    610          
    611            // make sure no one else tried to register for this endpoint
    612            pLoop = externalEndPointHandlerList;
   \   00000D   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000010   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    613          
    614            while ( pLoop != NULL )
    615            {
    616              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    617                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    618              {
    619                return ( pLoop->zcl_ExternalTaskID );
    620              }
    621              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000012   8882         MOV       DPL,R0
   \   000014   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000016   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000019   601C         JZ        ??zcl_getExternalFoundationHandler_2
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   EA           MOV       A,R2
   \   000025   6B           XRL       A,R3
   \   000026   6005         JZ        ??zcl_getExternalFoundationHandler_3
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   6B           XRL       A,R3
   \   00002B   70E5         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    622            }
    623          
    624            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   000037   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   000039   02....       LJMP      ?Subroutine0 & 0xFFFF
    625          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_695:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL     ?Subroutine224 & 0xFFFF
   \                     ??CrossCallReturnLabel_733:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine224:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine206:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    626          #endif
    627          
    628          #if !defined ( ZCL_STANDALONE )
    629          /*********************************************************************
    630           * @fn      zcl_HandleExternal
    631           *
    632           * @brief
    633           *
    634           * @param   pInMsg - incoming message to process
    635           *
    636           * @return  TRUE
    637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    638          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    639          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    640            zclIncomingMsg_t *pCmd;
    641            uint8 taskID;
    642          
    643            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000010   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000013   E9           MOV       A,R1
   \   000014   F5..         MOV       ?V0,A
    644          
    645            if ( taskID == TASK_NO_TASK )
   \   000016   74FF         MOV       A,#-0x1
   \   000018   69           XRL       A,R1
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    646            {
    647              return ( TRUE );
    648            }
    649          
    650            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   00001E                ; Setup parameters for call to function osal_msg_allocate
   \   00001E   7A19         MOV       R2,#0x19
   \   000020   7B00         MOV       R3,#0x0
   \   000022   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    651            if ( pCmd != NULL )
   \   000025   EA           MOV       A,R2
   \   000026   4B           ORL       A,R3
   \   000027   6079         JZ        ??zcl_HandleExternal_0
    652            {
    653              // fill in the message
    654              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   7434         MOV       A,#0x34
   \   00002F   12....       LCALL     ?Subroutine48 & 0xFFFF
    655              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_68:
   \   000032   A3           INC       DPTR
   \   000033   EA           MOV       A,R2
   \   000034   2402         ADD       A,#0x2
   \   000036   FC           MOV       R4,A
   \   000037   E4           CLR       A
   \   000038   3B           ADDC      A,R3
   \   000039   FD           MOV       R5,A
   \   00003A   7406         MOV       A,#0x6
   \   00003C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    656              pCmd->clusterId = pInMsg->msg->clusterId;
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000046   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   12....       LCALL     ?Subroutine44 & 0xFFFF
    657              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_62:
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   EA           MOV       A,R2
   \   00005F   240A         ADD       A,#0xa
   \   000061   FC           MOV       R4,A
   \   000062   E4           CLR       A
   \   000063   3B           ADDC      A,R3
   \   000064   FD           MOV       R5,A
   \   000065   740C         MOV       A,#0xc
   \   000067   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    658              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000071   C0E0         PUSH      A
   \   000073   EA           MOV       A,R2
   \   000074   2416         ADD       A,#0x16
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   3B           ADDC      A,R3
   \   00007A   F583         MOV       DPH,A
   \   00007C   D0E0         POP       A
   \   00007E   F0           MOVX      @DPTR,A
    659              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00007F   EE           MOV       A,R6
   \   000080   240C         ADD       A,#0xc
   \   000082   F8           MOV       R0,A
   \   000083   E4           CLR       A
   \   000084   3F           ADDC      A,R7
   \   000085   F9           MOV       R1,A
   \   000086   8882         MOV       DPL,R0
   \   000088   F583         MOV       DPH,A
   \   00008A   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00008D   EA           MOV       A,R2
   \   00008E   2417         ADD       A,#0x17
   \   000090   F582         MOV       DPL,A
   \   000092   E4           CLR       A
   \   000093   3B           ADDC      A,R3
   \   000094   F583         MOV       DPH,A
   \   000096   12....       LCALL     ?Subroutine44 & 0xFFFF
    660              
    661          #ifdef BDB_REPORTING
    662              if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
    663              {
    664                bdb_ProcessInConfigReportCmd(pCmd);
    665                return TRUE;          
    666              }
    667              if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
    668              {
    669                bdb_ProcessInReadReportCfgCmd(pCmd);
    670                return TRUE;
    671              }
    672          #endif
    673              // Application will free the attrCmd buffer
    674              pInMsg->attrCmd = NULL;
   \                     ??CrossCallReturnLabel_63:
   \   000099   E4           CLR       A
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   F0           MOVX      @DPTR,A
    675          
    676              /* send message through task message */
    677              osal_msg_send( taskID, (uint8 *)pCmd );
   \   00009D                ; Setup parameters for call to function osal_msg_send
   \   00009D   A9..         MOV       R1,?V0
   \   00009F   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    678            }
    679          
    680            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   0000A2   7901         MOV       R1,#0x1
   \   0000A4   02....       LJMP      ?Subroutine4 & 0xFFFF
    681          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EC           MOV       A,R4
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   ED           MOV       A,R5
   \   000004   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine237_0
   \   000002                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine238_0
   \   000002                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine205:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   12....       LCALL     ?Subroutine218 & 0xFFFF
   \                     ??CrossCallReturnLabel_784:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine218:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   12....       LCALL     ?Subroutine224 & 0xFFFF
   \                     ??CrossCallReturnLabel_736:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
    682          #endif
    683          
    684          
    685          /*********************************************************************
    686           * @fn          zcl_getRawAFMsg
    687           *
    688           * @brief       Call to get original unprocessed AF message
    689           *              (not parsed by ZCL).
    690           *
    691           *   NOTE:  This function can only be called during a ZCL callback function
    692           *          and the calling function must NOT change any data in the message.
    693           *
    694           * @param       none
    695           *
    696           * @return      pointer to original AF message, NULL if not processing
    697           *              AF message.
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    700          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    701            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   00000A   80..         SJMP      ?Subroutine0
    702          }
    703          
    704          /*********************************************************************
    705           * @fn          zcl_getParsedTransSeqNum
    706           *
    707           * @brief       Call to the get the transaction sequence number from
    708           *              the incoming message.
    709           *
    710           *   NOTE:  This function can only be called during a ZCL callback function
    711           *          and the calling function must NOT change any data in the message.
    712           *
    713           * @param       none
    714           *
    715           * @return      transaction sequence number.
    716           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    717          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    718          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    719            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0
    720          }
    721          
    722          /*********************************************************************
    723           * @fn          zcl_registerPlugin
    724           *
    725           * @brief       Add a Cluster Library handler
    726           *
    727           * @param       startClusterID - starting cluster ID
    728           * @param       endClusterID - ending cluster ID
    729           * @param       pfnHdlr - function pointer to incoming message handler
    730           *
    731           * @return      ZSuccess if OK
    732           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    734                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    736            zclLibPlugin_t *pNewItem;
    737            zclLibPlugin_t *pLoop;
    738          
    739            // Fill in the new profile list
    740            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   12....       LCALL     ??Subroutine228_0 & 0xFFFF
    741            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_379:
   \   000012   7004         JNZ       ??zcl_registerPlugin_0
    742            {
    743              return (ZMemError);
   \   000014   7910         MOV       R1,#0x10
   \   000016   803F         SJMP      ??CrossCallReturnLabel_33
    744            }
    745          
    746            // Fill in the plugin record.
    747            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   E4           CLR       A
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   12....       LCALL     ?Subroutine177 & 0xFFFF
    748            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_494:
   \   000021   12....       LCALL     ?Subroutine25 & 0xFFFF
    749            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_29:
   \   000024   EE           MOV       A,R6
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   EF           MOV       A,R7
   \   000028   F0           MOVX      @DPTR,A
    750            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   000029   740C         MOV       A,#0xc
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ??Subroutine248_0 & 0xFFFF
    751          
    752            // Find spot in list
    753            if (  plugins == NULL )
   \                     ??CrossCallReturnLabel_471:
   \   000038   90....       MOV       DPTR,#plugins
   \   00003B   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00003E   90....       MOV       DPTR,#plugins
   \   000041   6011         JZ        ??zcl_registerPlugin_1
    754            {
    755              plugins = pNewItem;
    756            }
    757            else
    758            {
    759              // Look for end of list
    760              pLoop = plugins;
   \   000043   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000046   8003         SJMP      ??zcl_registerPlugin_2
    761              while ( pLoop->next != NULL )
    762              {
    763                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   000048   EA           MOV       A,R2
   \   000049   FC           MOV       R4,A
   \   00004A   EB           MOV       A,R3
    764              }
   \                     ??zcl_registerPlugin_2:
   \   00004B   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   00004E   70F8         JNZ       ??zcl_registerPlugin_3
    765          
    766              // Put new item at end of list
    767              pLoop->next = pNewItem;
   \   000050   8C82         MOV       DPL,R4
   \   000052   8D83         MOV       DPH,R5
    768            }
   \                     ??zcl_registerPlugin_1:
   \   000054   12....       LCALL     ?Subroutine29 & 0xFFFF
    769          
    770            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_33:
   \   000057   02....       LJMP      ?Subroutine4 & 0xFFFF
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   A8..         MOV       R0,?V2
   \   00000B   A9..         MOV       R1,?V3
   \   00000D   EA           MOV       A,R2
   \   00000E   49           ORL       A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   A3           INC       DPTR
   \   000001   E5..         MOV       A,?V1
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   FD           MOV       R5,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine235_0
   \   000005                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   12....       LCALL     ??Subroutine287_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_739:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    772          
    773          #ifdef ZCL_DISCOVER
    774          /*********************************************************************
    775           * @fn          zcl_registerCmdList
    776           *
    777           * @brief       Register a Command List with ZCL Foundation
    778           *
    779           * @param       endpoint - endpoint the attribute list belongs to
    780           * @param       newCmdList - array of command records
    781           *
    782           * @return      ZSuccess if OK
    783           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    784          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
   \                     zcl_registerCmdList:
    785          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine150 & 0xFFFF
    786            zclCmdRecsList_t *pNewItem;
    787            zclCmdRecsList_t *pLoop;
    788          
    789            // Fill in the new profile list
    790            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
    791            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_377:
   \   000008   7004         JNZ       ??zcl_registerCmdList_0
    792            {
    793              return (ZMemError);
   \   00000A   7910         MOV       R1,#0x10
   \   00000C   8022         SJMP      ??CrossCallReturnLabel_34
    794            }
    795          
    796            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
   \                     ??zcl_registerCmdList_0:
   \   00000E   12....       LCALL     ?Subroutine13 & 0xFFFF
    797            pNewItem->endpoint = endpoint;
    798            pNewItem->numCommands = cmdListSize;
    799            pNewItem->pCmdRecs = newCmdList;
    800          
    801            // Find spot in list
    802            if ( gpCmdList == NULL )
   \                     ??CrossCallReturnLabel_7:
   \   000011   90....       MOV       DPTR,#gpCmdList
   \   000014   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000017   90....       MOV       DPTR,#gpCmdList
   \   00001A   6011         JZ        ??zcl_registerCmdList_1
    803            {
    804              gpCmdList = pNewItem;
    805            }
    806            else
    807            {
    808              // Look for end of list
    809              pLoop = gpCmdList;
   \   00001C   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00001F   8003         SJMP      ??zcl_registerCmdList_2
    810              while ( pLoop->pNext != NULL )
    811              {
    812                pLoop = pLoop->pNext;
   \                     ??zcl_registerCmdList_3:
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
    813              }
   \                     ??zcl_registerCmdList_2:
   \   000024   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000027   70F8         JNZ       ??zcl_registerCmdList_3
    814          
    815              // Put new item at end of list
    816              pLoop->pNext = pNewItem;
   \   000029   8C82         MOV       DPL,R4
   \   00002B   8D83         MOV       DPH,R5
    817            }
   \                     ??zcl_registerCmdList_1:
   \   00002D   12....       LCALL     ?Subroutine29 & 0xFFFF
    818          
    819            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_34:
   \   000030   02....       LJMP      ?Subroutine4 & 0xFFFF
    820          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   89..         MOV       ?V0,R1
   \   000002   8A..         MOV       ?V1,R2
   \   000004   EC           MOV       A,R4
   \   000005   FE           MOV       R6,A
   \   000006   ED           MOV       A,R5
   \   000007   FF           MOV       R7,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A06         MOV       R2,#0x6
   \   00000A                REQUIRE ??Subroutine228_0
   \   00000A                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00000A   E5..         MOV       A,?V0
   \   00000C   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00000F   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000012   EE           MOV       A,R6
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EF           MOV       A,R7
   \   000016   F0           MOVX      @DPTR,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET
    821          #endif  // ZCL_DISCOVER
    822          
    823          /*********************************************************************
    824           * @fn          zcl_registerAttrList
    825           *
    826           * @brief       Register an Attribute List with ZCL Foundation
    827           *
    828           * @param       endpoint - endpoint the attribute list belongs to
    829           * @param       numAttr - number of attributes in list
    830           * @param       newAttrList - array of Attribute records.
    831           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    832           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    833           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    834           *
    835           * @return      ZSuccess if OK
    836           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    837          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    838          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    839            zclAttrRecsList *pNewItem;
    840            zclAttrRecsList *pLoop;
    841          
    842            // Fill in the new profile list
    843            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   12....       LCALL     ??Subroutine228_0 & 0xFFFF
    844            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_380:
   \   000012   7004         JNZ       ??zcl_registerAttrList_0
    845            {
    846              return (ZMemError);
   \   000014   7910         MOV       R1,#0x10
   \   000016   8040         SJMP      ??CrossCallReturnLabel_35
    847            }
    848          
    849            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   E4           CLR       A
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   12....       LCALL     ?Subroutine43 & 0xFFFF
    850            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_59:
   \   000022   A3           INC       DPTR
   \   000023   E5..         MOV       A,?V0
   \   000025   12....       LCALL     ?Subroutine42 & 0xFFFF
    851            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_57:
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine31 & 0xFFFF
    852            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_41:
   \   00002E   E5..         MOV       A,?V1
   \   000030   12....       LCALL     ?Subroutine31 & 0xFFFF
    853            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_42:
   \   000033   A3           INC       DPTR
   \   000034   EE           MOV       A,R6
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   EF           MOV       A,R7
   \   000038   F0           MOVX      @DPTR,A
    854          
    855            // Find spot in list
    856            if ( attrList == NULL )
   \   000039   90....       MOV       DPTR,#attrList
   \   00003C   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   00003F   90....       MOV       DPTR,#attrList
   \   000042   6011         JZ        ??zcl_registerAttrList_1
    857            {
    858              attrList = pNewItem;
    859            }
    860            else
    861            {
    862              // Look for end of list
    863              pLoop = attrList;
   \   000044   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000047   8003         SJMP      ??zcl_registerAttrList_2
    864              while ( pLoop->next != NULL )
    865              {
    866                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   000049   EA           MOV       A,R2
   \   00004A   FC           MOV       R4,A
   \   00004B   EB           MOV       A,R3
    867              }
   \                     ??zcl_registerAttrList_2:
   \   00004C   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   00004F   70F8         JNZ       ??zcl_registerAttrList_3
    868          
    869              // Put new item at end of list
    870              pLoop->next = pNewItem;
   \   000051   8C82         MOV       DPL,R4
   \   000053   8D83         MOV       DPH,R5
    871            }
   \                     ??zcl_registerAttrList_1:
   \   000055   12....       LCALL     ?Subroutine29 & 0xFFFF
    872          
    873            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_35:
   \   000058   02....       LJMP      ?Subroutine4 & 0xFFFF
    874          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
    875          
    876          /*********************************************************************
    877           * @fn          zcl_registerClusterOptionList
    878           *
    879           * @brief       Register a Cluster Option List with ZCL Foundation
    880           *
    881           * @param       endpoint - endpoint the option list belongs to
    882           * @param       numOption - number of options in list
    883           * @param       optionList - array of cluster option records.
    884           *
    885           *              NOTE: This API should be called to enable 'Application
    886           *                    Link Key' security and/or 'APS ACK' for a specific
    887           *                    Cluster. The 'Application Link Key' is discarded
    888           *                    if security isn't enabled on the device.
    889           *                    The default behavior is 'Network Key' when security
    890           *                    is enabled and no 'APS ACK' for the ZCL messages.
    891           *
    892           * @return      ZSuccess if OK
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    895          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine150 & 0xFFFF
    896            zclClusterOptionList *pNewItem;
    897            zclClusterOptionList *pLoop;
    898          
    899            // Fill in the new profile list
    900            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
    901            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_378:
   \   000008   7004         JNZ       ??zcl_registerClusterOptionList_0
    902            {
    903              return (ZMemError);
   \   00000A   7910         MOV       R1,#0x10
   \   00000C   8022         SJMP      ??CrossCallReturnLabel_36
    904            }
    905          
    906            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   00000E   12....       LCALL     ?Subroutine13 & 0xFFFF
    907            pNewItem->endpoint = endpoint;
    908            pNewItem->numOptions = numOption;
    909            pNewItem->options = optionList;
    910          
    911            // Find spot in list
    912            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_8:
   \   000011   90....       MOV       DPTR,#clusterOptionList
   \   000014   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000017   90....       MOV       DPTR,#clusterOptionList
   \   00001A   6011         JZ        ??zcl_registerClusterOptionList_1
    913            {
    914              clusterOptionList = pNewItem;
    915            }
    916            else
    917            {
    918              // Look for end of list
    919              pLoop = clusterOptionList;
   \   00001C   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00001F   8003         SJMP      ??zcl_registerClusterOptionList_2
    920              while ( pLoop->next != NULL )
    921              {
    922                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
    923              }
   \                     ??zcl_registerClusterOptionList_2:
   \   000024   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000027   70F8         JNZ       ??zcl_registerClusterOptionList_3
    924          
    925              // Put new item at end of list
    926              pLoop->next = pNewItem;
   \   000029   8C82         MOV       DPL,R4
   \   00002B   8D83         MOV       DPH,R5
    927            }
   \                     ??zcl_registerClusterOptionList_1:
   \   00002D   12....       LCALL     ?Subroutine29 & 0xFFFF
    928          
    929            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_36:
   \   000030   02....       LJMP      ?Subroutine4 & 0xFFFF
    930          }
    931          
    932          /*********************************************************************
    933           * @fn          zcl_registerValidateAttrData
    934           *
    935           * @brief       Add a validation function for attribute data
    936           *
    937           * @param       pfnValidateAttrData - function pointer to validate routine
    938           *
    939           * @return      ZSuccess if OK
    940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    941          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    942          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    943            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL     ??Subroutine248_0 & 0xFFFF
    944          
    945            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_472:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   02....       LJMP      ?Subroutine0 & 0xFFFF
    946          }
    947          
    948          /*********************************************************************
    949           * @fn          zcl_registerReadWriteCB
    950           *
    951           * @brief       Register the application's callback function to read/write
    952           *              attribute data, and authorize read/write operation.
    953           *
    954           *              Note: The pfnReadWriteCB callback function is only required
    955           *                    when the attribute data format is unknown to ZCL. The
    956           *                    callback function gets called when the pointer 'dataPtr'
    957           *                    to the attribute value is NULL in the attribute database
    958           *                    registered with the ZCL.
    959           *
    960           *              Note: The pfnAuthorizeCB callback function is only required
    961           *                    when the Read/Write operation on an attribute requires
    962           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
    963           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
    964           *
    965           * @param       endpoint - application's endpoint
    966           * @param       pfnReadWriteCB - function pointer to read/write routine
    967           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
    968           *
    969           * @return      ZSuccess if successful. ZFailure, otherwise.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
    972                                             zclAuthorizeCB_t pfnAuthorizeCB )
    973          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    974            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8B..         MOV       ?V5,R3
   \   000012   A9..         MOV       R1,?V5
    975          
    976            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   49           ORL       A,R1
   \   000016   6012         JZ        ??zcl_registerReadWriteCB_0
    977            {
    978              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ?Subroutine25 & 0xFFFF
    979              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_30:
   \   000020   A3           INC       DPTR
   \   000021   EE           MOV       A,R6
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   EF           MOV       A,R7
   \   000025   F0           MOVX      @DPTR,A
    980          
    981              return ( ZSuccess );
   \   000026   7900         MOV       R1,#0x0
   \   000028   8002         SJMP      ??zcl_registerReadWriteCB_1
    982            }
    983          
    984            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   00002A   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   00002C   02....       LJMP      ??Subroutine256_0 & 0xFFFF
    985          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    986          
    987          /*********************************************************************
    988           * @fn      zcl_DeviceOperational
    989           *
    990           * @brief   Used to see whether or not the device can send or respond
    991           *          to application level commands.
    992           *
    993           * @param   srcEP - source endpoint
    994           * @param   clusterID - cluster ID
    995           * @param   frameType - command type
    996           * @param   cmd - command ID
    997           *
    998           * @return  TRUE if device is operational, FALSE otherwise
    999           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1000          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
   1001                                              uint8 frameType, uint8 cmd, uint16 profileID )
   1002          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1003            zclAttrRec_t attrRec;
   1004            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
   1005          
   1006            (void)profileID;  // Intentionally unreferenced parameter
   1007          
   1008            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
   1009            // cannot send or respond to application level commands, other than commands
   1010            // to read or write attributes. Note that the Identify cluster cannot be
   1011            // disabled, and remains functional regardless of this setting.
   1012            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000015   EC           MOV       A,R4
   \   000016   7006         JNZ       ??zcl_DeviceOperational_0
   \   000018   ED           MOV       A,R5
   \   000019   C3           CLR       C
   \   00001A   9406         SUBB      A,#0x6
   \   00001C   404D         JC        ??zcl_DeviceOperational_1
   1013            {
   1014              return ( TRUE );
   1015            }
   1016          
   1017            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   00001E   7403         MOV       A,#0x3
   \   000020   6A           XRL       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   6047         JZ        ??zcl_DeviceOperational_1
   1018            {
   1019              return ( TRUE );
   1020            }
   1021          
   1022            // Is device enabled?
   1023            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
   1024                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000024                ; Setup parameters for call to function zclFindAttrRec
   \   000024   7401         MOV       A,#0x1
   \   000026   12....       LCALL     ?XSTACK_DISP100_8
   \   000029   88..         MOV       ?V2,R0
   \   00002B   89..         MOV       ?V3,R1
   \   00002D   78..         MOV       R0,#?V2
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   7C12         MOV       R4,#0x12
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   EE           MOV       A,R6
   \   00003B   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   601C         JZ        ??zcl_DeviceOperational_2
   1025            {
   1026          #ifdef ZCL_READ
   1027              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   000044                ; Setup parameters for call to function zclReadAttrData
   \   000044   E4           CLR       A
   \   000045   F5..         MOV       ?V2,A
   \   000047   F5..         MOV       ?V3,A
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7403         MOV       A,#0x3
   \   000050   12....       LCALL     ?XSTACK_DISP102_8
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?XSTACK_DISP101_8
   \   000058   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   1028          #endif
   1029            }
   1030          
   1031            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_2:
   \   000060   85..82       MOV       DPL,?XSP + 0
   \   000063   85..83       MOV       DPH,?XSP + 1
   \   000066   E0           MOVX      A,@DPTR
   \   000067   6401         XRL       A,#0x1
   \   000069   7004         JNZ       ??zcl_DeviceOperational_3
   \                     ??zcl_DeviceOperational_1:
   \   00006B   7901         MOV       R1,#0x1
   \   00006D   8002         SJMP      ??zcl_DeviceOperational_4
   \                     ??zcl_DeviceOperational_3:
   \   00006F   7900         MOV       R1,#0x0
   \                     ??zcl_DeviceOperational_4:
   \   000071   7409         MOV       A,#0x9
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076                REQUIRE ?Subroutine4
   \   000076                ; // Fall through to label ?Subroutine4
   1032          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   F9           MOV       R1,A
   \   000001                REQUIRE ??Subroutine231_0
   \   000001                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
   1033          
   1034          /*********************************************************************
   1035           * @fn      zcl_SendCommand
   1036           *
   1037           * @brief   Used to send Profile and Cluster Specific Command messages.
   1038           *
   1039           *          NOTE: The calling application is responsible for incrementing
   1040           *                the Sequence Number.
   1041           *
   1042           * @param   srcEp - source endpoint
   1043           * @param   destAddr - destination address
   1044           * @param   clusterID - cluster ID
   1045           * @param   cmd - command ID
   1046           * @param   specific - whether the command is Cluster Specific
   1047           * @param   direction - client/server direction of the command
   1048           * @param   disableDefaultRsp - disable Default Response command
   1049           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1050           * @param   seqNumber - identification number for the transaction
   1051           * @param   cmdFormatLen - length of the command to be sent
   1052           * @param   cmdFormat - command to be sent
   1053           *
   1054           * @return  ZSuccess if OK
   1055           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1056          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
   1057                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
   1058                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
   1059                                     uint16 cmdFormatLen, uint8 *cmdFormat )
   1060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7409         MOV       A,#0x9
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   00001A   8C..         MOV       ?V4,R4
   \   00001C   8D..         MOV       ?V5,R5
   1061            endPointDesc_t *epDesc;
   1062            zclFrameHdr_t hdr;
   1063            uint8 *msgBuf;
   1064            uint16 msgLen;
   1065            uint8 *pBuf;
   1066            uint8 options;
   1067            ZStatus_t status;
   1068          
   1069            epDesc = afFindEndPointDesc( srcEP );
   \   00001E                ; Setup parameters for call to function afFindEndPointDesc
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000029   7407         MOV       A,#0x7
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   1070            if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_474:
   \   000031   7407         MOV       A,#0x7
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000039   7005         JNZ       ??zcl_SendCommand_0
   1071            {
   1072              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   00003B   7902         MOV       R1,#0x2
   \   00003D   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1073            }
   1074          
   1075          #if defined ( INTER_PAN )
   1076            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   1077            {
   1078              options = AF_TX_OPTIONS_NONE;
   1079            }
   1080            else
   1081          #endif
   1082            {
   1083              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_0:
   \   000040                ; Setup parameters for call to function zclGetClusterOption
   \   000040   AA..         MOV       R2,?V4
   \   000042   AB..         MOV       R3,?V5
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00004F   E9           MOV       A,R1
   \   000050   F5..         MOV       ?V3,A
   1084          
   1085              // The cluster might not have been defined to use security but if this message
   1086              // is in response to another message that was using APS security this message
   1087              // will be sent with APS security
   1088              if ( !( options & AF_EN_SECURITY ) )
   \   000052   A2E6         MOV       C,0xE0 /* A   */.6
   \   000054   401C         JC        ??zcl_SendCommand_2
   1089              {
   1090                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000056   90....       MOV       DPTR,#rawAFMsg
   \   000059   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   1091          
   1092                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   \                     ??CrossCallReturnLabel_558:
   \   00005C   6014         JZ        ??zcl_SendCommand_2
   \   00005E   E8           MOV       A,R0
   \   00005F   2419         ADD       A,#0x19
   \   000061   F582         MOV       DPL,A
   \   000063   E4           CLR       A
   \   000064   39           ADDC      A,R1
   \   000065   F583         MOV       DPH,A
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6401         XRL       A,#0x1
   \   00006A   7006         JNZ       ??zcl_SendCommand_2
   1093                {
   1094                  options |= AF_EN_SECURITY;
   \   00006C   E5..         MOV       A,?V3
   \   00006E   D2E6         SETB      0xE0 /* A   */.6
   \   000070   F5..         MOV       ?V3,A
   1095                }
   1096              }
   1097            }
   1098          
   1099            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_2:
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C06         MOV       R4,#0x6
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7900         MOV       R1,#0x0
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP101_8
   \   00007D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1100          
   1101            // Not Profile wide command (like READ, WRITE)
   1102            if ( specific )
   \   000080   741C         MOV       A,#0x1c
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   600D         JZ        ??zcl_SendCommand_3
   1103            {
   1104              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   000088   7401         MOV       A,#0x1
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   54FC         ANL       A,#0xfc
   \   000090   F0           MOVX      @DPTR,A
   \   000091   4401         ORL       A,#0x1
   \   000093   8008         SJMP      ??zcl_SendCommand_4
   1105            }
   1106            else
   1107            {
   1108              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_3:
   \   000095   7401         MOV       A,#0x1
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   54FC         ANL       A,#0xfc
   \                     ??zcl_SendCommand_4:
   \   00009D   F0           MOVX      @DPTR,A
   1109            }
   1110          
   1111            if ( ( epDesc->simpleDesc == NULL ) ||
   1112                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1113                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \   00009E   7407         MOV       A,#0x7
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0000A6   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   0000A9   6030         JZ        ??zcl_SendCommand_5
   \   0000AB   741B         MOV       A,#0x1b
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   FE           MOV       R6,A
   \   0000B2                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000B2   8882         MOV       DPL,R0
   \   0000B4   8983         MOV       DPH,R1
   \   0000B6   A3           INC       DPTR
   \   0000B7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FD           MOV       R5,A
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   5403         ANL       A,#0x3
   \   0000C4   FC           MOV       R4,A
   \   0000C5   AA..         MOV       R2,?V4
   \   0000C7   AB..         MOV       R3,?V5
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F9           MOV       R1,A
   \   0000D0   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D8   E9           MOV       A,R1
   \   0000D9   7005         JNZ       ??zcl_SendCommand_6
   1114            {
   1115              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_5:
   \   0000DB   7901         MOV       R1,#0x1
   \   0000DD   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1116            }
   \                     ??zcl_SendCommand_6:
   \   0000E0   741F         MOV       A,#0x1f
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   1117          
   1118            // Fill in the Maufacturer Code
   1119            if ( manuCode != 0 )
   \                     ??CrossCallReturnLabel_559:
   \   0000E8   6011         JZ        ??CrossCallReturnLabel_618
   1120            {
   1121              hdr.fc.manuSpecific = 1;
   \   0000EA   7401         MOV       A,#0x1
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   4404         ORL       A,#0x4
   \   0000F2   F0           MOVX      @DPTR,A
   1122              hdr.manuCode = manuCode;
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   1123            }
   1124          
   1125            // Set the Command Direction
   1126            if ( direction )
   \                     ??CrossCallReturnLabel_618:
   \   0000FB   741D         MOV       A,#0x1d
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   E0           MOVX      A,@DPTR
   \   000101   600A         JZ        ??zcl_SendCommand_7
   1127            {
   1128              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000103   7401         MOV       A,#0x1
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   4408         ORL       A,#0x8
   \   00010B   8008         SJMP      ??zcl_SendCommand_8
   1129            }
   1130            else
   1131            {
   1132              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_7:
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   E0           MOVX      A,@DPTR
   \   000113   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_8:
   \   000115   F0           MOVX      @DPTR,A
   1133            }
   1134          
   1135            // Set the Disable Default Response field
   1136            if ( disableDefaultRsp )
   \   000116   741E         MOV       A,#0x1e
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   600A         JZ        ??zcl_SendCommand_9
   1137            {
   1138              hdr.fc.disableDefaultRsp = 1;
   \   00011E   7401         MOV       A,#0x1
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E0           MOVX      A,@DPTR
   \   000124   4410         ORL       A,#0x10
   \   000126   8008         SJMP      ??zcl_SendCommand_10
   1139            }
   1140            else
   1141            {
   1142              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_9:
   \   000128   7401         MOV       A,#0x1
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_10:
   \   000130   F0           MOVX      @DPTR,A
   1143            }
   1144          
   1145            // Fill in the Transaction Sequence Number
   1146            hdr.transSeqNum = seqNum;
   \   000131   7421         MOV       A,#0x21
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   E0           MOVX      A,@DPTR
   \   000137   C0E0         PUSH      A
   \   000139   7405         MOV       A,#0x5
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   D0E0         POP       A
   \   000140   F0           MOVX      @DPTR,A
   1147          
   1148            // Fill in the command
   1149            hdr.commandID = cmd;
   \   000141   7406         MOV       A,#0x6
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   EE           MOV       A,R6
   \   000147   F0           MOVX      @DPTR,A
   1150          
   1151            // calculate the needed buffer size
   1152            msgLen = zclCalcHdrSize( &hdr );
   \   000148   7803         MOV       R0,#0x3
   \   00014A   7401         MOV       A,#0x1
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   5404         ANL       A,#0x4
   \   000152   6002         JZ        ??zcl_SendCommand_11
   \   000154   7805         MOV       R0,#0x5
   1153            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_11:
   \   000156   7422         MOV       A,#0x22
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   28           ADD       A,R0
   \   00015D   FE           MOV       R6,A
   \   00015E   A3           INC       DPTR
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   3400         ADDC      A,#0x0
   \   000162   FF           MOV       R7,A
   1154          
   1155            // Allocate the buffer needed
   1156            msgBuf = zcl_mem_alloc( msgLen );
   \   000163                ; Setup parameters for call to function osal_mem_alloc
   \   000163   EE           MOV       A,R6
   \   000164   FA           MOV       R2,A
   \   000165   EF           MOV       A,R7
   \   000166   12....       LCALL     ?Subroutine153 & 0xFFFF
   1157            if ( msgBuf != NULL )
   \                     ??CrossCallReturnLabel_389:
   \   000169   6070         JZ        ??zcl_SendCommand_12
   1158            {
   1159              // Fill in the ZCL Header
   1160              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   00016B                ; Setup parameters for call to function zclBuildHdr
   \   00016B   AC..         MOV       R4,?V6
   \   00016D   AD..         MOV       R5,?V7
   \   00016F   7401         MOV       A,#0x1
   \   000171   12....       LCALL     ?XSTACK_DISP101_8
   \   000174   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1161          
   1162              // Fill in the command frame
   1163              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   000177                ; Setup parameters for call to function osal_memcpy
   \   000177   7424         MOV       A,#0x24
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000182   7425         MOV       A,#0x25
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   00018A   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00018D   12....       LCALL     ?DEALLOC_XSTACK8
   1164          
   1165              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1166                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );
   \   000190                ; Setup parameters for call to function AF_DataRequest
   \   000190   75..1E       MOV       ?V0,#0x1e
   \   000193   78..         MOV       R0,#?V0
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000198   75....       MOV       ?V0,#zcl_TransID & 0xff
   \   00019B   75....       MOV       ?V1,#(zcl_TransID >> 8) & 0xff
   \   00019E   78..         MOV       R0,#?V0
   \   0001A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A3   78..         MOV       R0,#?V6
   \   0001A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A8   8E..         MOV       ?V0,R6
   \   0001AA   8F..         MOV       ?V1,R7
   \   0001AC   78..         MOV       R0,#?V0
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B1   78..         MOV       R0,#?V4
   \   0001B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B6   A9..         MOV       R1,?V3
   \   0001B8   7410         MOV       A,#0x10
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   0001C0   7412         MOV       A,#0x12
   \   0001C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C5   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   0001C8   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001CB   7409         MOV       A,#0x9
   \   0001CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D0   E9           MOV       A,R1
   \   0001D1   FE           MOV       R6,A
   1167              zcl_mem_free ( msgBuf );
   \   0001D2                ; Setup parameters for call to function osal_mem_free
   \   0001D2   AA..         MOV       R2,?V6
   \   0001D4   AB..         MOV       R3,?V7
   \   0001D6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001D9   8002         SJMP      ??zcl_SendCommand_13
   1168            }
   1169            else
   1170            {
   1171              status = ZMemError;
   \                     ??zcl_SendCommand_12:
   \   0001DB   7E10         MOV       R6,#0x10
   1172            }
   1173          
   1174            return ( status );
   \                     ??zcl_SendCommand_13:
   \   0001DD   EE           MOV       A,R6
   \   0001DE   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   0001DF   740B         MOV       A,#0xb
   \   0001E1   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   1175          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine232_0
   \   000001                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V6,R2
   \   000005   8B..         MOV       ?V7,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003   75..00       MOV       ?V2,#0x0
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine261_0
   \   000002                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   12....       LCALL     ?Subroutine221 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine221:
   \   000000   12....       LCALL     ?Subroutine225 & 0xFFFF
   \                     ??CrossCallReturnLabel_760:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
   1176          
   1177          #ifdef ZCL_READ
   1178          /*********************************************************************
   1179           * @fn      zcl_SendRead
   1180           *
   1181           * @brief   Send a Read command
   1182           *
   1183           * @param   srcEP - Application's endpoint
   1184           * @param   dstAddr - destination address
   1185           * @param   clusterID - cluster ID
   1186           * @param   readCmd - read command to be sent
   1187           * @param   direction - direction of the command
   1188           * @param   seqNum - transaction sequence number
   1189           *
   1190           * @return  ZSuccess if OK
   1191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
   1193                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1194                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1195          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   00001B   89..         MOV       ?V6,R1
   \   00001D   7413         MOV       A,#0x13
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ??Subroutine279_0 & 0xFFFF
   1196            uint16 dataLen;
   1197            uint8 *buf;
   1198            uint8 *pBuf;
   1199            ZStatus_t status;
   1200          
   1201            dataLen = readCmd->numAttr * 2; // Attribute ID
   \                     ??CrossCallReturnLabel_663:
   \   000025   85..82       MOV       DPL,?V2
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   25E0         ADD       A,0xE0 /* A   */
   \   00002D   FE           MOV       R6,A
   \   00002E   E4           CLR       A
   \   00002F   33           RLC       A
   \   000030   FF           MOV       R7,A
   1202          
   1203            buf = zcl_mem_alloc( dataLen );
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   EE           MOV       A,R6
   \   000032   FA           MOV       R2,A
   \   000033   EF           MOV       A,R7
   \   000034   12....       LCALL     ?Subroutine152 & 0xFFFF
   1204            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_392:
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??zcl_SendRead_0 & 0xFFFF
   1205            {
   1206              uint8 i;
   1207          
   1208              // Load the buffer - serially
   1209              pBuf = buf;
   \   00003C   A8..         MOV       R0,?V0
   \   00003E   A9..         MOV       R1,?V1
   1210              for (i = 0; i < readCmd->numAttr; i++)
   \   000040   7C00         MOV       R4,#0x0
   \   000042   8023         SJMP      ??zcl_SendRead_1
   1211              {
   1212                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   000044   EC           MOV       A,R4
   \   000045   25E0         ADD       A,0xE0 /* A   */
   \   000047   FA           MOV       R2,A
   \   000048   E4           CLR       A
   \   000049   33           RLC       A
   \   00004A   FB           MOV       R3,A
   \   00004B   E5..         MOV       A,?V2
   \   00004D   2A           ADD       A,R2
   \   00004E   F582         MOV       DPL,A
   \   000050   E5..         MOV       A,?V3
   \   000052   12....       LCALL     ?Subroutine160 & 0xFFFF
   1213                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   1214              }
   \                     ??CrossCallReturnLabel_300:
   \   000055   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000058   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00005B   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   E8           MOV       A,R0
   \   000060   2402         ADD       A,#0x2
   \   000062   F8           MOV       R0,A
   \   000063   5001         JNC       ??zcl_SendRead_3
   \   000065   09           INC       R1
   \                     ??zcl_SendRead_3:
   \   000066   0C           INC       R4
   \                     ??zcl_SendRead_1:
   \   000067   85..82       MOV       DPL,?V2
   \   00006A   85..83       MOV       DPH,?V3
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   FA           MOV       R2,A
   \   00006F   EC           MOV       A,R4
   \   000070   C3           CLR       C
   \   000071   9A           SUBB      A,R2
   \   000072   40D0         JC        ??zcl_SendRead_2
   1215          
   1216              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1217                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000074                ; Setup parameters for call to function zcl_SendCommand
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   8E..         MOV       ?V2,R6
   \   00007B   8F..         MOV       ?V3,R7
   \   00007D   78..         MOV       R0,#?V2
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   741B         MOV       A,#0x1b
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008D   E4           CLR       A
   \   00008E   F5..         MOV       ?V2,A
   \   000090   F5..         MOV       ?V3,A
   \   000092   78..         MOV       R0,#?V2
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   741D         MOV       A,#0x1d
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A2   741D         MOV       A,#0x1d
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   75..00       MOV       ?V2,#0x0
   \   0000B0   78..         MOV       R0,#?V2
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   78..         MOV       R0,#?V2
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BA   740B         MOV       A,#0xb
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   0000C2   740D         MOV       A,#0xd
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   0000CA   A9..         MOV       R1,?V6
   \   0000CC   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D2   E9           MOV       A,R1
   \   0000D3   FE           MOV       R6,A
   1218              zcl_mem_free( buf );
   \   0000D4                ; Setup parameters for call to function osal_mem_free
   \   0000D4   AA..         MOV       R2,?V0
   \   0000D6   AB..         MOV       R3,?V1
   \   0000D8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000DB   8002         SJMP      ??zcl_SendRead_4
   1219            }
   1220            else
   1221            {
   1222              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000DD   7E10         MOV       R6,#0x10
   1223            }
   1224          
   1225            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000DF   EE           MOV       A,R6
   \   0000E0   F9           MOV       R1,A
   \   0000E1   7404         MOV       A,#0x4
   \   0000E3   02....       LJMP      ??Subroutine292_0 & 0xFFFF
   1226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine233_0
   \   000001                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL     ?Subroutine213 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine204:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EC           MOV       A,R4
   \   000001                REQUIRE ??Subroutine243_0
   \   000001                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   ED           MOV       A,R5
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   3B           ADDC      A,R3
   \   000001   F583         MOV       DPH,A
   \   000003   A3           INC       DPTR
   \   000004   AA82         MOV       R2,DPL
   \   000006   AB83         MOV       R3,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine279_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine292_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine293_0
   \   000003                ; // Fall through to label ??Subroutine293_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine293_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1227          
   1228          /*********************************************************************
   1229           * @fn      zcl_SendReadRsp
   1230           *
   1231           * @brief   Send a Read Response command.
   1232           *
   1233           * @param   srcEP - Application's endpoint
   1234           * @param   dstAddr - destination address
   1235           * @param   clusterID - cluster ID
   1236           * @param   readRspCmd - read response command to be sent
   1237           * @param   direction - direction of the command
   1238           * @param   seqNum - transaction sequence number
   1239           *
   1240           * @return  ZSuccess if OK
   1241           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1242          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
   1243                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1244                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1245          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine21 & 0xFFFF
   1246            uint8 *buf;
   1247            uint16 len = 0;
   \                     ??CrossCallReturnLabel_23:
   \   000012   7E00         MOV       R6,#0x0
   \   000014   7F00         MOV       R7,#0x0
   1248            ZStatus_t status;
   1249            uint8 i;
   1250          
   1251            // calculate the size of the command
   1252            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000016   75..00       MOV       ?V2,#0x0
   \   000019   801C         SJMP      ??zcl_SendReadRsp_0
   1253            {
   1254              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1255          
   1256              len += 2 + 1; // Attribute ID + Status
   1257          
   1258              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1259              {
   1260                len++; // Attribute Data Type length
   1261          
   1262                // Attribute Data length
   1263                if ( statusRec->data != NULL )
   1264                {
   1265                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1266                }
   1267                else
   1268                {
   1269                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   00001B                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   00001B   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   1270                }
   \                     ??CrossCallReturnLabel_429:
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000027   A9..         MOV       R1,?V3
   \   000029   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zcl_SendReadRsp_2:
   \   00002C   8B..         MOV       ?V1,R3
   \   00002E   EE           MOV       A,R6
   \   00002F   2A           ADD       A,R2
   \   000030   FE           MOV       R6,A
   \   000031   EF           MOV       A,R7
   \   000032   35..         ADDC      A,?V1
   \   000034   FF           MOV       R7,A
   \                     ??zcl_SendReadRsp_3:
   \   000035   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_0:
   \   000037   7416         MOV       A,#0x16
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00003F   5038         JNC       ??zcl_SendReadRsp_4
   \   000041   E5..         MOV       A,?V2
   \   000043   75F006       MOV       B,#0x6
   \   000046   A4           MUL       AB
   \   000047   F8           MOV       R0,A
   \   000048   A9F0         MOV       R1,B
   \   00004A   7416         MOV       A,#0x16
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000052   EE           MOV       A,R6
   \   000053   2403         ADD       A,#0x3
   \   000055   FE           MOV       R6,A
   \   000056   E4           CLR       A
   \   000057   3F           ADDC      A,R7
   \   000058   FF           MOV       R7,A
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   70D7         JNZ       ??zcl_SendReadRsp_3
   \   00005E   0E           INC       R6
   \   00005F   EE           MOV       A,R6
   \   000060   7001         JNZ       ??zcl_SendReadRsp_5
   \   000062   0F           INC       R7
   \                     ??zcl_SendReadRsp_5:
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   00006E   8882         MOV       DPL,R0
   \   000070   8983         MOV       DPH,R1
   \   000072   60A7         JZ        ??zcl_SendReadRsp_1
   \   000074                ; Setup parameters for call to function zclGetAttrDataLength
   \   000074   12....       LCALL     ?Subroutine136 & 0xFFFF
   1271              }
   1272            }
   \                     ??CrossCallReturnLabel_398:
   \   000077   80B3         SJMP      ??zcl_SendReadRsp_2
   1273          
   1274            buf = zcl_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   000079                ; Setup parameters for call to function osal_mem_alloc
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     ?Subroutine213 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000080   8A..         MOV       ?V6,R2
   \   000082   8B..         MOV       ?V7,R3
   1275            if ( buf != NULL )
   \   000084   EA           MOV       A,R2
   \   000085   4B           ORL       A,R3
   \   000086   7003         JNZ       $+5
   \   000088   02....       LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
   1276            {
   1277              // Load the buffer - serially
   1278              uint8 *pBuf = buf;
   1279          
   1280              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   00008B   75..00       MOV       ?V2,#0x0
   \   00008E   803E         SJMP      ??zcl_SendReadRsp_7
   1281              {
   1282                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1283          
   1284                *pBuf++ = LO_UINT16( statusRec->attrID );
   1285                *pBuf++ = HI_UINT16( statusRec->attrID );
   1286                *pBuf++ = statusRec->status;
   1287          
   1288                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1289                {
   1290                  *pBuf++ = statusRec->dataType;
   1291          
   1292                  if ( statusRec->data != NULL )
   1293                  {
   1294                    // Copy attribute data to the buffer to be sent out
   1295                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1296                  }
   1297                  else
   1298                  {
   1299                    uint16 dataLen;
   1300          
   1301                    // Read attribute data directly into the buffer to be sent out
   1302                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_8:
   \   000090                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP100_8
   \   000095   88..         MOV       ?V4,R0
   \   000097   89..         MOV       ?V5,R1
   \   000099   78..         MOV       R0,#?V4
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   8A82         MOV       DPL,R2
   \   0000A5   8B83         MOV       DPH,R3
   \   0000A7   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   0000B0   A9..         MOV       R1,?V3
   \   0000B2   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0000B5   7404         MOV       A,#0x4
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   1303                    pBuf += dataLen;
   \   0000BA   7402         MOV       A,#0x2
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   1304                  }
   \                     ??CrossCallReturnLabel_681:
   \   0000C2   E5..         MOV       A,?V0
   \   0000C4   28           ADD       A,R0
   \   0000C5   F5..         MOV       ?V0,A
   \   0000C7   E5..         MOV       A,?V1
   \   0000C9   39           ADDC      A,R1
   \   0000CA   F5..         MOV       ?V1,A
   \                     ??zcl_SendReadRsp_9:
   \   0000CC   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_7:
   \   0000CE   7416         MOV       A,#0x16
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000D6   4003         JC        $+5
   \   0000D8   02....       LJMP      ??zcl_SendReadRsp_10 & 0xFFFF
   \   0000DB   E5..         MOV       A,?V2
   \   0000DD   75F006       MOV       B,#0x6
   \   0000E0   A4           MUL       AB
   \   0000E1   F8           MOV       R0,A
   \   0000E2   A9F0         MOV       R1,B
   \   0000E4   7416         MOV       A,#0x16
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000EC   85..82       MOV       DPL,?V0
   \   0000EF   85..83       MOV       DPH,?V1
   \   0000F2   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000F5   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0000F8   F0           MOVX      @DPTR,A
   \   0000F9   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000FC   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0000FF   A3           INC       DPTR
   \   000100   F0           MOVX      @DPTR,A
   \   000101   E5..         MOV       A,?V0
   \   000103   2403         ADD       A,#0x3
   \   000105   F5..         MOV       ?V0,A
   \   000107   5002         JNC       ??zcl_SendReadRsp_11
   \   000109   05..         INC       ?V1
   \                     ??zcl_SendReadRsp_11:
   \   00010B   8882         MOV       DPL,R0
   \   00010D   8983         MOV       DPH,R1
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   70BA         JNZ       ??zcl_SendReadRsp_9
   \   000112   EA           MOV       A,R2
   \   000113   2403         ADD       A,#0x3
   \   000115   08           INC       R0
   \   000116   E4           CLR       A
   \   000117   3B           ADDC      A,R3
   \   000118   F9           MOV       R1,A
   \   000119   8882         MOV       DPL,R0
   \   00011B   F583         MOV       DPH,A
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   85..82       MOV       DPL,?V0
   \   000121   85..83       MOV       DPH,?V1
   \   000124   F0           MOVX      @DPTR,A
   \   000125   A3           INC       DPTR
   \   000126   8582..       MOV       ?V0,DPL
   \   000129   8583..       MOV       ?V1,DPH
   \   00012C   8A82         MOV       DPL,R2
   \   00012E   8B83         MOV       DPH,R3
   \   000130   A3           INC       DPTR
   \   000131   A3           INC       DPTR
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000137   8C82         MOV       DPL,R4
   \   000139   F583         MOV       DPH,A
   \   00013B   E582         MOV       A,DPL
   \   00013D   4583         ORL       A,DPH
   \   00013F   7003         JNZ       $+5
   \   000141   02....       LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
   \   000144                ; Setup parameters for call to function zclSerializeData
   \   000144   AC..         MOV       R4,?V0
   \   000146   AD..         MOV       R5,?V1
   \   000148   AA82         MOV       R2,DPL
   \   00014A   AB83         MOV       R3,DPH
   \   00014C   8882         MOV       DPL,R0
   \   00014E   8983         MOV       DPH,R1
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F9           MOV       R1,A
   \   000152   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   000155   8A..         MOV       ?V0,R2
   \   000157   8B..         MOV       ?V1,R3
   \   000159   02....       LJMP      ??zcl_SendReadRsp_9 & 0xFFFF
   1305                }
   1306              } // for loop
   1307          
   1308              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1309                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_10:
   \   00015C                ; Setup parameters for call to function zcl_SendCommand
   \   00015C   78..         MOV       R0,#?V6
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000161   8E..         MOV       ?V0,R6
   \   000163   8F..         MOV       ?V1,R7
   \   000165   78..         MOV       R0,#?V0
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   741E         MOV       A,#0x1e
   \   00016C   12....       LCALL     ?XSTACK_DISP0_8
   \   00016F   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000175   E4           CLR       A
   \   000176   F5..         MOV       ?V0,A
   \   000178   F5..         MOV       ?V1,A
   \   00017A   78..         MOV       R0,#?V0
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017F   7420         MOV       A,#0x20
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018A   7420         MOV       A,#0x20
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000195   75..00       MOV       ?V0,#0x0
   \   000198   78..         MOV       R0,#?V0
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019D   75..01       MOV       ?V0,#0x1
   \   0001A0   78..         MOV       R0,#?V0
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A5   740B         MOV       A,#0xb
   \   0001A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   0001AD   740F         MOV       A,#0xf
   \   0001AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   0001B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B8   E9           MOV       A,R1
   \   0001B9   FE           MOV       R6,A
   1310              zcl_mem_free( buf );
   \   0001BA                ; Setup parameters for call to function osal_mem_free
   \   0001BA   AA..         MOV       R2,?V6
   \   0001BC   AB..         MOV       R3,?V7
   \   0001BE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C1   8002         SJMP      ??zcl_SendReadRsp_12
   1311            }
   1312            else
   1313            {
   1314              status = ZMemError;
   \                     ??zcl_SendReadRsp_6:
   \   0001C3   7E10         MOV       R6,#0x10
   1315            }
   1316          
   1317            return ( status );
   \                     ??zcl_SendReadRsp_12:
   \   0001C5   EE           MOV       A,R6
   \   0001C6   F9           MOV       R1,A
   \   0001C7   02....       LJMP      ??Subroutine244_0 & 0xFFFF
   1318          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL     ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine211:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine234_0
   \   000003                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ??Subroutine286_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_711:
   \   000003   F8           MOV       R0,A
   \   000004   E5..         MOV       A,?V2
   \   000006   C3           CLR       C
   \   000007   98           SUBB      A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000003   A9..         MOV       R1,?V3
   \   000005   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000008   740B         MOV       A,#0xb
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_747:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   EC           MOV       A,R4
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   ED           MOV       A,R5
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   89..         MOV       ?V3,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   7406         MOV       A,#0x6
   \   000002                REQUIRE ??Subroutine245_0
   \   000002                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   12....       LCALL     ?Subroutine220 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000003   A882         MOV       R0,DPL
   \   000005   A983         MOV       R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   AA82         MOV       R2,DPL
   \   000005   AB83         MOV       R3,DPH
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine283_0:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_696:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   12....       LCALL     ?Subroutine220 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine220:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET
   1319          #endif // ZCL_READ
   1320          
   1321          #ifdef ZCL_WRITE
   1322          /*********************************************************************
   1323           * @fn      sendWriteRequest
   1324           *
   1325           * @brief   Send a Write command
   1326           *
   1327           * @param   dstAddr - destination address
   1328           * @param   clusterID - cluster ID
   1329           * @param   writeCmd - write command to be sent
   1330           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1331           * @param   direction - direction of the command
   1332           * @param   seqNum - transaction sequence number
   1333           *
   1334           * @return  ZSuccess if OK
   1335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1336          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
   1337                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1338                                          uint8 disableDefaultRsp, uint8 seqNum )
   1339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine45 & 0xFFFF
   1340            uint8 *buf;
   1341            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_463:
   \   000020   7E00         MOV       R6,#0x0
   \   000022   7F00         MOV       R7,#0x0
   1342            ZStatus_t status;
   1343            uint8 i;
   1344          
   1345            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000024   75..00       MOV       ?V0,#0x0
   \   000027   7415         MOV       A,#0x15
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00002F   8022         SJMP      ??zcl_SendWriteRequest_0
   1346            {
   1347              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   000031   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000034   A882         MOV       R0,DPL
   \   000036   A983         MOV       R1,DPH
   1348          
   1349              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1350          
   1351              // Attribute Data
   1352              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \   000038                ; Setup parameters for call to function zclGetAttrDataLength
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine73 & 0xFFFF
   1353            }
   \                     ??CrossCallReturnLabel_139:
   \   00003E   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000041   8B..         MOV       ?V3,R3
   \   000043   EA           MOV       A,R2
   \   000044   2403         ADD       A,#0x3
   \   000046   F8           MOV       R0,A
   \   000047   E4           CLR       A
   \   000048   35..         ADDC      A,?V3
   \   00004A   F9           MOV       R1,A
   \   00004B   EE           MOV       A,R6
   \   00004C   28           ADD       A,R0
   \   00004D   FE           MOV       R6,A
   \   00004E   EF           MOV       A,R7
   \   00004F   39           ADDC      A,R1
   \   000050   FF           MOV       R7,A
   \   000051   05..         INC       ?V0
   \                     ??zcl_SendWriteRequest_0:
   \   000053   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_777:
   \   000056   40D9         JC        ??zcl_SendWriteRequest_1
   1354          
   1355            buf = zcl_mem_alloc( dataLen );
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   1356            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_454:
   \   00005B   7003         JNZ       $+5
   \   00005D   02....       LJMP      ??zcl_SendWriteRequest_2 & 0xFFFF
   1357            {
   1358              // Load the buffer - serially
   1359              uint8 *pBuf = buf;
   1360              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000060   75..00       MOV       ?V0,#0x0
   \   000063   8039         SJMP      ??zcl_SendWriteRequest_3
   1361              {
   1362                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_4:
   \   000065   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000068   8582..       MOV       ?V4,DPL
   \   00006B   8583..       MOV       ?V5,DPH
   1363          
   1364                *pBuf++ = LO_UINT16( statusRec->attrID );
   \   00006E   12....       LCALL     ?Subroutine23 & 0xFFFF
   1365                *pBuf++ = HI_UINT16( statusRec->attrID );
   1366                *pBuf++ = statusRec->dataType;
   \                     ??CrossCallReturnLabel_25:
   \   000071   E5..         MOV       A,?V4
   \   000073   2402         ADD       A,#0x2
   \   000075   F8           MOV       R0,A
   \   000076   E4           CLR       A
   \   000077   35..         ADDC      A,?V5
   \   000079   F9           MOV       R1,A
   \   00007A   8882         MOV       DPL,R0
   \   00007C   F583         MOV       DPH,A
   \   00007E   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000081   A3           INC       DPTR
   \   000082   F0           MOVX      @DPTR,A
   1367          
   1368                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   \   000083                ; Setup parameters for call to function zclSerializeData
   \   000083   EA           MOV       A,R2
   \   000084   2403         ADD       A,#0x3
   \   000086   FC           MOV       R4,A
   \   000087   E4           CLR       A
   \   000088   3B           ADDC      A,R3
   \   000089   FD           MOV       R5,A
   \   00008A   85..82       MOV       DPL,?V4
   \   00008D   85..83       MOV       DPH,?V5
   \   000090   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   1369              }
   \                     ??CrossCallReturnLabel_543:
   \   000093   8882         MOV       DPL,R0
   \   000095   8983         MOV       DPH,R1
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F9           MOV       R1,A
   \   000099   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   00009C   05..         INC       ?V0
   \                     ??zcl_SendWriteRequest_3:
   \   00009E   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_778:
   \   0000A1   40C2         JC        ??zcl_SendWriteRequest_4
   1370          
   1371              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1372                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000A3                ; Setup parameters for call to function zcl_SendCommand
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   8E..         MOV       ?V0,R6
   \   0000AA   8F..         MOV       ?V1,R7
   \   0000AC   78..         MOV       R0,#?V0
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   741E         MOV       A,#0x1e
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   E4           CLR       A
   \   0000BD   F5..         MOV       ?V0,A
   \   0000BF   F5..         MOV       ?V1,A
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7420         MOV       A,#0x20
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D1   7420         MOV       A,#0x20
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000D9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DC   75..00       MOV       ?V0,#0x0
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E4   7421         MOV       A,#0x21
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EF   740C         MOV       A,#0xc
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   \   000106   E9           MOV       A,R1
   \   000107   FE           MOV       R6,A
   1373              zcl_mem_free( buf );
   \   000108                ; Setup parameters for call to function osal_mem_free
   \   000108   AA..         MOV       R2,?V2
   \   00010A   AB..         MOV       R3,?V3
   \   00010C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00010F   8002         SJMP      ??zcl_SendWriteRequest_5
   1374            }
   1375            else
   1376            {
   1377              status = ZMemError;
   \                     ??zcl_SendWriteRequest_2:
   \   000111   7E10         MOV       R6,#0x10
   1378            }
   1379          
   1380            return ( status);
   \                     ??zcl_SendWriteRequest_5:
   \   000113                REQUIRE ?Subroutine7
   \   000113                ; // Fall through to label ?Subroutine7
   1381          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   7405         MOV       A,#0x5
   \   000004   02....       LJMP      ??Subroutine245_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   E5..         MOV       A,?V0
   \   000002   75F005       MOV       B,#0x5
   \   000005   A4           MUL       AB
   \   000006   F8           MOV       R0,A
   \   000007   A9F0         MOV       R1,B
   \   000009   E5..         MOV       A,?V6
   \   00000B   28           ADD       A,R0
   \   00000C   F582         MOV       DPL,A
   \   00000E   E5..         MOV       A,?V7
   \   000010   39           ADDC      A,R1
   \   000011   F583         MOV       DPH,A
   \   000013   A3           INC       DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003                REQUIRE ??Subroutine241_0
   \   000003                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000004   8A..         MOV       ?V2,R2
   \   000006   8B..         MOV       ?V3,R3
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000003   740E         MOV       A,#0xe
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000005   740B         MOV       A,#0xb
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_749:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000003   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   000006   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine258_0
   \   000002                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine259_0
   \   000001                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine207:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006                REQUIRE ??Subroutine297_0
   \   000006                ; // Fall through to label ??Subroutine297_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine297_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V0
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET
   1382          
   1383          /*********************************************************************
   1384           * @fn      zcl_SendWriteRsp
   1385           *
   1386           * @brief   Send a Write Response command
   1387           *
   1388           * @param   dstAddr - destination address
   1389           * @param   clusterID - cluster ID
   1390           * @param   wrtieRspCmd - write response command to be sent
   1391           * @param   direction - direction of the command
   1392           * @param   seqNum - transaction sequence number
   1393           *
   1394           * @return  ZSuccess if OK
   1395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1396          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
   1397                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1398                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1399          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   00001A   8C..         MOV       ?V6,R4
   \   00001C   8D..         MOV       ?V7,R5
   \   00001E   7413         MOV       A,#0x13
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ?Subroutine107 & 0xFFFF
   1400            uint16 dataLen;
   1401            uint8 *buf;
   1402            ZStatus_t status;
   1403          
   1404            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \                     ??CrossCallReturnLabel_204:
   \   000026   E0           MOVX      A,@DPTR
   \   000027   75F003       MOV       B,#0x3
   \   00002A   A4           MUL       AB
   \   00002B   FE           MOV       R6,A
   \   00002C   A8F0         MOV       R0,B
   \   00002E   E8           MOV       A,R0
   \   00002F   FF           MOV       R7,A
   1405          
   1406            buf = zcl_mem_alloc( dataLen );
   \   000030                ; Setup parameters for call to function osal_mem_alloc
   \   000030   EE           MOV       A,R6
   \   000031   FA           MOV       R2,A
   \   000032   E8           MOV       A,R0
   \   000033   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   1407            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_455:
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
   1408            {
   1409              // Load the buffer - serially
   1410              uint8 i;
   1411              uint8 *pBuf = buf;
   \   00003B   A8..         MOV       R0,?V2
   \   00003D   A9..         MOV       R1,?V3
   1412              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   00003F   7A00         MOV       R2,#0x0
   \   000041   8034         SJMP      ??zcl_SendWriteRsp_1
   1413              {
   1414                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_2:
   \   000043   EA           MOV       A,R2
   \   000044   75F003       MOV       B,#0x3
   \   000047   A4           MUL       AB
   \   000048   FC           MOV       R4,A
   \   000049   ADF0         MOV       R5,B
   \   00004B   E5..         MOV       A,?V0
   \   00004D   2C           ADD       A,R4
   \   00004E   FC           MOV       R4,A
   \   00004F   E5..         MOV       A,?V1
   \   000051   3D           ADDC      A,R5
   \   000052   FD           MOV       R5,A
   \   000053   8C82         MOV       DPL,R4
   \   000055   F583         MOV       DPH,A
   \   000057   A3           INC       DPTR
   \   000058   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   00005B   F0           MOVX      @DPTR,A
   1415                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \   00005C   EC           MOV       A,R4
   \   00005D   2402         ADD       A,#0x2
   \   00005F   FC           MOV       R4,A
   \   000060   5001         JNC       ??zcl_SendWriteRsp_3
   \   000062   0D           INC       R5
   \                     ??zcl_SendWriteRsp_3:
   \   000063   F582         MOV       DPL,A
   \   000065   8D83         MOV       DPH,R5
   \   000067   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00006A   F0           MOVX      @DPTR,A
   1416                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \   00006B   8C82         MOV       DPL,R4
   \   00006D   8D83         MOV       DPH,R5
   \   00006F   A3           INC       DPTR
   \   000070   12....       LCALL     ?Subroutine108 & 0xFFFF
   1417              }
   \                     ??CrossCallReturnLabel_206:
   \   000073   5001         JNC       ??zcl_SendWriteRsp_4
   \   000075   09           INC       R1
   \                     ??zcl_SendWriteRsp_4:
   \   000076   0A           INC       R2
   \                     ??zcl_SendWriteRsp_1:
   \   000077   85..82       MOV       DPL,?V0
   \   00007A   85..83       MOV       DPH,?V1
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   FB           MOV       R3,A
   \   00007F   EA           MOV       A,R2
   \   000080   C3           CLR       C
   \   000081   9B           SUBB      A,R3
   \   000082   40BF         JC        ??zcl_SendWriteRsp_2
   1418          
   1419              // If there's only a single status record and its status field is set to
   1420              // SUCCESS then omit the attribute ID field.
   1421              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   000084   7401         MOV       A,#0x1
   \   000086   6B           XRL       A,R3
   \   000087   7008         JNZ       ??zcl_SendWriteRsp_5
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   7004         JNZ       ??zcl_SendWriteRsp_5
   1422              {
   1423                dataLen = 1;
   \   00008D   7E01         MOV       R6,#0x1
   \   00008F   7F00         MOV       R7,#0x0
   1424              }
   1425          
   1426              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1427                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_5:
   \   000091                ; Setup parameters for call to function zcl_SendCommand
   \   000091   78..         MOV       R0,#?V2
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   8E..         MOV       ?V0,R6
   \   000098   8F..         MOV       ?V1,R7
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   741B         MOV       A,#0x1b
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AA   E4           CLR       A
   \   0000AB   F5..         MOV       ?V0,A
   \   0000AD   F5..         MOV       ?V1,A
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   741D         MOV       A,#0x1d
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   741D         MOV       A,#0x1d
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   75..00       MOV       ?V0,#0x0
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D2   75..04       MOV       ?V0,#0x4
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DA   AC..         MOV       R4,?V6
   \   0000DC   AD..         MOV       R5,?V7
   \   0000DE   740C         MOV       A,#0xc
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EF   E9           MOV       A,R1
   \   0000F0   FE           MOV       R6,A
   1428              zcl_mem_free( buf );
   \   0000F1                ; Setup parameters for call to function osal_mem_free
   \   0000F1   AA..         MOV       R2,?V2
   \   0000F3   AB..         MOV       R3,?V3
   \   0000F5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F8   8002         SJMP      ??zcl_SendWriteRsp_6
   1429            }
   1430            else
   1431            {
   1432              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   0000FA   7E10         MOV       R6,#0x10
   1433            }
   1434          
   1435            return ( status );
   \                     ??zcl_SendWriteRsp_6:
   \   0000FC   EE           MOV       A,R6
   \   0000FD   F9           MOV       R1,A
   \   0000FE   7403         MOV       A,#0x3
   \   000100   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   1436          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   85..82       MOV       DPL,?V0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E8           MOV       A,R0
   \   000006   2403         ADD       A,#0x3
   \   000008   F8           MOV       R0,A
   \   000009   22           RET
   1437          #endif // ZCL_WRITE
   1438          
   1439          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1440          /*********************************************************************
   1441           * @fn      zcl_SendConfigReportCmd
   1442           *
   1443           * @brief   Send a Configure Reporting command
   1444           *
   1445           * @param   dstAddr - destination address
   1446           * @param   clusterID - cluster ID
   1447           * @param   cfgReportCmd - configure reporting command to be sent
   1448           * @param   direction - direction of the command
   1449           * @param   seqNum - transaction sequence number
   1450           *
   1451           * @return  ZSuccess if OK
   1452           */
   1453          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1454                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1455                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1456          {
   1457            uint8 *buf;
   1458            uint16 dataLen = 0;
   1459            ZStatus_t status;
   1460            uint8 i;
   1461          
   1462            // Find out the data length
   1463            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1464            {
   1465              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1466          
   1467              dataLen += 1 + 2; // Direction + Attribute ID
   1468          
   1469              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1470              {
   1471                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1472          
   1473                // Find out the size of the Reportable Change field (for Analog data types)
   1474                if ( zclAnalogDataType( reportRec->dataType ) )
   1475                {
   1476                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1477                }
   1478              }
   1479              else
   1480              {
   1481                dataLen += 2; // Timeout Period
   1482              }
   1483            }
   1484          
   1485            buf = zcl_mem_alloc( dataLen );
   1486            if ( buf != NULL )
   1487            {
   1488              // Load the buffer - serially
   1489              uint8 *pBuf = buf;
   1490          
   1491              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1492              {
   1493                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1494          
   1495                *pBuf++ = reportRec->direction;
   1496                *pBuf++ = LO_UINT16( reportRec->attrID );
   1497                *pBuf++ = HI_UINT16( reportRec->attrID );
   1498          
   1499                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1500                {
   1501                  *pBuf++ = reportRec->dataType;
   1502                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1503                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1504                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1505                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1506          
   1507                  if ( zclAnalogDataType( reportRec->dataType ) )
   1508                  {
   1509                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1510                  }
   1511                }
   1512                else
   1513                {
   1514                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   1515                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1516                }
   1517              } // for loop
   1518          
   1519              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1520                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1521              zcl_mem_free( buf );
   1522            }
   1523            else
   1524            {
   1525              status = ZMemError;
   1526            }
   1527          
   1528            return ( status );
   1529          }
   1530          #endif
   1531          
   1532          #ifdef ZCL_REPORTING_DEVICE
   1533          /*********************************************************************
   1534           * @fn      zcl_SendConfigReportRspCmd
   1535           *
   1536           * @brief   Send a Configure Reporting Response command
   1537           *
   1538           * @param   dstAddr - destination address
   1539           * @param   clusterID - cluster ID
   1540           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1541           * @param   direction - direction of the command
   1542           * @param   seqNum - transaction sequence number
   1543           *
   1544           * @return  ZSuccess if OK
   1545           */
   1546          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1547                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1548                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1549          {
   1550            uint16 dataLen;
   1551            uint8 *buf;
   1552            ZStatus_t status;
   1553          
   1554            // Atrribute list (Status, Direction and Attribute ID)
   1555            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   1556          
   1557            buf = zcl_mem_alloc( dataLen );
   1558            if ( buf != NULL )
   1559            {
   1560              // Load the buffer - serially
   1561              uint8 *pBuf = buf;
   1562              uint8 i;
   1563          
   1564              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   1565              {
   1566                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   1567                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   1568                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1569                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1570              }
   1571          
   1572              // If there's only a single status record and its status field is set to
   1573              // SUCCESS then omit the attribute ID field.
   1574              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   1575              {
   1576                dataLen = 1;
   1577              }
   1578          
   1579              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1580                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1581                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   1582              zcl_mem_free( buf );
   1583            }
   1584            else
   1585            {
   1586              status = ZMemError;
   1587            }
   1588          
   1589            return ( status );
   1590          }
   1591          #endif
   1592          
   1593          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1594          /*********************************************************************
   1595           * @fn      zcl_SendReadReportCfgCmd
   1596           *
   1597           * @brief   Send a Read Reporting Configuration command
   1598           *
   1599           * @param   dstAddr - destination address
   1600           * @param   clusterID - cluster ID
   1601           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1602           * @param   direction - direction of the command
   1603           * @param   seqNum - transaction sequence number
   1604           *
   1605           * @return  ZSuccess if OK
   1606           */
   1607          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1608                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1609                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1610          {
   1611            uint16 dataLen;
   1612            uint8 *buf;
   1613            ZStatus_t status;
   1614          
   1615            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1616          
   1617            buf = zcl_mem_alloc( dataLen );
   1618            if ( buf != NULL )
   1619            {
   1620              // Load the buffer - serially
   1621              uint8 *pBuf = buf;
   1622              uint8 i;
   1623          
   1624              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   1625              {
   1626                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   1627                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1628                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1629              }
   1630          
   1631              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1632                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1633              zcl_mem_free( buf );
   1634            }
   1635            else
   1636            {
   1637              status = ZMemError;
   1638            }
   1639          
   1640            return ( status );
   1641          }
   1642          #endif
   1643          
   1644          #ifdef ZCL_REPORTING_DEVICE
   1645          /*********************************************************************
   1646           * @fn      zcl_SendReadReportCfgRspCmd
   1647           *
   1648           * @brief   Send a Read Reporting Configuration Response command
   1649           *
   1650           * @param   dstAddr - destination address
   1651           * @param   clusterID - cluster ID
   1652           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1653           * @param   direction - direction of the command
   1654           * @param   seqNum - transaction sequence number
   1655           *
   1656           * @return  ZSuccess if OK
   1657           */
   1658          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1659                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1660                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1661          {
   1662            uint8 *buf;
   1663            uint16 dataLen = 0;
   1664            ZStatus_t status;
   1665            uint8 i;
   1666          
   1667            // Find out the data length
   1668            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1669            {
   1670              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1671          
   1672              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1673          
   1674              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1675              {
   1676                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1677                {
   1678                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1679          
   1680                  // Find out the size of the Reportable Change field (for Analog data types)
   1681                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1682                  {
   1683                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1684                  }
   1685                }
   1686                else
   1687                {
   1688                  dataLen += 2; // Timeout Period
   1689                }
   1690              }
   1691            }
   1692          
   1693            buf = zcl_mem_alloc( dataLen );
   1694            if ( buf != NULL )
   1695            {
   1696              // Load the buffer - serially
   1697              uint8 *pBuf = buf;
   1698          
   1699              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1700              {
   1701                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1702          
   1703                *pBuf++ = reportRspRec->status;
   1704                *pBuf++ = reportRspRec->direction;
   1705                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1706                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1707          
   1708                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1709                {
   1710                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1711                  {
   1712                    *pBuf++ = reportRspRec->dataType;
   1713                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1714                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1715                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1716                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1717          
   1718                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1719                    {
   1720                      pBuf = zclSerializeData( reportRspRec->dataType,
   1721                                               reportRspRec->reportableChange, pBuf );
   1722                    }
   1723                  }
   1724                  else
   1725                  {
   1726                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1727                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1728                  }
   1729                }
   1730              }
   1731          
   1732              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1733                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1734                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1735              zcl_mem_free( buf );
   1736            }
   1737            else
   1738            {
   1739              status = ZMemError;
   1740            }
   1741          
   1742            return ( status );
   1743          }
   1744          
   1745          /*********************************************************************
   1746           * @fn      zcl_SendReportCmd
   1747           *
   1748           * @brief   Send a Report command
   1749           *
   1750           * @param   dstAddr - destination address
   1751           * @param   clusterID - cluster ID
   1752           * @param   reportCmd - report command to be sent
   1753           * @param   direction - direction of the command
   1754           * @param   seqNum - transaction sequence number
   1755           *
   1756           * @return  ZSuccess if OK
   1757           */
   1758          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1759                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1760                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1761          {
   1762            uint16 dataLen = 0;
   1763            uint8 *buf;
   1764            ZStatus_t status;
   1765            uint8 i;
   1766          
   1767            // calculate the size of the command
   1768            for ( i = 0; i < reportCmd->numAttr; i++ )
   1769            {
   1770              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1771          
   1772              dataLen += 2 + 1; // Attribute ID + data type
   1773          
   1774              // Attribute Data
   1775              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1776            }
   1777          
   1778            buf = zcl_mem_alloc( dataLen );
   1779            if ( buf != NULL )
   1780            {
   1781              // Load the buffer - serially
   1782              uint8 *pBuf = buf;
   1783          
   1784              for ( i = 0; i < reportCmd->numAttr; i++ )
   1785              {
   1786                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1787          
   1788                *pBuf++ = LO_UINT16( reportRec->attrID );
   1789                *pBuf++ = HI_UINT16( reportRec->attrID );
   1790                *pBuf++ = reportRec->dataType;
   1791          
   1792                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1793              }
   1794          
   1795              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1796                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1797              zcl_mem_free( buf );
   1798            }
   1799            else
   1800            {
   1801              status = ZMemError;
   1802            }
   1803          
   1804            return ( status );
   1805          }
   1806          #endif
   1807          
   1808          /*********************************************************************
   1809           * @fn      zcl_SendDefaultRspCmd
   1810           *
   1811           * @brief   Send a Default Response command
   1812           *
   1813           *          Note: The manufacturer code field should be set if this
   1814           *          command is being sent in response to a manufacturer specific
   1815           *          command.
   1816           *
   1817           * @param   dstAddr - destination address
   1818           * @param   clusterID - cluster ID
   1819           * @param   defaultRspCmd - default response command to be sent
   1820           * @param   direction - direction of the command
   1821           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1822           * @param   seqNum - transaction sequence number
   1823           *
   1824           * @return  ZSuccess if OK
   1825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1826          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1827                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1828                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   1830            uint8 buf[2]; // Command ID and Status;
   1831          
   1832            // Load the buffer - serially
   1833            buf[0] = defaultRspCmd->commandID;
   1834            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_416:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   12....       LCALL     ?Subroutine32 & 0xFFFF
   1835          
   1836            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1837                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_43:
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV       ?V0,#0x2
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7416         MOV       A,#0x16
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   7415         MOV       A,#0x15
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000041   7416         MOV       A,#0x16
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   7416         MOV       A,#0x16
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   75..00       MOV       ?V0,#0x0
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..0B       MOV       ?V0,#0xb
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D   7402         MOV       A,#0x2
   \   00006F   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A                REQUIRE ??Subroutine236_0
   \   00000A                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002                REQUIRE ??Subroutine239_0
   \   000002                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine251_0
   \   000003                ; // Fall through to label ??Subroutine251_0
   1838          }
   1839          
   1840          #ifdef ZCL_DISCOVER
   1841          /*********************************************************************
   1842           * @fn      zcl_SendDiscoverCmdsCmd
   1843           *
   1844           * @brief   Send a Discover Commands command
   1845           *
   1846           * @param   dstAddr - destination address
   1847           * @param   clusterID - cluster ID
   1848           * @param   cmdType - requesting command ID
   1849           * @param   pDiscoverCmd - discover command to be sent
   1850           * @param   direction - direction of the command
   1851           * @param   seqNum - transaction sequence number
   1852           *
   1853           * @return  ZSuccess if OK
   1854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1855          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDiscoverCmdsCmd:
   1856                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1857                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   7411         MOV       A,#0x11
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine17 & 0xFFFF
   1859            uint8 payload[2]; // size of startCmdID and maxCmdID
   1860            ZStatus_t status;
   1861          
   1862            payload[0] = pDiscoverCmd->startCmdID;
   1863            payload[1] = pDiscoverCmd->maxCmdID;
   \                     ??CrossCallReturnLabel_417:
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   7413         MOV       A,#0x13
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   7414         MOV       A,#0x14
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FA           MOV       R2,A
   \   000034   7415         MOV       A,#0x15
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   1864          
   1865            // Send message for either commands received or generated
   1866            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   00003B   7410         MOV       A,#0x10
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6411         XRL       A,#0x11
   \   000043   AC..         MOV       R4,?XSP + 0
   \   000045   AD..         MOV       R5,?XSP + 1
   \   000047   8C..         MOV       ?V0,R4
   \   000049   8D..         MOV       ?V1,R5
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   703B         JNZ       ??zcl_SendDiscoverCmdsCmd_0
   1867            {
   1868              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1869                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \   00004F                ; Setup parameters for call to function zcl_SendCommand
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV       ?V0,#0x2
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   EB           MOV       A,R3
   \   00005E   F5..         MOV       ?V0,A
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   E4           CLR       A
   \   000066   F5..         MOV       ?V0,A
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   EA           MOV       A,R2
   \   00006E   F5..         MOV       ?V0,A
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   E9           MOV       A,R1
   \   000076   F5..         MOV       ?V0,A
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007D   75..00       MOV       ?V0,#0x0
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000085   75..11       MOV       ?V0,#0x11
   \   000088   8039         SJMP      ??zcl_SendDiscoverCmdsCmd_1
   1870            }
   1871            else  // generated
   1872            {
   1873              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1874                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \                     ??zcl_SendDiscoverCmdsCmd_0:
   \   00008A                ; Setup parameters for call to function zcl_SendCommand
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   75..02       MOV       ?V0,#0x2
   \   000090   75..00       MOV       ?V1,#0x0
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   EB           MOV       A,R3
   \   000099   F5..         MOV       ?V0,A
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V0,A
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   EA           MOV       A,R2
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   E9           MOV       A,R1
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   75..00       MOV       ?V0,#0x0
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   75..13       MOV       ?V0,#0x13
   \                     ??zcl_SendDiscoverCmdsCmd_1:
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C8   EE           MOV       A,R6
   \   0000C9   FC           MOV       R4,A
   \   0000CA   EF           MOV       A,R7
   \   0000CB   FD           MOV       R5,A
   \   0000CC   AA..         MOV       R2,?V4
   \   0000CE   AB..         MOV       R3,?V5
   \   0000D0   A9..         MOV       R1,?V2
   1875            }
   \   0000D2   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D8   E9           MOV       A,R1
   \   0000D9   F9           MOV       R1,A
   1876          
   1877            return ( status );
   \   0000DA   7402         MOV       A,#0x2
   \   0000DC   02....       LJMP      ?Subroutine5 & 0xFFFF
   1878          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine256_0
   \   000003                ; // Fall through to label ??Subroutine256_0
   1879          
   1880          /*********************************************************************
   1881           * @fn      zcl_SendDiscoverCmdsRspCmd
   1882           *
   1883           * @brief   Send a Discover Commands Response command
   1884           *
   1885           * @param   dstAddr - destination address
   1886           * @param   clusterID - cluster ID
   1887           * @param   pDiscoverRspCmd - response command to be sent
   1888           * @param   direction - direction of the command
   1889           * @param   seqNum - transaction sequence number
   1890           *
   1891           * @return  ZSuccess if OK
   1892           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1893          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverCmdsRspCmd:
   1894                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1895                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1896          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   04           INC       A
   1897            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   1898            uint8 *pCmdBuf;
   1899            uint8 i;
   1900            ZStatus_t status = ZSuccess;
   \   00001E   75..00       MOV       ?V2,#0x0
   1901          
   1902            // allocate memory
   1903            pCmdBuf = zcl_mem_alloc( payloadSize );
   \   000021   FE           MOV       R6,A
   \   000022   7F00         MOV       R7,#0x0
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   FA           MOV       R2,A
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   1904            if ( pCmdBuf != NULL )
   \                     ??CrossCallReturnLabel_391:
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??zcl_SendDiscoverCmdsRspCmd_0 & 0xFFFF
   1905            {
   1906              uint8 *pBuf = pCmdBuf;
   1907          
   1908              // Load the buffer - serially
   1909              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00002F   12....       LCALL     ?Subroutine46 & 0xFFFF
   1910              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_64:
   \   000032   801E         SJMP      ??zcl_SendDiscoverCmdsRspCmd_1
   1911              {
   1912                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   \                     ??zcl_SendDiscoverCmdsRspCmd_2:
   \   000034   EA           MOV       A,R2
   \   000035   FC           MOV       R4,A
   \   000036   85..82       MOV       DPL,?V0
   \   000039   85..83       MOV       DPH,?V1
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   2C           ADD       A,R4
   \   000041   FB           MOV       R3,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   3400         ADDC      A,#0x0
   \   000046   8B82         MOV       DPL,R3
   \   000048   12....       LCALL     ?Subroutine133 & 0xFFFF
   1913              }
   \                     ??CrossCallReturnLabel_459:
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   A882         MOV       R0,DPL
   \   00004F   A983         MOV       R1,DPH
   \   000051   0A           INC       R2
   \                     ??zcl_SendDiscoverCmdsRspCmd_1:
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FB           MOV       R3,A
   \   00005C   EA           MOV       A,R2
   \   00005D   C3           CLR       C
   \   00005E   9B           SUBB      A,R3
   \   00005F   40D3         JC        ??zcl_SendDiscoverCmdsRspCmd_2
   1914          
   1915              // Send response message for either commands received or generated
   1916              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   000061   85..82       MOV       DPL,?V0
   \   000064   85..83       MOV       DPH,?V1
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F8           MOV       R0,A
   \   00006A   7416         MOV       A,#0x16
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F9           MOV       R1,A
   \   000071   7417         MOV       A,#0x17
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   FA           MOV       R2,A
   \   000078   7418         MOV       A,#0x18
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   FB           MOV       R3,A
   \   00007F   7411         MOV       A,#0x11
   \   000081   68           XRL       A,R0
   \   000082   7040         JNZ       ??zcl_SendDiscoverCmdsRspCmd_3
   1917              {
   1918                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1919                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   000084                ; Setup parameters for call to function zcl_SendCommand
   \   000084   85....       MOV       ?V0,?V6
   \   000087   85....       MOV       ?V1,?V7
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   8E..         MOV       ?V0,R6
   \   000091   8F..         MOV       ?V1,R7
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   EB           MOV       A,R3
   \   000099   F5..         MOV       ?V0,A
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V0,A
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   EA           MOV       A,R2
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   E9           MOV       A,R1
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   8F..         MOV       ?V0,R7
   \   0000BA   78..         MOV       R0,#?V0
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   75..12       MOV       ?V0,#0x12
   \   0000C2   8043         SJMP      ??zcl_SendDiscoverCmdsRspCmd_4
   1920              }
   1921              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zcl_SendDiscoverCmdsRspCmd_3:
   \   0000C4   7413         MOV       A,#0x13
   \   0000C6   68           XRL       A,R0
   \   0000C7   7059         JNZ       ??zcl_SendDiscoverCmdsRspCmd_5
   1922              {
   1923                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1924                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   0000C9                ; Setup parameters for call to function zcl_SendCommand
   \   0000C9   85....       MOV       ?V0,?V6
   \   0000CC   85....       MOV       ?V1,?V7
   \   0000CF   78..         MOV       R0,#?V0
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   8E..         MOV       ?V0,R6
   \   0000D6   8F..         MOV       ?V1,R7
   \   0000D8   78..         MOV       R0,#?V0
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DD   EB           MOV       A,R3
   \   0000DE   F5..         MOV       ?V0,A
   \   0000E0   78..         MOV       R0,#?V0
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E5   E4           CLR       A
   \   0000E6   F5..         MOV       ?V0,A
   \   0000E8   78..         MOV       R0,#?V0
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   EA           MOV       A,R2
   \   0000EE   F5..         MOV       ?V0,A
   \   0000F0   78..         MOV       R0,#?V0
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F5   E9           MOV       A,R1
   \   0000F6   F5..         MOV       ?V0,A
   \   0000F8   78..         MOV       R0,#?V0
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FD   8F..         MOV       ?V0,R7
   \   0000FF   78..         MOV       R0,#?V0
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000104   75..14       MOV       ?V0,#0x14
   \                     ??zcl_SendDiscoverCmdsRspCmd_4:
   \   000107   78..         MOV       R0,#?V0
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010C   740B         MOV       A,#0xb
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   1925              }
   \   000111   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000114   740D         MOV       A,#0xd
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011F   E9           MOV       A,R1
   \   000120   F5..         MOV       ?V2,A
   1926          
   1927              zcl_mem_free( pCmdBuf );
   \                     ??zcl_SendDiscoverCmdsRspCmd_5:
   \   000122                ; Setup parameters for call to function osal_mem_free
   \   000122   AA..         MOV       R2,?V6
   \   000124   AB..         MOV       R3,?V7
   \   000126   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000129   8003         SJMP      ??zcl_SendDiscoverCmdsRspCmd_6
   1928            }
   1929            else
   1930            {
   1931              status = ZMemError;
   \                     ??zcl_SendDiscoverCmdsRspCmd_0:
   \   00012B   75..10       MOV       ?V2,#0x10
   1932            }
   1933          
   1934            return ( status );
   \                     ??zcl_SendDiscoverCmdsRspCmd_6:
   \   00012E   A9..         MOV       R1,?V2
   \   000130   7404         MOV       A,#0x4
   \   000132   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   1935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine242_0
   \   000002                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   A882         MOV       R0,DPL
   \   00000D   A983         MOV       R1,DPH
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   22           RET
   1936          
   1937          /*********************************************************************
   1938           * @fn      zcl_SendDiscoverAttrsCmd
   1939           *
   1940           * @brief   Send a Discover Attributes command
   1941           *
   1942           * @param   dstAddr - destination address
   1943           * @param   clusterID - cluster ID
   1944           * @param   pDiscoverCmd - discover command to be sent
   1945           * @param   direction - direction of the command
   1946           * @param   seqNum - transaction sequence number
   1947           *
   1948           * @return  ZSuccess if OK
   1949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1950          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsCmd:
   1951                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1952                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   1954            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1955            uint8 *buf;
   1956            ZStatus_t status;
   1957          
   1958            buf = zcl_mem_alloc( dataLen );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A03         MOV       R2,#0x3
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   1959            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_394:
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zcl_SendDiscoverAttrsCmd_0 & 0xFFFF
   \   00001B   7410         MOV       A,#0x10
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine126 & 0xFFFF
   1960            {
   1961              // Load the buffer - serially
   1962              uint8 *pBuf = buf;
   1963              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_244:
   \   000023   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000026   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   1964              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_419:
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   A3           INC       DPTR
   \   00002E   12....       LCALL     ?Subroutine49 & 0xFFFF
   1965              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   \                     ??CrossCallReturnLabel_71:
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
   1966          
   1967              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   1968                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000038                ; Setup parameters for call to function zcl_SendCommand
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   75..03       MOV       ?V4,#0x3
   \   000040   75..00       MOV       ?V5,#0x0
   \   000043   78..         MOV       R0,#?V4
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000048   7418         MOV       A,#0x18
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F5..         MOV       ?V3,A
   \   000050   78..         MOV       R0,#?V3
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000055   E4           CLR       A
   \   000056   F5..         MOV       ?V4,A
   \   000058   78..         MOV       R0,#?V4
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   741A         MOV       A,#0x1a
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V3,A
   \   000065   78..         MOV       R0,#?V3
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   741A         MOV       A,#0x1a
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F5..         MOV       ?V3,A
   \   000072   78..         MOV       R0,#?V3
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   75..00       MOV       ?V3,#0x0
   \   00007A   78..         MOV       R0,#?V3
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007F   75..0C       MOV       ?V3,#0xc
   \   000082   78..         MOV       R0,#?V3
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000087   EE           MOV       A,R6
   \   000088   FC           MOV       R4,A
   \   000089   EF           MOV       A,R7
   \   00008A   FD           MOV       R5,A
   \   00008B   AA..         MOV       R2,?V6
   \   00008D   AB..         MOV       R3,?V7
   \   00008F   A9..         MOV       R1,?V2
   \   000091   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   \   000097   E9           MOV       A,R1
   \   000098   FE           MOV       R6,A
   1969              zcl_mem_free( buf );
   \   000099                ; Setup parameters for call to function osal_mem_free
   \   000099   AA..         MOV       R2,?V0
   \   00009B   AB..         MOV       R3,?V1
   \   00009D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A0   8002         SJMP      ??zcl_SendDiscoverAttrsCmd_1
   1970            }
   1971            else
   1972            {
   1973              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsCmd_0:
   \   0000A2   7E10         MOV       R6,#0x10
   1974            }
   1975          
   1976            return ( status );
   \                     ??zcl_SendDiscoverAttrsCmd_1:
   \   0000A4   EE           MOV       A,R6
   \   0000A5   F9           MOV       R1,A
   \   0000A6   02....       LJMP      ??Subroutine246_0 & 0xFFFF
   1977          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   1978          
   1979          /*********************************************************************
   1980           * @fn      zcl_SendDiscoverAttrsRspCmd
   1981           *
   1982           * @brief   Send a Discover Attributes Response command
   1983           *
   1984           * @param   dstAddr - destination address
   1985           * @param   clusterID - cluster ID
   1986           * @param   reportRspCmd - report response command to be sent
   1987           * @param   direction - direction of the command
   1988           * @param   seqNum - transaction sequence number
   1989           *
   1990           * @return  ZSuccess if OK
   1991           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1992          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsRspCmd:
   1993                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   1994                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1995          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000020   7415         MOV       A,#0x15
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000028   75F003       MOV       B,#0x3
   \   00002B   A4           MUL       AB
   \   00002C   A9F0         MOV       R1,B
   \   00002E   2401         ADD       A,#0x1
   \   000030   FE           MOV       R6,A
   \   000031   E4           CLR       A
   \   000032   39           ADDC      A,R1
   \   000033   12....       LCALL     ?Subroutine151 & 0xFFFF
   1996            uint16 dataLen = 1; // Discovery complete
   1997            uint8 *buf;
   1998            ZStatus_t status;
   1999          
   2000            // calculate the size of the command
   2001            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   2002          
   2003            buf = zcl_mem_alloc( dataLen );
   2004            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_452:
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??zcl_SendDiscoverAttrsRspCmd_0 & 0xFFFF
   2005            {
   2006              // Load the buffer - serially
   2007              uint8 i;
   2008              uint8 *pBuf = buf;
   2009          
   2010              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00003B   12....       LCALL     ?Subroutine46 & 0xFFFF
   2011          
   2012              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_65:
   \   00003E   8025         SJMP      ??zcl_SendDiscoverAttrsRspCmd_1
   2013              {
   2014                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   \                     ??zcl_SendDiscoverAttrsRspCmd_2:
   \   000040   EA           MOV       A,R2
   \   000041   75F003       MOV       B,#0x3
   \   000044   A4           MUL       AB
   \   000045   FC           MOV       R4,A
   \   000046   ADF0         MOV       R5,B
   \   000048   E5..         MOV       A,?V0
   \   00004A   2C           ADD       A,R4
   \   00004B   FC           MOV       R4,A
   \   00004C   E5..         MOV       A,?V1
   \   00004E   3D           ADDC      A,R5
   \   00004F   12....       LCALL     ?Subroutine144 & 0xFFFF
   2015                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   2016                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   2017              }
   \                     ??CrossCallReturnLabel_275:
   \   000052   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000055   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000058   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   00005B   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00005E   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000061   5001         JNC       ??zcl_SendDiscoverAttrsRspCmd_3
   \   000063   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsRspCmd_3:
   \   000064   0A           INC       R2
   \                     ??zcl_SendDiscoverAttrsRspCmd_1:
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FB           MOV       R3,A
   \   00006E   EA           MOV       A,R2
   \   00006F   C3           CLR       C
   \   000070   9B           SUBB      A,R3
   \   000071   40CD         JC        ??zcl_SendDiscoverAttrsRspCmd_2
   2018          
   2019              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   2020                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000073                ; Setup parameters for call to function zcl_SendCommand
   \   000073   78..         MOV       R0,#?V2
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   8E..         MOV       ?V0,R6
   \   00007A   8F..         MOV       ?V1,R7
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   741D         MOV       A,#0x1d
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008C   E4           CLR       A
   \   00008D   F5..         MOV       ?V0,A
   \   00008F   F5..         MOV       ?V1,A
   \   000091   78..         MOV       R0,#?V0
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   741F         MOV       A,#0x1f
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A1   741F         MOV       A,#0x1f
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AC   75..00       MOV       ?V0,#0x0
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B4   75..0D       MOV       ?V0,#0xd
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   740C         MOV       A,#0xc
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D3   E9           MOV       A,R1
   \   0000D4   FE           MOV       R6,A
   2021              zcl_mem_free( buf );
   \   0000D5                ; Setup parameters for call to function osal_mem_free
   \   0000D5   AA..         MOV       R2,?V2
   \   0000D7   AB..         MOV       R3,?V3
   \   0000D9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000DC   8002         SJMP      ??zcl_SendDiscoverAttrsRspCmd_4
   2022            }
   2023            else
   2024            {
   2025              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsRspCmd_0:
   \   0000DE   7E10         MOV       R6,#0x10
   2026            }
   2027          
   2028            return ( status );
   \                     ??zcl_SendDiscoverAttrsRspCmd_4:
   \   0000E0   02....       LJMP      ?Subroutine7 & 0xFFFF
   2029          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   FF           MOV       R7,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                REQUIRE ??Subroutine240_0
   \   000001                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   FD           MOV       R5,A
   \   000001   EC           MOV       A,R4
   \   000002   2402         ADD       A,#0x2
   \   000004   F5..         MOV       ?V4,A
   \   000006   E4           CLR       A
   \   000007   3D           ADDC      A,R5
   \   000008   F5..         MOV       ?V5,A
   \   00000A   85..82       MOV       DPL,?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   8C82         MOV       DPL,R4
   \   000004   8D83         MOV       DPH,R5
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000003   22           RET
   2030          
   2031          /*********************************************************************
   2032           * @fn      zcl_SendDiscoverAttrsExt
   2033           *
   2034           * @brief   Send a Discover Attributes Extended command
   2035           *
   2036           * @param   dstAddr - destination address
   2037           * @param   clusterID - cluster ID
   2038           * @param   pDiscoverAttrsExt:
   2039           *            - startAttrID: the first attribute to be selected
   2040           *            - maxAttrIDs: maximum number of returned attributes
   2041           * @param   direction - direction of the command
   2042           * @param   seqNum - transaction sequence number
   2043           *
   2044           * @return  ZSuccess if OK
   2045           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2046          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExt:
   2047                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   2048                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2049          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740D         MOV       A,#0xd
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   2050            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   2051            ZStatus_t status;
   2052          
   2053            // Load the buffer - serially
   2054            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   2055            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   \                     ??CrossCallReturnLabel_418:
   \   000014   F5..         MOV       ?V0,A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E5..         MOV       A,?V0
   \   00001D   12....       LCALL     ?Subroutine49 & 0xFFFF
   2056            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   \                     ??CrossCallReturnLabel_72:
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   12....       LCALL     ?Subroutine32 & 0xFFFF
   2057          
   2058            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   2059                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   2060          
   2061            return ( status );
   \                     ??CrossCallReturnLabel_44:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75..03       MOV       ?V0,#0x3
   \   000032   75..00       MOV       ?V1,#0x0
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7415         MOV       A,#0x15
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000045   E4           CLR       A
   \   000046   F5..         MOV       ?V0,A
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7417         MOV       A,#0x17
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   7417         MOV       A,#0x17
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   75..00       MOV       ?V0,#0x0
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006B   75..15       MOV       ?V0,#0x15
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000073   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   \   000079   7403         MOV       A,#0x3
   \   00007B   02....       LJMP      ?Subroutine3 & 0xFFFF
   2062          }
   2063          
   2064          /*********************************************************************
   2065           * @fn      zcl_SendDiscoverAttrsExtRsp
   2066           *
   2067           * @brief   Send a Discover Attributes Extended Response command
   2068           *
   2069           * @param   dstAddr - destination address
   2070           * @param   clusterID - cluster ID
   2071           * @param   pDiscoverRspCmd:
   2072           *            - discComplete: indicates whether all requested attributes returned
   2073           *            - attrID: attribute ID
   2074           *            - attrDataType: data type of the given attribute
   2075           *            - attrAccessControl: access control of the given attribute
   2076           * @param   direction - direction of the command
   2077           * @param   seqNum - transaction sequence number
   2078           *
   2079           * @return  ZSuccess if OK
   2080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2081          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExtRsp:
   2082                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   2083                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2084          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000020   7415         MOV       A,#0x15
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000028   F5..         MOV       ?V2,A
   \   00002A   75..00       MOV       ?V3,#0x0
   \   00002D   7402         MOV       A,#0x2
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?S_SHL
   \   000034   E5..         MOV       A,?V2
   \   000036   2401         ADD       A,#0x1
   \   000038   FE           MOV       R6,A
   \   000039   E4           CLR       A
   \   00003A   35..         ADDC      A,?V3
   \   00003C   12....       LCALL     ?Subroutine151 & 0xFFFF
   2085            uint8 *buf;
   2086            uint8 i;
   2087            uint16 dataLen = 1; // Discovery complete
   2088            ZStatus_t status;
   2089          
   2090            // calculate the size of the command
   2091            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   2092          
   2093            buf = zcl_mem_alloc( dataLen );
   2094            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_453:
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??zcl_SendDiscoverAttrsExtRsp_0 & 0xFFFF
   2095            {
   2096              // Load the buffer - serially
   2097              uint8 *pBuf = buf;
   2098              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000044   85..82       MOV       DPL,?V0
   \   000047   85..83       MOV       DPH,?V1
   \   00004A   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00004D   A3           INC       DPTR
   \   00004E   AA82         MOV       R2,DPL
   \   000050   AB83         MOV       R3,DPH
   2099              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \   000052   7900         MOV       R1,#0x0
   \   000054   8039         SJMP      ??zcl_SendDiscoverAttrsExtRsp_1
   2100              {
   2101                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   \                     ??zcl_SendDiscoverAttrsExtRsp_2:
   \   000056   E9           MOV       A,R1
   \   000057   F5..         MOV       ?V4,A
   \   000059   75..00       MOV       ?V5,#0x0
   \   00005C   7402         MOV       A,#0x2
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?S_SHL
   \   000063   E5..         MOV       A,?V0
   \   000065   25..         ADD       A,?V4
   \   000067   FC           MOV       R4,A
   \   000068   E5..         MOV       A,?V1
   \   00006A   35..         ADDC      A,?V5
   \   00006C   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00006F   F583         MOV       DPH,A
   \   000071   12....       LCALL     ?Subroutine23 & 0xFFFF
   2102                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2103                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   \                     ??CrossCallReturnLabel_26:
   \   000074   8C82         MOV       DPL,R4
   \   000076   8D83         MOV       DPH,R5
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   12....       LCALL     ?Subroutine109 & 0xFFFF
   2104                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   2105              }
   \                     ??CrossCallReturnLabel_611:
   \   00007E   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000081   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   F0           MOVX      @DPTR,A
   \   000087   EA           MOV       A,R2
   \   000088   2404         ADD       A,#0x4
   \   00008A   FA           MOV       R2,A
   \   00008B   5001         JNC       ??zcl_SendDiscoverAttrsExtRsp_3
   \   00008D   0B           INC       R3
   \                     ??zcl_SendDiscoverAttrsExtRsp_3:
   \   00008E   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsExtRsp_1:
   \   00008F   85..82       MOV       DPL,?V0
   \   000092   85..83       MOV       DPH,?V1
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F8           MOV       R0,A
   \   000098   E9           MOV       A,R1
   \   000099   C3           CLR       C
   \   00009A   98           SUBB      A,R0
   \   00009B   40B9         JC        ??zcl_SendDiscoverAttrsExtRsp_2
   2106          
   2107              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2108                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00009D                ; Setup parameters for call to function zcl_SendCommand
   \   00009D   78..         MOV       R0,#?V2
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   8E..         MOV       ?V0,R6
   \   0000A4   8F..         MOV       ?V1,R7
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   741D         MOV       A,#0x1d
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B6   E4           CLR       A
   \   0000B7   F5..         MOV       ?V0,A
   \   0000B9   F5..         MOV       ?V1,A
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   741F         MOV       A,#0x1f
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   741F         MOV       A,#0x1f
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D6   75..00       MOV       ?V0,#0x0
   \   0000D9   78..         MOV       R0,#?V0
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DE   75..16       MOV       ?V0,#0x16
   \   0000E1   78..         MOV       R0,#?V0
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E6   740C         MOV       A,#0xc
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FD   E9           MOV       A,R1
   \   0000FE   FE           MOV       R6,A
   2109              zcl_mem_free( buf );
   \   0000FF                ; Setup parameters for call to function osal_mem_free
   \   0000FF   AA..         MOV       R2,?V2
   \   000101   AB..         MOV       R3,?V3
   \   000103   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000106   8002         SJMP      ??zcl_SendDiscoverAttrsExtRsp_4
   2110            }
   2111            else
   2112            {
   2113              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsExtRsp_0:
   \   000108   7E10         MOV       R6,#0x10
   2114            }
   2115          
   2116            return ( status );
   \                     ??zcl_SendDiscoverAttrsExtRsp_4:
   \   00010A   02....       LJMP      ?Subroutine7 & 0xFFFF
   2117          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine270_0
   \   000001                ; // Fall through to label ??Subroutine270_0
   2118          #endif // ZCL_DISCOVER
   2119          
   2120          /*********************************************************************
   2121           * @fn      zcl_ProcessMessageMSG
   2122           *
   2123           * @brief   Data message processor callback.  This function processes
   2124           *          any incoming data - probably from other devices.  So, based
   2125           *          on cluster ID, perform the intended action.
   2126           *
   2127           * @param   pkt - incoming message
   2128           *
   2129           * @return  zclProcMsgStatus_t
   2130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2131          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2132          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2133            endPointDesc_t *epDesc;
   2134            zclIncoming_t inMsg;
   2135            zclLibPlugin_t *pInPlugin;
   2136            zclDefaultRspCmd_t defautlRspCmd;
   2137            uint8 options;
   2138            uint8 securityEnable;
   2139            uint8 interPanMsg;
   2140            ZStatus_t status = ZFailure;
   2141            uint8 defaultResponseSent = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   2142          
   2143            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000010   EA           MOV       A,R2
   \   000011   2420         ADD       A,#0x20
   \   000013   F5..         MOV       ?V2,A
   \   000015   E4           CLR       A
   \   000016   3F           ADDC      A,R7
   \   000017   F5..         MOV       ?V3,A
   \   000019   85..82       MOV       DPL,?V2
   \   00001C   F583         MOV       DPH,A
   \   00001E   C3           CLR       C
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   9403         SUBB      A,#0x3
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   9400         SUBB      A,#0x0
   \   000026   5005         JNC       ??zcl_ProcessMessageMSG_0
   2144            {
   2145              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   000028   7901         MOV       R1,#0x1
   \   00002A   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2146            }
   2147          
   2148            // Initialize
   2149            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   00002D   90....       MOV       DPTR,#rawAFMsg
   \   000030   12....       LCALL     ?Subroutine18 & 0xFFFF
   2150            inMsg.msg = pkt;
   \                     ??CrossCallReturnLabel_11:
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   2151            inMsg.attrCmd = NULL;
   \                     ??CrossCallReturnLabel_477:
   \   000039   740E         MOV       A,#0xe
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   F0           MOVX      @DPTR,A
   2152            inMsg.pData = NULL;
   \   000042   740A         MOV       A,#0xa
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E4           CLR       A
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
   2153            inMsg.pDataLen = 0;
   \   00004B   740C         MOV       A,#0xc
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   E4           CLR       A
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   F0           MOVX      @DPTR,A
   2154          
   2155            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   000054   EA           MOV       A,R2
   \   000055   2422         ADD       A,#0x22
   \   000057   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   00005A   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   AA82         MOV       R2,DPL
   \   000062   AB83         MOV       R3,DPH
   \   000064   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   000067   8A..         MOV       ?V4,R2
   \   000069   8B..         MOV       ?V5,R3
   \   00006B   A8..         MOV       R0,?V4
   \   00006D   A9..         MOV       R1,?V5
   \   00006F   740A         MOV       A,#0xa
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   2156            inMsg.pDataLen = pkt->cmd.DataLength;
   2157            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_478:
   \   000077   85..82       MOV       DPL,?V2
   \   00007A   85..83       MOV       DPH,?V3
   \   00007D   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000080   EA           MOV       A,R2
   \   000081   C3           CLR       C
   \   000082   98           SUBB      A,R0
   \   000083   F8           MOV       R0,A
   \   000084   EB           MOV       A,R3
   \   000085   99           SUBB      A,R1
   \   000086   F9           MOV       R1,A
   \   000087   85..82       MOV       DPL,?V0
   \   00008A   85..83       MOV       DPH,?V1
   \   00008D   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000090   740C         MOV       A,#0xc
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   2158          
   2159            // Temporary workaround to allow callback functions access to the
   2160            // transaction sequence number.  Callback functions will call
   2161            // zcl_getParsedTransSeqNum() to retrieve this number.
   2162            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \                     ??CrossCallReturnLabel_619:
   \   000098   7408         MOV       A,#0x8
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000A1   F0           MOVX      @DPTR,A
   2163          
   2164            // Find the wanted endpoint
   2165            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000A2   EE           MOV       A,R6
   \   0000A3   2414         ADD       A,#0x14
   \   0000A5   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F9           MOV       R1,A
   \   0000AA   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000AD   8A82         MOV       DPL,R2
   \   0000AF   8B83         MOV       DPH,R3
   2166            if ( epDesc == NULL )
   \   0000B1   E582         MOV       A,DPL
   \   0000B3   4583         ORL       A,DPH
   \   0000B5   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2167            {
   2168              rawAFMsg = NULL;
   \   0000B7   90....       MOV       DPTR,#rawAFMsg
   \   0000BA   E4           CLR       A
   \   0000BB   F0           MOVX      @DPTR,A
   \   0000BC   A3           INC       DPTR
   \   0000BD   F0           MOVX      @DPTR,A
   2169              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000BE   7902         MOV       R1,#0x2
   \   0000C0   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2170            }
   2171          
   2172            if ( ( epDesc->simpleDesc == NULL ) ||
   2173                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2174                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000C3   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   0000C6   602B         JZ        ??zcl_ProcessMessageMSG_3
   \   0000C8   EE           MOV       A,R6
   \   0000C9   2404         ADD       A,#0x4
   \   0000CB   F5..         MOV       ?V2,A
   \   0000CD   E4           CLR       A
   \   0000CE   3F           ADDC      A,R7
   \   0000CF   F5..         MOV       ?V3,A
   \   0000D1                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000D1   A3           INC       DPTR
   \   0000D2   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000D5   740B         MOV       A,#0xb
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   FD           MOV       R5,A
   \   0000DC   7406         MOV       A,#0x6
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   5403         ANL       A,#0x3
   \   0000E4   FC           MOV       R4,A
   \   0000E5   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000E8   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000EB   7402         MOV       A,#0x2
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F0   E9           MOV       A,R1
   \   0000F1   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2175            {
   2176              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   0000F3   90....       MOV       DPTR,#rawAFMsg
   \   0000F6   E4           CLR       A
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   F0           MOVX      @DPTR,A
   2177              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   0000FA   7903         MOV       R1,#0x3
   \   0000FC   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2178            }
   2179          
   2180          #if defined ( INTER_PAN )
   2181            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   2182            {
   2183              // No foundation command is supported thru Inter-PAN communication.
   2184              // But the Light Link cluster uses a different Frame Control format
   2185              // for it's Inter-PAN messages, where the messages could be confused
   2186              // with the foundation commands.
   2187              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   2188              {
   2189                rawAFMsg = NULL;
   2190                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   2191              }
   2192          
   2193              interPanMsg = TRUE;
   2194              options = AF_TX_OPTIONS_NONE;
   2195            }
   2196            else
   2197          #endif
   2198            {
   2199              interPanMsg = FALSE;
   2200              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \                     ??zcl_ProcessMessageMSG_4:
   \   0000FF                ; Setup parameters for call to function zclGetClusterOption
   \   0000FF   12....       LCALL     ?Subroutine68 & 0xFFFF
   2201            }
   \                     ??CrossCallReturnLabel_129:
   \   000102   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000105   E9           MOV       A,R1
   \   000106   FC           MOV       R4,A
   2202          
   2203            // Find the appropriate plugin
   2204            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   000107   85..82       MOV       DPL,?V2
   \   00010A   85..83       MOV       DPH,?V3
   \   00010D   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000110   8A..         MOV       ?V4,R2
   \   000112   F5..         MOV       ?V5,A
   \   000114   90....       MOV       DPTR,#plugins
   \   000117   8004         SJMP      ??zcl_ProcessMessageMSG_5
   \                     ??zcl_ProcessMessageMSG_6:
   \   000119   8882         MOV       DPL,R0
   \   00011B   8983         MOV       DPH,R1
   \                     ??zcl_ProcessMessageMSG_5:
   \   00011D   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000120   7003         JNZ       $+5
   \   000122   02....       LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
   \   000125   8882         MOV       DPL,R0
   \   000127   8983         MOV       DPH,R1
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00012E   C3           CLR       C
   \   00012F   EA           MOV       A,R2
   \   000130   95..         SUBB      A,?V6
   \   000132   EB           MOV       A,R3
   \   000133   95..         SUBB      A,?V7
   \   000135   40E2         JC        ??zcl_ProcessMessageMSG_6
   \   000137   8882         MOV       DPL,R0
   \   000139   8983         MOV       DPH,R1
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   C3           CLR       C
   \   000140   E0           MOVX      A,@DPTR
   \   000141   95..         SUBB      A,?V4
   \   000143   A3           INC       DPTR
   \   000144   E0           MOVX      A,@DPTR
   \   000145   95..         SUBB      A,?V5
   \   000147   40D0         JC        ??zcl_ProcessMessageMSG_6
   \   000149   88..         MOV       ?V4,R0
   \   00014B   89..         MOV       ?V5,R1
   \   00014D   7404         MOV       A,#0x4
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   E0           MOVX      A,@DPTR
   \   000153   5407         ANL       A,#0x7
   \   000155   700D         JNZ       ??zcl_ProcessMessageMSG_8
   \   000157   7409         MOV       A,#0x9
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   640B         XRL       A,#0xb
   \   00015F   7003         JNZ       $+5
   \   000161   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2205          
   2206            // Local and remote Security options must match except for Default Response command
   2207            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   2208            {
   2209              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zcl_ProcessMessageMSG_8:
   \   000164   EC           MOV       A,R4
   \   000165   A2E6         MOV       C,0xE0 /* A   */.6
   \   000167   4003         JC        $+5
   \   000169   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   \   00016C   EE           MOV       A,R6
   \   00016D   2419         ADD       A,#0x19
   \   00016F   F582         MOV       DPL,A
   \   000171   E4           CLR       A
   \   000172   3F           ADDC      A,R7
   \   000173   F583         MOV       DPH,A
   \   000175   E0           MOVX      A,@DPTR
   \   000176   6003         JZ        $+5
   \   000178   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2210          
   2211              // Make sure that Clusters specifically defined to use security are received secure,
   2212              // any other cluster that wants to use APS security will be allowed
   2213              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   2214              {
   2215                if ( UNICAST_MSG( inMsg.msg ) )
   \   00017B   7402         MOV       A,#0x2
   \   00017D   12....       LCALL     ?XSTACK_DISP0_8
   \   000180   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000183   707E         JNZ       ??zcl_ProcessMessageMSG_10
   \   000185   7402         MOV       A,#0x2
   \   000187   12....       LCALL     ?XSTACK_DISP0_8
   \   00018A   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   00018D   7074         JNZ       ??zcl_ProcessMessageMSG_10
   2216                {
   2217                  // Send a Default Response command back with no Application Link Key security
   2218                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   00018F                ; Setup parameters for call to function zclSetSecurityOption
   \   00018F   7C00         MOV       R4,#0x0
   \   000191   85..82       MOV       DPL,?V0
   \   000194   85..83       MOV       DPH,?V1
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F9           MOV       R1,A
   \   000199   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2219          
   2220                  defautlRspCmd.statusCode = status;
   \   00019C   7401         MOV       A,#0x1
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   7401         MOV       A,#0x1
   \   0001A3   F0           MOVX      @DPTR,A
   2221                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001A4   7409         MOV       A,#0x9
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   12....       LCALL     ?Subroutine123 & 0xFFFF
   2222                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2223                                         inMsg.msg->clusterId, &defautlRspCmd,
   2224                                         !inMsg.hdr.fc.direction, true,
   2225                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_238:
   \   0001AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   F5..         MOV       ?V4,A
   \   0001B2   78..         MOV       R0,#?V4
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B7   7407         MOV       A,#0x7
   \   0001B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001BF   75..01       MOV       ?V4,#0x1
   \   0001C2   78..         MOV       R0,#?V4
   \   0001C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C7   7408         MOV       A,#0x8
   \   0001C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0001CF   F5..         MOV       ?V4,A
   \   0001D1   78..         MOV       R0,#?V4
   \   0001D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D6   7405         MOV       A,#0x5
   \   0001D8   12....       LCALL     ?XSTACK_DISP100_8
   \   0001DB   88..         MOV       ?V4,R0
   \   0001DD   89..         MOV       ?V5,R1
   \   0001DF   78..         MOV       R0,#?V4
   \   0001E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E4   7409         MOV       A,#0x9
   \   0001E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E9   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   0001F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0001F8   12....       LCALL     ?DEALLOC_XSTACK8
   2226          
   2227                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   0001FB                ; Setup parameters for call to function zclSetSecurityOption
   \   0001FB   7C01         MOV       R4,#0x1
   \   0001FD   12....       LCALL     ?Subroutine68 & 0xFFFF
   2228                }
   \                     ??CrossCallReturnLabel_130:
   \   000200   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2229          
   2230                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_10:
   \   000203   90....       MOV       DPTR,#rawAFMsg
   \   000206   E4           CLR       A
   \   000207   F0           MOVX      @DPTR,A
   \   000208   A3           INC       DPTR
   \   000209   F0           MOVX      @DPTR,A
   2231                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   00020A   7905         MOV       R1,#0x5
   \   00020C   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2232              }
   2233            }
   \                     ??zcl_ProcessMessageMSG_7:
   \   00020F   75..00       MOV       ?V4,#0x0
   \   000212   75..00       MOV       ?V5,#0x0
   2234          
   2235            // Is this a foundation type message
   2236            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_9:
   \   000215   7404         MOV       A,#0x4
   \   000217   12....       LCALL     ?XSTACK_DISP0_8
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   F8           MOV       R0,A
   \   00021C   5403         ANL       A,#0x3
   \   00021E   6003         JZ        $+5
   \   000220   02....       LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
   2237            {
   2238              if ( inMsg.hdr.fc.manuSpecific )
   \   000223   E8           MOV       A,R0
   \   000224   5404         ANL       A,#0x4
   \   000226   6005         JZ        ??zcl_ProcessMessageMSG_12
   2239              {
   2240                // We don't support any manufacturer specific command
   2241                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   000228   7E84         MOV       R6,#-0x7c
   \   00022A   02....       LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
   2242              }
   2243              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2244                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zcl_ProcessMessageMSG_12:
   \   00022D   7409         MOV       A,#0x9
   \   00022F   12....       LCALL     ?XSTACK_DISP0_8
   \   000232   E0           MOVX      A,@DPTR
   \   000233   F8           MOV       R0,A
   \   000234   C3           CLR       C
   \   000235   9417         SUBB      A,#0x17
   \   000237   4003         JC        $+5
   \   000239   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   \   00023C   E8           MOV       A,R0
   \   00023D   F5..         MOV       ?V2,A
   \   00023F   75..00       MOV       ?V3,#0x0
   \   000242   7402         MOV       A,#0x2
   \   000244   78..         MOV       R0,#?V2
   \   000246   12....       LCALL     ?S_SHL
   \   000249   74..         MOV       A,#zclCmdTable & 0xff
   \   00024B   25..         ADD       A,?V2
   \   00024D   F582         MOV       DPL,A
   \   00024F   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   000251   35..         ADDC      A,?V3
   \   000253   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000256   E8           MOV       A,R0
   \   000257   49           ORL       A,R1
   \   000258   7003         JNZ       $+5
   \   00025A   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   2245              {
   2246                zclParseCmd_t parseCmd;
   2247          
   2248                parseCmd.endpoint = pkt->endPoint;
   \   00025D   85..82       MOV       DPL,?V0
   \   000260   85..83       MOV       DPH,?V1
   \   000263   E0           MOVX      A,@DPTR
   \   000264   C0E0         PUSH      A
   \   000266   7410         MOV       A,#0x10
   \   000268   12....       LCALL     ?XSTACK_DISP0_8
   \   00026B   D0E0         POP       A
   \   00026D   F0           MOVX      @DPTR,A
   2249                parseCmd.dataLen = inMsg.pDataLen;
   \   00026E   740C         MOV       A,#0xc
   \   000270   12....       LCALL     ?XSTACK_DISP0_8
   \   000273   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000276   7411         MOV       A,#0x11
   \   000278   12....       LCALL     ?XSTACK_DISP0_8
   \   00027B   12....       LCALL     ??Subroutine291_0 & 0xFFFF
   2250                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_745:
   \   00027E   12....       LCALL     ?XSTACK_DISP0_8
   \   000281   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000284   7413         MOV       A,#0x13
   \   000286   12....       LCALL     ?XSTACK_DISP0_8
   \   000289   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   2251          
   2252                // Parse the command, remember that the return value is a pointer to allocated memory
   2253                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_479:
   \   00028C                ; Setup parameters for indirect call
   \   00028C   7410         MOV       A,#0x10
   \   00028E   12....       LCALL     ?XSTACK_DISP101_8
   \   000291   8882         MOV       DPL,R0
   \   000293   8983         MOV       DPH,R1
   \   000295   12....       LCALL     ?CALL_IND
   \   000298   8B..         MOV       ?V1,R3
   \   00029A   A9..         MOV       R1,?V1
   \   00029C   740E         MOV       A,#0xe
   \   00029E   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A1   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   2254                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_480:
   \   0002A4   EA           MOV       A,R2
   \   0002A5   49           ORL       A,R1
   \   0002A6   6048         JZ        ??CrossCallReturnLabel_189
   \   0002A8   7409         MOV       A,#0x9
   \   0002AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AD   E0           MOVX      A,@DPTR
   \   0002AE   F5..         MOV       ?V0,A
   \   0002B0   75..00       MOV       ?V1,#0x0
   \   0002B3   7402         MOV       A,#0x2
   \   0002B5   78..         MOV       R0,#?V0
   \   0002B7   12....       LCALL     ?S_SHL
   \   0002BA   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   0002BC   25..         ADD       A,?V0
   \   0002BE   F582         MOV       DPL,A
   \   0002C0   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   0002C2   35..         ADDC      A,?V1
   \   0002C4   F583         MOV       DPH,A
   \   0002C6   E4           CLR       A
   \   0002C7   93           MOVC      A,@A+DPTR
   \   0002C8   F8           MOV       R0,A
   \   0002C9   7401         MOV       A,#0x1
   \   0002CB   93           MOVC      A,@A+DPTR
   \   0002CC   8882         MOV       DPL,R0
   \   0002CE   F583         MOV       DPH,A
   \   0002D0   E582         MOV       A,DPL
   \   0002D2   4583         ORL       A,DPH
   \   0002D4   6012         JZ        ??zcl_ProcessMessageMSG_15
   2255                {
   2256                  // Process the command
   2257                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   0002D6                ; Setup parameters for indirect call
   \   0002D6   7402         MOV       A,#0x2
   \   0002D8   12....       LCALL     ?XSTACK_DISP101_8
   \   0002DB   12....       LCALL     ?CALL_IND
   2258                  {
   2259                    // Couldn't find attribute in the table.
   2260                  }
   2261                }
   2262          
   2263                // Free the buffer
   2264                if ( inMsg.attrCmd )
   \   0002DE   740E         MOV       A,#0xe
   \   0002E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E3   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   0002E6   6008         JZ        ??CrossCallReturnLabel_189
   2265                {
   2266                  zcl_mem_free( inMsg.attrCmd );
   \                     ??zcl_ProcessMessageMSG_15:
   \   0002E8                ; Setup parameters for call to function osal_mem_free
   \   0002E8   740E         MOV       A,#0xe
   \   0002EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002ED   12....       LCALL     ?Subroutine95 & 0xFFFF
   2267                }
   2268          
   2269                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??CrossCallReturnLabel_189:
   \   0002F0   7409         MOV       A,#0x9
   \   0002F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F5   E0           MOVX      A,@DPTR
   \   0002F6   F8           MOV       R0,A
   \   0002F7   605C         JZ        ??zcl_ProcessMessageMSG_16
   \   0002F9   7402         MOV       A,#0x2
   \   0002FB   68           XRL       A,R0
   \   0002FC   6057         JZ        ??zcl_ProcessMessageMSG_16
   \   0002FE   7403         MOV       A,#0x3
   \   000300   68           XRL       A,R0
   \   000301   6052         JZ        ??zcl_ProcessMessageMSG_16
   \   000303   7405         MOV       A,#0x5
   \   000305   68           XRL       A,R0
   \   000306   604D         JZ        ??zcl_ProcessMessageMSG_16
   \   000308   7406         MOV       A,#0x6
   \   00030A   68           XRL       A,R0
   \   00030B   6048         JZ        ??zcl_ProcessMessageMSG_16
   \   00030D   7408         MOV       A,#0x8
   \   00030F   68           XRL       A,R0
   \   000310   6043         JZ        ??zcl_ProcessMessageMSG_16
   \   000312   740C         MOV       A,#0xc
   \   000314   68           XRL       A,R0
   \   000315   603E         JZ        ??zcl_ProcessMessageMSG_16
   \   000317   7411         MOV       A,#0x11
   \   000319   68           XRL       A,R0
   \   00031A   6039         JZ        ??zcl_ProcessMessageMSG_16
   \   00031C   7413         MOV       A,#0x13
   \   00031E   68           XRL       A,R0
   \   00031F   6034         JZ        ??zcl_ProcessMessageMSG_16
   \   000321   7415         MOV       A,#0x15
   \   000323   68           XRL       A,R0
   \   000324   602F         JZ        ??zcl_ProcessMessageMSG_16
   \   000326   740B         MOV       A,#0xb
   \   000328   68           XRL       A,R0
   \   000329   602A         JZ        ??zcl_ProcessMessageMSG_16
   2270                {
   2271                  rawAFMsg = NULL;
   2272                  return ( ZCL_PROC_SUCCESS ); // We're done
   2273                }
   2274          
   2275                status = ZSuccess;
   \   00032B   7E00         MOV       R6,#0x0
   \   00032D   8046         SJMP      ??zcl_ProcessMessageMSG_13
   2276              }
   2277              else
   2278              {
   2279                // Unsupported message
   2280                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_14:
   \   00032F   7E82         MOV       R6,#-0x7e
   \   000331   8042         SJMP      ??zcl_ProcessMessageMSG_13
   2281              }
   2282            }
   2283            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2284            {
   2285              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_11:
   \   000333   E5..         MOV       A,?V4
   \   000335   45..         ORL       A,?V5
   \   000337   602C         JZ        ??zcl_ProcessMessageMSG_17
   \   000339   85..82       MOV       DPL,?V4
   \   00033C   85..83       MOV       DPH,?V5
   \   00033F   A3           INC       DPTR
   \   000340   A3           INC       DPTR
   \   000341   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000344   601F         JZ        ??zcl_ProcessMessageMSG_17
   2286              {
   2287                // The return value of the plugin function will be
   2288                //  ZSuccess - Supported and need default response
   2289                //  ZFailure - Unsupported
   2290                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2291                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2292                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2293                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2294                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   000346                ; Setup parameters for indirect call
   \   000346   7402         MOV       A,#0x2
   \   000348   12....       LCALL     ?XSTACK_DISP101_8
   \   00034B   12....       LCALL     ?CALL_IND
   \   00034E   E9           MOV       A,R1
   \   00034F   FE           MOV       R6,A
   2295                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   000350   74FF         MOV       A,#-0x1
   \   000352   6E           XRL       A,R6
   \   000353   700B         JNZ       ??zcl_ProcessMessageMSG_18
   2296                {
   2297                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_16:
   \   000355   90....       MOV       DPTR,#rawAFMsg
   \   000358   E4           CLR       A
   \   000359   F0           MOVX      @DPTR,A
   \   00035A   A3           INC       DPTR
   \   00035B   F0           MOVX      @DPTR,A
   2298                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   00035C   F9           MOV       R1,A
   \   00035D   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2299                }
   2300              }
   2301          
   2302              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_18:
   \   000360   7401         MOV       A,#0x1
   \   000362   6E           XRL       A,R6
   \   000363   7010         JNZ       ??zcl_ProcessMessageMSG_13
   2303              {
   2304                // Unsupported message
   2305                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zcl_ProcessMessageMSG_17:
   \   000365   7404         MOV       A,#0x4
   \   000367   12....       LCALL     ?XSTACK_DISP0_8
   \   00036A   E0           MOVX      A,@DPTR
   \   00036B   5404         ANL       A,#0x4
   \   00036D   6004         JZ        ??zcl_ProcessMessageMSG_19
   2306                {
   2307                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   00036F   7E83         MOV       R6,#-0x7d
   \   000371   8002         SJMP      ??zcl_ProcessMessageMSG_13
   2308                }
   2309                else
   2310                {
   2311                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_19:
   \   000373   7E81         MOV       R6,#-0x7f
   2312                }
   2313              }
   2314            }
   2315          
   2316            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_13:
   \   000375   7402         MOV       A,#0x2
   \   000377   12....       LCALL     ?XSTACK_DISP0_8
   \   00037A   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00037D   7070         JNZ       ??zcl_ProcessMessageMSG_20
   \   00037F   7402         MOV       A,#0x2
   \   000381   12....       LCALL     ?XSTACK_DISP0_8
   \   000384   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000387   7066         JNZ       ??zcl_ProcessMessageMSG_20
   \   000389   7404         MOV       A,#0x4
   \   00038B   12....       LCALL     ?XSTACK_DISP0_8
   \   00038E   E0           MOVX      A,@DPTR
   \   00038F   FA           MOV       R2,A
   \   000390   5410         ANL       A,#0x10
   \   000392   705B         JNZ       ??zcl_ProcessMessageMSG_20
   2317            {
   2318              // Send a Default Response command back
   2319              defautlRspCmd.statusCode = status;
   \   000394   7401         MOV       A,#0x1
   \   000396   12....       LCALL     ?XSTACK_DISP0_8
   \   000399   EE           MOV       A,R6
   \   00039A   F0           MOVX      @DPTR,A
   2320              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   00039B   7409         MOV       A,#0x9
   \   00039D   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A0   12....       LCALL     ?Subroutine123 & 0xFFFF
   2321              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2322                                     inMsg.msg->clusterId, &defautlRspCmd,
   2323                                     !inMsg.hdr.fc.direction, true,
   2324                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_239:
   \   0003A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A6   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0003A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003AC   7407         MOV       A,#0x7
   \   0003AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0003B4   75..01       MOV       ?V0,#0x1
   \   0003B7   78..         MOV       R0,#?V0
   \   0003B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003BC   EA           MOV       A,R2
   \   0003BD   13           RRC       A
   \   0003BE   13           RRC       A
   \   0003BF   13           RRC       A
   \   0003C0   541F         ANL       A,#0x1f
   \   0003C2   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   0003C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003C8   7405         MOV       A,#0x5
   \   0003CA   12....       LCALL     ?XSTACK_DISP100_8
   \   0003CD   88..         MOV       ?V0,R0
   \   0003CF   89..         MOV       ?V1,R1
   \   0003D1   78..         MOV       R0,#?V0
   \   0003D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003D6   7409         MOV       A,#0x9
   \   0003D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0003DB   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0003DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E1   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0003E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E7   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0003EA   12....       LCALL     ?DEALLOC_XSTACK8
   2325              defaultResponseSent = TRUE;
   \   0003ED   D2..         SETB      ?VB.0
   2326            }
   2327          
   2328            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_20:
   \   0003EF   90....       MOV       DPTR,#rawAFMsg
   \   0003F2   E4           CLR       A
   \   0003F3   F0           MOVX      @DPTR,A
   \   0003F4   A3           INC       DPTR
   \   0003F5   F0           MOVX      @DPTR,A
   2329            if ( status == ZSuccess )
   \   0003F6   EE           MOV       A,R6
   \   0003F7   7004         JNZ       ??zcl_ProcessMessageMSG_21
   2330            {
   2331              return ( ZCL_PROC_SUCCESS );
   \   0003F9   7900         MOV       R1,#0x0
   \   0003FB   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2332            }
   2333            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_21:
   \   0003FD   7484         MOV       A,#-0x7c
   \   0003FF   6E           XRL       A,R6
   \   000400   A2..         MOV       C,?VB.0
   \   000402   700A         JNZ       ??zcl_ProcessMessageMSG_22
   2334            {
   2335              if ( defaultResponseSent )
   \   000404   5004         JNC       ??zcl_ProcessMessageMSG_23
   2336              {
   2337                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   000406   7907         MOV       R1,#0x7
   \   000408   800C         SJMP      ??zcl_ProcessMessageMSG_1
   2338              }
   2339              else
   2340              {
   2341                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_23:
   \   00040A   7906         MOV       R1,#0x6
   \   00040C   8008         SJMP      ??zcl_ProcessMessageMSG_1
   2342              }
   2343            }
   2344            else
   2345            {
   2346              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_22:
   \   00040E   5004         JNC       ??zcl_ProcessMessageMSG_24
   2347              {
   2348                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   000410   7909         MOV       R1,#0x9
   \   000412   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2349              }
   2350              else
   2351              {
   2352                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_24:
   \   000414   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   000416   7415         MOV       A,#0x15
   2353              }
   2354            }
   \   000418   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   2355          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V1,A
   \   000006                ; Setup parameters for call to function zclParseHdr
   \   000006                ; Setup parameters for call to function afFindEndPointDesc
   \   000006   85..82       MOV       DPL,?V0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008   7408         MOV       A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   7409         MOV       A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ??Subroutine278_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   000003   C8           XCH       A,R0
   \   000004   2415         ADD       A,#0x15
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000007   7407         MOV       A,#0x7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000007   7409         MOV       A,#0x9
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine247_0
   \   000004                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL     ??Subroutine278_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   F583         MOV       DPH,A
   \   000002   E4           CLR       A
   \   000003   93           MOVC      A,@A+DPTR
   \   000004   F8           MOV       R0,A
   \   000005   7401         MOV       A,#0x1
   \   000007   93           MOVC      A,@A+DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000003                REQUIRE ??Subroutine260_0
   \   000003                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   12....       LCALL     ?Subroutine225 & 0xFFFF
   \                     ??CrossCallReturnLabel_759:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   F9           MOV       R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_746:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_719:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   12....       LCALL     ?Subroutine226 & 0xFFFF
   \                     ??CrossCallReturnLabel_727:
   \   000003   6401         XRL       A,#0x1
   \   000005   5401         ANL       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine226:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   6401         XRL       A,#0x1
   \   000002   5401         ANL       A,#0x1
   \   000004   F5..         MOV       ?V0,A
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   12....       LCALL     ?Subroutine221 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine291_0:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_753:
   \   000003   740A         MOV       A,#0xa
   \   000005   22           RET
   2356          
   2357          /*********************************************************************
   2358           * PRIVATE FUNCTIONS
   2359           *********************************************************************/
   2360          
   2361          /*********************************************************************
   2362           * @fn      zclParseHdr
   2363           *
   2364           * @brief   Parse header of the ZCL format
   2365           *
   2366           * @param   hdr - place to put the frame control information
   2367           * @param   pData - incoming buffer to parse
   2368           *
   2369           * @return  pointer past the header
   2370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2371          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2373            // Clear the header
   2374            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2375          
   2376            // Parse the Frame Control
   2377            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   54FC         ANL       A,#0xfc
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E8           MOV       A,R0
   \   00002C   4A           ORL       A,R2
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   12....       LCALL     ?Subroutine22 & 0xFFFF
   2378            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_779:
   \   000036   A2E2         MOV       C,0xE0 /* A   */.2
   \   000038   5004         JNC       ??zclParseHdr_0
   \   00003A   D2F0         SETB      B.0
   \   00003C   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   00003E   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   000040   85..82       MOV       DPL,?V0
   \   000043   85..83       MOV       DPH,?V1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   54FB         ANL       A,#0xfb
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A2F0         MOV       C,B.0
   \   00004C   E4           CLR       A
   \   00004D   33           RLC       A
   \   00004E   F5..         MOV       ?V2,A
   \   000050   75..00       MOV       ?V3,#0x0
   \   000053   7402         MOV       A,#0x2
   \   000055   78..         MOV       R0,#?V2
   \   000057   12....       LCALL     ?S_SHL
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   45..         ORL       A,?V2
   \   00005D   12....       LCALL     ??Subroutine298_0 & 0xFFFF
   2379            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_780:
   \   000060   A2E3         MOV       C,0xE0 /* A   */.3
   \   000062   85..82       MOV       DPL,?V0
   \   000065   85..83       MOV       DPH,?V1
   \   000068   E0           MOVX      A,@DPTR
   \   000069   5004         JNC       ??zclParseHdr_2
   2380            {
   2381              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006B   4408         ORL       A,#0x8
   \   00006D   8002         SJMP      ??zclParseHdr_3
   2382            }
   2383            else
   2384            {
   2385              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   00006F   54F7         ANL       A,#0xf7
   2386            }
   \                     ??zclParseHdr_3:
   \   000071   12....       LCALL     ??Subroutine298_0 & 0xFFFF
   2387          
   2388            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_781:
   \   000074   A2E4         MOV       C,0xE0 /* A   */.4
   \   000076   5004         JNC       ??zclParseHdr_4
   \   000078   D2F0         SETB      B.0
   \   00007A   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007C   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   E0           MOVX      A,@DPTR
   \   000085   54EF         ANL       A,#0xef
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A2F0         MOV       C,B.0
   \   00008A   E4           CLR       A
   \   00008B   33           RLC       A
   \   00008C   F5..         MOV       ?V2,A
   \   00008E   7404         MOV       A,#0x4
   \   000090   78..         MOV       R0,#?V2
   \   000092   12....       LCALL     ?S_SHL
   \   000095   E0           MOVX      A,@DPTR
   \   000096   45..         ORL       A,?V2
   \   000098   12....       LCALL     ?Subroutine20 & 0xFFFF
   2389            pData++;  // move past the frame control field
   2390          
   2391            // parse the manfacturer code
   2392            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_19:
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   5404         ANL       A,#0x4
   \   0000A4   6019         JZ        ??zclParseHdr_6
   2393            {
   2394              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   12....       LCALL     ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   0000AD   85..82       MOV       DPL,?V0
   \   0000B0   85..83       MOV       DPH,?V1
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   12....       LCALL     ??Subroutine272_0 & 0xFFFF
   2395              pData += 2;
   \                     ??CrossCallReturnLabel_616:
   \   0000B8   EE           MOV       A,R6
   \   0000B9   2402         ADD       A,#0x2
   \   0000BB   FE           MOV       R6,A
   \   0000BC   5001         JNC       ??zclParseHdr_6
   \   0000BE   0F           INC       R7
   2396            }
   2397          
   2398            // parse the Transaction Sequence Number
   2399            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   0000C6   12....       LCALL     ?Subroutine48 & 0xFFFF
   2400          
   2401            // parse the Cluster's command ID
   2402            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_69:
   \   0000C9   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000CC   A3           INC       DPTR
   \   0000CD   F0           MOVX      @DPTR,A
   2403          
   2404            // Should point to the frame payload
   2405            return ( pData );
   \   0000CE   EE           MOV       A,R6
   \   0000CF   2402         ADD       A,#0x2
   \   0000D1   FA           MOV       R2,A
   \   0000D2   E4           CLR       A
   \   0000D3   3F           ADDC      A,R7
   \   0000D4   FB           MOV       R3,A
   \   0000D5   02....       LJMP      ?Subroutine4 & 0xFFFF
   2406          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL     ?Subroutine211 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   12....       LCALL     ?Subroutine218 & 0xFFFF
   \                     ??CrossCallReturnLabel_787:
   \   000003   A3           INC       DPTR
   \   000004   AE82         MOV       R6,DPL
   \   000006   AF83         MOV       R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003                REQUIRE ??Subroutine298_0
   \   000003                ; // Fall through to label ??Subroutine298_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine298_0:
   \   000000   12....       LCALL     ?Subroutine218 & 0xFFFF
   \                     ??CrossCallReturnLabel_788:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2407          
   2408          /*********************************************************************
   2409           * @fn      zclBuildHdr
   2410           *
   2411           * @brief   Build header of the ZCL format
   2412           *
   2413           * @param   hdr - outgoing header information
   2414           * @param   pData - outgoing header space
   2415           *
   2416           * @return  pointer past the header
   2417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2418          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2419          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2420            // Build the Frame Control byte
   2421            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   2422            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_492:
   \   000013   5404         ANL       A,#0x4
   \   000015   12....       LCALL     ?Subroutine38 & 0xFFFF
   2423            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_490:
   \   000018   5408         ANL       A,#0x8
   \   00001A   12....       LCALL     ?Subroutine38 & 0xFFFF
   2424            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_491:
   \   00001D   5410         ANL       A,#0x10
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   48           ORL       A,R0
   \   000026   F0           MOVX      @DPTR,A
   2425            pData++;  // move past the frame control field
   \   000027   A3           INC       DPTR
   \   000028   AC82         MOV       R4,DPL
   \   00002A   AD83         MOV       R5,DPH
   2426          
   2427            // Add the manfacturer code
   2428            if ( hdr->fc.manuSpecific )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5404         ANL       A,#0x4
   \   000033   6016         JZ        ??zclBuildHdr_0
   2429            {
   2430              *pData++ = LO_UINT16( hdr->manuCode );
   \   000035   12....       LCALL     ?Subroutine145 & 0xFFFF
   2431              *pData++ = HI_UINT16( hdr->manuCode );
   2432            }
   \                     ??CrossCallReturnLabel_278:
   \   000038   12....       LCALL     ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00003B   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   00003E   8C82         MOV       DPL,R4
   \   000040   8D83         MOV       DPH,R5
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   \   000044   EC           MOV       A,R4
   \   000045   2402         ADD       A,#0x2
   \   000047   FC           MOV       R4,A
   \   000048   5001         JNC       ??zclBuildHdr_0
   \   00004A   0D           INC       R5
   2433          
   2434            // Add the Transaction Sequence Number
   2435            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000054   12....       LCALL     ?Subroutine42 & 0xFFFF
   2436          
   2437            // Add the Cluster's command ID
   2438            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_58:
   \   000057   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   00005A   A3           INC       DPTR
   \   00005B   F0           MOVX      @DPTR,A
   2439          
   2440            // Should point to the frame payload
   2441            return ( pData );
   \   00005C   EC           MOV       A,R4
   \   00005D   2402         ADD       A,#0x2
   \   00005F   FA           MOV       R2,A
   \   000060   E4           CLR       A
   \   000061   3D           ADDC      A,R5
   \   000062   FB           MOV       R3,A
   \   000063   80..         SJMP      ??Subroutine250_0
   2442          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F8           MOV       R0,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   48           ORL       A,R0
   \   000007                REQUIRE ??Subroutine249_0
   \   000007                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine254_0
   \   000002                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET
   2443          
   2444          /*********************************************************************
   2445           * @fn      zclCalcHdrSize
   2446           *
   2447           * @brief   Calculate the number of bytes needed for an outgoing
   2448           *          ZCL header.
   2449           *
   2450           * @param   hdr - outgoing header information
   2451           *
   2452           * @return  returns the number of bytes needed
   2453           */
   2454          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   2455          {
   2456            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   2457          
   2458            // Add the manfacturer code
   2459            if ( hdr->fc.manuSpecific )
   2460            {
   2461              needed += 2;
   2462            }
   2463          
   2464            return ( needed );
   2465          }
   2466          
   2467          /*********************************************************************
   2468           * @fn      zclFindPlugin
   2469           *
   2470           * @brief   Find the right plugin for a cluster ID
   2471           *
   2472           * @param   clusterID - cluster ID to look for
   2473           * @param   profileID - profile ID
   2474           *
   2475           * @return  pointer to plugin, NULL if not found
   2476           */
   2477          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   2478          {
   2479            zclLibPlugin_t *pLoop = plugins;
   2480          
   2481            (void)profileID;  // Intentionally unreferenced parameter
   2482          
   2483            while ( pLoop != NULL )
   2484            {
   2485              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2486              {
   2487                return ( pLoop );
   2488              }
   2489          
   2490              pLoop = pLoop->next;
   2491            }
   2492          
   2493            return ( (zclLibPlugin_t *)NULL );
   2494          }
   2495          
   2496          #ifdef ZCL_DISCOVER
   2497          /*********************************************************************
   2498           * @fn      zclFindCmdRecsList
   2499           *
   2500           * @brief   Find the right command record list for an endpoint
   2501           *
   2502           * @param   endpoint - endpoint to look for
   2503           *
   2504           * @return  pointer to record list, NULL if not found
   2505           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2506          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   \                     zclFindCmdRecsList:
   2507          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2508            zclCmdRecsList_t *pLoop = gpCmdList;
   \   000004   90....       MOV       DPTR,#gpCmdList
   \   000007   8004         SJMP      ??zclFindCmdRecsList_0
   2509          
   2510            while ( pLoop != NULL )
   2511            {
   2512              if ( pLoop->endpoint == endpoint )
   2513              {
   2514                return ( pLoop );
   2515              }
   2516          
   2517              pLoop = pLoop->pNext;
   \                     ??zclFindCmdRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindCmdRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000010   600C         JZ        ??zclFindCmdRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindCmdRecsList_1
   \   00001C   8004         SJMP      ??zclFindCmdRecsList_3
   2518            }
   2519          
   2520            return ( NULL );
   \                     ??zclFindCmdRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindCmdRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2521          }
   2522          
   2523          /*********************************************************************
   2524           * @fn      zclFindCmdRec
   2525           *
   2526           * @brief   Find the command record that matchs the parameters
   2527           *
   2528           * @param   endpoint - Application's endpoint
   2529           * @param   clusterID - cluster ID
   2530           * @param   attrId - attribute looking for
   2531           * @param   pAttr - attribute record to be returned
   2532           *
   2533           * @return  TRUE if record found. FALSE, otherwise.
   2534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2535          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   \                     zclFindCmdRec:
   2536          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2537            uint8 i;
   2538            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000B   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   2539          
   2540            if ( pRec != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6061         JZ        ??zclFindCmdRec_0
   2541            {
   2542              for ( i = 0; i < pRec->numCommands; i++ )
   \   000012   7C00         MOV       R4,#0x0
   \   000014   8001         SJMP      ??zclFindCmdRec_1
   \                     ??zclFindCmdRec_2:
   \   000016   0C           INC       R4
   \                     ??zclFindCmdRec_1:
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   EC           MOV       A,R4
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   504E         JNC       ??zclFindCmdRec_0
   2543              {
   2544                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   \   000025   EC           MOV       A,R4
   \   000026   F5..         MOV       ?V2,A
   \   000028   75..00       MOV       ?V3,#0x0
   \   00002B   7402         MOV       A,#0x2
   \   00002D   78..         MOV       R0,#?V2
   \   00002F   12....       LCALL     ?S_SHL
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   25..         ADD       A,?V2
   \   00003D   F8           MOV       R0,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   35..         ADDC      A,?V3
   \   000042   F9           MOV       R1,A
   \   000043   8882         MOV       DPL,R0
   \   000045   F583         MOV       DPH,A
   \   000047   E4           CLR       A
   \   000048   93           MOVC      A,@A+DPTR
   \   000049   F5..         MOV       ?V2,A
   \   00004B   7401         MOV       A,#0x1
   \   00004D   93           MOVC      A,@A+DPTR
   \   00004E   F5..         MOV       ?V3,A
   \   000050   EE           MOV       A,R6
   \   000051   65..         XRL       A,?V2
   \   000053   7003         JNZ       ??zclFindCmdRec_3
   \   000055   EF           MOV       A,R7
   \   000056   65..         XRL       A,?V3
   \                     ??zclFindCmdRec_3:
   \   000058   70BC         JNZ       ??zclFindCmdRec_2
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E4           CLR       A
   \   00005D   93           MOVC      A,@A+DPTR
   \   00005E   65..         XRL       A,?V1
   \   000060   70B4         JNZ       ??zclFindCmdRec_2
   2545                {
   2546                  *pCmd = pRec->pCmdRecs[i];
   \   000062   740C         MOV       A,#0xc
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2547          
   2548                  return ( TRUE ); // EMBEDDED RETURN
   \   00006F   7901         MOV       R1,#0x1
   \   000071   8002         SJMP      ??zclFindCmdRec_4
   2549                }
   2550              }
   2551            }
   2552          
   2553            return ( FALSE );
   \                     ??zclFindCmdRec_0:
   \   000073   7900         MOV       R1,#0x0
   \                     ??zclFindCmdRec_4:
   \   000075   02....       LJMP      ?Subroutine4 & 0xFFFF
   2554          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000003   8983         MOV       DPH,R1
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET
   2555          #endif // ZCL_DISCOVER
   2556          
   2557          /*********************************************************************
   2558           * @fn      zclFindAttrRecsList
   2559           *
   2560           * @brief   Find the right attribute record list for an endpoint
   2561           *
   2562           * @param   clusterID - endpointto look for
   2563           *
   2564           * @return  pointer to record list, NULL if not found
   2565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2566          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2567          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2568            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2569          
   2570            while ( pLoop != NULL )
   2571            {
   2572              if ( pLoop->endpoint == endpoint )
   2573              {
   2574                return ( pLoop );
   2575              }
   2576          
   2577              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000010   600C         JZ        ??zclFindAttrRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP      ??zclFindAttrRecsList_3
   2578            }
   2579          
   2580            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2581          }
   2582          
   2583          /*********************************************************************
   2584           * @fn      zclFindAttrRec
   2585           *
   2586           * @brief   Find the attribute record that matchs the parameters
   2587           *
   2588           * @param   endpoint - Application's endpoint
   2589           * @param   clusterID - cluster ID
   2590           * @param   attrId - attribute looking for
   2591           * @param   pAttr - attribute record to be returned
   2592           *
   2593           * @return  TRUE if record found. FALSE, otherwise.
   2594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2595          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2596          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2597            uint8 x;
   2598            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   2599          
   2600            if ( pRec != NULL )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   606A         JZ        ??zclFindAttrRec_0
   2601            {
   2602              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000014   7C00         MOV       R4,#0x0
   \   000016   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   000018   0C           INC       R4
   \                     ??zclFindAttrRec_1:
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   EC           MOV       A,R4
   \   000027   C3           CLR       C
   \   000028   98           SUBB      A,R0
   \   000029   5053         JNC       ??zclFindAttrRec_0
   2603              {
   2604                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   00002B   EC           MOV       A,R4
   \   00002C   F5..         MOV       ?V4,A
   \   00002E   75..00       MOV       ?V5,#0x0
   \   000031   7403         MOV       A,#0x3
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?S_SHL
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   25..         ADD       A,?V4
   \   000047   F8           MOV       R0,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   35..         ADDC      A,?V5
   \   00004C   F9           MOV       R1,A
   \   00004D   8882         MOV       DPL,R0
   \   00004F   F583         MOV       DPH,A
   \   000051   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000054   E5..         MOV       A,?V0
   \   000056   65..         XRL       A,?V4
   \   000058   7004         JNZ       ??zclFindAttrRec_3
   \   00005A   E5..         MOV       A,?V1
   \   00005C   65..         XRL       A,?V5
   \                     ??zclFindAttrRec_3:
   \   00005E   70B8         JNZ       ??zclFindAttrRec_2
   \   000060   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000063   EE           MOV       A,R6
   \   000064   65..         XRL       A,?V4
   \   000066   7003         JNZ       ??zclFindAttrRec_4
   \   000068   EF           MOV       A,R7
   \   000069   65..         XRL       A,?V5
   \                     ??zclFindAttrRec_4:
   \   00006B   70AB         JNZ       ??zclFindAttrRec_2
   2605                {
   2606                  *pAttr = pRec->attrs[x];
   \   00006D   740E         MOV       A,#0xe
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000075   7408         MOV       A,#0x8
   \   000077   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2607          
   2608                  return ( TRUE ); // EMBEDDED RETURN
   \   00007A   7901         MOV       R1,#0x1
   \   00007C   8002         SJMP      ??zclFindAttrRec_5
   2609                }
   2610              }
   2611            }
   2612          
   2613            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   00007E   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   000080   02....       LJMP      ??Subroutine256_0 & 0xFFFF
   2614          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine252_0
   \   000002                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   E4           CLR       A
   \   000001   93           MOVC      A,@A+DPTR
   \   000002   F5..         MOV       ?V4,A
   \   000004   7401         MOV       A,#0x1
   \   000006   93           MOVC      A,@A+DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET
   2615          
   2616          #if defined ( ZCL_STANDALONE )
   2617          /*********************************************************************
   2618           * @fn      zclSetAttrRecList
   2619           *
   2620           * @brief   Set attribute record list for end point
   2621           *
   2622           * @param   endpoint - endpoint the attribute list belongs to
   2623           * @param   numAttr - number of attributes in list
   2624           * @param   attrList - array of attribute records.
   2625           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2626           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2627           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2628           *                     ATTRIBUTE INFO
   2629           *
   2630           * @return  TRUE if successful, FALSE otherwise.
   2631           */
   2632          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2633          {
   2634            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2635          
   2636            if ( pRecsList != NULL )
   2637            {
   2638              pRecsList->numAttributes = numAttr;
   2639              pRecsList->attrs = attrList;
   2640              return ( TRUE );
   2641            }
   2642          
   2643            return ( FALSE );
   2644          }
   2645          
   2646          #endif // ZCL_STANDALONE
   2647          
   2648          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2649          /*********************************************************************
   2650           * @fn      zclGetReadWriteCB
   2651           *
   2652           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2653           *
   2654           * @param   endpoint - Application's endpoint
   2655           *
   2656           * @return  Read/Write CB, NULL if not found
   2657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2658          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   2659          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2660            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     ?Subroutine158 & 0xFFFF
   2661          
   2662            if ( pRec != NULL )
   \                     ??CrossCallReturnLabel_298:
   \   000008   6005         JZ        ??zclGetReadWriteCB_0
   2663            {
   2664              return ( pRec->pfnReadWriteCB );
   \   00000A   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   2665            }
   \                     ??CrossCallReturnLabel_544:
   \   00000D   8004         SJMP      ??zclGetReadWriteCB_1
   2666          
   2667            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   000013   02....       LJMP      ??Subroutine251_0 & 0xFFFF
   2668          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
   2669          
   2670          /*********************************************************************
   2671           * @fn      zclGetAuthorizeCB
   2672           *
   2673           * @brief   Get the Read/Write Authorization callback function pointer
   2674           *          for a given endpoint.
   2675           *
   2676           * @param   endpoint - Application's endpoint
   2677           *
   2678           * @return  Authorization CB, NULL if not found
   2679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2680          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   2681          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2682            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     ?Subroutine158 & 0xFFFF
   2683          
   2684            if ( pRec != NULL )
   \                     ??CrossCallReturnLabel_299:
   \   000008   6006         JZ        ??zclGetAuthorizeCB_0
   2685            {
   2686              return ( pRec->pfnAuthorizeCB );
   \   00000A   A3           INC       DPTR
   \   00000B   12....       LCALL     ?Subroutine106 & 0xFFFF
   2687            }
   \                     ??CrossCallReturnLabel_545:
   \   00000E   8004         SJMP      ??zclGetAuthorizeCB_1
   2688          
   2689            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   000010   7A00         MOV       R2,#0x0
   \   000012   7B00         MOV       R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   000014   02....       LJMP      ??Subroutine251_0 & 0xFFFF
   2690          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine257_0
   \   000001                ; // Fall through to label ??Subroutine257_0
   2691          #endif // ZCL_READ || ZCL_WRITE
   2692          
   2693          /*********************************************************************
   2694           * @fn      zclFindClusterOption
   2695           *
   2696           * @brief   Find the option record that matchs the cluster id
   2697           *
   2698           * @param   endpoint - Application's endpoint
   2699           * @param   clusterID - cluster ID looking for
   2700           *
   2701           * @return  pointer to clutser option, NULL if not found
   2702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2703          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2704          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   2705            zclClusterOptionList *pLoop;
   2706          
   2707            pLoop = clusterOptionList;
   \   00000B   90....       MOV       DPTR,#clusterOptionList
   \   00000E   8004         SJMP      ??zclFindClusterOption_0
   2708            while ( pLoop != NULL )
   2709            {
   2710              if ( pLoop->endpoint == endpoint )
   2711              {
   2712                uint8 x;
   2713                for ( x = 0; x < pLoop->numOptions; x++ )
   2714                {
   2715                  if ( pLoop->options[x].clusterID == clusterID )
   2716                  {
   2717                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2718                  }
   2719                }
   2720              }
   2721          
   2722              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000014   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000017   6046         JZ        ??zclFindClusterOption_2
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6E           XRL       A,R6
   \   000021   70ED         JNZ       ??zclFindClusterOption_1
   \   000023   7F00         MOV       R7,#0x0
   \   000025   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000027   0F           INC       R7
   \                     ??zclFindClusterOption_3:
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   C3           CLR       C
   \   000033   9A           SUBB      A,R2
   \   000034   50DA         JNC       ??zclFindClusterOption_1
   \   000036   EF           MOV       A,R7
   \   000037   75F003       MOV       B,#0x3
   \   00003A   A4           MUL       AB
   \   00003B   FA           MOV       R2,A
   \   00003C   85F0..       MOV       ?V0,B
   \   00003F   AB..         MOV       R3,?V0
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2A           ADD       A,R2
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   3B           ADDC      A,R3
   \   00004F   FB           MOV       R3,A
   \   000050   8A82         MOV       DPL,R2
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6C           XRL       A,R4
   \   000056   7003         JNZ       ??zclFindClusterOption_5
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6D           XRL       A,R5
   \                     ??zclFindClusterOption_5:
   \   00005B   70CA         JNZ       ??zclFindClusterOption_4
   \   00005D   8004         SJMP      ??zclFindClusterOption_6
   2723            }
   2724          
   2725            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000063   02....       LJMP      ??Subroutine250_0 & 0xFFFF
   2726          }
   2727          
   2728          /*********************************************************************
   2729           * @fn      zclGetClusterOption
   2730           *
   2731           * @brief   Get the option record that matchs the cluster id
   2732           *
   2733           * @param   endpoint - Application's endpoint
   2734           * @param   clusterID - cluster ID looking for
   2735           *
   2736           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2738          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2740            uint8 option;
   2741            zclOptionRec_t *pOption;
   2742          
   2743            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2744            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2745            {
   2746              option = pOption->option;
   2747              if ( !ZG_SECURE_ENABLED )
   2748              {
   2749                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2750              }
   2751          
   2752              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2753            }
   2754          
   2755            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A   80..         SJMP      ??Subroutine251_0
   2756          }
   2757          
   2758          /*********************************************************************
   2759           * @fn      zclSetSecurityOption
   2760           *
   2761           * @brief   Set the security option for the cluster id
   2762           *
   2763           * @param   endpoint - Application's endpoint
   2764           * @param   clusterID - cluster ID looking for
   2765           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2766           *
   2767           * @return  none
   2768           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2769          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2771            zclOptionRec_t *pOption;
   2772          
   2773            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   A9..         MOV       R1,?V1
   2774            if ( pOption != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   49           ORL       A,R1
   \   000010   6015         JZ        ??zclSetSecurityOption_0
   2775            {
   2776              if ( enable )
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   EF           MOV       A,R7
   \   00001C   6005         JZ        ??zclSetSecurityOption_1
   2777              {
   2778                pOption->option |= AF_EN_SECURITY;
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E6         SETB      0xE0 /* A   */.6
   \   000021   8003         SJMP      ??zclSetSecurityOption_2
   2779              }
   2780              else
   2781              {
   2782                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   000026   F0           MOVX      @DPTR,A
   2783              }
   2784            }
   2785          }
   \                     ??zclSetSecurityOption_0:
   \   000027   80..         SJMP      ??Subroutine251_0
   2786          
   2787          #ifdef ZCL_DISCOVER
   2788          /*********************************************************************
   2789           * @fn      zclFindNextCmdRec
   2790           *
   2791           * @brief   Find the command (or next) record that matchs the parameters
   2792           *
   2793           * @param   endpoint - Application's endpoint
   2794           * @param   clusterID - cluster ID
   2795           * @param   commandID - command ID from requesting command
   2796           * @param   direction- direction of received command
   2797           * @param   pCmdID - command looking for
   2798           * @param   pCmd - command information within command record list
   2799           *
   2800           * @return  pointer to command record, NULL no more records of this cluster
   2801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2802          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   \                     zclFindNextCmdRec:
   2803                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2804          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FF           MOV       R7,A
   \   00000B   8D..         MOV       ?V0,R5
   2805            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000D   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AC..         MOV       R4,?V2
   \   000016   AD..         MOV       R5,?V3
   2806            uint8 i;
   2807          
   2808            if ( pRec != NULL )
   \   000018   EA           MOV       A,R2
   \   000019   4D           ORL       A,R5
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   2809            {
   2810              for ( i = 0; i < pRec->numCommands; i++ )
   \   00001F   75..00       MOV       ?V1,#0x0
   \   000022   740E         MOV       A,#0xe
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   00002A   8014         SJMP      ??zclFindNextCmdRec_1
   2811              {
   2812                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2813                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2814                {
   2815                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2816                  {
   2817                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   \                     ??zclFindNextCmdRec_2:
   \   00002C   85..82       MOV       DPL,?V2
   \   00002F   85..83       MOV       DPH,?V3
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   93           MOVC      A,@A+DPTR
   \   000037   A2E3         MOV       C,0xE0 /* A   */.3
   \   000039   5003         JNC       $+5
   \   00003B   02....       LJMP      ??zclFindNextCmdRec_3 & 0xFFFF
   \                     ??zclFindNextCmdRec_4:
   \   00003E   05..         INC       ?V1
   \                     ??zclFindNextCmdRec_1:
   \   000040   8C82         MOV       DPL,R4
   \   000042   8D83         MOV       DPH,R5
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   E5..         MOV       A,?V1
   \   00004B   C3           CLR       C
   \   00004C   98           SUBB      A,R0
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   \   000052   E5..         MOV       A,?V1
   \   000054   F5..         MOV       ?V2,A
   \   000056   75..00       MOV       ?V3,#0x0
   \   000059   7402         MOV       A,#0x2
   \   00005B   78..         MOV       R0,#?V2
   \   00005D   12....       LCALL     ?S_SHL
   \   000060   8C82         MOV       DPL,R4
   \   000062   8D83         MOV       DPH,R5
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   25..         ADD       A,?V2
   \   00006B   F5..         MOV       ?V2,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   35..         ADDC      A,?V3
   \   000071   F5..         MOV       ?V3,A
   \   000073   85..82       MOV       DPL,?V2
   \   000076   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000079   E5..         MOV       A,?V4
   \   00007B   68           XRL       A,R0
   \   00007C   7003         JNZ       ??zclFindNextCmdRec_5
   \   00007E   E5..         MOV       A,?V5
   \   000080   69           XRL       A,R1
   \                     ??zclFindNextCmdRec_5:
   \   000081   70BB         JNZ       ??zclFindNextCmdRec_4
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   85..82       MOV       DPL,?V2
   \   00008C   85..83       MOV       DPH,?V3
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E4           CLR       A
   \   000092   93           MOVC      A,@A+DPTR
   \   000093   C3           CLR       C
   \   000094   98           SUBB      A,R0
   \   000095   40A7         JC        ??zclFindNextCmdRec_4
   \   000097   7411         MOV       A,#0x11
   \   000099   6F           XRL       A,R7
   \   00009A   701B         JNZ       ??zclFindNextCmdRec_6
   \   00009C   7401         MOV       A,#0x1
   \   00009E   65..         XRL       A,?V0
   \   0000A0   608A         JZ        ??zclFindNextCmdRec_2
   2818                    {
   2819                      *pCmd = pRec->pCmdRecs[i];
   2820          
   2821                      // Update command ID
   2822                      *pCmdID = pCmd->cmdID;
   2823          
   2824                      return ( TRUE ); // EMBEDDED RETURN
   2825                    }
   2826                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   7098         JNZ       ??zclFindNextCmdRec_4
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E4           CLR       A
   \   0000B0   93           MOVC      A,@A+DPTR
   \   0000B1   A2E2         MOV       C,0xE0 /* A   */.2
   \                     ??zclFindNextCmdRec_7:
   \   0000B3   4035         JC        ??zclFindNextCmdRec_3
   \   0000B5   8087         SJMP      ??zclFindNextCmdRec_4
   2827                    {
   2828                      *pCmd = pRec->pCmdRecs[i];
   2829          
   2830                      // Update command ID
   2831                      *pCmdID = pCmd->cmdID;
   2832          
   2833                      return ( TRUE ); // EMBEDDED RETURN
   2834                    }
   2835                  }
   2836                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zclFindNextCmdRec_6:
   \   0000B7   7413         MOV       A,#0x13
   \   0000B9   6F           XRL       A,R7
   \   0000BA   704C         JNZ       ??zclFindNextCmdRec_0
   2837                  {
   2838                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   700F         JNZ       ??zclFindNextCmdRec_8
   \   0000C0   85..82       MOV       DPL,?V2
   \   0000C3   85..83       MOV       DPH,?V3
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   E4           CLR       A
   \   0000CA   93           MOVC      A,@A+DPTR
   \   0000CB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CD   80E4         SJMP      ??zclFindNextCmdRec_7
   2839                    {
   2840                      *pCmd = pRec->pCmdRecs[i];
   2841          
   2842                      // Update command ID
   2843                      *pCmdID = pCmd->cmdID;
   2844          
   2845                      return ( TRUE ); // EMBEDDED RETURN
   2846                    }
   2847                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   \                     ??zclFindNextCmdRec_8:
   \   0000CF   7401         MOV       A,#0x1
   \   0000D1   65..         XRL       A,?V0
   \   0000D3   6003         JZ        $+5
   \   0000D5   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \   0000D8   85..82       MOV       DPL,?V2
   \   0000DB   85..83       MOV       DPH,?V3
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   E4           CLR       A
   \   0000E2   93           MOVC      A,@A+DPTR
   \   0000E3   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000E5   4003         JC        $+5
   \   0000E7   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \                     ??zclFindNextCmdRec_3:
   \   0000EA   7410         MOV       A,#0x10
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ?Subroutine111 & 0xFFFF
   2848                    {
   2849                      *pCmd = pRec->pCmdRecs[i];
   \                     ??CrossCallReturnLabel_210:
   \   0000F2   E8           MOV       A,R0
   \   0000F3   FC           MOV       R4,A
   \   0000F4   E9           MOV       A,R1
   \   0000F5   FD           MOV       R5,A
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2850          
   2851                      // Update command ID
   2852                      *pCmdID = pCmd->cmdID;
   \   0000FB   8882         MOV       DPL,R0
   \   0000FD   8983         MOV       DPH,R1
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   12....       LCALL     ?Subroutine134 & 0xFFFF
   2853          
   2854                      return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_254:
   \   000104   7901         MOV       R1,#0x1
   \   000106   8002         SJMP      ??zclFindNextCmdRec_9
   2855                    }
   2856                  }
   2857                  else
   2858                  {
   2859                    return ( FALSE ); // Incorrect Command ID
   2860                  }
   2861                }
   2862              }
   2863            }
   2864          
   2865            return ( FALSE );
   \                     ??zclFindNextCmdRec_0:
   \   000108   7900         MOV       R1,#0x0
   \                     ??zclFindNextCmdRec_9:
   \   00010A   02....       LJMP      ??Subroutine256_0 & 0xFFFF
   2866          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_693:
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   22           RET
   2867          
   2868          /*********************************************************************
   2869           * @fn      zclFindNextAttrRec
   2870           *
   2871           * @brief   Find the attribute (or next) record that matchs the parameters
   2872           *
   2873           * @param   endpoint - Application's endpoint
   2874           * @param   clusterID - cluster ID
   2875           * @param   attr - attribute looking for
   2876           *
   2877           * @return  pointer to attribute record, NULL if not found
   2878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2879          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   \                     zclFindNextAttrRec:
   2880                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2881          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FF           MOV       R7,A
   2882            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000B   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   00000E   8A..         MOV       ?V0,R2
   \   000010   8B..         MOV       ?V1,R3
   \   000012   AC..         MOV       R4,?V0
   \   000014   AD..         MOV       R5,?V1
   2883            uint8 attrDir;
   2884          
   2885            if ( pRec != NULL )
   \   000016   EA           MOV       A,R2
   \   000017   4D           ORL       A,R5
   \   000018   7003         JNZ       $+5
   \   00001A   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2886            {
   2887              uint16 x;
   2888          
   2889              for ( x = 0; x < pRec->numAttributes; x++ )
   \   00001D   7A00         MOV       R2,#0x0
   \   00001F   7B00         MOV       R3,#0x0
   \   000021   7410         MOV       A,#0x10
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ??Subroutine279_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   000029   8005         SJMP      ??zclFindNextAttrRec_1
   \                     ??zclFindNextAttrRec_2:
   \   00002B   0A           INC       R2
   \   00002C   EA           MOV       A,R2
   \   00002D   7001         JNZ       ??zclFindNextAttrRec_1
   \   00002F   0B           INC       R3
   \                     ??zclFindNextAttrRec_1:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   C3           CLR       C
   \   00003E   EA           MOV       A,R2
   \   00003F   98           SUBB      A,R0
   \   000040   EB           MOV       A,R3
   \   000041   9400         SUBB      A,#0x0
   \   000043   4003         JC        $+5
   \   000045   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2890              {
   2891                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2892                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   7403         MOV       A,#0x3
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?S_SHL
   \   000053   8C82         MOV       DPL,R4
   \   000055   8D83         MOV       DPH,R5
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   25..         ADD       A,?V0
   \   000062   F5..         MOV       ?V0,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   35..         ADDC      A,?V1
   \   000068   F5..         MOV       ?V1,A
   \   00006A   85..82       MOV       DPL,?V0
   \   00006D   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000070   E5..         MOV       A,?V6
   \   000072   68           XRL       A,R0
   \   000073   7003         JNZ       ??zclFindNextAttrRec_3
   \   000075   E5..         MOV       A,?V7
   \   000077   69           XRL       A,R1
   \                     ??zclFindNextAttrRec_3:
   \   000078   70B1         JNZ       ??zclFindNextAttrRec_2
   \   00007A   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   00007D   85..82       MOV       DPL,?V2
   \   000080   85..83       MOV       DPH,?V3
   \   000083   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_682:
   \   000086   C3           CLR       C
   \   000087   E5..         MOV       A,?V4
   \   000089   98           SUBB      A,R0
   \   00008A   E5..         MOV       A,?V5
   \   00008C   99           SUBB      A,R1
   \   00008D   409C         JC        ??zclFindNextAttrRec_2
   2893                {
   2894                  // also make sure direction is right
   2895                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2896                  if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
   \   00008F   E5..         MOV       A,?V0
   \   000091   2405         ADD       A,#0x5
   \   000093   F582         MOV       DPL,A
   \   000095   E4           CLR       A
   \   000096   35..         ADDC      A,?V1
   \   000098   F583         MOV       DPH,A
   \   00009A   E4           CLR       A
   \   00009B   93           MOVC      A,@A+DPTR
   \   00009C   A2E7         MOV       C,0xE0 /* A   */.7
   \   00009E   E4           CLR       A
   \   00009F   33           RLC       A
   \   0000A0   6F           XRL       A,R7
   \   0000A1   6006         JZ        ??zclFindNextAttrRec_4
   \   0000A3   E4           CLR       A
   \   0000A4   93           MOVC      A,@A+DPTR
   \   0000A5   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000A7   5082         JNC       ??zclFindNextAttrRec_2
   \                     ??zclFindNextAttrRec_4:
   \   0000A9   7412         MOV       A,#0x12
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine112 & 0xFFFF
   2897                  {
   2898                    // return attribute and found attribute ID
   2899                    *pAttr = pRec->attrs[x];
   \                     ??CrossCallReturnLabel_212:
   \   0000B1   E8           MOV       A,R0
   \   0000B2   FC           MOV       R4,A
   \   0000B3   E9           MOV       A,R1
   \   0000B4   FD           MOV       R5,A
   \   0000B5   7408         MOV       A,#0x8
   \   0000B7   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2900                    *attrId = pAttr->attr.attrId;
   \   0000BA   8882         MOV       DPL,R0
   \   0000BC   8983         MOV       DPH,R1
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000C3   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   2901          
   2902                    return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_620:
   \   0000C6   7901         MOV       R1,#0x1
   \   0000C8   8002         SJMP      ??zclFindNextAttrRec_5
   2903                  }
   2904                }
   2905              }
   2906            }
   2907          
   2908            return ( FALSE );
   \                     ??zclFindNextAttrRec_0:
   \   0000CA   7900         MOV       R1,#0x0
   \                     ??zclFindNextAttrRec_5:
   \   0000CC   02....       LJMP      ??Subroutine246_0 & 0xFFFF
   2909          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_694:
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   22           RET
   2910          #endif // ZCL_DISCOVER
   2911          
   2912          /*********************************************************************
   2913           * @fn      zclSerializeData
   2914           *
   2915           * @brief   Builds a buffer from the attribute data to sent out over
   2916           *          the air.
   2917           *          NOTE - Not compatible with application's attributes callbacks.
   2918           *
   2919           * @param   dataType - data types defined in zcl.h
   2920           * @param   attrData - pointer to the attribute data
   2921           * @param   buf - where to put the serialized data
   2922           *
   2923           * @return  pointer to end of destination buffer
   2924           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2925          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2926          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2927            uint8 *pStr;
   2928            uint16 len;
   2929          
   2930            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2931            {
   2932              return ( buf );
   2933            }
   2934          
   2935            switch ( dataType )
   \   000014   EC           MOV       A,R4
   \   000015   2402         ADD       A,#0x2
   \   000017   F5..         MOV       ?V4,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   F5..         MOV       ?V5,A
   \   00001D   8C82         MOV       DPL,R4
   \   00001F   8D83         MOV       DPH,R5
   \   000021   A3           INC       DPTR
   \   000022   AC82         MOV       R4,DPL
   \   000024   AD83         MOV       R5,DPH
   \   000026   8E..         MOV       ?V0,R6
   \   000028   8F..         MOV       ?V1,R7
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   E9           MOV       A,R1
   \   00002E   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000031   04           DB        4
   \   000032   41           DB        65
   \   000033   42           DB        66
   \   000034   ....         DW        ??zclSerializeData_1
   \   000036   43           DB        67
   \   000037   44           DB        68
   \   000038   ....         DW        ??zclSerializeData_2
   \   00003A   E0           DB        224
   \   00003B   E2           DB        226
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   E8           DB        232
   \   00003F   E9           DB        233
   \   000040   ....         DW        ??zclSerializeData_4
   \   000042   21           DB        33
   \   000043   08           DB        8
   \   000044   ....         DW        ??zclSerializeData_5
   \   000046   09           DB        9
   \   000047   ....         DW        ??zclSerializeData_4
   \   000049   0A           DB        10
   \   00004A   ....         DW        ??zclSerializeData_6
   \   00004C   0B           DB        11
   \   00004D   ....         DW        ??zclSerializeData_3
   \   00004F   10           DB        16
   \   000050   ....         DW        ??zclSerializeData_5
   \   000052   18           DB        24
   \   000053   ....         DW        ??zclSerializeData_5
   \   000055   19           DB        25
   \   000056   ....         DW        ??zclSerializeData_4
   \   000058   1A           DB        26
   \   000059   ....         DW        ??zclSerializeData_6
   \   00005B   1B           DB        27
   \   00005C   ....         DW        ??zclSerializeData_3
   \   00005E   20           DB        32
   \   00005F   ....         DW        ??zclSerializeData_5
   \   000061   21           DB        33
   \   000062   ....         DW        ??zclSerializeData_4
   \   000064   22           DB        34
   \   000065   ....         DW        ??zclSerializeData_6
   \   000067   23           DB        35
   \   000068   ....         DW        ??zclSerializeData_3
   \   00006A   24           DB        36
   \   00006B   ....         DW        ??zclSerializeData_7
   \   00006D   25           DB        37
   \   00006E   ....         DW        ??zclSerializeData_8
   \   000070   26           DB        38
   \   000071   ....         DW        ??zclSerializeData_9
   \   000073   27           DB        39
   \   000074   ....         DW        ??zclSerializeData_10
   \   000076   28           DB        40
   \   000077   ....         DW        ??zclSerializeData_5
   \   000079   29           DB        41
   \   00007A   ....         DW        ??zclSerializeData_4
   \   00007C   2A           DB        42
   \   00007D   ....         DW        ??zclSerializeData_6
   \   00007F   2B           DB        43
   \   000080   ....         DW        ??zclSerializeData_3
   \   000082   2C           DB        44
   \   000083   ....         DW        ??zclSerializeData_7
   \   000085   2D           DB        45
   \   000086   ....         DW        ??zclSerializeData_8
   \   000088   2E           DB        46
   \   000089   ....         DW        ??zclSerializeData_9
   \   00008B   2F           DB        47
   \   00008C   ....         DW        ??zclSerializeData_10
   \   00008E   30           DB        48
   \   00008F   ....         DW        ??zclSerializeData_5
   \   000091   31           DB        49
   \   000092   ....         DW        ??zclSerializeData_4
   \   000094   38           DB        56
   \   000095   ....         DW        ??zclSerializeData_4
   \   000097   39           DB        57
   \   000098   ....         DW        ??zclSerializeData_3
   \   00009A   3A           DB        58
   \   00009B   ....         DW        ??zclSerializeData_10
   \   00009D   EA           DB        234
   \   00009E   ....         DW        ??zclSerializeData_3
   \   0000A0   F0           DB        240
   \   0000A1   ....         DW        ??zclSerializeData_10
   \   0000A3   F1           DB        241
   \   0000A4   ....         DW        ??zclSerializeData_11
   \   0000A6   ....         DW        ??zclSerializeData_0
   2936            {
   2937              case ZCL_DATATYPE_DATA8:
   2938              case ZCL_DATATYPE_BOOLEAN:
   2939              case ZCL_DATATYPE_BITMAP8:
   2940              case ZCL_DATATYPE_INT8:
   2941              case ZCL_DATATYPE_UINT8:
   2942              case ZCL_DATATYPE_ENUM8:
   2943                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   0000A8   8E82         MOV       DPL,R6
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0000AF   EC           MOV       A,R4
   \   0000B0   FA           MOV       R2,A
   \   0000B1   ED           MOV       A,R5
   \   0000B2   FB           MOV       R3,A
   2944                 break;
   \   0000B3   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2945          
   2946              case ZCL_DATATYPE_DATA16:
   2947              case ZCL_DATATYPE_BITMAP16:
   2948              case ZCL_DATATYPE_UINT16:
   2949              case ZCL_DATATYPE_INT16:
   2950              case ZCL_DATATYPE_ENUM16:
   2951              case ZCL_DATATYPE_SEMI_PREC:
   2952              case ZCL_DATATYPE_CLUSTER_ID:
   2953              case ZCL_DATATYPE_ATTR_ID:
   2954                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000B6   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   0000B9   12....       LCALL     ?Subroutine48 & 0xFFFF
   2955                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_70:
   \   0000BC   12....       LCALL     ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   0A           INC       R2
   \   0000C1   0A           INC       R2
   \   0000C2   AB..         MOV       R3,?V5
   2956                break;
   \   0000C4   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2957          
   2958              case ZCL_DATATYPE_DATA24:
   2959              case ZCL_DATATYPE_BITMAP24:
   2960              case ZCL_DATATYPE_UINT24:
   2961              case ZCL_DATATYPE_INT24:
   2962                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   78..         MOV       R0,#?V0
   \   0000CD   12....       LCALL     ?L_MOV_X
   \   0000D0   8A82         MOV       DPL,R2
   \   0000D2   8B83         MOV       DPH,R3
   \   0000D4   E5..         MOV       A,?V0
   \   0000D6   12....       LCALL     ?Subroutine218 & 0xFFFF
   2963                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_785:
   \   0000D9   78..         MOV       R0,#?V0
   \   0000DB   12....       LCALL     ?L_MOV_X
   \   0000DE   E5..         MOV       A,?V1
   \   0000E0   8C82         MOV       DPL,R4
   \   0000E2   8D83         MOV       DPH,R5
   \   0000E4   12....       LCALL     ?Subroutine218 & 0xFFFF
   2964                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_786:
   \   0000E7   78..         MOV       R0,#?V0
   \   0000E9   12....       LCALL     ?L_MOV_X
   \   0000EC   7410         MOV       A,#0x10
   \   0000EE   78..         MOV       R0,#?V0
   \   0000F0   12....       LCALL     ?UL_SHR
   \   0000F3   85..82       MOV       DPL,?V4
   \   0000F6   85..83       MOV       DPH,?V5
   \   0000F9   E5..         MOV       A,?V0
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   EA           MOV       A,R2
   \   0000FD   2403         ADD       A,#0x3
   \   0000FF   FA           MOV       R2,A
   \   000100   506B         JNC       ??zclSerializeData_0
   \   000102   0B           INC       R3
   2965                break;
   \   000103   8068         SJMP      ??zclSerializeData_0
   2966          
   2967              case ZCL_DATATYPE_DATA32:
   2968              case ZCL_DATATYPE_BITMAP32:
   2969              case ZCL_DATATYPE_UINT32:
   2970              case ZCL_DATATYPE_INT32:
   2971              case ZCL_DATATYPE_SINGLE_PREC:
   2972              case ZCL_DATATYPE_TOD:
   2973              case ZCL_DATATYPE_DATE:
   2974              case ZCL_DATATYPE_UTC:
   2975              case ZCL_DATATYPE_BAC_OID:
   2976                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   000105                ; Setup parameters for call to function osal_buffer_uint32
   \   000105   8E82         MOV       DPL,R6
   \   000107   8F83         MOV       DPH,R7
   \   000109   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00010C   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00010F   7404         MOV       A,#0x4
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   2977                break;
   \   000114   8057         SJMP      ??zclSerializeData_0
   2978          
   2979              case ZCL_DATATYPE_UINT40:
   2980              case ZCL_DATATYPE_INT40:
   2981                pStr = (uint8*)attrData;
   2982                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000116                ; Setup parameters for call to function osal_memcpy
   \   000116   78..         MOV       R0,#?V0
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011B   7C05         MOV       R4,#0x5
   \   00011D   8046         SJMP      ??zclSerializeData_12
   2983                break;
   2984          
   2985              case ZCL_DATATYPE_UINT48:
   2986              case ZCL_DATATYPE_INT48:
   2987                pStr = (uint8*)attrData;
   2988                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   00011F                ; Setup parameters for call to function osal_memcpy
   \   00011F   78..         MOV       R0,#?V0
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000124   7C06         MOV       R4,#0x6
   \   000126   803D         SJMP      ??zclSerializeData_12
   2989                break;
   2990          
   2991              case ZCL_DATATYPE_UINT56:
   2992              case ZCL_DATATYPE_INT56:
   2993                pStr = (uint8*)attrData;
   2994                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000128                ; Setup parameters for call to function osal_memcpy
   \   000128   78..         MOV       R0,#?V0
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012D   7C07         MOV       R4,#0x7
   \   00012F   8034         SJMP      ??zclSerializeData_12
   2995                break;
   2996          
   2997              case ZCL_DATATYPE_DOUBLE_PREC:
   2998              case ZCL_DATATYPE_IEEE_ADDR:
   2999              case ZCL_DATATYPE_UINT64:
   3000              case ZCL_DATATYPE_INT64:
   3001                pStr = (uint8*)attrData;
   3002                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   000131                ; Setup parameters for call to function osal_memcpy
   \   000131   78..         MOV       R0,#?V0
   \   000133   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000136   7C08         MOV       R4,#0x8
   \   000138   802B         SJMP      ??zclSerializeData_12
   3003                break;
   3004          
   3005              case ZCL_DATATYPE_CHAR_STR:
   3006              case ZCL_DATATYPE_OCTET_STR:
   3007                pStr = (uint8*)attrData;
   3008                len = *pStr;
   3009                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   00013A                ; Setup parameters for call to function osal_memcpy
   \   00013A   78..         MOV       R0,#?V0
   \   00013C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013F   8E82         MOV       DPL,R6
   \   000141   8F83         MOV       DPH,R7
   \   000143   E0           MOVX      A,@DPTR
   \   000144   2401         ADD       A,#0x1
   \   000146   FC           MOV       R4,A
   \   000147   E4           CLR       A
   \   000148   3400         ADDC      A,#0x0
   \   00014A   800F         SJMP      ??zclSerializeData_13
   3010                break;
   3011          
   3012              case ZCL_DATATYPE_LONG_CHAR_STR:
   3013              case ZCL_DATATYPE_LONG_OCTET_STR:
   3014                pStr = (uint8*)attrData;
   3015                len = BUILD_UINT16( pStr[0], pStr[1] );
   3016                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   00014C                ; Setup parameters for call to function osal_memcpy
   \   00014C   78..         MOV       R0,#?V0
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000151   8E82         MOV       DPL,R6
   \   000153   8F83         MOV       DPH,R7
   \   000155   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000158   FC           MOV       R4,A
   \   000159   E4           CLR       A
   \   00015A   39           ADDC      A,R1
   \                     ??zclSerializeData_13:
   \   00015B   FD           MOV       R5,A
   \   00015C   8009         SJMP      ??zclSerializeData_14
   3017                break;
   3018          
   3019              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3020                pStr = (uint8*)attrData;
   3021                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   00015E                ; Setup parameters for call to function osal_memcpy
   \   00015E   78..         MOV       R0,#?V0
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000163   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_12:
   \   000165   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_14:
   \   000167   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00016A   12....       LCALL     ?DEALLOC_XSTACK8
   3022                break;
   3023          
   3024              case ZCL_DATATYPE_NO_DATA:
   3025              case ZCL_DATATYPE_UNKNOWN:
   3026                // Fall through
   3027          
   3028              default:
   3029                break;
   3030            }
   3031          
   3032            return ( buf );
   \                     ??zclSerializeData_0:
   \   00016D   02....       LJMP      ??Subroutine293_0 & 0xFFFF
   3033          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine208:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine253_0
   \   000004                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EC           MOV       A,R4
   \   000006   2402         ADD       A,#0x2
   \   000008   22           RET
   3034          
   3035          #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
   3036          /*********************************************************************
   3037           * @fn      zclAnalogDataType
   3038           *
   3039           * @brief   Checks to see if Data Type is Analog
   3040           *
   3041           * @param   dataType - data type
   3042           *
   3043           * @return  TRUE if data type is analog
   3044           */
   3045          uint8 zclAnalogDataType( uint8 dataType )
   3046          {
   3047            uint8 analog;
   3048          
   3049            switch ( dataType )
   3050            {
   3051              case ZCL_DATATYPE_UINT8:
   3052              case ZCL_DATATYPE_UINT16:
   3053              case ZCL_DATATYPE_UINT24:
   3054              case ZCL_DATATYPE_UINT32:
   3055              case ZCL_DATATYPE_UINT40:
   3056              case ZCL_DATATYPE_UINT48:
   3057              case ZCL_DATATYPE_UINT56:
   3058              case ZCL_DATATYPE_UINT64:
   3059              case ZCL_DATATYPE_INT8:
   3060              case ZCL_DATATYPE_INT16:
   3061              case ZCL_DATATYPE_INT24:
   3062              case ZCL_DATATYPE_INT32:
   3063              case ZCL_DATATYPE_INT40:
   3064              case ZCL_DATATYPE_INT48:
   3065              case ZCL_DATATYPE_INT56:
   3066              case ZCL_DATATYPE_INT64:
   3067              case ZCL_DATATYPE_SEMI_PREC:
   3068              case ZCL_DATATYPE_SINGLE_PREC:
   3069              case ZCL_DATATYPE_DOUBLE_PREC:
   3070              case ZCL_DATATYPE_TOD:
   3071              case ZCL_DATATYPE_DATE:
   3072              case ZCL_DATATYPE_UTC:
   3073                analog = TRUE;
   3074                break;
   3075          
   3076              default:
   3077                analog = FALSE;
   3078                break;
   3079            }
   3080          
   3081            return ( analog );
   3082          }
   3083          
   3084          /*********************************************************************
   3085           * @fn      zclIsLittleEndianMachine
   3086           *
   3087           * @brief   Verifies endianness in system.
   3088           *
   3089           * @param   none
   3090           *
   3091           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3092           */
   3093          static int zclIsLittleEndianMachine(void)
   3094          {
   3095            uint16 test = 0x0001;
   3096          
   3097            return (*((uint8 *)(&test)));
   3098          }
   3099          
   3100          /*********************************************************************
   3101           * @fn      zcl_BuildAnalogData
   3102           *
   3103           * @brief   Build an analog arribute out of sequential bytes.
   3104           *
   3105           * @param   dataType - type of data
   3106           * @param   pData - pointer to data
   3107           * @param   pBuf - where to put the data
   3108           *
   3109           * @return  none
   3110           */
   3111          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   3112          {
   3113            int current_byte_index;
   3114            int remaining_bytes;
   3115            int step;
   3116          
   3117            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   3118          
   3119            // decide if move forward or backwards to copy data
   3120            if ( zclIsLittleEndianMachine() )
   3121            {
   3122              step = 1;
   3123              current_byte_index = 0;
   3124            }
   3125            else
   3126            {
   3127              step = -1;
   3128              current_byte_index = remaining_bytes - 1;
   3129            }
   3130          
   3131            while ( remaining_bytes-- )
   3132            {
   3133              pData[current_byte_index] = *(pBuf++);
   3134              current_byte_index += step;
   3135            }
   3136          }
   3137          #endif
   3138          
   3139          /*********************************************************************
   3140           * @fn      zclGetDataTypeLength
   3141           *
   3142           * @brief   Return the length of the datatype in octet.
   3143           *
   3144           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3145           *                ZCL_DATATYPE_CHAR_STR data types.
   3146           *
   3147           * @param   dataType - data type
   3148           *
   3149           * @return  length of data
   3150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3151          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3152          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3153            uint8 len;
   3154          
   3155            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3156            {
   3157              case ZCL_DATATYPE_DATA8:
   3158              case ZCL_DATATYPE_BOOLEAN:
   3159              case ZCL_DATATYPE_BITMAP8:
   3160              case ZCL_DATATYPE_INT8:
   3161              case ZCL_DATATYPE_UINT8:
   3162              case ZCL_DATATYPE_ENUM8:
   3163                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3164                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3165          
   3166              case ZCL_DATATYPE_DATA16:
   3167              case ZCL_DATATYPE_BITMAP16:
   3168              case ZCL_DATATYPE_UINT16:
   3169              case ZCL_DATATYPE_INT16:
   3170              case ZCL_DATATYPE_ENUM16:
   3171              case ZCL_DATATYPE_SEMI_PREC:
   3172              case ZCL_DATATYPE_CLUSTER_ID:
   3173              case ZCL_DATATYPE_ATTR_ID:
   3174                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3175                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3176          
   3177              case ZCL_DATATYPE_DATA24:
   3178              case ZCL_DATATYPE_BITMAP24:
   3179              case ZCL_DATATYPE_UINT24:
   3180              case ZCL_DATATYPE_INT24:
   3181                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3182                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3183          
   3184              case ZCL_DATATYPE_DATA32:
   3185              case ZCL_DATATYPE_BITMAP32:
   3186              case ZCL_DATATYPE_UINT32:
   3187              case ZCL_DATATYPE_INT32:
   3188              case ZCL_DATATYPE_SINGLE_PREC:
   3189              case ZCL_DATATYPE_TOD:
   3190              case ZCL_DATATYPE_DATE:
   3191              case ZCL_DATATYPE_UTC:
   3192              case ZCL_DATATYPE_BAC_OID:
   3193                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3194                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3195          
   3196             case ZCL_DATATYPE_UINT40:
   3197             case ZCL_DATATYPE_INT40:
   3198                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3199                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3200          
   3201             case ZCL_DATATYPE_UINT48:
   3202             case ZCL_DATATYPE_INT48:
   3203                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3204                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3205          
   3206             case ZCL_DATATYPE_UINT56:
   3207             case ZCL_DATATYPE_INT56:
   3208                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3209                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3210          
   3211             case ZCL_DATATYPE_DOUBLE_PREC:
   3212             case ZCL_DATATYPE_IEEE_ADDR:
   3213             case ZCL_DATATYPE_UINT64:
   3214             case ZCL_DATATYPE_INT64:
   3215               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3216               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3217          
   3218              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3219               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3220               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3221          
   3222              case ZCL_DATATYPE_NO_DATA:
   3223              case ZCL_DATATYPE_UNKNOWN:
   3224                // Fall through
   3225          
   3226              default:
   3227                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3228                break;
   3229            }
   3230          
   3231            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3232          }
   3233          
   3234          /*********************************************************************
   3235           * @fn      zclGetAttrDataLength
   3236           *
   3237           * @brief   Return the length of the attribute.
   3238           *
   3239           * @param   dataType - data type
   3240           * @param   pData - pointer to data
   3241           *
   3242           * @return  returns atrribute length
   3243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3244          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3245          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3246            uint16 dataLen = 0;
   3247          
   3248            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   700C         JNZ       ??zclGetAttrDataLength_1
   3249            {
   3250              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ?Subroutine140 & 0xFFFF
   3251            }
   \                     ??CrossCallReturnLabel_266:
   \   000018   FA           MOV       R2,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   8015         SJMP      ??zclGetAttrDataLength_2
   3252            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV       A,#0x42
   \   00001F   6E           XRL       A,R6
   \   000020   6005         JZ        ??zclGetAttrDataLength_3
   \   000022   7441         MOV       A,#0x41
   \   000024   6E           XRL       A,R6
   \   000025   700E         JNZ       ??zclGetAttrDataLength_4
   3253            {
   3254              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV       R3,A
   \   000033   8007         SJMP      ??zclGetAttrDataLength_5
   3255            }
   3256            else
   3257            {
   3258              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV       A,R1
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   3259            }
   3260          
   3261            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   02....       LJMP      ??Subroutine250_0 & 0xFFFF
   3262          }
   3263          
   3264          #ifdef ZCL_READ
   3265          /*********************************************************************
   3266           * @fn      zclReadAttrData
   3267           *
   3268           * @brief   Read the attribute's current value into pAttrData.
   3269           *          NOTE - Not compatible with application's attributes callbacks.
   3270           *
   3271           * @param   pAttrData - where to put attribute data
   3272           * @param   pAttr - pointer to attribute
   3273           * @param   pDataLen - where to put attribute data length
   3274           *
   3275           * @return Success
   3276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3277          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   3278          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   3279            uint16 dataLen;
   3280          
   3281            if ( pAttr->attr.dataPtr == NULL )
   \   000009   EC           MOV       A,R4
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   F5..         MOV       ?V1,A
   \   000012   85..82       MOV       DPL,?V0
   \   000015   F583         MOV       DPH,A
   \   000017   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   00001A   7004         JNZ       ??zclReadAttrData_0
   3282            {
   3283              return ( ZCL_STATUS_FAILURE );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   8034         SJMP      ??zclReadAttrData_1
   3284            }
   3285          
   3286            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \                     ??zclReadAttrData_0:
   \   000020                ; Setup parameters for call to function zclGetAttrDataLength
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   A3           INC       DPTR
   \   000025   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000028   8A..         MOV       ?V2,R2
   \   00002A   8B..         MOV       ?V3,R3
   \   00002C   AE..         MOV       R6,?V2
   3287            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   EA           MOV       A,R2
   \   000035   FC           MOV       R4,A
   \   000036   EB           MOV       A,R3
   \   000037   FD           MOV       R5,A
   \   000038   AA..         MOV       R2,?V4
   \   00003A   AB..         MOV       R3,?V5
   \   00003C   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   740E         MOV       A,#0xe
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   3288          
   3289            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_468:
   \   00004A   6006         JZ        ??zclReadAttrData_2
   3290            {
   3291              *pDataLen = dataLen;
   \   00004C   EE           MOV       A,R6
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   E5..         MOV       A,?V3
   \   000051   F0           MOVX      @DPTR,A
   3292            }
   3293          
   3294            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclReadAttrData_2:
   \   000052   7900         MOV       R1,#0x0
   \                     ??zclReadAttrData_1:
   \   000054   80..         SJMP      ??Subroutine256_0
   3295          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine255_0
   \   000006                ; // Fall through to label ??Subroutine255_0
   3296          
   3297          /*********************************************************************
   3298           * @fn      zcl_ReadAttrData
   3299           *
   3300           * @brief   Read the attribute's current value into pAttrData.
   3301           *          Use application's callback function if assigned to this attribute.
   3302           *
   3303           * @param   endpoint - application's endpoint
   3304           * @param   clusterId - cluster that attribute belongs to
   3305           * @param   attrId - attribute id
   3306           * @param   pAttrData - where to put attribute data
   3307           * @param   pDataLen - where to put attribute data length
   3308           *
   3309           * @return  Successful if data was read
   3310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3311          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zcl_ReadAttrData:
   3312                                                   uint8 *pAttrData, uint16 *pDataLen )
   3313          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
   3314            zclAttrRec_t attrRec;
   3315          
   3316            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   \   000014                ; Setup parameters for call to function zclFindAttrRec
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V4,R0
   \   00001A   89..         MOV       ?V5,R1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   A9..         MOV       R1,?V0
   \   000023   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
   \   00002A   7004         JNZ       ??zcl_ReadAttrData_0
   3317            {
   3318              return ( ZCL_STATUS_FAILURE );
   \   00002C   7901         MOV       R1,#0x1
   \   00002E   804C         SJMP      ??zcl_ReadAttrData_1
   3319            }
   \                     ??zcl_ReadAttrData_0:
   \   000030   7416         MOV       A,#0x16
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000038   7418         MOV       A,#0x18
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ??Subroutine280_0 & 0xFFFF
   3320          
   3321            if ( attrRec.attr.dataPtr != NULL )
   \                     ??CrossCallReturnLabel_668:
   \   000040   7406         MOV       A,#0x6
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   000048   78..         MOV       R0,#?V4
   \   00004A   6012         JZ        ??zcl_ReadAttrData_2
   3322            {
   3323              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   \   00004C                ; Setup parameters for call to function zclReadAttrData
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7402         MOV       A,#0x2
   \   000051   12....       LCALL     ?XSTACK_DISP102_8
   \   000054   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   801E         SJMP      ??zcl_ReadAttrData_1
   3324            }
   3325            else
   3326            {
   3327              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   \                     ??zcl_ReadAttrData_2:
   \   00005E                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   8A..         MOV       ?V4,R2
   \   000063   8B..         MOV       ?V5,R3
   \   000065   78..         MOV       R0,#?V4
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   AC..         MOV       R4,?V2
   \   00006C   AD..         MOV       R5,?V3
   \   00006E   EE           MOV       A,R6
   \   00006F   FA           MOV       R2,A
   \   000070   EF           MOV       A,R7
   \   000071   FB           MOV       R3,A
   \   000072   A9..         MOV       R1,?V0
   \   000074   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zcl_ReadAttrData_1:
   \   00007C   7408         MOV       A,#0x8
   3328            }
   \   00007E   02....       LJMP      ?Subroutine5 & 0xFFFF
   3329          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine280_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET
   3330          
   3331          /*********************************************************************
   3332           * @fn      zclGetAttrDataLengthUsingCB
   3333           *
   3334           * @brief   Use application's callback to get the length of the attribute's
   3335           *          current value stored in the database.
   3336           *
   3337           * @param   endpoint - application's endpoint
   3338           * @param   clusterId - cluster that attribute belongs to
   3339           * @param   attrId - attribute id
   3340           *
   3341           * @return  returns attribute length
   3342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3343          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   3344          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3345            uint16 dataLen = 0;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   3346            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL     ?Subroutine169 & 0xFFFF
   3347          
   3348            if ( pfnReadWriteCB != NULL )
   \                     ??CrossCallReturnLabel_316:
   \   00001F   602F         JZ        ??zclGetAttrDataLengthUsingCB_0
   3349            {
   3350              // Only get the attribute length
   3351              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000021                ; Setup parameters for indirect call
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V4,R0
   \   000027   89..         MOV       ?V5,R1
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   E4           CLR       A
   \   00002F   F5..         MOV       ?V4,A
   \   000031   F5..         MOV       ?V5,A
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7900         MOV       R1,#0x0
   \   00003A   EE           MOV       A,R6
   \   00003B   FC           MOV       R4,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FD           MOV       R5,A
   \   00003E   AA..         MOV       R2,?V6
   \   000040   AB..         MOV       R3,?V7
   \   000042   85..82       MOV       DPL,?V0
   \   000045   85..83       MOV       DPH,?V1
   \   000048   12....       LCALL     ?CALL_IND
   \   00004B   7404         MOV       A,#0x4
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   3352            }
   3353          
   3354            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000059   02....       LJMP      ?Subroutine8 & 0xFFFF
   3355          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
   3356          
   3357          /*********************************************************************
   3358           * @fn      zclReadAttrDataUsingCB
   3359           *
   3360           * @brief   Use application's callback to read the attribute's current
   3361           *          value stored in the database.
   3362           *
   3363           * @param   endpoint - application's endpoint
   3364           * @param   clusterId - cluster that attribute belongs to
   3365           * @param   attrId - attribute id
   3366           * @param   pAttrData - where to put attribute data
   3367           * @param   pDataLen - where to put attribute data length
   3368           *
   3369           * @return  Successful if data was read
   3370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3371          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   3372                                                   uint8 *pAttrData, uint16 *pDataLen )
   3373          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3374            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00000D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00000D   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ??Subroutine280_0 & 0xFFFF
   3375          
   3376            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_669:
   \   00001C   E5..         MOV       A,?V4
   \   00001E   45..         ORL       A,?V5
   \   000020   600A         JZ        ??zclReadAttrDataUsingCB_0
   3377            {
   3378              *pDataLen = 0; // Always initialize it to 0
   \   000022   85..82       MOV       DPL,?V4
   \   000025   85..83       MOV       DPH,?V5
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
   3379            }
   3380          
   3381            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   6027         JZ        ??zclReadAttrDataUsingCB_1
   3382            {
   3383              // Read the attribute value and its length
   3384              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000030                ; Setup parameters for indirect call
   \   000030   78..         MOV       R0,#?V4
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7412         MOV       A,#0x12
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003D   7901         MOV       R1,#0x1
   \   00003F   AC..         MOV       R4,?V2
   \   000041   AD..         MOV       R5,?V3
   \   000043   AA..         MOV       R2,?V6
   \   000045   AB..         MOV       R3,?V7
   \   000047   85..82       MOV       DPL,?V0
   \   00004A   85..83       MOV       DPH,?V1
   \   00004D   12....       LCALL     ?CALL_IND
   \   000050   7404         MOV       A,#0x4
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   8002         SJMP      ??zclReadAttrDataUsingCB_2
   3385            }
   3386          
   3387            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   000057   79C1         MOV       R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   000059   02....       LJMP      ??Subroutine246_0 & 0xFFFF
   3388          }
   3389          
   3390          /*********************************************************************
   3391           * @fn      zclAuthorizeRead
   3392           *
   3393           * @brief   Use application's callback to authorize a Read operation
   3394           *          on a given attribute.
   3395           *
   3396           * @param   endpoint - application's endpoint
   3397           * @param   srcAddr - source Address
   3398           * @param   pAttr - pointer to attribute
   3399           *
   3400           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3401           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3402           */
   3403          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3404          {
   3405            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   3406            {
   3407              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3408          
   3409              if ( pfnAuthorizeCB != NULL )
   3410              {
   3411                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   3412              }
   3413            }
   3414          
   3415            return ( ZCL_STATUS_SUCCESS );
   3416          }
   3417          #endif // ZCL_READ
   3418          
   3419          #ifdef ZCL_WRITE
   3420          /*********************************************************************
   3421           * @fn      zclWriteAttrData
   3422           *
   3423           * @brief   Write the received data.
   3424           *
   3425           * @param   endpoint - application's endpoint
   3426           * @param   pAttr - where to write data to
   3427           * @param   pWriteRec - data to be written
   3428           *
   3429           * @return  Successful if data was written
   3430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3431          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   3432                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3433          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   3434            uint8 status;
   3435          
   3436            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000009   8C82         MOV       DPL,R4
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5063         JNC       ??zclWriteAttrData_0
   3437            {
   3438              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000017                ; Setup parameters for call to function zclAuthorizeWrite
   \   000017   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001A   E9           MOV       A,R1
   \   00001B   F5..         MOV       ?V3,A
   3439              if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   705E         JNZ       ??zclWriteAttrData_1
   \   00001F   740F         MOV       A,#0xf
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine192 & 0xFFFF
   3440              {
   3441                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \                     ??CrossCallReturnLabel_517:
   \   000027   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   00002A   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   00002D   6011         JZ        ??zclWriteAttrData_2
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AC..         MOV       R4,?V0
   \   000031   AD..         MOV       R5,?V1
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   12....       LCALL     ??Subroutine296_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_762:
   \   00003A   12....       LCALL     ?CALL_IND
   \   00003D   E9           MOV       A,R1
   \   00003E   6035         JZ        ??zclWriteAttrData_3
   3442                {
   3443                  // Write the attribute value
   3444                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000040   E5..         MOV       A,?V0
   \   000042   2403         ADD       A,#0x3
   \   000044   F5..         MOV       ?V0,A
   \   000046   5002         JNC       ??zclWriteAttrData_4
   \   000048   05..         INC       ?V1
   \                     ??zclWriteAttrData_4:
   \   00004A                ; Setup parameters for call to function zclGetAttrDataLength
   \   00004A   F582         MOV       DPL,A
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ?Subroutine98 & 0xFFFF
   3445                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \                     ??CrossCallReturnLabel_196:
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   3446          
   3447                  status = ZCL_STATUS_SUCCESS;
   \   000073   8008         SJMP      ??zclWriteAttrData_1
   3448                }
   3449                else
   3450                {
   3451                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   000075   75..87       MOV       ?V3,#-0x79
   \   000078   8003         SJMP      ??zclWriteAttrData_1
   3452                }
   3453              }
   3454            }
   3455            else
   3456            {
   3457              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   00007A   75..88       MOV       ?V3,#-0x78
   3458            }
   3459          
   3460            return ( status );
   \                     ??zclWriteAttrData_1:
   \   00007D   A9..         MOV       R1,?V3
   \   00007F   02....       LJMP      ??Subroutine293_0 & 0xFFFF
   3461          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000003   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000006   7403         MOV       A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   AC..         MOV       R4,?V4
   \   00000B   AD..         MOV       R5,?V5
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine296_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
   3462          
   3463          /*********************************************************************
   3464           * @fn      zclWriteAttrDataUsingCB
   3465           *
   3466           * @brief   Use application's callback to write the attribute's current
   3467           *          value stored in the database.
   3468           *
   3469           * @param   endpoint - application's endpoint
   3470           * @param   pAttr - where to write data to
   3471           * @param   pAttrData - data to be written
   3472           *
   3473           * @return  Successful if data was written
   3474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3475          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   3476                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3477          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   3478            uint8 status;
   3479          
   3480            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   5046         JNC       ??zclWriteAttrDataUsingCB_0
   3481            {
   3482              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000019                ; Setup parameters for call to function zclAuthorizeWrite
   \   000019   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001C   E9           MOV       A,R1
   \   00001D   F9           MOV       R1,A
   3483              if ( status == ZCL_STATUS_SUCCESS )
   \   00001E   7041         JNZ       ??zclWriteAttrDataUsingCB_1
   3484              {
   3485                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000020                ; Setup parameters for call to function zclGetReadWriteCB
   \   000020   A9..         MOV       R1,?V2
   \   000022   12....       LCALL     ?Subroutine169 & 0xFFFF
   3486                if ( pfnReadWriteCB != NULL )
   \                     ??CrossCallReturnLabel_317:
   \   000025   6034         JZ        ??zclWriteAttrDataUsingCB_2
   3487                {
   3488                  // Write the attribute value
   3489                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3490                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   000027                ; Setup parameters for indirect call
   \   000027   E4           CLR       A
   \   000028   F5..         MOV       ?V4,A
   \   00002A   F5..         MOV       ?V5,A
   \   00002C   78..         MOV       R0,#?V4
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7410         MOV       A,#0x10
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000039   7902         MOV       R1,#0x2
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   3491                }
   \                     ??CrossCallReturnLabel_435:
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ?CALL_IND
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   E9           MOV       A,R1
   \   000058   F9           MOV       R1,A
   \   000059   8006         SJMP      ??zclWriteAttrDataUsingCB_1
   3492                else
   3493                {
   3494                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   00005B   79C1         MOV       R1,#-0x3f
   \   00005D   8002         SJMP      ??zclWriteAttrDataUsingCB_1
   3495                }
   3496              }
   3497            }
   3498            else
   3499            {
   3500              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   00005F   7988         MOV       R1,#-0x78
   3501            }
   3502          
   3503            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   000061   02....       LJMP      ??Subroutine256_0 & 0xFFFF
   3504          }
   3505          
   3506          /*********************************************************************
   3507           * @fn      zclAuthorizeWrite
   3508           *
   3509           * @brief   Use application's callback to authorize a Write operation
   3510           *          on a given attribute.
   3511           *
   3512           * @param   endpoint - application's endpoint
   3513           * @param   srcAddr - source Address
   3514           * @param   pAttr - pointer to attribute
   3515           *
   3516           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3517           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3518           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3519          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   3520          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3521            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   F583         MOV       DPH,A
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E5         MOV       C,0xE0 /* A   */.5
   \   000019   5014         JNC       ??zclAuthorizeWrite_0
   3522            {
   3523              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     ?Subroutine167 & 0xFFFF
   3524          
   3525              if ( pfnAuthorizeCB != NULL )
   \                     ??CrossCallReturnLabel_311:
   \   00001E   600F         JZ        ??zclAuthorizeWrite_0
   3526              {
   3527                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000020                ; Setup parameters for indirect call
   \   000020   7902         MOV       R1,#0x2
   \   000022   EE           MOV       A,R6
   \   000023   FC           MOV       R4,A
   \   000024   EF           MOV       A,R7
   \   000025   FD           MOV       R5,A
   \   000026   AA..         MOV       R2,?V2
   \   000028   AB..         MOV       R3,?V3
   \   00002A   12....       LCALL     ?CALL_IND
   \   00002D   8002         SJMP      ??zclAuthorizeWrite_1
   3528              }
   3529            }
   3530          
   3531            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   00002F   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000031   02....       LJMP      ??Subroutine256_0 & 0xFFFF
   3532          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
   3533          #endif // ZCL_WRITE
   3534          
   3535          #ifdef ZCL_READ
   3536          /*********************************************************************
   3537           * @fn      zclParseInReadCmd
   3538           *
   3539           * @brief   Parse the "Profile" Read Commands
   3540           *
   3541           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3542           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3543           *
   3544           * @param   pCmd - pointer to incoming data to parse
   3545           *
   3546           * @return  pointer to the parsed command structure
   3547           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3548          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   3549          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3550            zclReadCmd_t *readCmd;
   3551            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine101 & 0xFFFF
   3552          
   3553            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_579:
   \   000008   12....       LCALL     ?Subroutine97 & 0xFFFF
   3554            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_194:
   \   00000B   6054         JZ        ??zclParseInReadCmd_0
   3555            {
   3556              uint8 i;
   3557              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   12....       LCALL     ??Subroutine278_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000016   C3           CLR       C
   \   000017   13           RRC       A
   \   000018   E8           MOV       A,R0
   \   000019   13           RRC       A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   F0           MOVX      @DPTR,A
   3558              for ( i = 0; i < readCmd->numAttr; i++ )
   \   00001F   7C00         MOV       R4,#0x0
   \   000021   8033         SJMP      ??zclParseInReadCmd_1
   3559              {
   3560                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   E4           CLR       A
   \   00002E   C8           XCH       A,R0
   \   00002F   F9           MOV       R1,A
   \   000030   E5..         MOV       A,?V0
   \   000032   28           ADD       A,R0
   \   000033   E4           CLR       A
   \   000034   39           ADDC      A,R1
   \   000035   F5..         MOV       ?V1,A
   \   000037   EC           MOV       A,R4
   \   000038   25E0         ADD       A,0xE0 /* A   */
   \   00003A   F8           MOV       R0,A
   \   00003B   E4           CLR       A
   \   00003C   33           RLC       A
   \   00003D   F9           MOV       R1,A
   \   00003E   EA           MOV       A,R2
   \   00003F   28           ADD       A,R0
   \   000040   F582         MOV       DPL,A
   \   000042   EB           MOV       A,R3
   \   000043   39           ADDC      A,R1
   \   000044   F583         MOV       DPH,A
   \   000046   A3           INC       DPTR
   \   000047   E5..         MOV       A,?V0
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   E5..         MOV       A,?V1
   \   00004D   F0           MOVX      @DPTR,A
   3561                pBuf += 2;
   \   00004E   EE           MOV       A,R6
   \   00004F   2402         ADD       A,#0x2
   \   000051   FE           MOV       R6,A
   \   000052   5001         JNC       ??zclParseInReadCmd_3
   \   000054   0F           INC       R7
   3562              }
   \                     ??zclParseInReadCmd_3:
   \   000055   0C           INC       R4
   \                     ??zclParseInReadCmd_1:
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F8           MOV       R0,A
   \   00005C   EC           MOV       A,R4
   \   00005D   C3           CLR       C
   \   00005E   98           SUBB      A,R0
   \   00005F   40C2         JC        ??zclParseInReadCmd_2
   3563            }
   3564          
   3565            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   000061   02....       LJMP      ?Subroutine4 & 0xFFFF
   3566          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine262_0
   \   000007                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   8582..       MOV       ?V0,DPL
   \   000008   8583..       MOV       ?V1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   2401         ADD       A,#0x1
   \   00000E   12....       LCALL     ?Subroutine210 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000011   EA           MOV       A,R2
   \   000012   4B           ORL       A,R3
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine210:
   \   000000   FA           MOV       R2,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000009   22           RET
   3567          
   3568          /*********************************************************************
   3569           * @fn      zclParseInReadRspCmd
   3570           *
   3571           * @brief   Parse the "Profile" Read Response Commands
   3572           *
   3573           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3574           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3575           *
   3576           * @param   pCmd - pointer to incoming data to parse
   3577           *
   3578           * @return  pointer to the parsed command structure
   3579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7404         MOV       A,#0x4
   \   000002   12....       LCALL     ?XSTACK_DISP0_8
   \   000005   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000008                REQUIRE ??Subroutine244_0
   \   000008                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3580          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   3581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   3582            zclReadRspCmd_t *readRspCmd;
   3583            uint8 *pBuf = pCmd->pData;
   \                     ??CrossCallReturnLabel_12:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine11 & 0xFFFF
   3584            uint8 *dataPtr;
   3585            uint8 numAttr = 0;
   3586            uint8 hdrLen;
   3587            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_2:
   \   000018   8037         SJMP      ??CrossCallReturnLabel_308
   3588            uint16 attrDataLen;
   3589          
   3590            // find out the number of attributes and the length of attribute data
   3591            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3592            {
   3593              uint8 status;
   3594          
   3595              numAttr++;
   \                     ??zclParseInReadRspCmd_0:
   \   00001A   05..         INC       ?V3
   3596              pBuf += 2; // move pass attribute id
   3597          
   3598              status = *pBuf++;
   \   00001C   85..82       MOV       DPL,?V4
   \   00001F   85..83       MOV       DPH,?V5
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   E5..         MOV       A,?V4
   \   000028   2403         ADD       A,#0x3
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   5002         JNC       ??zclParseInReadRspCmd_1
   \   00002E   05..         INC       ?V5
   3599              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_1:
   \   000030   E8           MOV       A,R0
   \   000031   701E         JNZ       ??CrossCallReturnLabel_308
   3600              {
   3601                uint8 dataType = *pBuf++;
   \   000033   85..82       MOV       DPL,?V4
   \   000036   85..83       MOV       DPH,?V5
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   A3           INC       DPTR
   \   00003C   8582..       MOV       ?V4,DPL
   \   00003F   8583..       MOV       ?V5,DPH
   3602          
   3603                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \   000042                ; Setup parameters for call to function zclGetAttrDataLength
   \   000042   AA..         MOV       R2,?V4
   \   000044   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   3604                pBuf += attrDataLen; // move pass attribute data
   3605          
   3606                // add padding if needed
   3607                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_596:
   \   000047   5005         JNC       ??zclParseInReadRspCmd_2
   3608                {
   3609                  attrDataLen++;
   \   000049   0E           INC       R6
   \   00004A   04           INC       A
   \   00004B   7001         JNZ       ??zclParseInReadRspCmd_2
   \   00004D   0F           INC       R7
   3610                }
   3611          
   3612                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   00004E   12....       LCALL     ?Subroutine166 & 0xFFFF
   3613              }
   3614            }
   \                     ??CrossCallReturnLabel_308:
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000059   40BF         JC        ??zclParseInReadRspCmd_0
   3615          
   3616            // calculate the length of the response header
   3617            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   00005B   75F006       MOV       B,#0x6
   \   00005E   12....       LCALL     ??Subroutine267_0 & 0xFFFF
   3618          
   3619            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \                     ??CrossCallReturnLabel_601:
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine36 & 0xFFFF
   3620            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_50:
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   00006D   7003         JNZ       $+5
   \   00006F   02....       LJMP      ??zclParseInReadRspCmd_3 & 0xFFFF
   3621            {
   3622              uint8 i;
   3623              pBuf = pCmd->pData;
   \   000072   12....       LCALL     ?Subroutine60 & 0xFFFF
   3624              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_109:
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine30 & 0xFFFF
   3625          
   3626              readRspCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_37:
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine65 & 0xFFFF
   3627              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_118:
   \   000087   02....       LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
   3628              {
   3629                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_5:
   \   00008A   E5..         MOV       A,?V6
   \   00008C   75F006       MOV       B,#0x6
   \   00008F   A4           MUL       AB
   \   000090   F8           MOV       R0,A
   \   000091   A9F0         MOV       R1,B
   \   000093   7404         MOV       A,#0x4
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00009B   85..82       MOV       DPL,?XSP + 0
   \   00009E   85..83       MOV       DPH,?XSP + 1
   \   0000A1   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   3630          
   3631                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_621:
   \   0000A4   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   0000A7   F8           MOV       R0,A
   \   0000A8   85..82       MOV       DPL,?XSP + 0
   \   0000AB   85..83       MOV       DPH,?XSP + 1
   \   0000AE   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   0000B1   E8           MOV       A,R0
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   12....       LCALL     ?Subroutine28 & 0xFFFF
   3632                pBuf += 2;
   3633          
   3634                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_585:
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F8           MOV       R0,A
   \   0000B9   85..82       MOV       DPL,?XSP + 0
   \   0000BC   85..83       MOV       DPH,?XSP + 1
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F9           MOV       R1,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F583         MOV       DPH,A
   \   0000C5   8982         MOV       DPL,R1
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   E8           MOV       A,R0
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   E5..         MOV       A,?V4
   \   0000CD   2403         ADD       A,#0x3
   \   0000CF   F5..         MOV       ?V4,A
   \   0000D1   5002         JNC       ??zclParseInReadRspCmd_6
   \   0000D3   05..         INC       ?V5
   3635                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_6:
   \   0000D5   E8           MOV       A,R0
   \   0000D6   7050         JNZ       ??CrossCallReturnLabel_622
   3636                {
   3637                  statusRec->dataType = *pBuf++;
   \   0000D8   85..82       MOV       DPL,?V4
   \   0000DB   85..83       MOV       DPH,?V5
   \   0000DE   12....       LCALL     ??Subroutine275_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   0000E1   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000E4   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   0000E7   8582..       MOV       ?V4,DPL
   \   0000EA   8583..       MOV       ?V5,DPH
   3638          
   3639                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   0000ED                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000ED   AA..         MOV       R2,?V4
   \   0000EF   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   3640                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_593:
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F5   EA           MOV       A,R2
   \   0000F6   FC           MOV       R4,A
   \   0000F7   EB           MOV       A,R3
   \   0000F8   FD           MOV       R5,A
   \   0000F9   7405         MOV       A,#0x5
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
   3641                  statusRec->data = dataPtr;
   \   000104   7402         MOV       A,#0x2
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   00010C   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_769:
   \   00010F   A3           INC       DPTR
   \   000110   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   3642          
   3643                  pBuf += attrDataLen; // move pass attribute data
   3644          
   3645                  // advance attribute data pointer
   3646                  if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_608:
   \   000113   5005         JNC       ??zclParseInReadRspCmd_7
   3647                  {
   3648                    attrDataLen++;
   \   000115   0E           INC       R6
   \   000116   04           INC       A
   \   000117   7001         JNZ       ??zclParseInReadRspCmd_7
   \   000119   0F           INC       R7
   3649                  }
   3650          
   3651                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   00011A   7402         MOV       A,#0x2
   \   00011C   12....       LCALL     ?XSTACK_DISP0_8
   \   00011F   12....       LCALL     ?Subroutine89 & 0xFFFF
   3652                }
   3653              }
   \                     ??CrossCallReturnLabel_176:
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000128   05..         INC       ?V6
   \                     ??zclParseInReadRspCmd_4:
   \   00012A   E5..         MOV       A,?V6
   \   00012C   C3           CLR       C
   \   00012D   95..         SUBB      A,?V3
   \   00012F   5003         JNC       $+5
   \   000131   02....       LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
   3654            }
   3655          
   3656            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_3:
   \   000134   02....       LJMP      ?Subroutine1 & 0xFFFF
   3657          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine263_0
   \   000006                ; // Fall through to label ??Subroutine263_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   E9           MOV       A,R1
   \   000002                REQUIRE ??Subroutine264_0
   \   000002                ; // Fall through to label ??Subroutine264_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   E5..         MOV       A,?V6
   \   000002   2E           ADD       A,R6
   \   000003   F5..         MOV       ?V6,A
   \   000005   E5..         MOV       A,?V7
   \   000007   3F           ADDC      A,R7
   \   000008   F5..         MOV       ?V7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   12....       LCALL     ?Subroutine216 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   85....       MOV       ?V0,?V4
   \   000006   85....       MOV       ?V1,?V5
   \   000009   75..00       MOV       ?V2,#0x0
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   12....       LCALL     ?Subroutine216 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000003   E5..         MOV       A,?V4
   \   000005   2A           ADD       A,R2
   \   000006   F5..         MOV       ?V4,A
   \   000008   E5..         MOV       A,?V5
   \   00000A   3F           ADDC      A,R7
   \   00000B   F5..         MOV       ?V5,A
   \   00000D   EA           MOV       A,R2
   \   00000E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine216:
   \   000000   AB..         MOV       R3,?V5
   \   000002   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   AE..         MOV       R6,?V0
   \   00000B   AF..         MOV       R7,?V1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   E5..         MOV       A,?V3
   \   000002   A4           MUL       AB
   \   000003   04           INC       A
   \   000004   FE           MOV       R6,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   25..         ADD       A,?V6
   \   000007   FA           MOV       R2,A
   \   000008   E4           CLR       A
   \   000009   35..         ADDC      A,?V7
   \   00000B   FB           MOV       R3,A
   \   00000C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000F   7404         MOV       A,#0x4
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F9           MOV       R1,A
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000003   E5..         MOV       A,?V3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   75..00       MOV       ?V6,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_692:
   \   000007   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   28           ADD       A,R0
   \   00000C   F8           MOV       R0,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   39           ADDC      A,R1
   \   000010   F9           MOV       R1,A
   \   000011   C3           CLR       C
   \   000012   E5..         MOV       A,?V4
   \   000014   98           SUBB      A,R0
   \   000015   E5..         MOV       A,?V5
   \   000017   99           SUBB      A,R1
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine268_0
   \   000006                ; // Fall through to label ??Subroutine268_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_750:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_752:
   \   000006   E5..         MOV       A,?V4
   \   000008   2E           ADD       A,R6
   \   000009   F5..         MOV       ?V4,A
   \   00000B   E5..         MOV       A,?V5
   \   00000D   3F           ADDC      A,R7
   \   00000E   F5..         MOV       ?V5,A
   \   000010   EE           MOV       A,R6
   \   000011   A2E0         MOV       C,0xE0 /* A   */.0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E8           MOV       A,R0
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   E9           MOV       A,R1
   \   000013   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000016   F5..         MOV       ?V4,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V5,A
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   75..00       MOV       ?V6,#0x0
   \   000022   75..00       MOV       ?V7,#0x0
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine275_0:
   \   000000   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine209:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   12....       LCALL     ?Subroutine219 & 0xFFFF
   \                     ??CrossCallReturnLabel_756:
   \   000003   F5..         MOV       ?V4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine219 & 0xFFFF
   \                     ??CrossCallReturnLabel_755:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine219:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine294_0
   \   000006                ; // Fall through to label ??Subroutine294_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine295_0
   \   000006                ; // Fall through to label ??Subroutine295_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine295_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine296_0
   \   000003                ; // Fall through to label ??Subroutine296_0
   3658          #endif // ZCL_READ
   3659          
   3660          #ifdef ZCL_WRITE
   3661          /*********************************************************************
   3662           * @fn      zclParseInWriteCmd
   3663           *
   3664           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3665           *          Response Commands
   3666           *
   3667           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3668           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3669           *
   3670           * @param   pCmd - pointer to incoming data to parse
   3671           *
   3672           * @return  pointer to the parsed command structure
   3673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3674          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   3675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   3676            zclWriteCmd_t *writeCmd;
   3677            uint8 *pBuf = pCmd->pData;
   \                     ??CrossCallReturnLabel_13:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine11 & 0xFFFF
   3678            uint16 attrDataLen;
   3679            uint8 *dataPtr;
   3680            uint8 numAttr = 0;
   3681            uint8 hdrLen;
   3682            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_3:
   \   000018   8014         SJMP      ??CrossCallReturnLabel_309
   3683          
   3684            // find out the number of attributes and the length of attribute data
   3685            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3686            {
   3687              uint8 dataType;
   3688          
   3689              numAttr++;
   \                     ??zclParseInWriteCmd_0:
   \   00001A   12....       LCALL     ?Subroutine137 & 0xFFFF
   3690              pBuf += 2; // move pass attribute id
   3691          
   3692              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_258:
   \   00001D   5002         JNC       ??zclParseInWriteCmd_1
   \   00001F   05..         INC       ?V5
   3693          
   3694              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInWriteCmd_1:
   \   000021                ; Setup parameters for call to function zclGetAttrDataLength
   \   000021   12....       LCALL     ?Subroutine148 & 0xFFFF
   3695              pBuf += attrDataLen; // move pass attribute data
   3696          
   3697              // add padding if needed
   3698              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_594:
   \   000024   5005         JNC       ??zclParseInWriteCmd_2
   3699              {
   3700                attrDataLen++;
   \   000026   0E           INC       R6
   \   000027   04           INC       A
   \   000028   7001         JNZ       ??zclParseInWriteCmd_2
   \   00002A   0F           INC       R7
   3701              }
   3702          
   3703              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   00002B   12....       LCALL     ?Subroutine166 & 0xFFFF
   3704            }
   \                     ??CrossCallReturnLabel_309:
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000036   40E2         JC        ??zclParseInWriteCmd_0
   3705          
   3706            // calculate the length of the response header
   3707            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   000038   12....       LCALL     ?Subroutine143 & 0xFFFF
   3708          
   3709            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \                     ??CrossCallReturnLabel_599:
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?Subroutine36 & 0xFFFF
   3710            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_51:
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000047   6067         JZ        ??zclParseInWriteCmd_3
   3711            {
   3712              uint8 i;
   3713              pBuf = pCmd->pData;
   \   000049   12....       LCALL     ?Subroutine60 & 0xFFFF
   3714              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   \                     ??CrossCallReturnLabel_110:
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine30 & 0xFFFF
   3715          
   3716              writeCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_38:
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine65 & 0xFFFF
   3717              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_119:
   \   00005E   8049         SJMP      ??zclParseInWriteCmd_4
   3718              {
   3719                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_5:
   \   000060   E5..         MOV       A,?V6
   \   000062   75F005       MOV       B,#0x5
   \   000065   A4           MUL       AB
   \   000066   F8           MOV       R0,A
   \   000067   A9F0         MOV       R1,B
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine10 & 0xFFFF
   3720          
   3721                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3722                pBuf += 2;
   3723                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_0:
   \   000071   5002         JNC       ??zclParseInWriteCmd_6
   \   000073   05..         INC       ?V5
   3724          
   3725                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??zclParseInWriteCmd_6:
   \   000075                ; Setup parameters for call to function zclGetAttrDataLength
   \   000075   12....       LCALL     ?Subroutine163 & 0xFFFF
   3726                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_591:
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007B   EA           MOV       A,R2
   \   00007C   FC           MOV       R4,A
   \   00007D   EB           MOV       A,R3
   \   00007E   FD           MOV       R5,A
   \   00007F   7405         MOV       A,#0x5
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   3727                statusRec->attrData = dataPtr;
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine14 & 0xFFFF
   3728          
   3729                pBuf += attrDataLen; // move pass attribute data
   3730          
   3731                // advance attribute data pointer
   3732                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_606:
   \   000092   5005         JNC       ??zclParseInWriteCmd_7
   3733                {
   3734                  attrDataLen++;
   \   000094   0E           INC       R6
   \   000095   04           INC       A
   \   000096   7001         JNZ       ??zclParseInWriteCmd_7
   \   000098   0F           INC       R7
   3735                }
   3736          
   3737                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   000099   7402         MOV       A,#0x2
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   12....       LCALL     ?Subroutine89 & 0xFFFF
   3738              }
   \                     ??CrossCallReturnLabel_177:
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   0000A7   05..         INC       ?V6
   \                     ??zclParseInWriteCmd_4:
   \   0000A9   E5..         MOV       A,?V6
   \   0000AB   C3           CLR       C
   \   0000AC   95..         SUBB      A,?V3
   \   0000AE   40B0         JC        ??zclParseInWriteCmd_5
   3739            }
   3740          
   3741            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_3:
   \   0000B0   02....       LJMP      ?Subroutine1 & 0xFFFF
   3742          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   FA           MOV       R2,A
   \   000001                REQUIRE ??Subroutine265_0
   \   000001                ; // Fall through to label ??Subroutine265_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   FA           MOV       R2,A
   \   000001                REQUIRE ??Subroutine266_0
   \   000001                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   75F005       MOV       B,#0x5
   \   000003                REQUIRE ??Subroutine267_0
   \   000003                ; // Fall through to label ??Subroutine267_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00000C                REQUIRE ??Subroutine269_0
   \   00000C                ; // Fall through to label ??Subroutine269_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   05..         INC       ?V3
   \   000002   85..82       MOV       DPL,?V4
   \   000005   85..83       MOV       DPH,?V5
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E5..         MOV       A,?V4
   \   00000E   2403         ADD       A,#0x3
   \   000010   F5..         MOV       ?V4,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   E8           MOV       A,R0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E9           MOV       A,R1
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000011   F8           MOV       R0,A
   \   000012   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000020   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000023   E9           MOV       A,R1
   \   000024   F0           MOVX      @DPTR,A
   \   000025   E5..         MOV       A,?V4
   \   000027   2403         ADD       A,#0x3
   \   000029   F5..         MOV       ?V4,A
   \   00002B   22           RET
   3743          
   3744          /*********************************************************************
   3745           * @fn      zclParseInWriteRspCmd
   3746           *
   3747           * @brief   Parse the "Profile" Write Response Commands
   3748           *
   3749           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3750           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3751           *
   3752           * @param   pCmd - pointer to incoming data to parse
   3753           *
   3754           * @return  pointer to the parsed command structure
   3755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3756          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   3757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3758            zclWriteRspCmd_t *writeRspCmd;
   3759            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   F5..         MOV       ?V6,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F5..         MOV       ?V7,A
   \   00000E   85..82       MOV       DPL,?V6
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   3760            uint8 i = 0;
   \                     ??CrossCallReturnLabel_577:
   \   000016   75..00       MOV       ?V2,#0x0
   3761          
   3762            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000019   12....       LCALL     ?Subroutine97 & 0xFFFF
   3763            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_195:
   \   00001C   606F         JZ        ??zclParseInWriteRspCmd_0
   3764            {
   3765              if ( pCmd->dataLen == 1 )
   \   00001E   85..82       MOV       DPL,?V0
   \   000021   85..83       MOV       DPH,?V1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6401         XRL       A,#0x1
   \   000027   7002         JNZ       ??zclParseInWriteRspCmd_1
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   00002B   7040         JNZ       ??zclParseInWriteRspCmd_2
   3766              {
   3767                // special case when all writes were successfull
   3768                writeRspCmd->attrList[i++].status = *pBuf;
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   3769              }
   \                     ??CrossCallReturnLabel_610:
   \   000034   F0           MOVX      @DPTR,A
   \   000035   75..01       MOV       ?V2,#0x1
   \   000038   804C         SJMP      ??zclParseInWriteRspCmd_3
   3770              else
   3771              {
   3772                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3773                {
   3774                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   00003A   E5..         MOV       A,?V2
   \   00003C   75F003       MOV       B,#0x3
   \   00003F   A4           MUL       AB
   \   000040   F8           MOV       R0,A
   \   000041   A9F0         MOV       R1,B
   \   000043   EA           MOV       A,R2
   \   000044   28           ADD       A,R0
   \   000045   F8           MOV       R0,A
   \   000046   EB           MOV       A,R3
   \   000047   39           ADDC      A,R1
   \   000048   F9           MOV       R1,A
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000050   12....       LCALL     ?Subroutine20 & 0xFFFF
   3775                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_20:
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F5..         MOV       ?V4,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FD           MOV       R5,A
   \   000059   E5..         MOV       A,?V4
   \   00005B   8882         MOV       DPL,R0
   \   00005D   8983         MOV       DPH,R1
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000064   05..         INC       ?V2
   3776                  pBuf += 2;
   \   000066   EE           MOV       A,R6
   \   000067   2402         ADD       A,#0x2
   \   000069   FE           MOV       R6,A
   \   00006A   5001         JNC       ??zclParseInWriteRspCmd_2
   \   00006C   0F           INC       R7
   3777                }
   \                     ??zclParseInWriteRspCmd_2:
   \   00006D   85..82       MOV       DPL,?V0
   \   000070   85..83       MOV       DPH,?V1
   \   000073   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   3778              }
   \                     ??CrossCallReturnLabel_683:
   \   000076   85..82       MOV       DPL,?V6
   \   000079   85..83       MOV       DPH,?V7
   \   00007C   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00007F   C3           CLR       C
   \   000080   EE           MOV       A,R6
   \   000081   98           SUBB      A,R0
   \   000082   EF           MOV       A,R7
   \   000083   99           SUBB      A,R1
   \   000084   40B4         JC        ??zclParseInWriteRspCmd_4
   3779          
   3780              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_3:
   \   000086   8A82         MOV       DPL,R2
   \   000088   8B83         MOV       DPH,R3
   \   00008A   E5..         MOV       A,?V2
   \   00008C   F0           MOVX      @DPTR,A
   3781            }
   3782          
   3783            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   00008D   02....       LJMP      ??Subroutine246_0 & 0xFFFF
   3784          }
   3785          #endif // ZCL_WRITE
   3786          
   3787          #ifdef ZCL_REPORTING_DEVICE
   3788          /*********************************************************************
   3789           * @fn      zclParseInConfigReportCmd
   3790           *
   3791           * @brief   Parse the "Profile" Configure Reporting Command
   3792           *
   3793           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3794           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3795           *
   3796           * @param   pCmd - pointer to incoming data to parse
   3797           *
   3798           * @return  pointer to the parsed command structure
   3799           */
   3800          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   3801          {
   3802            zclCfgReportCmd_t *cfgReportCmd;
   3803            uint8 *pBuf = pCmd->pData;
   3804            uint8 *dataPtr;
   3805            uint8 numAttr = 0;
   3806            uint8 dataType;
   3807            uint8 hdrLen;
   3808            uint16 dataLen = 0;
   3809            uint8 reportChangeLen; // length of Reportable Change field
   3810          
   3811            // Calculate the length of the Request command
   3812            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3813            {
   3814              uint8 direction;
   3815          
   3816              numAttr++;
   3817              direction = *pBuf++;
   3818              pBuf += 2; // move pass the attribute ID
   3819          
   3820              // Is there a Reportable Change field?
   3821              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3822              {
   3823                dataType = *pBuf++;
   3824                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3825          
   3826                // For attributes of 'discrete' data types this field is omitted
   3827                if ( zclAnalogDataType( dataType ) )
   3828                {
   3829                  reportChangeLen = zclGetDataTypeLength( dataType );
   3830                  pBuf += reportChangeLen;
   3831          
   3832                  // add padding if needed
   3833                  if ( PADDING_NEEDED( reportChangeLen ) )
   3834                  {
   3835                    reportChangeLen++;
   3836                  }
   3837          
   3838                  dataLen += reportChangeLen;
   3839                }
   3840                else
   3841                {
   3842                  pBuf++; // move past reportable change field
   3843                }
   3844              }
   3845              else
   3846              {
   3847                pBuf += 2; // move pass the Timeout Period
   3848              }
   3849            } // while loop
   3850          
   3851            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   3852          
   3853            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3854            if ( cfgReportCmd != NULL )
   3855            {
   3856              uint8 i;
   3857              pBuf = pCmd->pData;
   3858              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   3859          
   3860              cfgReportCmd->numAttr = numAttr;
   3861              for ( i = 0; i < numAttr; i++ )
   3862              {
   3863                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3864          
   3865                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3866          
   3867                reportRec->direction = *pBuf++;
   3868                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3869                pBuf += 2;
   3870                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3871                {
   3872                  // Attribute to be reported
   3873                  reportRec->dataType = *pBuf++;
   3874                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3875                  pBuf += 2;
   3876                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3877                  pBuf += 2;
   3878          
   3879                  // For attributes of 'discrete' data types this field is omitted
   3880                  if ( zclAnalogDataType( reportRec->dataType ) )
   3881                  {
   3882                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3883                    reportRec->reportableChange = dataPtr;
   3884          
   3885                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3886                    pBuf += reportChangeLen;
   3887          
   3888                    // advance attribute data pointer
   3889                    if ( PADDING_NEEDED( reportChangeLen ) )
   3890                    {
   3891                      reportChangeLen++;
   3892                    }
   3893          
   3894                    dataPtr += reportChangeLen;
   3895                  }
   3896                }
   3897                else
   3898                {
   3899                  // Attribute reports to be received
   3900                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   3901                  pBuf += 2;
   3902                }
   3903              } // while loop
   3904            }
   3905          
   3906            return ( (void *)cfgReportCmd );
   3907          }
   3908          #endif
   3909          
   3910          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3911          /*********************************************************************
   3912           * @fn      zclParseInConfigReportRspCmd
   3913           *
   3914           * @brief   Parse the "Profile" Configure Reporting Response Command
   3915           *
   3916           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3917           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3918           *
   3919           * @param   pCmd - pointer to incoming data to parse
   3920           *
   3921           * @return  pointer to the parsed command structure
   3922           */
   3923          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   3924          {
   3925            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3926            uint8 *pBuf = pCmd->pData;
   3927            uint8 numAttr;
   3928          
   3929            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   3930          
   3931            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3932                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   3933            if ( cfgReportRspCmd != NULL )
   3934            {
   3935              uint8 i;
   3936              cfgReportRspCmd->numAttr = numAttr;
   3937              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   3938              {
   3939                cfgReportRspCmd->attrList[i].status = *pBuf++;
   3940                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   3941                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3942                pBuf += 2;
   3943              }
   3944            }
   3945          
   3946            return ( (void *)cfgReportRspCmd );
   3947          }
   3948          #endif
   3949          
   3950          #ifdef ZCL_REPORTING_DEVICE
   3951          /*********************************************************************
   3952           * @fn      zclParseInReadReportCfgCmd
   3953           *
   3954           * @brief   Parse the "Profile" Read Reporting Configuration Command
   3955           *
   3956           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3957           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3958           *
   3959           * @param   pCmd - pointer to incoming data to parse
   3960           *
   3961           * @return  pointer to the parsed command structure
   3962           */
   3963          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   3964          {
   3965            zclReadReportCfgCmd_t *readReportCfgCmd;
   3966            uint8 *pBuf = pCmd->pData;
   3967            uint8 numAttr;
   3968          
   3969            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   3970          
   3971            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   3972                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   3973            if ( readReportCfgCmd != NULL )
   3974            {
   3975              uint8 i;
   3976              readReportCfgCmd->numAttr = numAttr;
   3977              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   3978              {
   3979                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   3980                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3981                pBuf += 2;
   3982              }
   3983            }
   3984          
   3985            return ( (void *)readReportCfgCmd );
   3986          }
   3987          #endif
   3988          
   3989          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3990          /*********************************************************************
   3991           * @fn      zclParseInReadReportCfgRspCmd
   3992           *
   3993           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   3994           *
   3995           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3996           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3997           *
   3998           * @param   pCmd - pointer to incoming data to parse
   3999           *
   4000           * @return  pointer to the parsed command structure
   4001           */
   4002          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   4003          {
   4004            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   4005            uint8 reportChangeLen;
   4006            uint8 *pBuf = pCmd->pData;
   4007            uint8 *dataPtr;
   4008            uint8 numAttr = 0;
   4009            uint8 hdrLen;
   4010            uint16 dataLen = 0;
   4011          
   4012            // Calculate the length of the response command
   4013            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4014            {
   4015              uint8 status;
   4016              uint8 direction;
   4017          
   4018              numAttr++;
   4019              status = *pBuf++;
   4020              direction = *pBuf++;
   4021              pBuf += 2; // move pass the attribute ID
   4022          
   4023              if ( status == ZCL_STATUS_SUCCESS )
   4024              {
   4025                if ( direction == ZCL_SEND_ATTR_REPORTS )
   4026                {
   4027                  uint8 dataType = *pBuf++;
   4028                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   4029          
   4030                  // For attributes of 'discrete' data types this field is omitted
   4031                  if ( zclAnalogDataType( dataType ) )
   4032                  {
   4033                    reportChangeLen = zclGetDataTypeLength( dataType );
   4034                    pBuf += reportChangeLen;
   4035          
   4036                    // add padding if needed
   4037                    if ( PADDING_NEEDED( reportChangeLen ) )
   4038                    {
   4039                      reportChangeLen++;
   4040                    }
   4041          
   4042                    dataLen += reportChangeLen;
   4043                  }
   4044                }
   4045                else
   4046                {
   4047                  pBuf += 2; // move pass the Timeout field
   4048                }
   4049              }
   4050            } // while loop
   4051          
   4052            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   4053          
   4054            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4055            if ( readReportCfgRspCmd != NULL )
   4056            {
   4057              uint8 i;
   4058              pBuf = pCmd->pData;
   4059              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   4060          
   4061              readReportCfgRspCmd->numAttr = numAttr;
   4062              for ( i = 0; i < numAttr; i++ )
   4063              {
   4064                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   4065          
   4066                reportRspRec->status = *pBuf++;
   4067                reportRspRec->direction = *pBuf++;
   4068                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4069                pBuf += 2;
   4070          
   4071                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   4072                {
   4073                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   4074                  {
   4075                    reportRspRec->dataType = *pBuf++;
   4076                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4077                    pBuf += 2;
   4078                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4079                    pBuf += 2;
   4080          
   4081                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   4082                    {
   4083                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   4084                      reportRspRec->reportableChange = dataPtr;
   4085          
   4086                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   4087                      pBuf += reportChangeLen;
   4088          
   4089                      // advance attribute data pointer
   4090                      if ( PADDING_NEEDED( reportChangeLen ) )
   4091                      {
   4092                        reportChangeLen++;
   4093                      }
   4094          
   4095                      dataPtr += reportChangeLen;
   4096                    }
   4097                  }
   4098                  else
   4099                  {
   4100                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   4101                    pBuf += 2;
   4102                  }
   4103                }
   4104              }
   4105            }
   4106          
   4107            return ( (void *)readReportCfgRspCmd );
   4108          }
   4109          #endif
   4110          
   4111          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   4112          /*********************************************************************
   4113           * @fn      zclParseInReportCmd
   4114           *
   4115           * @brief   Parse the "Profile" Report Command
   4116           *
   4117           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4118           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4119           *
   4120           * @param   pCmd - pointer to incoming data to parse
   4121           *
   4122           * @return  pointer to the parsed command structure
   4123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4124          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReportCmd:
   4125          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   4126            zclReportCmd_t *reportCmd;
   4127            uint8 *pBuf = pCmd->pData;
   \                     ??CrossCallReturnLabel_14:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine11 & 0xFFFF
   4128            uint16 attrDataLen;
   4129            uint8 *dataPtr;
   4130            uint8 numAttr = 0;
   4131            uint8 hdrLen;
   4132            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_4:
   \   000018   8014         SJMP      ??CrossCallReturnLabel_310
   4133          
   4134            // find out the number of attributes and the length of attribute data
   4135            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4136            {
   4137              uint8 dataType;
   4138          
   4139              numAttr++;
   \                     ??zclParseInReportCmd_0:
   \   00001A   12....       LCALL     ?Subroutine137 & 0xFFFF
   4140              pBuf += 2; // move pass attribute id
   4141          
   4142              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_259:
   \   00001D   5002         JNC       ??zclParseInReportCmd_1
   \   00001F   05..         INC       ?V5
   4143          
   4144              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInReportCmd_1:
   \   000021                ; Setup parameters for call to function zclGetAttrDataLength
   \   000021   12....       LCALL     ?Subroutine148 & 0xFFFF
   4145              pBuf += attrDataLen; // move pass attribute data
   4146          
   4147              // add padding if needed
   4148              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_595:
   \   000024   5005         JNC       ??zclParseInReportCmd_2
   4149              {
   4150                attrDataLen++;
   \   000026   0E           INC       R6
   \   000027   04           INC       A
   \   000028   7001         JNZ       ??zclParseInReportCmd_2
   \   00002A   0F           INC       R7
   4151              }
   4152          
   4153              dataLen += attrDataLen;
   \                     ??zclParseInReportCmd_2:
   \   00002B   12....       LCALL     ?Subroutine166 & 0xFFFF
   4154            }
   \                     ??CrossCallReturnLabel_310:
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000036   40E2         JC        ??zclParseInReportCmd_0
   4155          
   4156            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   \   000038   12....       LCALL     ?Subroutine143 & 0xFFFF
   4157          
   4158            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \                     ??CrossCallReturnLabel_600:
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?Subroutine36 & 0xFFFF
   4159            if (reportCmd != NULL )
   \                     ??CrossCallReturnLabel_52:
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000047   6067         JZ        ??zclParseInReportCmd_3
   4160            {
   4161              uint8 i;
   4162              pBuf = pCmd->pData;
   \   000049   12....       LCALL     ?Subroutine60 & 0xFFFF
   4163              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   \                     ??CrossCallReturnLabel_111:
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine30 & 0xFFFF
   4164          
   4165              reportCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_39:
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine65 & 0xFFFF
   4166              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_120:
   \   00005E   8049         SJMP      ??zclParseInReportCmd_4
   4167              {
   4168                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zclParseInReportCmd_5:
   \   000060   E5..         MOV       A,?V6
   \   000062   75F005       MOV       B,#0x5
   \   000065   A4           MUL       AB
   \   000066   F8           MOV       R0,A
   \   000067   A9F0         MOV       R1,B
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine10 & 0xFFFF
   4169          
   4170                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4171                pBuf += 2;
   4172                reportRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_1:
   \   000071   5002         JNC       ??zclParseInReportCmd_6
   \   000073   05..         INC       ?V5
   4173          
   4174                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   \                     ??zclParseInReportCmd_6:
   \   000075                ; Setup parameters for call to function zclGetAttrDataLength
   \   000075   12....       LCALL     ?Subroutine163 & 0xFFFF
   4175                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   \                     ??CrossCallReturnLabel_592:
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007B   EA           MOV       A,R2
   \   00007C   FC           MOV       R4,A
   \   00007D   EB           MOV       A,R3
   \   00007E   FD           MOV       R5,A
   \   00007F   7405         MOV       A,#0x5
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   4176                reportRec->attrData = dataPtr;
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine14 & 0xFFFF
   4177          
   4178                pBuf += attrDataLen; // move pass attribute data
   4179          
   4180                // advance attribute data pointer
   4181                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_607:
   \   000092   5005         JNC       ??zclParseInReportCmd_7
   4182                {
   4183                  attrDataLen++;
   \   000094   0E           INC       R6
   \   000095   04           INC       A
   \   000096   7001         JNZ       ??zclParseInReportCmd_7
   \   000098   0F           INC       R7
   4184                }
   4185          
   4186                dataPtr += attrDataLen;
   \                     ??zclParseInReportCmd_7:
   \   000099   7402         MOV       A,#0x2
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   12....       LCALL     ?Subroutine89 & 0xFFFF
   4187              }
   \                     ??CrossCallReturnLabel_178:
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   0000A7   05..         INC       ?V6
   \                     ??zclParseInReportCmd_4:
   \   0000A9   E5..         MOV       A,?V6
   \   0000AB   C3           CLR       C
   \   0000AC   95..         SUBB      A,?V3
   \   0000AE   40B0         JC        ??zclParseInReportCmd_5
   4188            }
   4189          
   4190            return ( (void *)reportCmd );
   \                     ??zclParseInReportCmd_3:
   \   0000B0   02....       LJMP      ?Subroutine1 & 0xFFFF
   4191          }
   4192          #endif
   4193          
   4194          /*********************************************************************
   4195           * @fn      zclParseInDefaultRspCmd
   4196           *
   4197           * @brief   Parse the "Profile" Default Response Command
   4198           *
   4199           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4200           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4201           *
   4202           * @param   pCmd - pointer to incoming data to parse
   4203           *
   4204           * @return  pointer to the parsed command structure
   4205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4206          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4208            zclDefaultRspCmd_t *defaultRspCmd;
   4209            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine90 & 0xFFFF
   4210          
   4211            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   4212            if ( defaultRspCmd != NULL )
   \                     ??CrossCallReturnLabel_179:
   \   000008   6003         JZ        ??CrossCallReturnLabel_31
   4213            {
   4214              defaultRspCmd->commandID = *pBuf++;
   \   00000A   12....       LCALL     ?Subroutine27 & 0xFFFF
   4215              defaultRspCmd->statusCode = *pBuf;
   4216            }
   4217          
   4218            return ( (void *)defaultRspCmd );
   \                     ??CrossCallReturnLabel_31:
   \   00000D   02....       LJMP      ??Subroutine251_0 & 0xFFFF
   4219          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C   7A02         MOV       R2,#0x2
   \   00000E   12....       LCALL     ?Subroutine214 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine214:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine274_0
   \   000002                ; // Fall through to label ??Subroutine274_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine274_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000003   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   000006   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET
   4220          
   4221          #ifdef ZCL_DISCOVER
   4222          /*********************************************************************
   4223           * @fn      zclParseInDiscAttrsCmd
   4224           *
   4225           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4226           *
   4227           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4228           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4229           *
   4230           * @param   pCmd - pointer to incoming data to parse
   4231           *
   4232           * @return  pointer to the parsed command structure
   4233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4234          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsCmd:
   4235          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4236            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4237            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine101 & 0xFFFF
   4238          
   4239            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   \                     ??CrossCallReturnLabel_580:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A03         MOV       R2,#0x3
   \   00000A   12....       LCALL     ?Subroutine214 & 0xFFFF
   4240            if ( pDiscoverCmd != NULL )
   \                     ??CrossCallReturnLabel_642:
   \   00000D   601A         JZ        ??zclParseInDiscAttrsCmd_0
   4241            {
   4242              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00000F   8E82         MOV       DPL,R6
   \   000011   8F83         MOV       DPH,R7
   \   000013   12....       LCALL     ?Subroutine141 & 0xFFFF
   4243              pBuf += 2;
   4244              pDiscoverCmd->maxAttrIDs = *pBuf;
   4245            }
   \                     ??CrossCallReturnLabel_272:
   \   000016   F9           MOV       R1,A
   \   000017   EC           MOV       A,R4
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   E9           MOV       A,R1
   \   00001F   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
   4246          
   4247            return ( (void *)pDiscoverCmd );
   \                     ??zclParseInDiscAttrsCmd_0:
   \   000029   02....       LJMP      ??Subroutine251_0 & 0xFFFF
   4248          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine273_0:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   4249          
   4250          /*********************************************************************
   4251           * @fn      zclParseInDiscAttrsRspCmd
   4252           *
   4253           * @brief   Parse the "Profile" Discovery Response Commands
   4254           *
   4255           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4256           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4257           *
   4258           * @param   pCmd - pointer to incoming data to parse
   4259           *
   4260           * @return  pointer to the parsed command structure
   4261           */
   4262          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4263          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsRspCmd:
   4264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4265            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4266            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine100 & 0xFFFF
   4267            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   \                     ??CrossCallReturnLabel_198:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   34FF         ADDC      A,#-0x1
   \   00000D   F9           MOV       R1,A
   \   00000E   7A03         MOV       R2,#0x3
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ?US_DIV_MOD
   \   000015   E8           MOV       A,R0
   \   000016   F5..         MOV       ?V0,A
   4268          
   4269            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4270                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL     ?Subroutine146 & 0xFFFF
   4271          
   4272            if ( pDiscoverRspCmd != NULL )
   \                     ??CrossCallReturnLabel_279:
   \   00001B   EA           MOV       A,R2
   \   00001C   4B           ORL       A,R3
   \   00001D   6036         JZ        ??zclParseInDiscAttrsRspCmd_0
   4273            {
   4274              uint8 i;
   4275          
   4276              pDiscoverRspCmd->discComplete = *pBuf++;
   \   00001F   12....       LCALL     ?Subroutine19 & 0xFFFF
   4277              pDiscoverRspCmd->numAttr = numAttr;
   4278          
   4279              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_17:
   \   000022   7C00         MOV       R4,#0x0
   \   000024   8029         SJMP      ??zclParseInDiscAttrsRspCmd_1
   4280              {
   4281                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsRspCmd_2:
   \   000026   EC           MOV       A,R4
   \   000027   75F003       MOV       B,#0x3
   \   00002A   A4           MUL       AB
   \   00002B   F8           MOV       R0,A
   \   00002C   A9F0         MOV       R1,B
   \   00002E   EA           MOV       A,R2
   \   00002F   28           ADD       A,R0
   \   000030   F8           MOV       R0,A
   \   000031   EB           MOV       A,R3
   \   000032   39           ADDC      A,R1
   \   000033   F9           MOV       R1,A
   \   000034   12....       LCALL     ?Subroutine135 & 0xFFFF
   4282                pBuf += 2;
   4283                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   4284              }
   \                     ??CrossCallReturnLabel_256:
   \   000037   8882         MOV       DPL,R0
   \   000039   8983         MOV       DPH,R1
   \   00003B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   F0           MOVX      @DPTR,A
   \   000047   EE           MOV       A,R6
   \   000048   2403         ADD       A,#0x3
   \   00004A   FE           MOV       R6,A
   \   00004B   5001         JNC       ??zclParseInDiscAttrsRspCmd_3
   \   00004D   0F           INC       R7
   \                     ??zclParseInDiscAttrsRspCmd_3:
   \   00004E   0C           INC       R4
   \                     ??zclParseInDiscAttrsRspCmd_1:
   \   00004F   EC           MOV       A,R4
   \   000050   C3           CLR       C
   \   000051   95..         SUBB      A,?V0
   \   000053   40D1         JC        ??zclParseInDiscAttrsRspCmd_2
   4285            }
   4286          
   4287            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsRspCmd_0:
   \   000055   02....       LJMP      ??Subroutine256_0 & 0xFFFF
   4288          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V3
   \   000006                REQUIRE ??Subroutine273_0
   \   000006                ; // Fall through to label ??Subroutine273_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V4,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B   E5..         MOV       A,?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   24FF         ADD       A,#-0x1
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000003   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   E5..         MOV       A,?V0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   75F003       MOV       B,#0x3
   \   000003   A4           MUL       AB
   \   000004   A9F0         MOV       R1,B
   \   000006   2402         ADD       A,#0x2
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   39           ADDC      A,R1
   \   00000B   FB           MOV       R3,A
   \   00000C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000F   22           RET
   4289          
   4290          /*********************************************************************
   4291           * @fn      zclParseInDiscCmdsCmd
   4292           *
   4293           * @brief   Parse the "Profile" Discovery Commands
   4294           *
   4295           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4296           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4297           *
   4298           * @param   pCmd - pointer to incoming data to parse
   4299           *
   4300           * @return  pointer to the parsed command structure
   4301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4302          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsCmd:
   4303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4304            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4305            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine90 & 0xFFFF
   4306          
   4307            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   4308            if ( pDiscoverCmd != NULL )
   \                     ??CrossCallReturnLabel_180:
   \   000008   6003         JZ        ??CrossCallReturnLabel_32
   4309            {
   4310              pDiscoverCmd->startCmdID = *pBuf++;
   \   00000A   12....       LCALL     ?Subroutine27 & 0xFFFF
   4311              pDiscoverCmd->maxCmdID = *pBuf++;
   4312            }
   4313          
   4314            return ( (void *)pDiscoverCmd );
   \                     ??CrossCallReturnLabel_32:
   \   00000D   02....       LJMP      ??Subroutine251_0 & 0xFFFF
   4315          }
   4316          
   4317          /*********************************************************************
   4318           * @fn      zclParseInDiscCmdsRspCmd
   4319           *
   4320           * @brief   Parse the Discover Commands Response Command
   4321           *
   4322           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4323           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4324           *
   4325           * @param   pCmd - pointer to incoming data to parse
   4326           *
   4327           * @return  pointer to the parsed command structure
   4328           */
   4329          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4330          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsRspCmd:
   4331          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4332            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4333            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine101 & 0xFFFF
   4334            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   \                     ??CrossCallReturnLabel_581:
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   14           DEC       A
   \   00000F   F5..         MOV       ?V0,A
   4335          
   4336              // allocate memory for size of structure plus variable array
   4337            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4338                              ( numCmds * sizeof(uint8) ) );
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   2405         ADD       A,#0x5
   \   000013   FA           MOV       R2,A
   \   000014   E4           CLR       A
   \   000015   3400         ADDC      A,#0x0
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     ??Subroutine274_0 & 0xFFFF
   4339            if ( pDiscoverRspCmd != NULL )
   \                     ??CrossCallReturnLabel_644:
   \   00001B   603A         JZ        ??zclParseInDiscCmdsRspCmd_0
   4340            {
   4341              uint8 i;
   4342              pDiscoverRspCmd->discComplete = *pBuf++;
   \   00001D   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000020   12....       LCALL     ?Subroutine20 & 0xFFFF
   4343              pDiscoverRspCmd->numCmd = numCmds;
   \                     ??CrossCallReturnLabel_21:
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E5..         MOV       A,?V0
   \   00002B   F0           MOVX      @DPTR,A
   4344          
   4345              for ( i = 0; i < numCmds; i++ )
   \   00002C   7800         MOV       R0,#0x0
   \   00002E   8021         SJMP      ??zclParseInDiscCmdsRspCmd_1
   4346              {
   4347                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   \                     ??zclParseInDiscCmdsRspCmd_2:
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C0E0         PUSH      A
   \   000037   E8           MOV       A,R0
   \   000038   FC           MOV       R4,A
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   2C           ADD       A,R4
   \   000042   F9           MOV       R1,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   3400         ADDC      A,#0x0
   \   000047   8982         MOV       DPL,R1
   \   000049   F583         MOV       DPH,A
   \   00004B   D0E0         POP       A
   \   00004D   12....       LCALL     ?Subroutine20 & 0xFFFF
   4348              }
   \                     ??CrossCallReturnLabel_22:
   \   000050   08           INC       R0
   \                     ??zclParseInDiscCmdsRspCmd_1:
   \   000051   E8           MOV       A,R0
   \   000052   C3           CLR       C
   \   000053   95..         SUBB      A,?V0
   \   000055   40D9         JC        ??zclParseInDiscCmdsRspCmd_2
   4349            }
   4350          
   4351            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscCmdsRspCmd_0:
   \   000057   02....       LJMP      ?Subroutine4 & 0xFFFF
   4352          }
   4353          
   4354          /*********************************************************************
   4355           * @fn      zclParseInDiscAttrsExtRspCmd
   4356           *
   4357           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4358           *
   4359           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4360           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4361           *
   4362           * @param   pCmd - pointer to incoming data to parse
   4363           *
   4364           * @return  pointer to the parsed command structure
   4365           */
   4366          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4367          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsExtRspCmd:
   4368          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4369            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4370            uint8 i;
   4371            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine100 & 0xFFFF
   4372            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   \                     ??CrossCallReturnLabel_199:
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   34FF         ADDC      A,#-0x1
   \   00000E   F5..         MOV       ?V1,A
   \   000010   7402         MOV       A,#0x2
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?US_SHR
   \   000017   E5..         MOV       A,?V0
   \   000019   F5..         MOV       ?V0,A
   4373          
   4374            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4375                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   E5..         MOV       A,?V2
   \   000029   2402         ADD       A,#0x2
   \   00002B   FA           MOV       R2,A
   \   00002C   E4           CLR       A
   \   00002D   35..         ADDC      A,?V3
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     ??Subroutine274_0 & 0xFFFF
   4376          
   4377            if ( pDiscoverRspCmd != NULL )
   \                     ??CrossCallReturnLabel_645:
   \   000033   6048         JZ        ??zclParseInDiscAttrsExtRspCmd_0
   4378            {
   4379              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000035   12....       LCALL     ?Subroutine19 & 0xFFFF
   4380              pDiscoverRspCmd->numAttr = numAttrs;
   4381          
   4382              for ( i = 0; i < numAttrs; i++ )
   \                     ??CrossCallReturnLabel_18:
   \   000038   7900         MOV       R1,#0x0
   \   00003A   803B         SJMP      ??zclParseInDiscAttrsExtRspCmd_1
   4383              {
   4384                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsExtRspCmd_2:
   \   00003C   E9           MOV       A,R1
   \   00003D   F5..         MOV       ?V2,A
   \   00003F   75..00       MOV       ?V3,#0x0
   \   000042   7402         MOV       A,#0x2
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?S_SHL
   \   000049   EA           MOV       A,R2
   \   00004A   25..         ADD       A,?V2
   \   00004C   FC           MOV       R4,A
   \   00004D   EB           MOV       A,R3
   \   00004E   35..         ADDC      A,?V3
   \   000050   FD           MOV       R5,A
   \   000051   12....       LCALL     ?Subroutine135 & 0xFFFF
   4385                pBuf += 2;
   4386                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   4387                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   4388              }
   \                     ??CrossCallReturnLabel_257:
   \   000054   8C82         MOV       DPL,R4
   \   000056   8D83         MOV       DPH,R5
   \   000058   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   00005B   8C82         MOV       DPL,R4
   \   00005D   8D83         MOV       DPH,R5
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000066   12....       LCALL     ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   EE           MOV       A,R6
   \   000070   2404         ADD       A,#0x4
   \   000072   FE           MOV       R6,A
   \   000073   5001         JNC       ??zclParseInDiscAttrsExtRspCmd_3
   \   000075   0F           INC       R7
   \                     ??zclParseInDiscAttrsExtRspCmd_3:
   \   000076   09           INC       R1
   \                     ??zclParseInDiscAttrsExtRspCmd_1:
   \   000077   E9           MOV       A,R1
   \   000078   C3           CLR       C
   \   000079   95..         SUBB      A,?V0
   \   00007B   40BF         JC        ??zclParseInDiscAttrsExtRspCmd_2
   4389            }
   4390          
   4391            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsExtRspCmd_0:
   \   00007D   02....       LJMP      ??Subroutine256_0 & 0xFFFF
   4392          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
   4393          #endif // ZCL_DISCOVER
   4394          
   4395          #ifdef ZCL_READ
   4396          /*********************************************************************
   4397           * @fn      zclProcessInReadCmd
   4398           *
   4399           * @brief   Process the "Profile" Read Command
   4400           *
   4401           * @param   pInMsg - incoming message to process
   4402           *
   4403           * @return  TRUE if command processed. FALSE, otherwise.
   4404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine271_0
   \   000002                ; // Fall through to label ??Subroutine271_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4405          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   4406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine127 & 0xFFFF
   4407            zclReadCmd_t *readCmd;
   4408            zclReadRspCmd_t *readRspCmd;
   4409            zclAttrRec_t attrRec;
   4410            uint16 len;
   4411            uint8 i;
   4412            uint8 attrFound;
   4413          
   4414            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_679:
   \   00000D   7404         MOV       A,#0x4
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine30 & 0xFFFF
   4415          
   4416            // calculate the length of the response status record
   4417            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4418          
   4419            readRspCmd = zcl_mem_alloc( len );
   \                     ??CrossCallReturnLabel_40:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ??Subroutine285_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_702:
   \   00001B   75F006       MOV       B,#0x6
   \   00001E   A4           MUL       AB
   \   00001F   A9F0         MOV       R1,B
   \   000021   2401         ADD       A,#0x1
   \   000023   FA           MOV       R2,A
   \   000024   E4           CLR       A
   \   000025   39           ADDC      A,R1
   \   000026   12....       LCALL     ?Subroutine153 & 0xFFFF
   4420            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_390:
   \   000029   7005         JNZ       ??zclProcessInReadCmd_0
   4421            {
   4422              return FALSE; // EMBEDDED RETURN
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   02....       LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
   4423            }
   4424          
   4425            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   000030   7404         MOV       A,#0x4
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ??Subroutine285_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_703:
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   F0           MOVX      @DPTR,A
   4426            for ( i = 0; i < readCmd->numAttr; i++ )
   \   00003D   75..00       MOV       ?V0,#0x0
   \   000040   800D         SJMP      ??zclProcessInReadCmd_2
   4427            {
   4428              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4429          
   4430              statusRec->attrID = readCmd->attrID[i];
   4431              
   4432              attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
   4433              
   4434              //Validate the attribute is found and the access control
   4435              if ( ( attrFound == TRUE ) && 
   4436                   (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
   4437                      (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
   4438              {
   4439                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4440                {
   4441                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4442                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4443                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4444                  {
   4445                    statusRec->data = attrRec.attr.dataPtr;
   4446                    statusRec->dataType = attrRec.attr.dataType;
   4447                  }
   4448                }
   4449                else
   4450                {
   4451                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4452                }
   4453              }
   4454              else
   4455              {
   4456                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine295_0 & 0xFFFF
   4457              }
   \                     ??CrossCallReturnLabel_763:
   \   00004A   7486         MOV       A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   00004C   F0           MOVX      @DPTR,A
   \                     ??zclProcessInReadCmd_5:
   \   00004D   05..         INC       ?V0
   \                     ??zclProcessInReadCmd_2:
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ??Subroutine295_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_764:
   \   000057   12....       LCALL     ??Subroutine297_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_774:
   \   00005A   4003         JC        $+5
   \   00005C   02....       LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
   \   00005F   A8..         MOV       R0,?V0
   \   000061   E8           MOV       A,R0
   \   000062   75F006       MOV       B,#0x6
   \   000065   A4           MUL       AB
   \   000066   FA           MOV       R2,A
   \   000067   ABF0         MOV       R3,B
   \   000069   E5..         MOV       A,?V6
   \   00006B   2A           ADD       A,R2
   \   00006C   F582         MOV       DPL,A
   \   00006E   E5..         MOV       A,?V7
   \   000070   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000073   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000076   E8           MOV       A,R0
   \   000077   28           ADD       A,R0
   \   000078   F8           MOV       R0,A
   \   000079   E4           CLR       A
   \   00007A   33           RLC       A
   \   00007B   F9           MOV       R1,A
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000084   FC           MOV       R4,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   FD           MOV       R5,A
   \   000088   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_770:
   \   00008B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   00008E   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000091   7402         MOV       A,#0x2
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E8           MOV       A,R0
   \   000097   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_783:
   \   00009A   F5..         MOV       ?V2,A
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   F5..         MOV       ?V3,A
   \   0000A0                ; Setup parameters for call to function zclFindAttrRec
   \   0000A0   7406         MOV       A,#0x6
   \   0000A2   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A5   88..         MOV       ?V4,R0
   \   0000A7   89..         MOV       ?V5,R1
   \   0000A9   78..         MOV       R0,#?V4
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   8A82         MOV       DPL,R2
   \   0000B0   8B83         MOV       DPH,R3
   \   0000B2   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B8   E9           MOV       A,R1
   \   0000B9   6401         XRL       A,#0x1
   \   0000BB   7085         JNZ       ??zclProcessInReadCmd_3
   \   0000BD   740B         MOV       A,#0xb
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000C5   401E         JC        ??zclProcessInReadCmd_7
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   12....       LCALL     ?Subroutine226 & 0xFFFF
   \                     ??CrossCallReturnLabel_726:
   \   0000D0   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000D2   92F0         MOV       B.0,C
   \   0000D4   740B         MOV       A,#0xb
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000DC   20F001       JB        B.0,??zclProcessInReadCmd_8
   \   0000DF   B3           CPL       C
   \                     ??zclProcessInReadCmd_8:
   \   0000E0   4003         JC        $+5
   \   0000E2   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   0000E5   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E7   5073         JNC       ??zclProcessInReadCmd_9
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_684:
   \   0000F0   E8           MOV       A,R0
   \   0000F1   2406         ADD       A,#0x6
   \   0000F3   F5..         MOV       ?V4,A
   \   0000F5   E4           CLR       A
   \   0000F6   39           ADDC      A,R1
   \   0000F7   F5..         MOV       ?V5,A
   \   0000F9   740B         MOV       A,#0xb
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   A2E4         MOV       C,0xE0 /* A   */.4
   \   000101   5019         JNC       ??zclProcessInReadCmd_10
   \   000103                ; Setup parameters for call to function zclGetAuthorizeCB
   \   000103   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000106   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000109   6011         JZ        ??zclProcessInReadCmd_10
   \   00010B                ; Setup parameters for indirect call
   \   00010B   7901         MOV       R1,#0x1
   \   00010D   7406         MOV       A,#0x6
   \   00010F   12....       LCALL     ?XSTACK_DISP102_8
   \   000112   AA..         MOV       R2,?V4
   \   000114   AB..         MOV       R3,?V5
   \   000116   12....       LCALL     ?CALL_IND
   \   000119   E9           MOV       A,R1
   \   00011A   8002         SJMP      ??zclProcessInReadCmd_11
   \                     ??zclProcessInReadCmd_10:
   \   00011C   7400         MOV       A,#0x0
   4458            }
   \                     ??zclProcessInReadCmd_11:
   \   00011E   C0E0         PUSH      A
   \   000120   7402         MOV       A,#0x2
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   12....       LCALL     ??Subroutine295_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_765:
   \   000128   D0E0         POP       A
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   7402         MOV       A,#0x2
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   12....       LCALL     ??Subroutine285_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_704:
   \   000133   6003         JZ        $+5
   \   000135   02....       LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
   \   000138   740C         MOV       A,#0xc
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000140   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000143   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000146   740A         MOV       A,#0xa
   \   000148   12....       LCALL     ?XSTACK_DISP0_8
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   C0E0         PUSH      A
   \   00014E   85..82       MOV       DPL,?XSP + 0
   \   000151   85..83       MOV       DPH,?XSP + 1
   \   000154   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000157   D0E0         POP       A
   \   000159   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_9:
   \   00015C   7402         MOV       A,#0x2
   \   00015E   12....       LCALL     ?XSTACK_DISP0_8
   \   000161   12....       LCALL     ??Subroutine295_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_766:
   \   000164   748F         MOV       A,#-0x71
   \   000166   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   4459          
   4460            // Build and send Read Response command
   4461            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4462                             readRspCmd, !pInMsg->hdr.fc.direction,
   4463                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   000169   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   00016C                ; Setup parameters for call to function zcl_SendReadRsp
   \   00016C   8E82         MOV       DPL,R6
   \   00016E   8F83         MOV       DPH,R7
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   A3           INC       DPTR
   \   000175   A3           INC       DPTR
   \   000176   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017C   75..01       MOV       ?V0,#0x1
   \   00017F   78..         MOV       R0,#?V0
   \   000181   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000184   8E82         MOV       DPL,R6
   \   000186   8F83         MOV       DPH,R7
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00018D   F5..         MOV       ?V0,A
   \   00018F   78..         MOV       R0,#?V0
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000194   78..         MOV       R0,#?V6
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000199   85..82       MOV       DPL,?V2
   \   00019C   85..83       MOV       DPH,?V3
   \   00019F   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   0001A2   E5..         MOV       A,?V2
   \   0001A4   12....       LCALL     ??Subroutine281_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   0001A7   35..         ADDC      A,?V3
   \   0001A9   FB           MOV       R3,A
   \   0001AA   E5..         MOV       A,?V2
   \   0001AC   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0001AF   35..         ADDC      A,?V3
   \   0001B1   F583         MOV       DPH,A
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   F9           MOV       R1,A
   \   0001B5   12....       LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
   \   0001B8   7405         MOV       A,#0x5
   \   0001BA   12....       LCALL     ?DEALLOC_XSTACK8
   4464            zcl_mem_free( readRspCmd );
   \   0001BD                ; Setup parameters for call to function osal_mem_free
   \   0001BD   AA..         MOV       R2,?V6
   \   0001BF   AB..         MOV       R3,?V7
   \   0001C1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4465          
   4466            return TRUE;
   \   0001C4   7901         MOV       R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   0001C6   740E         MOV       A,#0xe
   \   0001C8   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   4467          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine275_0
   \   000003                ; // Fall through to label ??Subroutine275_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2402         ADD       A,#0x2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine279_0
   \   000004                ; // Fall through to label ??Subroutine279_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000003   12....       LCALL     ??Subroutine290_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_729:
   \   000006   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000009   7402         MOV       A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine281_0:
   \   000000   2406         ADD       A,#0x6
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL     ?Subroutine215 & 0xFFFF
   \                     ??CrossCallReturnLabel_697:
   \   000003   3F           ADDC      A,R7
   \   000004                REQUIRE ??Subroutine282_0
   \   000004                ; // Fall through to label ??Subroutine282_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine282_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine283_0
   \   000002                ; // Fall through to label ??Subroutine283_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine215:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EA           MOV       A,R2
   \   000005                REQUIRE ??Subroutine284_0
   \   000005                ; // Fall through to label ??Subroutine284_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine284_0:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine222:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine287_0
   \   000004                ; // Fall through to label ??Subroutine287_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine290_0:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine222 & 0xFFFF
   \                     ??CrossCallReturnLabel_742:
   \   000009   E5..         MOV       A,?V2
   \   00000B   12....       LCALL     ?Subroutine224 & 0xFFFF
   \                     ??CrossCallReturnLabel_738:
   \   00000E   35..         ADDC      A,?V3
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   22           RET
   4468          #endif // ZCL_READ
   4469          
   4470          #ifdef ZCL_WRITE
   4471          /*********************************************************************
   4472           * @fn      processInWriteCmd
   4473           *
   4474           * @brief   Process the "Profile" Write and Write No Response Commands
   4475           *
   4476           * @param   pInMsg - incoming message to process
   4477           *
   4478           * @return  TRUE if command processed. FALSE, otherwise.
   4479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4480          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   4481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine37 & 0xFFFF
   4482            zclWriteCmd_t *writeCmd;
   4483            zclWriteRspCmd_t *writeRspCmd;
   4484            uint8 sendRsp = FALSE;
   \                     ??CrossCallReturnLabel_488:
   \   00000D   C2..         CLR       ?VB.0
   4485            uint8 j = 0;
   \   00000F   7E00         MOV       R6,#0x0
   4486            uint8 i;
   4487          
   4488            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000011   85..82       MOV       DPL,?XSP + 0
   \   000014   85..83       MOV       DPH,?XSP + 1
   \   000017   E0           MOVX      A,@DPTR
   \   000018   12....       LCALL     ??Subroutine284_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_699:
   \   00001B   3B           ADDC      A,R3
   \   00001C   12....       LCALL     ??Subroutine282_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_690:
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine16 & 0xFFFF
   4489            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_654:
   \   000027   C8           XCH       A,R0
   \   000028   2407         ADD       A,#0x7
   \   00002A   F582         MOV       DPL,A
   \   00002C   E4           CLR       A
   \   00002D   38           ADDC      A,R0
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6402         XRL       A,#0x2
   \   000033   7017         JNZ       ??zclProcessInWriteCmd_0
   4490            {
   4491              // We need to send a response back - allocate space for it
   4492              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4493                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00003D   8A..         MOV       ?V6,R2
   \   00003F   8B..         MOV       ?V7,R3
   4494              if ( writeRspCmd == NULL )
   \   000041   EA           MOV       A,R2
   \   000042   4B           ORL       A,R3
   \   000043   7005         JNZ       ??zclProcessInWriteCmd_1
   4495              {
   4496                return FALSE; // EMBEDDED RETURN
   \   000045   7900         MOV       R1,#0x0
   \   000047   02....       LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
   4497              }
   4498          
   4499              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   00004A   D2..         SETB      ?VB.0
   4500            }
   4501          
   4502            for ( i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   00004C   7F00         MOV       R7,#0x0
   \   00004E   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000051   7406         MOV       A,#0x6
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000059   8011         SJMP      ??zclProcessInWriteCmd_3
   4503            {
   4504              zclAttrRec_t attrRec;
   4505              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4506          
   4507              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4508                                   statusRec->attrID, &attrRec ) )
   4509              {
   4510                if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
   4511                {
   4512                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4513                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4514                  break;
   4515                }
   4516                if ( statusRec->dataType == attrRec.attr.dataType )
   4517                {
   4518                  uint8 status;
   4519          
   4520                  // Write the new attribute value
   4521                  if ( attrRec.attr.dataPtr != NULL )
   4522                  {
   4523                    //Handle special case for Identify
   4524                    if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
   4525                    {
   4526                      uint16 identifyTime; 
   4527                            
   4528                      osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
   4529                                  
   4530                      bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
   4531                      
   4532                      status = ZCL_STATUS_SUCCESS;
   4533                    }          
   4534                    else
   4535                    {                
   4536                      status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4537                                                 &attrRec, statusRec );
   4538                    }
   4539                  }
   4540                  else // Use CB
   4541                  {
   4542                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4543                                                      &attrRec, statusRec->attrData );
   4544                  }
   4545          
   4546                  // If successful, a write attribute status record shall NOT be generated
   4547                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4548                  {
   4549                    // Attribute is read only - move on to the next write attribute record
   4550                    writeRspCmd->attrList[j].status = status;
   4551                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4552                  }
   4553                }
   4554                else
   4555                {
   4556                  // Attribute data type is incorrect - move on to the next write attribute record
   4557                  if ( sendRsp )
   4558                  {
   4559                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4560                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4561                  }
   4562                }
   4563              }
   4564              else
   4565              {
   4566                // Attribute is not supported - move on to the next write attribute record
   4567                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   00005B   A2..         MOV       C,?VB.0
   \   00005D   500C         JNC       ??CrossCallReturnLabel_9
   4568                {
   4569                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   00005F   85..82       MOV       DPL,?V4
   \   000062   85..83       MOV       DPH,?V5
   \   000065   A3           INC       DPTR
   \   000066   7486         MOV       A,#-0x7a
   4570                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4571                }
   4572              }
   \                     ??zclProcessInWriteCmd_5:
   \   000068   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00006B   0F           INC       R7
   \                     ??zclProcessInWriteCmd_3:
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000074   4003         JC        $+5
   \   000076   02....       LJMP      ??CrossCallReturnLabel_10 & 0xFFFF
   \   000079   EF           MOV       A,R7
   \   00007A   75F005       MOV       B,#0x5
   \   00007D   A4           MUL       AB
   \   00007E   F8           MOV       R0,A
   \   00007F   A9F0         MOV       R1,B
   \   000081   7404         MOV       A,#0x4
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000089   8582..       MOV       ?V2,DPL
   \   00008C   8583..       MOV       ?V3,DPH
   \   00008F   EE           MOV       A,R6
   \   000090   75F003       MOV       B,#0x3
   \   000093   A4           MUL       AB
   \   000094   F8           MOV       R0,A
   \   000095   A9F0         MOV       R1,B
   \   000097   E5..         MOV       A,?V6
   \   000099   28           ADD       A,R0
   \   00009A   F5..         MOV       ?V4,A
   \   00009C   E5..         MOV       A,?V7
   \   00009E   39           ADDC      A,R1
   \   00009F   F5..         MOV       ?V5,A
   \   0000A1   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   0000AC                ; Setup parameters for call to function zclFindAttrRec
   \   0000AC   7408         MOV       A,#0x8
   \   0000AE   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B1   88..         MOV       ?V0,R0
   \   0000B3   89..         MOV       ?V1,R1
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   85..82       MOV       DPL,?V2
   \   0000BD   85..83       MOV       DPH,?V3
   \   0000C0   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000C9   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   0000CC   7404         MOV       A,#0x4
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   C8           XCH       A,R0
   \   0000D4   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   0000D7   38           ADDC      A,R0
   \   0000D8   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV       A,R1
   \   0000DF   7003         JNZ       $+5
   \   0000E1   02....       LJMP      ??zclProcessInWriteCmd_4 & 0xFFFF
   \   0000E4   7406         MOV       A,#0x6
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000EC   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000EE   92F0         MOV       B.0,C
   \   0000F0   740D         MOV       A,#0xd
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000F8   20F001       JB        B.0,??zclProcessInWriteCmd_6
   \   0000FB   B3           CPL       C
   \                     ??zclProcessInWriteCmd_6:
   \   0000FC   405D         JC        ??zclProcessInWriteCmd_7
   \   0000FE   85..82       MOV       DPL,?V4
   \   000101   85..83       MOV       DPH,?V5
   \   000104   A3           INC       DPTR
   \   000105   7486         MOV       A,#-0x7a
   \   000107   12....       LCALL     ?Subroutine15 & 0xFFFF
   4573            } // for loop
   4574          
   4575            if ( sendRsp )
   \                     ??CrossCallReturnLabel_10:
   \   00010A   A2..         MOV       C,?VB.0
   \   00010C   5046         JNC       ??zclProcessInWriteCmd_8
   4576            {
   4577              writeRspCmd->numAttr = j;
   \   00010E   EE           MOV       A,R6
   \   00010F   85..82       MOV       DPL,?V6
   \   000112   85..83       MOV       DPH,?V7
   \   000115   F0           MOVX      @DPTR,A
   4578              if ( writeRspCmd->numAttr == 0 )
   \   000116   700B         JNZ       ??zclProcessInWriteCmd_9
   4579              {
   4580                // Since all records were written successful, include a single status record
   4581                // in the resonse command with the status field set to SUCCESS and the
   4582                // attribute ID field omitted.
   4583                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000118   A3           INC       DPTR
   \   000119   E4           CLR       A
   \   00011A   F0           MOVX      @DPTR,A
   4584                writeRspCmd->numAttr = 1;
   \   00011B   85..82       MOV       DPL,?V6
   \   00011E   85..83       MOV       DPH,?V7
   \   000121   04           INC       A
   \   000122   F0           MOVX      @DPTR,A
   4585              }
   4586          
   4587              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4588                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4589                                true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteCmd_9:
   \   000123   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000126   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012C   75..01       MOV       ?V0,#0x1
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000134   7408         MOV       A,#0x8
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00013C   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000142   78..         MOV       R0,#?V6
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   4590              zcl_mem_free( writeRspCmd );
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   AA..         MOV       R2,?V6
   \   00014F   AB..         MOV       R3,?V7
   \   000151   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4591            }
   4592          
   4593            return TRUE;
   \                     ??zclProcessInWriteCmd_8:
   \   000154   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   000156   7410         MOV       A,#0x10
   \   000158   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   \                     ??zclProcessInWriteCmd_7:
   \   00015B   85..82       MOV       DPL,?V2
   \   00015E   85..83       MOV       DPH,?V3
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   F8           MOV       R0,A
   \   000165   740C         MOV       A,#0xc
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   68           XRL       A,R0
   \   00016C   6003         JZ        $+5
   \   00016E   02....       LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
   \   000171   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_706:
   \   000174   F5..         MOV       ?V0,A
   \   000176   A3           INC       DPTR
   \   000177   E0           MOVX      A,@DPTR
   \   000178   F5..         MOV       ?V1,A
   \   00017A   740E         MOV       A,#0xe
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000182   6063         JZ        ??zclProcessInWriteCmd_11
   \   000184   85..82       MOV       DPL,?V0
   \   000187   85..83       MOV       DPH,?V1
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   6403         XRL       A,#0x3
   \   000191   7002         JNZ       ??zclProcessInWriteCmd_12
   \   000193   A3           INC       DPTR
   \   000194   E0           MOVX      A,@DPTR
   \                     ??zclProcessInWriteCmd_12:
   \   000195   703E         JNZ       ??zclProcessInWriteCmd_13
   \   000197   85..82       MOV       DPL,?V2
   \   00019A   85..83       MOV       DPH,?V3
   \   00019D   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   0001A0   7033         JNZ       ??zclProcessInWriteCmd_13
   \   0001A2                ; Setup parameters for call to function osal_memcpy
   \   0001A2   85..82       MOV       DPL,?V2
   \   0001A5   85..83       MOV       DPH,?V3
   \   0001A8   A3           INC       DPTR
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B1   7C02         MOV       R4,#0x2
   \   0001B3   7D00         MOV       R5,#0x0
   \   0001B5   7405         MOV       A,#0x5
   \   0001B7   12....       LCALL     ?XSTACK_DISP101_8
   \   0001BA   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0001BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C0                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   0001C0   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_771:
   \   0001C3   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0001C6   F9           MOV       R1,A
   \   0001C7   7402         MOV       A,#0x2
   \   0001C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   0001CF   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   0001D2   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \                     ??zclProcessInWriteCmd_13:
   \   0001D5                ; Setup parameters for call to function zclWriteAttrData
   \   0001D5   78..         MOV       R0,#?V2
   \   0001D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DA   740A         MOV       A,#0xa
   \   0001DC   12....       LCALL     ?XSTACK_DISP102_8
   \   0001DF   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   0001E2   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   0001E5   8021         SJMP      ??CrossCallReturnLabel_260
   \                     ??zclProcessInWriteCmd_11:
   \   0001E7                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0001E7   85..82       MOV       DPL,?V2
   \   0001EA   85..83       MOV       DPH,?V3
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001F3   740A         MOV       A,#0xa
   \   0001F5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F8   12....       LCALL     ?Subroutine217 & 0xFFFF
   \                     ??CrossCallReturnLabel_677:
   \   0001FB   35..         ADDC      A,?V1
   \   0001FD   FB           MOV       R3,A
   \   0001FE   E5..         MOV       A,?V0
   \   000200   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000203   35..         ADDC      A,?V1
   \   000205   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000208   7402         MOV       A,#0x2
   \   00020A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00020D   E9           MOV       A,R1
   \   00020E   A2..         MOV       C,?VB.0
   \   000210   4003         JC        $+5
   \   000212   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   000215   7003         JNZ       $+5
   \   000217   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   00021A   85..82       MOV       DPL,?V4
   \   00021D   85..83       MOV       DPH,?V5
   \   000220   A3           INC       DPTR
   \   000221   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_10:
   \   000224   A2..         MOV       C,?VB.0
   \   000226   4003         JC        $+5
   \   000228   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   00022B   85..82       MOV       DPL,?V4
   \   00022E   85..83       MOV       DPH,?V5
   \   000231   A3           INC       DPTR
   \   000232   748D         MOV       A,#-0x73
   \   000234   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   4594          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL     ?Subroutine217 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   000003   35..         ADDC      A,?V1
   \   000005   FB           MOV       R3,A
   \   000006                REQUIRE ??Subroutine276_0
   \   000006                ; // Fall through to label ??Subroutine276_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine276_0:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine224 & 0xFFFF
   \                     ??CrossCallReturnLabel_737:
   \   000005   35..         ADDC      A,?V1
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   12....       LCALL     ??Subroutine294_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_754:
   \   000003   13           RRC       A
   \   000004   13           RRC       A
   \   000005   13           RRC       A
   \   000006   541F         ANL       A,#0x1f
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine277_0
   \   000004                ; // Fall through to label ??Subroutine277_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00000D   E8           MOV       A,R0
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   E9           MOV       A,R1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   0E           INC       R6
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine217:
   \   000000   E5..         MOV       A,?V0
   \   000002                REQUIRE ??Subroutine281_0
   \   000002                ; // Fall through to label ??Subroutine281_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   85..82       MOV       DPL,?V4
   \   000005   85..83       MOV       DPH,?V5
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine285_0
   \   000006                ; // Fall through to label ??Subroutine285_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   12....       LCALL     ?Subroutine219 & 0xFFFF
   \                     ??CrossCallReturnLabel_757:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ??Subroutine286_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_709:
   \   000003   F8           MOV       R0,A
   \   000004   EF           MOV       A,R7
   \   000005   C3           CLR       C
   \   000006   98           SUBB      A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ??Subroutine286_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_708:
   \   000003   75F003       MOV       B,#0x3
   \   000006   A4           MUL       AB
   \   000007   A9F0         MOV       R1,B
   \   000009   2401         ADD       A,#0x1
   \   00000B   FA           MOV       R2,A
   \   00000C   E4           CLR       A
   \   00000D   39           ADDC      A,R1
   \   00000E   FB           MOV       R3,A
   \   00000F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine286_0
   \   000006                ; // Fall through to label ??Subroutine286_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000003   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000006   7405         MOV       A,#0x5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_712:
   \   000003   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   FE           MOV       R6,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000004                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000004                ; Setup parameters for call to function zcl_SendDiscoverAttrsRspCmd
   \   000004                ; Setup parameters for call to function zcl_SendDiscoverAttrsExtRsp
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   C8           XCH       A,R0
   \   00000D   2406         ADD       A,#0x6
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   38           ADDC      A,R0
   \   000013   F583         MOV       DPH,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FD           MOV       R5,A
   \   00000D   EE           MOV       A,R6
   \   00000E   2406         ADD       A,#0x6
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   3F           ADDC      A,R7
   \   000013   FB           MOV       R3,A
   \   000014   EE           MOV       A,R6
   \   000015   12....       LCALL     ?Subroutine224 & 0xFFFF
   \                     ??CrossCallReturnLabel_734:
   \   000018   3F           ADDC      A,R7
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   22           RET
   4595          
   4596          /*********************************************************************
   4597           * @fn      zclRevertWriteUndividedCmd
   4598           *
   4599           * @brief   Revert the "Profile" Write Undevided Command
   4600           *
   4601           * @param   pInMsg - incoming message to process
   4602           * @param   curWriteRec - old data
   4603           * @param   numAttr - number of attributes to be reverted
   4604           *
   4605           * @return  none
   4606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4607          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   4608                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine45 & 0xFFFF
   4610            uint8 i;
   4611          
   4612            for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_467:
   \   000019   75..00       MOV       ?V0,#0x0
   \   00001C   8029         SJMP      ??zclRevertWriteUndividedCmd_0
   4613            {
   4614              zclAttrRec_t attrRec;
   4615              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4616          
   4617              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4618                                    statusRec->attrID, &attrRec ) )
   4619              {
   4620                break; // should never happen
   4621              }
   4622          
   4623              if ( attrRec.attr.dataPtr != NULL )
   4624              {
   4625                // Just copy the old data back - no need to validate the data
   4626                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4627                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4628              }
   4629              else // Use CB
   4630              {
   4631                // Write the old data back
   4632                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4633                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   00001E   12....       LCALL     ?Subroutine104 & 0xFFFF
   4634              }
   \                     ??CrossCallReturnLabel_772:
   \   000021   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000024                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000024   8A..         MOV       ?V2,R2
   \   000026   8B..         MOV       ?V3,R3
   \   000028   78..         MOV       R0,#?V2
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7406         MOV       A,#0x6
   \   00002F   12....       LCALL     ?XSTACK_DISP102_8
   \   000032   EE           MOV       A,R6
   \   000033   12....       LCALL     ??Subroutine281_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   000036   3F           ADDC      A,R7
   \   000037   FB           MOV       R3,A
   \   000038   EE           MOV       A,R6
   \   000039   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00003C   3F           ADDC      A,R7
   \   00003D   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000040   7402         MOV       A,#0x2
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclRevertWriteUndividedCmd_2:
   \   000045   05..         INC       ?V0
   \                     ??zclRevertWriteUndividedCmd_0:
   \   000047   741B         MOV       A,#0x1b
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_685:
   \   00004F   C3           CLR       C
   \   000050   E5..         MOV       A,?V0
   \   000052   98           SUBB      A,R0
   \   000053   E4           CLR       A
   \   000054   99           SUBB      A,R1
   \   000055   507D         JNC       ??zclRevertWriteUndividedCmd_3
   \   000057   E5..         MOV       A,?V0
   \   000059   75F005       MOV       B,#0x5
   \   00005C   A4           MUL       AB
   \   00005D   F8           MOV       R0,A
   \   00005E   A9F0         MOV       R1,B
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   E0           MOVX      A,@DPTR
   \   000066   28           ADD       A,R0
   \   000067   FE           MOV       R6,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   39           ADDC      A,R1
   \   00006B   FF           MOV       R7,A
   \   00006C   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_707:
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   88..         MOV       ?V2,R0
   \   000074   F5..         MOV       ?V3,A
   \   000076                ; Setup parameters for call to function zclFindAttrRec
   \   000076   7404         MOV       A,#0x4
   \   000078   12....       LCALL     ?XSTACK_DISP100_8
   \   00007B   88..         MOV       ?V4,R0
   \   00007D   89..         MOV       ?V5,R1
   \   00007F   78..         MOV       R0,#?V4
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   E9           MOV       A,R1
   \   00008F   6043         JZ        ??zclRevertWriteUndividedCmd_3
   \   000091   EE           MOV       A,R6
   \   000092   2403         ADD       A,#0x3
   \   000094   FE           MOV       R6,A
   \   000095   5001         JNC       ??zclRevertWriteUndividedCmd_4
   \   000097   0F           INC       R7
   \                     ??zclRevertWriteUndividedCmd_4:
   \   000098   F582         MOV       DPL,A
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   00009F   740A         MOV       A,#0xa
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ??Subroutine279_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   0000A7   E5..         MOV       A,?V2
   \   0000A9   45..         ORL       A,?V3
   \   0000AB   7003         JNZ       $+5
   \   0000AD   02....       LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
   \   0000B0                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000B0   7408         MOV       A,#0x8
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000B8                ; Setup parameters for call to function osal_memcpy
   \   0000B8   8E82         MOV       DPL,R6
   \   0000BA   8F83         MOV       DPH,R7
   \   0000BC   12....       LCALL     ??Subroutine280_0 & 0xFFFF
   4635            } // for loop
   \                     ??CrossCallReturnLabel_670:
   \   0000BF   75..00       MOV       ?V6,#0x0
   \   0000C2   78..         MOV       R0,#?V4
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C7   AA..         MOV       R2,?V2
   \   0000C9   AB..         MOV       R3,?V3
   \   0000CB   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   0000CE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D1   02....       LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   4636          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   0000D4   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740C         MOV       A,#0xc
   \   000002                REQUIRE ??Subroutine292_0
   \   000002                ; // Fall through to label ??Subroutine292_0
   4637          
   4638          /*********************************************************************
   4639           * @fn      zclProcessInWriteUndividedCmd
   4640           *
   4641           * @brief   Process the "Profile" Write Undivided Command
   4642           *
   4643           * @param   pInMsg - incoming message to process
   4644           *
   4645           * @return  TRUE if command processed. FALSE, otherwise.
   4646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   F583         MOV       DPH,A
   \   000002   8882         MOV       DPL,R0
   \   000004                REQUIRE ??Subroutine280_0
   \   000004                ; // Fall through to label ??Subroutine280_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4647          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   4648          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine37 & 0xFFFF
   4649            zclWriteCmd_t *writeCmd;
   4650            zclWriteRspCmd_t *writeRspCmd;
   4651            zclAttrRec_t attrRec;
   4652            uint16 dataLen;
   4653            uint16 curLen = 0;
   \                     ??CrossCallReturnLabel_489:
   \   00000D   7406         MOV       A,#0x6
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
   4654            uint8 j = 0;
   \   000016   7E00         MOV       R6,#0x0
   4655            uint8 i;
   4656          
   4657            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000018   12....       LCALL     ?Subroutine212 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   00001B   C8           XCH       A,R0
   \   00001C   12....       LCALL     ??Subroutine284_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_700:
   \   00001F   38           ADDC      A,R0
   \   000020   12....       LCALL     ??Subroutine282_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_691:
   \   000023   740A         MOV       A,#0xa
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   4658          
   4659            // Allocate space for Write Response Command
   4660            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4661                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \                     ??CrossCallReturnLabel_627:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   740A         MOV       A,#0xa
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000033   8A..         MOV       ?V0,R2
   \   000035   8B..         MOV       ?V1,R3
   4662            if ( writeRspCmd == NULL )
   \   000037   EA           MOV       A,R2
   \   000038   4B           ORL       A,R3
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
   4663            {
   4664              return FALSE; // EMBEDDED RETURN
   4665            }
   4666          
   4667            // If any attribute cannot be written, no attribute values are changed. Hence,
   4668            // make sure all the attributes are supported and writable
   4669            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   00003E   7F00         MOV       R7,#0x0
   \   000040   8041         SJMP      ??zclProcessInWriteUndividedCmd_1
   4670            {
   4671              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4672          
   4673              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4674                                    statusRec->attrID, &attrRec ) )
   4675              {
   4676                // Attribute is not supported - stop here
   4677                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4678                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4679                break;
   4680              }
   4681          
   4682              if ( statusRec->dataType != attrRec.attr.dataType )
   4683              {
   4684                // Attribute data type is incorrect - stope here
   4685                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4686                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4687                break;
   4688              }
   4689          
   4690              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4691              {
   4692                // Attribute is not writable - stop here
   4693                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4694                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4695                break;
   4696              }
   4697          
   4698              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4699              {
   4700                // Not authorized to write - stop here
   4701                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4702                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4703                break;
   4704              }
   4705          
   4706              // Attribute Data length
   4707              if ( attrRec.attr.dataPtr != NULL )
   4708              {
   4709                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4710              }
   4711              else // Use CB
   4712              {
   4713                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4714                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000042   12....       LCALL     ?Subroutine102 & 0xFFFF
   4715              }
   \                     ??CrossCallReturnLabel_201:
   \   000045                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000045   85..82       MOV       DPL,?V4
   \   000048   85..83       MOV       DPH,?V5
   \   00004B   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00004E   8882         MOV       DPL,R0
   \   000050   8983         MOV       DPH,R1
   \   000052   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000055   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000058   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?Subroutine18 & 0xFFFF
   4716          
   4717              // add padding if needed
   4718              if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_15:
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   E0           MOVX      A,@DPTR
   \   000067   A2E0         MOV       C,0xE0 /* A   */.0
   \   000069   5003         JNC       ??CrossCallReturnLabel_306
   4719              {
   4720                dataLen++;
   \   00006B   12....       LCALL     ?Subroutine164 & 0xFFFF
   4721              }
   4722          
   4723              curLen += dataLen;
   \                     ??CrossCallReturnLabel_306:
   \   00006E   7402         MOV       A,#0x2
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_686:
   \   000076   7406         MOV       A,#0x6
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   28           ADD       A,R0
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   39           ADDC      A,R1
   \   000081   F0           MOVX      @DPTR,A
   \   000082   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   000083   740A         MOV       A,#0xa
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00008B   5064         JNC       ??zclProcessInWriteUndividedCmd_4
   \   00008D   EF           MOV       A,R7
   \   00008E   75F005       MOV       B,#0x5
   \   000091   A4           MUL       AB
   \   000092   F8           MOV       R0,A
   \   000093   A9F0         MOV       R1,B
   \   000095   740A         MOV       A,#0xa
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00009D   8582..       MOV       ?V4,DPL
   \   0000A0   8583..       MOV       ?V5,DPH
   \   0000A3   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_773:
   \   0000A6   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000A9                ; Setup parameters for call to function zclFindAttrRec
   \   0000A9   740C         MOV       A,#0xc
   \   0000AB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AE   88..         MOV       ?V2,R0
   \   0000B0   89..         MOV       ?V3,R1
   \   0000B2   78..         MOV       R0,#?V2
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   85..82       MOV       DPL,?V4
   \   0000BA   85..83       MOV       DPH,?V5
   \   0000BD   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   0000C0   85..82       MOV       DPL,?V6
   \   0000C3   85..83       MOV       DPH,?V7
   \   0000C6   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   0000C9   E5..         MOV       A,?V6
   \   0000CB   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   0000CE   35..         ADDC      A,?V7
   \   0000D0   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D6   E9           MOV       A,R1
   \   0000D7   7052         JNZ       ??zclProcessInWriteUndividedCmd_5
   \   0000D9   85..82       MOV       DPL,?V0
   \   0000DC   85..83       MOV       DPH,?V1
   \   0000DF   A3           INC       DPTR
   \   0000E0   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   85..82       MOV       DPL,?V4
   \   0000E6   85..83       MOV       DPH,?V5
   \   0000E9   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000EC   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   0000EF   7E01         MOV       R6,#0x1
   4724            } // for loop
   4725          
   4726            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   0000F1   EE           MOV       A,R6
   \   0000F2   85..82       MOV       DPL,?V0
   \   0000F5   85..83       MOV       DPH,?V1
   \   0000F8   F0           MOVX      @DPTR,A
   4727            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000F9   6003         JZ        $+5
   \   0000FB   02....       LJMP      ??CrossCallReturnLabel_190 & 0xFFFF
   4728            {
   4729              uint8 *curDataPtr;
   4730              zclWriteRec_t *curWriteRec;
   4731          
   4732              // calculate the length of the current data header
   4733              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   0000FE   75F005       MOV       B,#0x5
   \   000101   A4           MUL       AB
   \   000102   FF           MOV       R7,A
   4734          
   4735              // Allocate space to keep a copy of the current data
   4736              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   \   000103                ; Setup parameters for call to function osal_mem_alloc
   \   000103   7406         MOV       A,#0x6
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   2F           ADD       A,R7
   \   00010A   12....       LCALL     ?Subroutine210 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   00010D   7408         MOV       A,#0x8
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   4737              if ( curWriteRec == NULL )
   \                     ??CrossCallReturnLabel_481:
   \   000115   7408         MOV       A,#0x8
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   00011D   705B         JNZ       ??zclProcessInWriteUndividedCmd_7
   4738              {
   4739                zcl_mem_free(writeRspCmd );
   \   00011F                ; Setup parameters for call to function osal_mem_free
   \   00011F   AA..         MOV       R2,?V0
   \   000121   AB..         MOV       R3,?V1
   \   000123   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4740                return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000126   7900         MOV       R1,#0x0
   \   000128   02....       LJMP      ??zclProcessInWriteUndividedCmd_8 & 0xFFFF
   4741              }
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   00012B   7410         MOV       A,#0x10
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000133   E0           MOVX      A,@DPTR
   \   000134   69           XRL       A,R1
   \   000135   600B         JZ        ??zclProcessInWriteUndividedCmd_9
   \   000137   85..82       MOV       DPL,?V0
   \   00013A   85..83       MOV       DPH,?V1
   \   00013D   A3           INC       DPTR
   \   00013E   748D         MOV       A,#-0x73
   \   000140   80A0         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   000142   7411         MOV       A,#0x11
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   E0           MOVX      A,@DPTR
   \   000148   A2E1         MOV       C,0xE0 /* A   */.1
   \   00014A   400B         JC        ??zclProcessInWriteUndividedCmd_10
   \   00014C   85..82       MOV       DPL,?V0
   \   00014F   85..83       MOV       DPH,?V1
   \   000152   A3           INC       DPTR
   \   000153   7488         MOV       A,#-0x78
   \   000155   808B         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   000157   A2E5         MOV       C,0xE0 /* A   */.5
   \   000159   500C         JNC       ??zclProcessInWriteUndividedCmd_11
   \   00015B   85..82       MOV       DPL,?V0
   \   00015E   85..83       MOV       DPH,?V1
   \   000161   A3           INC       DPTR
   \   000162   747E         MOV       A,#0x7e
   \   000164   02....       LJMP      ??zclProcessInWriteUndividedCmd_6 & 0xFFFF
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000167   7412         MOV       A,#0x12
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   00016F   7003         JNZ       $+5
   \   000171   02....       LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   \   000174                ; Setup parameters for call to function zclGetAttrDataLength
   \   000174   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000177   02....       LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   4742          
   4743              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   00017A   7408         MOV       A,#0x8
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   2F           ADD       A,R7
   \   000181   F5..         MOV       ?V6,A
   \   000183   A3           INC       DPTR
   \   000184   E0           MOVX      A,@DPTR
   \   000185   3400         ADDC      A,#0x0
   \   000187   F5..         MOV       ?V7,A
   4744          
   4745              // Write the new data over
   4746              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000189   7F00         MOV       R7,#0x0
   \   00018B   8020         SJMP      ??zclProcessInWriteUndividedCmd_12
   4747              {
   4748                uint8 status;
   4749                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4750                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4751          
   4752                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4753                                      statusRec->attrID, &attrRec ) )
   4754                {
   4755                  break; // should never happen
   4756                }
   4757          
   4758                // Keep a copy of the current data before before writing the new data over
   4759                curStatusRec->attrID = statusRec->attrID;
   4760                curStatusRec->attrData = curDataPtr;
   4761          
   4762                if ( attrRec.attr.dataPtr != NULL )
   4763                {
   4764                  // Read the current value
   4765                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4766          
   4767                  // Write the new attribute value
   4768                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4769                                             &attrRec, statusRec );
   4770                }
   4771                else // Use CBs
   4772                {
   4773                  // Read the current value
   4774                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4775                                          statusRec->attrID, curDataPtr, &dataLen );
   4776                  // Write the new attribute value
   4777                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4778                                                    &attrRec, statusRec->attrData );
   4779                }
   4780          
   4781                // If successful, a write attribute status record shall NOT be generated
   4782                if ( status != ZCL_STATUS_SUCCESS )
   4783                {
   4784                  writeRspCmd->attrList[j].status = status;
   4785                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4786          
   4787                  // Since this write failed, we need to revert all the pervious writes
   4788                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4789                  break;
   4790                }
   4791          
   4792                // add padding if needed
   4793                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   00018D   7402         MOV       A,#0x2
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   E0           MOVX      A,@DPTR
   \   000193   A2E0         MOV       C,0xE0 /* A   */.0
   \   000195   5003         JNC       ??CrossCallReturnLabel_307
   4794                {
   4795                  dataLen++;
   \   000197   12....       LCALL     ?Subroutine164 & 0xFFFF
   4796                }
   4797          
   4798                curDataPtr += dataLen;
   \                     ??CrossCallReturnLabel_307:
   \   00019A   7402         MOV       A,#0x2
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_687:
   \   0001A2   E5..         MOV       A,?V6
   \   0001A4   28           ADD       A,R0
   \   0001A5   F5..         MOV       ?V6,A
   \   0001A7   E5..         MOV       A,?V7
   \   0001A9   39           ADDC      A,R1
   \   0001AA   F5..         MOV       ?V7,A
   \   0001AC   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   0001AD   740A         MOV       A,#0xa
   \   0001AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0001B5   4003         JC        $+5
   \   0001B7   02....       LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
   \   0001BA   EF           MOV       A,R7
   \   0001BB   75F005       MOV       B,#0x5
   \   0001BE   A4           MUL       AB
   \   0001BF   F8           MOV       R0,A
   \   0001C0   A9F0         MOV       R1,B
   \   0001C2   740A         MOV       A,#0xa
   \   0001C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0001CA   AA82         MOV       R2,DPL
   \   0001CC   AB83         MOV       R3,DPH
   \   0001CE   7404         MOV       A,#0x4
   \   0001D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D3   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   0001D6   7408         MOV       A,#0x8
   \   0001D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DB   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0001DE   7406         MOV       A,#0x6
   \   0001E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E3   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   0001E6   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   0001E9                ; Setup parameters for call to function zclFindAttrRec
   \   0001E9   740C         MOV       A,#0xc
   \   0001EB   12....       LCALL     ?XSTACK_DISP100_8
   \   0001EE   88..         MOV       ?V2,R0
   \   0001F0   89..         MOV       ?V3,R1
   \   0001F2   78..         MOV       R0,#?V2
   \   0001F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F7   7406         MOV       A,#0x6
   \   0001F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FC   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0001FF   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000202   12....       LCALL     ?DEALLOC_XSTACK8
   \   000205   E9           MOV       A,R1
   \   000206   7003         JNZ       $+5
   \   000208   02....       LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
   \   00020B   7404         MOV       A,#0x4
   \   00020D   12....       LCALL     ?XSTACK_DISP0_8
   \   000210   12....       LCALL     ??Subroutine285_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_705:
   \   000213   FA           MOV       R2,A
   \   000214   A3           INC       DPTR
   \   000215   E0           MOVX      A,@DPTR
   \   000216   FB           MOV       R3,A
   \   000217   7406         MOV       A,#0x6
   \   000219   12....       LCALL     ?XSTACK_DISP0_8
   \   00021C   12....       LCALL     ??Subroutine295_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_767:
   \   00021F   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000222   7406         MOV       A,#0x6
   \   000224   12....       LCALL     ?XSTACK_DISP0_8
   \   000227   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00022A   E5..         MOV       A,?V6
   \   00022C   F0           MOVX      @DPTR,A
   \   00022D   A3           INC       DPTR
   \   00022E   E5..         MOV       A,?V7
   \   000230   F0           MOVX      @DPTR,A
   \   000231   7412         MOV       A,#0x12
   \   000233   12....       LCALL     ?XSTACK_DISP0_8
   \   000236   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000239   603B         JZ        ??zclProcessInWriteUndividedCmd_15
   \   00023B                ; Setup parameters for call to function zclReadAttrData
   \   00023B   7402         MOV       A,#0x2
   \   00023D   12....       LCALL     ?XSTACK_DISP100_8
   \   000240   88..         MOV       ?V2,R0
   \   000242   89..         MOV       ?V3,R1
   \   000244   78..         MOV       R0,#?V2
   \   000246   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000249   740E         MOV       A,#0xe
   \   00024B   12....       LCALL     ?XSTACK_DISP102_8
   \   00024E   AA..         MOV       R2,?V6
   \   000250   AB..         MOV       R3,?V7
   \   000252   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000255   7402         MOV       A,#0x2
   \   000257   12....       LCALL     ?DEALLOC_XSTACK8
   \   00025A   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00025D   12....       LCALL     ?XSTACK_DISP0_8
   \   000260   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000263   740E         MOV       A,#0xe
   \   000265   12....       LCALL     ?XSTACK_DISP102_8
   \   000268   E8           MOV       A,R0
   \   000269   12....       LCALL     ??Subroutine281_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   00026C   39           ADDC      A,R1
   \   00026D   FB           MOV       R3,A
   \   00026E   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000271   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   000274   804F         SJMP      ??CrossCallReturnLabel_262
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   000276   12....       LCALL     ?Subroutine212 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000279   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   00027C                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   00027C   7402         MOV       A,#0x2
   \   00027E   12....       LCALL     ?XSTACK_DISP100_8
   \   000281   88..         MOV       ?V2,R0
   \   000283   89..         MOV       ?V3,R1
   \   000285   78..         MOV       R0,#?V2
   \   000287   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00028A   85....       MOV       ?V2,?V6
   \   00028D   85....       MOV       ?V3,?V7
   \   000290   78..         MOV       R0,#?V2
   \   000292   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000295   7408         MOV       A,#0x8
   \   000297   12....       LCALL     ?XSTACK_DISP0_8
   \   00029A   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00029D   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0002A0   7404         MOV       A,#0x4
   \   0002A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A5   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   0002A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AB   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0002AE   A3           INC       DPTR
   \   0002AF   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002B2   740E         MOV       A,#0xe
   \   0002B4   12....       LCALL     ?XSTACK_DISP102_8
   \   0002B7   E8           MOV       A,R0
   \   0002B8   12....       LCALL     ??Subroutine281_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   0002BB   39           ADDC      A,R1
   \   0002BC   FB           MOV       R3,A
   \   0002BD   E8           MOV       A,R0
   \   0002BE   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0002C1   39           ADDC      A,R1
   \   0002C2   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0002C5   7402         MOV       A,#0x2
   \   0002C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002CA   E9           MOV       A,R1
   \   0002CB   FA           MOV       R2,A
   \   0002CC   EA           MOV       A,R2
   \   0002CD   7003         JNZ       $+5
   \   0002CF   02....       LJMP      ??zclProcessInWriteUndividedCmd_13 & 0xFFFF
   \   0002D2   EE           MOV       A,R6
   \   0002D3   75F003       MOV       B,#0x3
   \   0002D6   A4           MUL       AB
   \   0002D7   F8           MOV       R0,A
   \   0002D8   A9F0         MOV       R1,B
   \   0002DA   E5..         MOV       A,?V0
   \   0002DC   28           ADD       A,R0
   \   0002DD   F8           MOV       R0,A
   \   0002DE   E5..         MOV       A,?V1
   \   0002E0   39           ADDC      A,R1
   \   0002E1   F9           MOV       R1,A
   \   0002E2   EA           MOV       A,R2
   \   0002E3   8882         MOV       DPL,R0
   \   0002E5   8983         MOV       DPH,R1
   \   0002E7   A3           INC       DPTR
   \   0002E8   F0           MOVX      @DPTR,A
   \   0002E9   7404         MOV       A,#0x4
   \   0002EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EE   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   0002F1   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0002F4   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   0002F7   0E           INC       R6
   \   0002F8                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   0002F8   EF           MOV       A,R7
   \   0002F9   F5..         MOV       ?V2,A
   \   0002FB   75..00       MOV       ?V3,#0x0
   \   0002FE   78..         MOV       R0,#?V2
   \   000300   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000303   740A         MOV       A,#0xa
   \   000305   12....       LCALL     ?XSTACK_DISP0_8
   \   000308   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   00030B   7402         MOV       A,#0x2
   \   00030D   12....       LCALL     ?XSTACK_DISP0_8
   \   000310   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000313   12....       LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
   \   000316   7402         MOV       A,#0x2
   \   000318   12....       LCALL     ?DEALLOC_XSTACK8
   4799              } // for loop
   4800          
   4801              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   00031B   EE           MOV       A,R6
   \   00031C   85..82       MOV       DPL,?V0
   \   00031F   85..83       MOV       DPH,?V1
   \   000322   F0           MOVX      @DPTR,A
   4802              if ( writeRspCmd->numAttr  == 0 )
   \   000323   700B         JNZ       ??zclProcessInWriteUndividedCmd_16
   4803              {
   4804                // Since all records were written successful, include a single status record
   4805                // in the resonse command with the status field set to SUCCESS and the
   4806                // attribute ID field omitted.
   4807                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000325   A3           INC       DPTR
   \   000326   E4           CLR       A
   \   000327   F0           MOVX      @DPTR,A
   4808                writeRspCmd->numAttr = 1;
   \   000328   85..82       MOV       DPL,?V0
   \   00032B   85..83       MOV       DPH,?V1
   \   00032E   04           INC       A
   \   00032F   F0           MOVX      @DPTR,A
   4809              }
   4810          
   4811              zcl_mem_free( curWriteRec );
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000330                ; Setup parameters for call to function osal_mem_free
   \   000330   7408         MOV       A,#0x8
   \   000332   12....       LCALL     ?XSTACK_DISP0_8
   \   000335   12....       LCALL     ?Subroutine95 & 0xFFFF
   4812            }
   4813          
   4814            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4815                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4816                              true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_190:
   \   000338   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00033B   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00033E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000341   75..01       MOV       ?V2,#0x1
   \   000344   78..         MOV       R0,#?V2
   \   000346   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000349   7402         MOV       A,#0x2
   \   00034B   12....       LCALL     ?XSTACK_DISP0_8
   \   00034E   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000351   12....       LCALL     ??Subroutine288_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_715:
   \   000354   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000357   78..         MOV       R0,#?V0
   \   000359   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00035C   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00035F   12....       LCALL     ?DEALLOC_XSTACK8
   4817            zcl_mem_free( writeRspCmd );
   \   000362                ; Setup parameters for call to function osal_mem_free
   \   000362   AA..         MOV       R2,?V0
   \   000364   AB..         MOV       R3,?V1
   \   000366   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4818          
   4819            return TRUE;
   \   000369   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   00036B   7414         MOV       A,#0x14
   \   00036D   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   4820          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   2401         ADD       A,#0x1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine224 & 0xFFFF
   \                     ??CrossCallReturnLabel_732:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003                ; Setup parameters for call to function zclWriteAttrData
   \   000003                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000003   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000006   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ?Subroutine222 & 0xFFFF
   \                     ??CrossCallReturnLabel_741:
   \   000009   E5..         MOV       A,?V4
   \   00000B   12....       LCALL     ?Subroutine224 & 0xFFFF
   \                     ??CrossCallReturnLabel_735:
   \   00000E   35..         ADDC      A,?V5
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine288_0:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_720:
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET
   4821          #endif // ZCL_WRITE
   4822          
   4823          #ifdef ZCL_DISCOVER
   4824          /*********************************************************************
   4825           * @fn      zclProcessInDiscAttrs
   4826           *
   4827           * @brief   Process the "Profile" Discover Attributes Commands
   4828           *
   4829           * @param   pInMsg - incoming message to process
   4830           *
   4831           * @return  TRUE if command processed. FALSE, otherwise.
   4832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4833          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscAttrs:
   4834          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine215 & 0xFFFF
   4835            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4836            zclAttrRec_t attrRec;
   4837            uint16 attrID;
   4838            uint8 numAttrs;
   4839            uint8 i;
   4840          
   4841            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_698:
   \   00000D   3F           ADDC      A,R7
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ?Subroutine88 & 0xFFFF
   4842          
   4843            // Find out the number of attributes supported within the specified range
   4844            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   \                     ??CrossCallReturnLabel_175:
   \   000013   75..00       MOV       ?V0,#0x0
   \   000016   85..82       MOV       DPL,?V6
   \   000019   F583         MOV       DPH,A
   \   00001B   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   00001E   E8           MOV       A,R0
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   E9           MOV       A,R1
   \   000022   8010         SJMP      ??zclProcessInDiscAttrs_0
   \                     ??zclProcessInDiscAttrs_1:
   \   000024   05..         INC       ?V0
   \   000026   85..82       MOV       DPL,?XSP + 0
   \   000029   85..83       MOV       DPH,?XSP + 1
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   2401         ADD       A,#0x1
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrs_0:
   \   000034   F0           MOVX      @DPTR,A
   \   000035   85..82       MOV       DPL,?V6
   \   000038   85..83       MOV       DPH,?V7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ??Subroutine297_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_775:
   \   000040   502E         JNC       ??zclProcessInDiscAttrs_2
   4845            {
   4846              // finds the next attribute on this endpoint/cluster after the range.
   4847              // attributes must be in numerical order in the list.
   4848              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \   000042   12....       LCALL     ?Subroutine131 & 0xFFFF
   4849              {
   4850                break;
   4851              }
   4852            }
   \                     ??CrossCallReturnLabel_667:
   \   000045                ; Setup parameters for call to function zclFindNextAttrRec
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP100_8
   \   00004A   88..         MOV       ?V4,R0
   \   00004C   89..         MOV       ?V5,R1
   \   00004E   78..         MOV       R0,#?V4
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?XSTACK_DISP100_8
   \   000058   88..         MOV       ?V4,R0
   \   00005A   89..         MOV       ?V5,R1
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   8E82         MOV       DPL,R6
   \   000063   8F83         MOV       DPH,R7
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   12....       LCALL     ??Subroutine289_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_723:
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D   E9           MOV       A,R1
   \   00006E   70B4         JNZ       ??zclProcessInDiscAttrs_1
   4853          
   4854            numAttrs = i;  // store range of attributes in buffer
   4855          
   4856              // Process message for either attributes or extended attributes
   4857            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   \                     ??zclProcessInDiscAttrs_2:
   \   000070   8E82         MOV       DPL,R6
   \   000072   8F83         MOV       DPH,R7
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F8           MOV       R0,A
   \   00007D   740C         MOV       A,#0xc
   \   00007F   68           XRL       A,R0
   \   000080   700F         JNZ       ??zclProcessInDiscAttrs_3
   4858            {
   4859              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   000082                ; Setup parameters for call to function zclProcessInDiscAttrsCmd
   \   000082   A9..         MOV       R1,?V0
   \   000084   AC..         MOV       R4,?V6
   \   000086   AD..         MOV       R5,?V7
   \   000088   EE           MOV       A,R6
   \   000089   FA           MOV       R2,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FB           MOV       R3,A
   \   00008C   12....       LCALL     `??zclProcessInDiscAttrsCmd::?relay`; Banked call to: zclProcessInDiscAttrsCmd
   \   00008F   8012         SJMP      ??zclProcessInDiscAttrs_4
   4860            }
   4861            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   \                     ??zclProcessInDiscAttrs_3:
   \   000091   7415         MOV       A,#0x15
   \   000093   68           XRL       A,R0
   \   000094   700D         JNZ       ??zclProcessInDiscAttrs_4
   4862            {
   4863              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   000096                ; Setup parameters for call to function zclProcessInDiscAttrsExtCmd
   \   000096   A9..         MOV       R1,?V0
   \   000098   AC..         MOV       R4,?V6
   \   00009A   AD..         MOV       R5,?V7
   \   00009C   EE           MOV       A,R6
   \   00009D   FA           MOV       R2,A
   \   00009E   EF           MOV       A,R7
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??zclProcessInDiscAttrsExtCmd::?relay`; Banked call to: zclProcessInDiscAttrsExtCmd
   4864            }
   4865          
   4866            return TRUE;
   \                     ??zclProcessInDiscAttrs_4:
   \   0000A3   7901         MOV       R1,#0x1
   \   0000A5   740A         MOV       A,#0xa
   \   0000A7   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   4867          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine289_0:
   \   000000   12....       LCALL     ?Subroutine223 & 0xFFFF
   \                     ??CrossCallReturnLabel_725:
   \   000003   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_731:
   \   000006   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   000009   7404         MOV       A,#0x4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   FC           MOV       R4,A
   \   000001                REQUIRE ??Subroutine290_0
   \   000001                ; // Fall through to label ??Subroutine290_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine223:
   \   000000   12....       LCALL     ?Subroutine226 & 0xFFFF
   \                     ??CrossCallReturnLabel_728:
   \   000003   5401         ANL       A,#0x1
   \   000005   22           RET
   4868          
   4869          /*********************************************************************
   4870           * @fn      zclProcessInDiscAttrsCmd
   4871           *
   4872           * @brief   Process the Discover Attributes Command
   4873           *
   4874           * @param   pInMsg - incoming message to process
   4875           *
   4876           * @param   pDiscoverCmd - structure from requesting command
   4877           *
   4878           * @param   attrLenBuf - describes the amount of attributes to be processed
   4879           *
   4880           * @return  none
   4881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4882          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsCmd:
   4883          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine24 & 0xFFFF
   4884            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4885            uint8 discComplete = TRUE;
   4886            zclAttrRec_t attrRec;
   4887            uint16 attrID;
   4888            uint8 i;
   4889          
   4890            // Allocate space for the response command
   4891            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4892                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   \                     ??CrossCallReturnLabel_27:
   \   00000D   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   4893            if ( pDiscoverRsp == NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclProcessInDiscAttrsCmd_0 & 0xFFFF
   4894            {
   4895              return; // EMBEDDED RETURN
   4896            }
   4897          
   4898            if ( numAttrs != 0 )
   \   00001B   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000024   E5..         MOV       A,?V6
   \   000026   7003         JNZ       $+5
   \   000028   02....       LJMP      ??zclProcessInDiscAttrsCmd_1 & 0xFFFF
   4899            {
   4900              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   00002B   7F00         MOV       R7,#0x0
   \   00002D   85..82       MOV       DPL,?V4
   \   000030   85..83       MOV       DPH,?V5
   \   000033   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_688:
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   4901              {
   4902                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_629:
   \   00003E   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000041   12....       LCALL     ?XSTACK_DISP100_8
   \   000044   88..         MOV       ?V2,R0
   \   000046   89..         MOV       ?V3,R1
   \   000048   78..         MOV       R0,#?V2
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7404         MOV       A,#0x4
   \   00004F   12....       LCALL     ?XSTACK_DISP100_8
   \   000052   88..         MOV       ?V2,R0
   \   000054   89..         MOV       ?V3,R1
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7408         MOV       A,#0x8
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066   E9           MOV       A,R1
   \   000067   6029         JZ        ??zclProcessInDiscAttrsCmd_2
   4903                {
   4904                  break; // should not happen, as numAttrs already calculated
   4905                }
   4906          
   4907                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   \   000069   EF           MOV       A,R7
   \   00006A   75F003       MOV       B,#0x3
   \   00006D   A4           MUL       AB
   \   00006E   F8           MOV       R0,A
   \   00006F   A9F0         MOV       R1,B
   \   000071   E5..         MOV       A,?V0
   \   000073   28           ADD       A,R0
   \   000074   F8           MOV       R0,A
   \   000075   E5..         MOV       A,?V1
   \   000077   39           ADDC      A,R1
   \   000078   F9           MOV       R1,A
   \   000079   7408         MOV       A,#0x8
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine35 & 0xFFFF
   4908                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   4909              }
   \                     ??CrossCallReturnLabel_743:
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000087   0F           INC       R7
   \   000088   7402         MOV       A,#0x2
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000090   40AC         JC        ??CrossCallReturnLabel_629
   4910          
   4911              // Are there more attributes to be discovered?
   4912              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsCmd_2:
   \   000092   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000095   12....       LCALL     ?XSTACK_DISP100_8
   \   000098   88..         MOV       ?V4,R0
   \   00009A   89..         MOV       ?V5,R1
   \   00009C   78..         MOV       R0,#?V4
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   7404         MOV       A,#0x4
   \   0000A3   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A6   88..         MOV       ?V4,R0
   \   0000A8   89..         MOV       ?V5,R1
   \   0000AA   78..         MOV       R0,#?V4
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   7408         MOV       A,#0x8
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_721:
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV       A,R1
   \   0000BB   6002         JZ        ??zclProcessInDiscAttrsCmd_1
   4913              {
   4914                discComplete = FALSE;
   \   0000BD   7E00         MOV       R6,#0x0
   4915              }
   4916            }
   4917          
   4918            pDiscoverRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsCmd_1:
   \   0000BF   12....       LCALL     ?Subroutine12 & 0xFFFF
   4919            pDiscoverRsp->numAttr = numAttrs;
   4920          
   4921            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4922                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4923                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_5:
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C5   75..01       MOV       ?V2,#0x1
   \   0000C8   78..         MOV       R0,#?V2
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CD   7406         MOV       A,#0x6
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_717:
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D8   78..         MOV       R0,#?V0
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DD   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000E0   12....       LCALL     `??zcl_SendDiscoverAttrsRspCmd::?relay`; Banked call to: zcl_SendDiscoverAttrsRspCmd
   \   0000E3   7405         MOV       A,#0x5
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
   4924            zcl_mem_free( pDiscoverRsp );
   \   0000E8                ; Setup parameters for call to function osal_mem_free
   \   0000E8   AA..         MOV       R2,?V0
   \   0000EA   AB..         MOV       R3,?V1
   \   0000EC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4925          
   4926            return;
   \                     ??zclProcessInDiscAttrsCmd_0:
   \   0000EF                REQUIRE ?Subroutine9
   \   0000EF                ; // Fall through to label ?Subroutine9
   4927          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   740E         MOV       A,#0xe
   \   000002   80..         SJMP      ??Subroutine292_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000003                REQUIRE ??Subroutine288_0
   \   000003                ; // Fall through to label ??Subroutine288_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000003                REQUIRE ??Subroutine289_0
   \   000003                ; // Fall through to label ??Subroutine289_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000003                REQUIRE ??Subroutine291_0
   \   000003                ; // Fall through to label ??Subroutine291_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_713:
   \   000003   F5..         MOV       ?V2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V3,A
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009   7406         MOV       A,#0x6
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003   7406         MOV       A,#0x6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   5401         ANL       A,#0x1
   \   000005   FC           MOV       R4,A
   \   000006   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000009   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00000C   7404         MOV       A,#0x4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   EF           MOV       A,R7
   \   000009   C3           CLR       C
   \   00000A   95..         SUBB      A,?V6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_748:
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V6,R1
   \   00000F   7E01         MOV       R6,#0x1
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   E9           MOV       A,R1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV       A,R6
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E5..         MOV       A,?V6
   \   00000B   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00000E   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V2,A
   \   000014   78..         MOV       R0,#?V2
   \   000016   22           RET
   4928          
   4929          /*********************************************************************
   4930           * @fn      zclProcessInDiscAttrsExtCmd
   4931           *
   4932           * @brief   Process the Discover Attributes Extended Command
   4933           *
   4934           * @param   pInMsg - incoming message to process
   4935           *
   4936           * @param   pDiscoverCmd - structure from requesting command
   4937           *
   4938           * @param   attrLenBuf - describes the amount of attributes to be processed
   4939           *
   4940           * @return  none
   4941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4942          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsExtCmd:
   4943          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine24 & 0xFFFF
   4944            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4945            uint8 discComplete = TRUE;
   4946            zclAttrRec_t attrRec;
   4947            uint16 attrID;
   4948            uint8 i;
   4949          
   4950              // Allocate space for the response command
   4951            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   4952                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   \                     ??CrossCallReturnLabel_28:
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   75..00       MOV       ?V1,#0x0
   \   000012   7402         MOV       A,#0x2
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?S_SHL
   \   000019   E5..         MOV       A,?V0
   \   00001B   2402         ADD       A,#0x2
   \   00001D   FA           MOV       R2,A
   \   00001E   E4           CLR       A
   \   00001F   35..         ADDC      A,?V1
   \   000021   12....       LCALL     ?Subroutine152 & 0xFFFF
   4953            if ( pDiscoverExtRsp == NULL )
   \                     ??CrossCallReturnLabel_393:
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_0 & 0xFFFF
   4954            {
   4955              return; // EMBEDDED RETURN
   4956            }
   4957          
   4958          
   4959            if ( numAttrs != 0 )
   \   000029   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000032   E5..         MOV       A,?V6
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_1 & 0xFFFF
   4960            {
   4961              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000039   7F00         MOV       R7,#0x0
   \   00003B   85..82       MOV       DPL,?V4
   \   00003E   85..83       MOV       DPH,?V5
   \   000041   12....       LCALL     ??Subroutine283_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_689:
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   4962              {
   4963                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_631:
   \   00004C   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00004F   12....       LCALL     ?XSTACK_DISP100_8
   \   000052   88..         MOV       ?V2,R0
   \   000054   89..         MOV       ?V3,R1
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?XSTACK_DISP100_8
   \   000060   88..         MOV       ?V2,R0
   \   000062   89..         MOV       ?V3,R1
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   7408         MOV       A,#0x8
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   E9           MOV       A,R1
   \   000075   6042         JZ        ??zclProcessInDiscAttrsExtCmd_2
   4964                {
   4965                  break; // Should not happen, as numAttrs already calculated
   4966                }
   4967          
   4968                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   \   000077   EF           MOV       A,R7
   \   000078   F5..         MOV       ?V2,A
   \   00007A   75..00       MOV       ?V3,#0x0
   \   00007D   7402         MOV       A,#0x2
   \   00007F   78..         MOV       R0,#?V2
   \   000081   12....       LCALL     ?S_SHL
   \   000084   E5..         MOV       A,?V0
   \   000086   25..         ADD       A,?V2
   \   000088   F8           MOV       R0,A
   \   000089   E5..         MOV       A,?V1
   \   00008B   35..         ADDC      A,?V3
   \   00008D   F9           MOV       R1,A
   \   00008E   7408         MOV       A,#0x8
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   12....       LCALL     ?Subroutine35 & 0xFFFF
   4969                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_744:
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ?Subroutine122 & 0xFFFF
   4970                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   \                     ??CrossCallReturnLabel_237:
   \   00009C   740B         MOV       A,#0xb
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   5407         ANL       A,#0x7
   \   0000A4   8882         MOV       DPL,R0
   \   0000A6   8983         MOV       DPH,R1
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   F0           MOVX      @DPTR,A
   4971              }
   \   0000AE   0F           INC       R7
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000B7   4093         JC        ??CrossCallReturnLabel_631
   4972          
   4973              // Are there more attributes to be discovered?
   4974              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsExtCmd_2:
   \   0000B9   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000BC   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BF   88..         MOV       ?V4,R0
   \   0000C1   89..         MOV       ?V5,R1
   \   0000C3   78..         MOV       R0,#?V4
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000CD   88..         MOV       ?V4,R0
   \   0000CF   89..         MOV       ?V5,R1
   \   0000D1   78..         MOV       R0,#?V4
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D6   7408         MOV       A,#0x8
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_722:
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1   E9           MOV       A,R1
   \   0000E2   6002         JZ        ??zclProcessInDiscAttrsExtCmd_1
   4975              {
   4976                discComplete = FALSE;
   \   0000E4   7E00         MOV       R6,#0x0
   4977              }
   4978            }
   4979          
   4980            pDiscoverExtRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsExtCmd_1:
   \   0000E6   12....       LCALL     ?Subroutine12 & 0xFFFF
   4981            pDiscoverExtRsp->numAttr = numAttrs;
   4982          
   4983            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4984                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   4985                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_6:
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EC   75..01       MOV       ?V2,#0x1
   \   0000EF   78..         MOV       R0,#?V2
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F4   7406         MOV       A,#0x6
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_718:
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FF   78..         MOV       R0,#?V0
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000104   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000107   12....       LCALL     `??zcl_SendDiscoverAttrsExtRsp::?relay`; Banked call to: zcl_SendDiscoverAttrsExtRsp
   \   00010A   7405         MOV       A,#0x5
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
   4986          
   4987            zcl_mem_free( pDiscoverExtRsp );
   \   00010F                ; Setup parameters for call to function osal_mem_free
   \   00010F   AA..         MOV       R2,?V0
   \   000111   AB..         MOV       R3,?V1
   \   000113   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4988          
   4989            return;
   \                     ??zclProcessInDiscAttrsExtCmd_0:
   \   000116   02....       LJMP      ?Subroutine9 & 0xFFFF
   4990          }
   4991          
   4992          /*********************************************************************
   4993           * @fn      zclProcessInDiscCmd
   4994           *
   4995           * @brief   Process the "Profile" Discover Command
   4996           *
   4997           * @param   pInMsg - incoming message to process
   4998           *
   4999           * @return  TRUE if command processed. FALSE, otherwise.
   5000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5001          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscCmd:
   5002          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine127 & 0xFFFF
   5003            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   5004            zclDiscoverCmdsCmdRsp_t cmdRsp;
   5005            ZStatus_t status;
   5006            zclCommandRec_t cmdRec;
   5007            uint8 cmdID;
   5008            uint8 i;
   5009            uint8 j;
   5010          
   5011            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_680:
   \   00000D   7401         MOV       A,#0x1
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   5012          
   5013            // Find out the number of commands supported within the specified range
   5014            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   \                     ??CrossCallReturnLabel_632:
   \   000015   75..00       MOV       ?V0,#0x0
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000020   800A         SJMP      ??zclProcessInDiscCmd_0
   \                     ??zclProcessInDiscCmd_1:
   \   000022   05..         INC       ?V0
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   04           INC       A
   \                     ??zclProcessInDiscCmd_0:
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   7401         MOV       A,#0x1
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ??Subroutine295_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_768:
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ??Subroutine297_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_776:
   \   000039   5026         JNC       ??zclProcessInDiscCmd_2
   5015            {
   5016              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \   00003B   12....       LCALL     ?Subroutine130 & 0xFFFF
   5017              {
   5018                break;  // Command not supported
   5019              }
   5020            }
   \                     ??CrossCallReturnLabel_248:
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V4,R0
   \   000043   89..         MOV       ?V5,R1
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP100_8
   \   00004F   88..         MOV       ?V4,R0
   \   000051   89..         MOV       ?V5,R1
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   \   00005F   70C1         JNZ       ??zclProcessInDiscCmd_1
   5021          
   5022            // Allocate space for the response command
   5023            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   \                     ??zclProcessInDiscCmd_2:
   \   000061                ; Setup parameters for call to function osal_mem_alloc
   \   000061   AA..         MOV       R2,?V0
   \   000063   7B00         MOV       R3,#0x0
   \   000065   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000068   8B..         MOV       ?V3,R3
   \   00006A   A9..         MOV       R1,?V3
   \   00006C   7406         MOV       A,#0x6
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   5024          
   5025            if ( cmdRsp.pCmdID == NULL )
   \                     ??CrossCallReturnLabel_485:
   \   000074   EA           MOV       A,R2
   \   000075   49           ORL       A,R1
   \   000076   7003         JNZ       $+5
   \   000078   02....       LJMP      ??zclProcessInDiscCmd_3 & 0xFFFF
   5026            {
   5027              return FALSE; // EMBEDDED RETURN
   5028            }
   5029          
   5030            if ( i != 0 )
   \   00007B   E5..         MOV       A,?V0
   \   00007D   6061         JZ        ??zclProcessInDiscCmd_4
   5031            {
   5032              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   \   00007F   75..00       MOV       ?V6,#0x0
   \   000082   7401         MOV       A,#0x1
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00008A   F0           MOVX      @DPTR,A
   5033              {
   5034                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_5:
   \   00008B   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00008E   12....       LCALL     ?XSTACK_DISP100_8
   \   000091   88..         MOV       ?V4,R0
   \   000093   89..         MOV       ?V5,R1
   \   000095   78..         MOV       R0,#?V4
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009A   7402         MOV       A,#0x2
   \   00009C   12....       LCALL     ?XSTACK_DISP100_8
   \   00009F   88..         MOV       ?V4,R0
   \   0000A1   89..         MOV       ?V5,R1
   \   0000A3   78..         MOV       R0,#?V4
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV       A,R1
   \   0000AF   602F         JZ        ??zclProcessInDiscCmd_4
   5035                {
   5036                  break; // Attribute not supported
   5037                }
   5038          
   5039                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   \   0000B1   740A         MOV       A,#0xa
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   C0E0         PUSH      A
   \   0000B9   A8..         MOV       R0,?V6
   \   0000BB   7406         MOV       A,#0x6
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   28           ADD       A,R0
   \   0000C2   FA           MOV       R2,A
   \   0000C3   A3           INC       DPTR
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   3400         ADDC      A,#0x0
   \   0000C7   8A82         MOV       DPL,R2
   \   0000C9   F583         MOV       DPH,A
   \   0000CB   D0E0         POP       A
   \   0000CD   F0           MOVX      @DPTR,A
   5040              }
   \   0000CE   05..         INC       ?V6
   \   0000D0   85..82       MOV       DPL,?XSP + 0
   \   0000D3   85..83       MOV       DPH,?XSP + 1
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   04           INC       A
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   E5..         MOV       A,?V6
   \   0000DB   C3           CLR       C
   \   0000DC   95..         SUBB      A,?V0
   \   0000DE   40AB         JC        ??zclProcessInDiscCmd_5
   5041            }
   5042          
   5043            // Are there more commands to be discovered?
   5044            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_4:
   \   0000E0   8E82         MOV       DPL,R6
   \   0000E2   8F83         MOV       DPH,R7
   \   0000E4   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   0000E7                ; Setup parameters for call to function zclFindNextCmdRec
   \   0000E7   7408         MOV       A,#0x8
   \   0000E9   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EC   88..         MOV       ?V2,R0
   \   0000EE   89..         MOV       ?V3,R1
   \   0000F0   78..         MOV       R0,#?V2
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   7402         MOV       A,#0x2
   \   0000F7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FA   88..         MOV       ?V2,R0
   \   0000FC   89..         MOV       ?V3,R1
   \   0000FE   78..         MOV       R0,#?V2
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000106   FC           MOV       R4,A
   \   000107   85..82       MOV       DPL,?V0
   \   00010A   85..83       MOV       DPH,?V1
   \   00010D   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000110   12....       LCALL     ??Subroutine276_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000113   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   000116   7404         MOV       A,#0x4
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011B   E9           MOV       A,R1
   \   00011C   6008         JZ        ??zclProcessInDiscCmd_6
   5045            {
   5046              cmdRsp.discComplete = FALSE;
   \   00011E   7403         MOV       A,#0x3
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E4           CLR       A
   \   000124   8007         SJMP      ??zclProcessInDiscCmd_7
   5047            }
   5048            else
   5049            {
   5050              cmdRsp.discComplete = TRUE;
   \                     ??zclProcessInDiscCmd_6:
   \   000126   7403         MOV       A,#0x3
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   7401         MOV       A,#0x1
   5051            }
   \                     ??zclProcessInDiscCmd_7:
   \   00012D   12....       LCALL     ?Subroutine47 & 0xFFFF
   5052          
   5053            // pass the command requested
   5054            cmdRsp.cmdType = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_67:
   \   000130   A3           INC       DPTR
   \   000131   A3           INC       DPTR
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   E0           MOVX      A,@DPTR
   \   000135   C0E0         PUSH      A
   \   000137   7404         MOV       A,#0x4
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   D0E0         POP       A
   \   00013E   F0           MOVX      @DPTR,A
   5055          
   5056            // store number of commands returned
   5057            cmdRsp.numCmd = j;
   \   00013F   7405         MOV       A,#0x5
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   E5..         MOV       A,?V6
   \   000146   12....       LCALL     ??Subroutine298_0 & 0xFFFF
   5058          
   5059            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5060                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   5061                                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_782:
   \   000149   F5..         MOV       ?V0,A
   \   00014B   A3           INC       DPTR
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   F5..         MOV       ?V1,A
   \   00014F                ; Setup parameters for call to function zcl_SendDiscoverCmdsRspCmd
   \   00014F   8E82         MOV       DPL,R6
   \   000151   8F83         MOV       DPH,R7
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015F   75..01       MOV       ?V2,#0x1
   \   000162   78..         MOV       R0,#?V2
   \   000164   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000167   8E82         MOV       DPL,R6
   \   000169   8F83         MOV       DPH,R7
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   12....       LCALL     ??Subroutine288_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_716:
   \   000170   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000173   7406         MOV       A,#0x6
   \   000175   12....       LCALL     ?XSTACK_DISP100_8
   \   000178   88..         MOV       ?V2,R0
   \   00017A   89..         MOV       ?V3,R1
   \   00017C   78..         MOV       R0,#?V2
   \   00017E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000181   85..82       MOV       DPL,?V0
   \   000184   85..83       MOV       DPH,?V1
   \   000187   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00018A   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   00018D   12....       LCALL     `??zcl_SendDiscoverCmdsRspCmd::?relay`; Banked call to: zcl_SendDiscoverCmdsRspCmd
   \   000190   7405         MOV       A,#0x5
   \   000192   12....       LCALL     ?DEALLOC_XSTACK8
   \   000195   E9           MOV       A,R1
   \   000196   FE           MOV       R6,A
   5062          
   5063            zcl_mem_free( cmdRsp.pCmdID );
   \   000197                ; Setup parameters for call to function osal_mem_free
   \   000197   7406         MOV       A,#0x6
   \   000199   12....       LCALL     ?XSTACK_DISP0_8
   \   00019C   12....       LCALL     ?Subroutine95 & 0xFFFF
   5064          
   5065            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_191:
   \   00019F   EE           MOV       A,R6
   \   0001A0   7004         JNZ       ??zclProcessInDiscCmd_3
   5066            {
   5067              return TRUE;
   \   0001A2   7901         MOV       R1,#0x1
   \   0001A4   8002         SJMP      ??zclProcessInDiscCmd_8
   5068            }
   5069            else
   5070            {
   5071              return FALSE;
   \                     ??zclProcessInDiscCmd_3:
   \   0001A6   7900         MOV       R1,#0x0
   5072            }
   \                     ??zclProcessInDiscCmd_8:
   \   0001A8   02....       LJMP      ?Subroutine6 & 0xFFFF
   5073          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B                ; Setup parameters for call to function zclFindNextCmdRec
   \   00000B                ; Setup parameters for call to function zclFindNextCmdRec
   \   00000B   7408         MOV       A,#0x8
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ??Subroutine286_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_710:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000003   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_730:
   \   000006   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   000009   7404         MOV       A,#0x4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine223 & 0xFFFF
   \                     ??CrossCallReturnLabel_724:
   \   000009   FD           MOV       R5,A
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsgExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsgExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_addExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_addExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_HandleExternal::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_HandleExternal

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getRawAFMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getRawAFMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getParsedTransSeqNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getParsedTransSeqNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerPlugin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerCmdList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerCmdList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerAttrList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerClusterOptionList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerValidateAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_DeviceOperational::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendReadRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExtRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExtRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ProcessMessageMSG::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclBuildHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAuthorizeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAuthorizeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSetSecurityOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSerializeData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetDataTypeLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLengthUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLengthUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclAuthorizeWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAuthorizeWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReportCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsExtRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsExtRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclRevertWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclRevertWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsExtCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsExtCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscCmd
   5074          
   5075          #endif // ZCL_DISCOVER
   5076          
   5077          
   5078          /*********************************************************************
   5079          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     29   zclAuthorizeWrite
        0     14   -> zclGetAuthorizeCB
      1     36   zclBuildHdr
      2     52   zclFindAttrRec
        0     14   -> zclFindAttrRecsList
      2     16   zclFindAttrRecsList
      0     19   zclFindClusterOption
      2     14   zclFindCmdRec
        0     12   -> zclFindCmdRecsList
      2     14   zclFindCmdRecsList
      0     49   zclFindNextAttrRec
        0     16   -> zclFindAttrRecsList
      1     45   zclFindNextCmdRec
        0     14   -> zclFindCmdRecsList
      0     45   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     58   zclGetAttrDataLengthUsingCB
        0     18   -> zclGetReadWriteCB
      0     40   zclGetAuthorizeCB
        0     10   -> zclFindAttrRecsList
      0     47   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0      9   zclGetDataTypeLength
      0     28   zclGetReadWriteCB
        0     10   -> zclFindAttrRecsList
      1     49   zclParseHdr
        0     12   -> osal_memset
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     10   zclParseInDiscAttrsCmd
        0     10   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsExtRspCmd
        0     14   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsRspCmd
        0     14   -> osal_mem_alloc
      1     10   zclParseInDiscCmdsCmd
        0     10   -> osal_mem_alloc
      1     12   zclParseInDiscCmdsRspCmd
        0     12   -> osal_mem_alloc
      1     12   zclParseInReadCmd
        0     12   -> osal_mem_alloc
      1     25   zclParseInReadRspCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInReportCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInWriteCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     16   zclParseInWriteRspCmd
        0     16   -> osal_mem_alloc
      0     30   zclProcessInDiscAttrs
        0     30   -> zclFindNextAttrRec
        0     26   -> zclProcessInDiscAttrsCmd
        0     26   -> zclProcessInDiscAttrsExtCmd
      1     60   zclProcessInDiscAttrsCmd
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     33   -> zclFindNextAttrRec
        0     34   -> zcl_SendDiscoverAttrsRspCmd
      1     60   zclProcessInDiscAttrsExtCmd
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     33   -> zclFindNextAttrRec
        0     34   -> zcl_SendDiscoverAttrsExtRsp
      1     32   zclProcessInDiscCmd
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     31   -> zclFindNextCmdRec
        0     32   -> zcl_SendDiscoverCmdsRspCmd
      1     35   zclProcessInReadCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     32   -> zclFindAttrRec
        0     30   -> zclGetAuthorizeCB
        0     35   -> zcl_SendReadRsp
      1     37   zclProcessInWriteCmd
        0     32   -> bdb_ZclIdentifyCmdInd
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     35   -> osal_memcpy
        0     34   -> zclFindAttrRec
        0     34   -> zclWriteAttrData
        0     34   -> zclWriteAttrDataUsingCB
        0     37   -> zcl_SendWriteRsp
      1     41   zclProcessInWriteUndividedCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     38   -> zclFindAttrRec
        0     36   -> zclGetAttrDataLength
        0     36   -> zclGetAttrDataLengthUsingCB
        0     38   -> zclReadAttrData
        0     40   -> zclReadAttrDataUsingCB
        0     38   -> zclRevertWriteUndividedCmd
        0     38   -> zclWriteAttrData
        0     38   -> zclWriteAttrDataUsingCB
        0     41   -> zcl_SendWriteRsp
      0     55   zclReadAttrData
        0     17   -> osal_memcpy
        0     14   -> zclGetAttrDataLength
      0     60   zclReadAttrDataUsingCB
        0     16   -> zclGetReadWriteCB
      0     68   zclRevertWriteUndividedCmd
        0     30   -> osal_memcpy
        0     29   -> zclFindAttrRec
        0     27   -> zclGetAttrDataLength
        0     29   -> zclWriteAttrDataUsingCB
      1     41   zclSerializeData
        0     19   -> osal_buffer_uint32
        0     18   -> osal_memcpy
      0     47   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     56   zclWriteAttrData
        0     18   -> osal_memcpy
        0     15   -> zclAuthorizeWrite
        0     15   -> zclGetAttrDataLength
      0     56   zclWriteAttrDataUsingCB
        0     14   -> zclAuthorizeWrite
        0     14   -> zclGetReadWriteCB
      0     62   zcl_DeviceOperational
        0     23   -> zclFindAttrRec
        0     23   -> zclReadAttrData
      1     12   zcl_HandleExternal
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1     62   zcl_ProcessMessageMSG
        0     37   -> afFindEndPointDesc
        0     37   -> osal_mem_free
        0     37   -> zclGetClusterOption
        0     37   -> zclParseHdr
        0     37   -> zclSetSecurityOption
        0     39   -> zcl_DeviceOperational
        0     44   -> zcl_SendDefaultRspCmd
      0     30   zcl_ReadAttrData
        0     24   -> zclFindAttrRec
        0     24   -> zclReadAttrData
        0     26   -> zclReadAttrDataUsingCB
      1     69   zcl_SendCommand
        0     36   -> AF_DataRequest
        0     27   -> afFindEndPointDesc
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     27   -> osal_memset
        0     27   -> zclBuildHdr
        0     27   -> zclGetClusterOption
        0     29   -> zcl_DeviceOperational
      1     67   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     32   zcl_SendDiscoverAttrsCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     27   -> zcl_SendCommand
      1     29   zcl_SendDiscoverAttrsExt
        0     24   -> zcl_SendCommand
      1     66   zcl_SendDiscoverAttrsExtRsp
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     66   zcl_SendDiscoverAttrsRspCmd
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     33   zcl_SendDiscoverCmdsCmd
        0     27   -> zcl_SendCommand
      1     63   zcl_SendDiscoverCmdsRspCmd
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     35   zcl_SendRead
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     30   -> zcl_SendCommand
      1     68   zcl_SendReadRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclGetAttrDataLengthUsingCB
        0     26   -> zclReadAttrDataUsingCB
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     38   zcl_SendWriteRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> zclGetAttrDataLength
        0     21   -> zclSerializeData
        0     32   -> zcl_SendCommand
      1     71   zcl_SendWriteRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     30   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free
      0     29   zcl_event_loop
        0     18   -> bdb_getZCLFrameCounter
        0     18   -> gp_GetHeadNotificationMsg
        0     18   -> gp_GetPHeadNotification
        0     18   -> gp_NotificationMsgClean
        0     21   -> osal_memcpy
        0     18   -> osal_msg_deallocate
        0     18   -> osal_msg_receive
        0     18   -> osal_msg_send
        0     21   -> osal_revmemcpy
        0     22   -> osal_start_timerEx
        0     18   -> zcl_ProcessMessageMSG
        0     29   -> zcl_SendCommand
        0     18   -> zcl_getExternalFoundationHandler
      2     18   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2      0   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerCmdList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine227_0
      16  ??Subroutine228_0
      10  ??Subroutine229_0
       1  ??Subroutine230_0
       6  ??Subroutine231_0
      10  ??Subroutine232_0
       6  ??Subroutine233_0
       6  ??Subroutine234_0
       6  ??Subroutine235_0
       6  ??Subroutine236_0
       2  ??Subroutine237_0
       4  ??Subroutine238_0
       6  ??Subroutine239_0
       3  ??Subroutine240_0
      11  ??Subroutine241_0
       6  ??Subroutine242_0
       5  ??Subroutine243_0
       2  ??Subroutine244_0
       3  ??Subroutine245_0
       5  ??Subroutine246_0
      12  ??Subroutine247_0
       4  ??Subroutine248_0
       5  ??Subroutine249_0
       5  ??Subroutine250_0
       5  ??Subroutine251_0
      10  ??Subroutine252_0
       6  ??Subroutine253_0
       6  ??Subroutine254_0
       9  ??Subroutine255_0
       5  ??Subroutine256_0
       2  ??Subroutine257_0
       1  ??Subroutine258_0
       4  ??Subroutine259_0
       2  ??Subroutine260_0
       6  ??Subroutine261_0
       6  ??Subroutine262_0
       7  ??Subroutine263_0
       4  ??Subroutine264_0
      15  ??Subroutine265_0
      17  ??Subroutine266_0
      18  ??Subroutine267_0
       9  ??Subroutine268_0
      20  ??Subroutine269_0
       4  ??Subroutine270_0
       1  ??Subroutine271_0
       5  ??Subroutine272_0
       6  ??Subroutine273_0
       6  ??Subroutine274_0
       4  ??Subroutine275_0
      12  ??Subroutine276_0
       5  ??Subroutine277_0
       5  ??Subroutine278_0
       8  ??Subroutine279_0
       8  ??Subroutine280_0
       5  ??Subroutine281_0
       2  ??Subroutine282_0
       4  ??Subroutine283_0
       6  ??Subroutine284_0
       4  ??Subroutine285_0
       4  ??Subroutine286_0
       6  ??Subroutine287_0
       8  ??Subroutine288_0
      12  ??Subroutine289_0
      21  ??Subroutine290_0
       6  ??Subroutine291_0
       3  ??Subroutine292_0
       5  ??Subroutine293_0
       5  ??Subroutine294_0
       3  ??Subroutine295_0
       6  ??Subroutine296_0
       7  ??Subroutine297_0
       5  ??Subroutine298_0
       7  ?Subroutine0
       8  ?Subroutine1
      44  ?Subroutine10
      21  ?Subroutine100
       7  ?Subroutine101
       4  ?Subroutine102
       6  ?Subroutine103
       6  ?Subroutine104
      11  ?Subroutine105
       1  ?Subroutine106
       4  ?Subroutine107
      10  ?Subroutine108
       1  ?Subroutine109
      38  ?Subroutine11
       6  ?Subroutine110
      10  ?Subroutine111
      10  ?Subroutine112
       6  ?Subroutine113
       6  ?Subroutine114
       8  ?Subroutine115
       6  ?Subroutine116
       7  ?Subroutine117
       2  ?Subroutine118
      12  ?Subroutine119
      23  ?Subroutine12
      14  ?Subroutine120
       6  ?Subroutine121
       8  ?Subroutine122
      11  ?Subroutine123
       4  ?Subroutine124
       4  ?Subroutine125
       4  ?Subroutine126
       4  ?Subroutine127
       8  ?Subroutine128
       2  ?Subroutine129
      24  ?Subroutine13
      14  ?Subroutine130
       4  ?Subroutine131
       4  ?Subroutine132
       2  ?Subroutine133
       5  ?Subroutine134
      14  ?Subroutine135
       3  ?Subroutine136
      19  ?Subroutine137
       8  ?Subroutine138
       4  ?Subroutine139
      12  ?Subroutine14
       9  ?Subroutine140
       5  ?Subroutine141
       4  ?Subroutine142
       3  ?Subroutine143
      14  ?Subroutine144
      12  ?Subroutine145
      16  ?Subroutine146
       6  ?Subroutine147
       1  ?Subroutine148
      12  ?Subroutine149
      20  ?Subroutine15
      10  ?Subroutine150
       1  ?Subroutine151
       1  ?Subroutine152
       1  ?Subroutine153
       2  ?Subroutine154
       6  ?Subroutine155
      10  ?Subroutine156
       4  ?Subroutine157
      12  ?Subroutine158
       3  ?Subroutine159
       4  ?Subroutine16
       9  ?Subroutine160
       9  ?Subroutine161
      21  ?Subroutine162
       1  ?Subroutine163
       9  ?Subroutine164
       2  ?Subroutine165
      11  ?Subroutine166
      12  ?Subroutine167
      10  ?Subroutine168
      10  ?Subroutine169
      10  ?Subroutine17
       5  ?Subroutine170
       3  ?Subroutine171
       9  ?Subroutine172
       8  ?Subroutine173
       6  ?Subroutine174
       9  ?Subroutine175
       5  ?Subroutine176
       1  ?Subroutine177
       6  ?Subroutine178
       1  ?Subroutine179
       6  ?Subroutine18
      30  ?Subroutine180
      23  ?Subroutine181
      22  ?Subroutine182
      21  ?Subroutine183
       6  ?Subroutine184
       6  ?Subroutine185
       8  ?Subroutine186
      10  ?Subroutine187
       9  ?Subroutine188
       8  ?Subroutine189
      15  ?Subroutine19
       6  ?Subroutine190
      13  ?Subroutine191
       8  ?Subroutine192
      10  ?Subroutine193
       4  ?Subroutine194
       4  ?Subroutine195
       5  ?Subroutine196
      11  ?Subroutine197
      11  ?Subroutine198
       4  ?Subroutine199
       3  ?Subroutine2
       4  ?Subroutine20
       4  ?Subroutine200
       8  ?Subroutine201
      16  ?Subroutine202
       6  ?Subroutine203
       7  ?Subroutine204
      10  ?Subroutine205
       6  ?Subroutine206
       7  ?Subroutine207
       4  ?Subroutine208
       9  ?Subroutine209
      17  ?Subroutine21
      10  ?Subroutine210
       9  ?Subroutine211
       6  ?Subroutine212
       8  ?Subroutine213
       2  ?Subroutine214
       5  ?Subroutine215
      14  ?Subroutine216
       2  ?Subroutine217
       6  ?Subroutine218
       6  ?Subroutine219
       3  ?Subroutine22
      12  ?Subroutine220
       6  ?Subroutine221
       4  ?Subroutine222
       6  ?Subroutine223
       6  ?Subroutine224
       9  ?Subroutine225
       7  ?Subroutine226
      11  ?Subroutine23
      19  ?Subroutine24
       9  ?Subroutine25
       6  ?Subroutine26
      11  ?Subroutine27
       2  ?Subroutine28
       8  ?Subroutine29
       3  ?Subroutine3
       8  ?Subroutine30
       7  ?Subroutine31
      12  ?Subroutine32
      13  ?Subroutine33
       6  ?Subroutine34
       3  ?Subroutine35
       6  ?Subroutine36
       6  ?Subroutine37
       7  ?Subroutine38
      11  ?Subroutine39
       5  ?Subroutine4
       8  ?Subroutine40
       2  ?Subroutine41
       5  ?Subroutine42
       5  ?Subroutine43
       8  ?Subroutine44
       1  ?Subroutine45
      18  ?Subroutine46
       6  ?Subroutine47
       4  ?Subroutine48
       7  ?Subroutine49
       3  ?Subroutine5
      25  ?Subroutine50
       3  ?Subroutine51
       3  ?Subroutine52
       5  ?Subroutine53
      12  ?Subroutine54
       6  ?Subroutine55
      15  ?Subroutine56
      10  ?Subroutine57
      12  ?Subroutine58
       3  ?Subroutine59
       2  ?Subroutine6
       6  ?Subroutine60
       7  ?Subroutine61
       6  ?Subroutine62
       9  ?Subroutine63
      19  ?Subroutine64
      10  ?Subroutine65
       9  ?Subroutine66
       8  ?Subroutine67
      18  ?Subroutine68
       4  ?Subroutine69
       7  ?Subroutine7
       4  ?Subroutine70
      10  ?Subroutine71
       4  ?Subroutine72
       4  ?Subroutine73
       6  ?Subroutine74
       4  ?Subroutine75
      12  ?Subroutine76
       4  ?Subroutine77
      10  ?Subroutine78
      11  ?Subroutine79
       5  ?Subroutine8
       9  ?Subroutine80
       8  ?Subroutine81
       6  ?Subroutine82
      10  ?Subroutine83
       6  ?Subroutine84
       6  ?Subroutine85
       4  ?Subroutine86
       4  ?Subroutine87
       8  ?Subroutine88
      10  ?Subroutine89
       4  ?Subroutine9
      18  ?Subroutine90
       9  ?Subroutine91
       4  ?Subroutine92
       6  ?Subroutine93
      14  ?Subroutine94
       7  ?Subroutine95
       6  ?Subroutine96
      20  ?Subroutine97
      14  ?Subroutine98
       3  ?Subroutine99
       4  __Constant_32
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  gpCmdList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
      52  zclAuthorizeWrite
       6  zclAuthorizeWrite::?relay
     101  zclBuildHdr
       6  zclBuildHdr::?relay
      92  zclCmdTable
     131  zclFindAttrRec
       6  zclFindAttrRec::?relay
      37  zclFindAttrRecsList
       6  zclFindAttrRecsList::?relay
     102  zclFindClusterOption
       6  zclFindClusterOption::?relay
     120  zclFindCmdRec
       6  zclFindCmdRec::?relay
      37  zclFindCmdRecsList
       6  zclFindCmdRecsList::?relay
     207  zclFindNextAttrRec
       6  zclFindNextAttrRec::?relay
     269  zclFindNextCmdRec
       6  zclFindNextCmdRec::?relay
      63  zclGetAttrDataLength
       6  zclGetAttrDataLength::?relay
      92  zclGetAttrDataLengthUsingCB
       6  zclGetAttrDataLengthUsingCB::?relay
      23  zclGetAuthorizeCB
       6  zclGetAuthorizeCB::?relay
      28  zclGetClusterOption
       6  zclGetClusterOption::?relay
     166  zclGetDataTypeLength
       6  zclGetDataTypeLength::?relay
      22  zclGetReadWriteCB
       6  zclGetReadWriteCB::?relay
     216  zclParseHdr
       6  zclParseHdr::?relay
      16  zclParseInDefaultRspCmd
       6  zclParseInDefaultRspCmd::?relay
      44  zclParseInDiscAttrsCmd
       6  zclParseInDiscAttrsCmd::?relay
     128  zclParseInDiscAttrsExtRspCmd
       6  zclParseInDiscAttrsExtRspCmd::?relay
      88  zclParseInDiscAttrsRspCmd
       6  zclParseInDiscAttrsRspCmd::?relay
      16  zclParseInDiscCmdsCmd
       6  zclParseInDiscCmdsCmd::?relay
      90  zclParseInDiscCmdsRspCmd
       6  zclParseInDiscCmdsRspCmd::?relay
     100  zclParseInReadCmd
       6  zclParseInReadCmd::?relay
     311  zclParseInReadRspCmd
       6  zclParseInReadRspCmd::?relay
     179  zclParseInReportCmd
       6  zclParseInReportCmd::?relay
     179  zclParseInWriteCmd
       6  zclParseInWriteCmd::?relay
     144  zclParseInWriteRspCmd
       6  zclParseInWriteRspCmd::?relay
     170  zclProcessInDiscAttrs
       6  zclProcessInDiscAttrs::?relay
     239  zclProcessInDiscAttrsCmd
       6  zclProcessInDiscAttrsCmd::?relay
     281  zclProcessInDiscAttrsExtCmd
       6  zclProcessInDiscAttrsExtCmd::?relay
     427  zclProcessInDiscCmd
       6  zclProcessInDiscCmd::?relay
     459  zclProcessInReadCmd
       6  zclProcessInReadCmd::?relay
     567  zclProcessInWriteCmd
       6  zclProcessInWriteCmd::?relay
     880  zclProcessInWriteUndividedCmd
       6  zclProcessInWriteUndividedCmd::?relay
      86  zclReadAttrData
       6  zclReadAttrData::?relay
      92  zclReadAttrDataUsingCB
       6  zclReadAttrDataUsingCB::?relay
     215  zclRevertWriteUndividedCmd
       6  zclRevertWriteUndividedCmd::?relay
     368  zclSerializeData
       6  zclSerializeData::?relay
      41  zclSetSecurityOption
       6  zclSetSecurityOption::?relay
     130  zclWriteAttrData
       6  zclWriteAttrData::?relay
     100  zclWriteAttrDataUsingCB
       6  zclWriteAttrDataUsingCB::?relay
     118  zcl_DeviceOperational
       6  zcl_DeviceOperational::?relay
     167  zcl_HandleExternal
       6  zcl_HandleExternal::?relay
       1  zcl_InSeqNum
      12  zcl_Init
       6  zcl_Init::?relay
    1051  zcl_ProcessMessageMSG
       6  zcl_ProcessMessageMSG::?relay
     129  zcl_ReadAttrData
       6  zcl_ReadAttrData::?relay
     484  zcl_SendCommand
       6  zcl_SendCommand::?relay
     114  zcl_SendDefaultRspCmd
       6  zcl_SendDefaultRspCmd::?relay
     169  zcl_SendDiscoverAttrsCmd
       6  zcl_SendDiscoverAttrsCmd::?relay
     126  zcl_SendDiscoverAttrsExt
       6  zcl_SendDiscoverAttrsExt::?relay
     269  zcl_SendDiscoverAttrsExtRsp
       6  zcl_SendDiscoverAttrsExtRsp::?relay
     227  zcl_SendDiscoverAttrsRspCmd
       6  zcl_SendDiscoverAttrsRspCmd::?relay
     223  zcl_SendDiscoverCmdsCmd
       6  zcl_SendDiscoverCmdsCmd::?relay
     309  zcl_SendDiscoverCmdsRspCmd
       6  zcl_SendDiscoverCmdsRspCmd::?relay
     230  zcl_SendRead
       6  zcl_SendRead::?relay
     458  zcl_SendReadRsp
       6  zcl_SendReadRsp::?relay
     275  zcl_SendWriteRequest
       6  zcl_SendWriteRequest::?relay
     259  zcl_SendWriteRsp
       6  zcl_SendWriteRsp::?relay
       1  zcl_TaskID
       1  zcl_TransID
       2  zcl_ValidateAttrDataCB
     139  zcl_addExternalFoundationHandler
       6  zcl_addExternalFoundationHandler::?relay
     386  zcl_event_loop
       6  zcl_event_loop::?relay
      60  zcl_getExternalFoundationHandler
       6  zcl_getExternalFoundationHandler::?relay
       9  zcl_getParsedTransSeqNum
       6  zcl_getParsedTransSeqNum::?relay
      12  zcl_getRawAFMsg
       6  zcl_getRawAFMsg::?relay
      91  zcl_registerAttrList
       6  zcl_registerAttrList::?relay
      51  zcl_registerClusterOptionList
       6  zcl_registerClusterOptionList::?relay
      51  zcl_registerCmdList
       6  zcl_registerCmdList::?relay
      10  zcl_registerForMsg
       6  zcl_registerForMsg::?relay
       8  zcl_registerForMsgExt
       6  zcl_registerForMsgExt::?relay
      90  zcl_registerPlugin
       6  zcl_registerPlugin::?relay
      47  zcl_registerReadWriteCB
       6  zcl_registerReadWriteCB::?relay
      15  zcl_registerValidateAttrData
       6  zcl_registerValidateAttrData::?relay

 
 14 965 bytes in segment BANKED_CODE
    426 bytes in segment BANK_RELAYS
     92 bytes in segment CODE_C
      4 bytes in segment XDATA_ROM_C
     18 bytes in segment XDATA_Z
 
    518 bytes of CODE     memory
      0 bytes of CONST    memory (+ 4 bytes shared)
 14 965 bytes of HUGECODE memory
     18 bytes of XDATA    memory

Errors: none
Warnings: none
