###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               08/Feb/2022  22:10:08
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\bdb\bdb_FindingAndBinding.c
#    Command line       =  
#        -f C:\usertemp\AppData\Local\Temp\EW6C2A.tmp ("I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Components\stack\bdb\bdb_FindingAndBinding.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORT_DESTINATION_DEVICE -D
#        ZCL_REPORT -D HAL_LED=TRUE -D HAL_KEY=TRUE -D ISR_KEYINTERRUPT -D
#        HAL_UART=TRUE -D INT_HEAP_LEN=2300 -D HAL_LCD=TRUE -D
#        xHAL_LCD_OLED12864 -D HAL_ADC=TRUE -D HAL_UART=TRUE -D
#        INT_HEAP_LEN=2048 -lC "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\"
#        -I "I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\bdb_FindingAndBinding.lst
#    Object file        =  
#        I:\ZigBee3.0\Zigbee3.0
#        20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\bdb_FindingAndBinding.r51
#
###############################################################################

I:\ZigBee3.0\Zigbee3.0 20211214\1.协议栈工作流程和无线收发控制LED\Z-Stack 3.0.1\Components\stack\bdb\bdb_FindingAndBinding.c
      1          /**************************************************************************************************
      2            Filename:       bdb_FindingAndBinding.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDObject.h"
     46          #include "bdb_interface.h"
     47          #include "AddrMgr.h"
     48             
     49          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
     50             
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          
     56          
     57             
     58          /*********************************************************************
     59           * CONSTANTS
     60           */
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64           
     65           
     66          /*********************************************************************
     67           * GLOBAL VARIABLES
     68           */
     69          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     70          uint8 grpName[6] = {'G','r','o','u','p','\0'};
   \                     grpName:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for grpName>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          bdbGCB_IdentifyTimeChange_t      pfnIdentifyTimeChangeCB = NULL; 
   \                     pfnIdentifyTimeChangeCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          bdbGCB_BindNotification_t        pfnBindNotificationCB = NULL;
   \                     pfnBindNotificationCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     73          
     74          /*********************************************************************
     75           * EXTERNAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * EXTERNAL FUNCTIONS
     80           */
     81          
     82          
     83          
     84          /*********************************************************************
     85           * LOCAL VARIABLES
     86           */
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          SimpleDescriptionFormat_t  bdb_FindingBindingTargetSimpleDesc;
   \                     bdb_FindingBindingTargetSimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     89          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          uint8 bdbIndentifyActiveEndpoint  = 0xFF;
   \                     bdbIndentifyActiveEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for bdbIndentifyActiveEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
     91          
     92          //Your JOB:
     93          //Remove the clusters that your application do not use. This will save some flash and processing
     94          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t bdb_ZclType1Clusters[] =
   \                     bdb_ZclType1Clusters:
   \   000000   0500         DW 5
   \   000002   0600         DW 6
   \   000004   0800         DW 8
   \   000006   0900         DW 9
   \   000008   1600         DW 22
   \   00000A   0201         DW 258
   \   00000C   0202         DW 514
   \   00000E   0302         DW 515
   \   000010   0003         DW 768
   \   000012   0103         DW 769
   \   000014   0105         DW 1281
   \   000016   0205         DW 1282
   \   000018   0006         DW 1536
   \   00001A   0106         DW 1537
   \   00001C   040B         DW 2820
   \   00001E   1406         DW 1556
   \   000020   1506         DW 1557
   \   000022   1706         DW 1559
   \   000024   0007         DW 1792
   \   000026   0107         DW 1793
   \   000028   0207         DW 1794
   \   00002A   0307         DW 1795
   \   00002C   0009         DW 2304
   \   00002E   0509         DW 2309
     96          {
     97            ZCL_CLUSTER_ID_GEN_SCENES,
     98            ZCL_CLUSTER_ID_GEN_ON_OFF,
     99            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
    100            ZCL_CLUSTER_ID_GEN_ALARMS,
    101            ZCL_CLUSTER_ID_GEN_PARTITION,
    102            ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
    103            ZCL_CLUSTER_ID_HVAC_FAN_CONTROL,
    104            ZCL_CLUSTER_ID_HVAC_DIHUMIDIFICATION_CONTROL,
    105            ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    106            ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
    107            ZCL_CLUSTER_ID_SS_IAS_ACE,
    108            ZCL_CLUSTER_ID_SS_IAS_WD,
    109            ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL,
    110            ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL,
    111            ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT,
    112            ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL,
    113            ZCL_CLUSTER_ID_PI_ISO7818_PROTOCOL_TUNNEL,
    114            ZCL_CLUSTER_ID_PI_RETAIL_TUNNEL,
    115            ZCL_CLUSTER_ID_SE_PRICE,
    116            ZCL_CLUSTER_ID_SE_DRLC,
    117            ZCL_CLUSTER_ID_SE_METERING,
    118            ZCL_CLUSTER_ID_SE_MESSAGING,
    119            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    120            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_VOICE_OVER_ZIGBEE,
    121          };
    122          
    123          //Your JOB:
    124          //Remove the clusters that your application do not use. This will save some flash and processing
    125          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
    126          const cId_t bdb_ZclType2Clusters[] =
   \                     bdb_ZclType2Clusters:
   \   000000   0700         DW 7
   \   000002   0A00         DW 10
   \   000004   0C00         DW 12
   \   000006   0D00         DW 13
   \   000008   0E00         DW 14
   \   00000A   0F00         DW 15
   \   00000C   1000         DW 16
   \   00000E   1100         DW 17
   \   000010   1200         DW 18
   \   000012   1300         DW 19
   \   000014   1400         DW 20
   \   000016   1900         DW 25
   \   000018   1B00         DW 27
   \   00001A   0001         DW 256
   \   00001C   0101         DW 257
   \   00001E   0002         DW 512
   \   000020   0102         DW 513
   \   000022   0204         DW 1026
   \   000024   0004         DW 1024
   \   000026   0104         DW 1025
   \   000028   0304         DW 1027
   \   00002A   0404         DW 1028
   \   00002C   0504         DW 1029
   \   00002E   0604         DW 1030
   \   000030   0005         DW 1280
   \   000032   0206         DW 1538
   \   000034   0306         DW 1539
   \   000036   0406         DW 1540
   \   000038   0506         DW 1541
   \   00003A   0606         DW 1542
   \   00003C   0706         DW 1543
   \   00003E   0806         DW 1544
   \   000040   0906         DW 1545
   \   000042   0A06         DW 1546
   \   000044   0B06         DW 1547
   \   000046   0C06         DW 1548
   \   000048   0D06         DW 1549
   \   00004A   0E06         DW 1550
   \   00004C   0F06         DW 1551
   \   00004E   1006         DW 1552
   \   000050   1106         DW 1553
   \   000052   1206         DW 1554
   \   000054   1306         DW 1555
   \   000056   0407         DW 1796
   \   000058   0009         DW 2304
   \   00005A   000B         DW 2816
   \   00005C   010B         DW 2817
   \   00005E   020B         DW 2818
   \   000060   030B         DW 2819
    127          {
    128            ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG,
    129            ZCL_CLUSTER_ID_GEN_TIME,
    130            ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC,
    131            ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC,
    132            ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC,
    133            ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC,
    134            ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC,
    135            ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC,
    136            ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC,
    137            ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC,
    138            ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    139            ZCL_CLUSTER_ID_OTA,
    140            ZCL_CLUSTER_ID_GEN_APPLIANCE_CONTROL,
    141            ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG,
    142            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    143            ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL,
    144            ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
    145            ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
    146            ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT,
    147            ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG,
    148            ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT,
    149            ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT,
    150            ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY,
    151            ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING,
    152            ZCL_CLUSTER_ID_SS_IAS_ZONE,
    153            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG,
    154            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT,
    155            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG,
    156            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT,
    157            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG,
    158            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT,
    159            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG,
    160            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT,
    161            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG,
    162            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT,
    163            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG,
    164            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT,
    165            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG,
    166            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT,
    167            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG,
    168            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT,
    169            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG,
    170            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT,
    171            ZCL_CLUSTER_ID_SE_TUNNELING,
    172            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    173            ZCL_CLUSTER_ID_HA_APPLIANCE_IDENTIFICATION,
    174            ZCL_CLUSTER_ID_HA_METER_IDENTIFICATION,
    175            ZCL_CLUSTER_ID_HA_APPLIANCE_EVENTS_ALERTS,
    176            ZCL_CLUSTER_ID_HA_APPLIANCE_STATISTICS,
    177          };
    178          
    179          #ifdef ZCL_GROUPS

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          static zclOptionRec_t zcl_Groups_Options[] =
   \                     zcl_Groups_Options:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for zcl_Groups_Options>`
   \   000003                REQUIRE __INIT_XDATA_I
    181          {
    182            {
    183              ZCL_CLUSTER_ID_GEN_GROUPS,
    184              ( AF_ACK_REQUEST ),
    185            },
    186          };
    187          #endif
    188          
    189          
    190           /*********************************************************************
    191           * LOCAL FUNCTIONS
    192           */
    193          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
    194                                            uint16 BindClusterId,
    195                                            byte Cnt,                 
    196                                            uint16 * ClusterList,
    197                                            zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind );
    198          
    199          uint8 bdb_FindIfAppCluster( cId_t ClusterId );
    200          
    201          
    202          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc );
    203          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress);
    204          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    205          void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddress, bdbFindingBindingRespondent_t **pCurr);
    206           /*********************************************************************
    207           * PUBLIC FUNCTIONS
    208           *********************************************************************/
    209          
    210          void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    211          void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    212          
    213          /*********************************************************************
    214           * @fn      bdb_SetIdentifyActiveEndpoint
    215           *
    216           * @brief   Set the endpoint which will perform the finding and binding (either Target or Initiator)
    217           *
    218           * @param   Active endpoint with which perform F&B. If set to 0xFF all endpoints with Identify will be attempted.
    219           *
    220           * @return  ZFailure - F&B commissioning mode already requested
    221           *          ZInvalidParameter - Endpoint specified not found or reserved by Zigbee
    222           *          ZSuccess - 
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          ZStatus_t bdb_SetIdentifyActiveEndpoint(uint8 activeEndpoint)
   \                     bdb_SetIdentifyActiveEndpoint:
    225          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FA           MOV       R2,A
    226            epList_t *bdb_EpDescriptorListTemp = NULL;
    227            
    228            //Cannot process the request if no endpoints or F&B is under process
    229            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \   000006   90....       MOV       DPTR,#bdbAttributes + 11
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   A2E3         MOV       C,0xE0 /* A   */.3
   \   00000C   5004         JNC       ??bdb_SetIdentifyActiveEndpoint_0
    230            {
    231              return ZFailure;
   \   00000E   7901         MOV       R1,#0x1
   \   000010   8038         SJMP      ??bdb_SetIdentifyActiveEndpoint_1
    232            }
    233            
    234            if(activeEndpoint == 0xFF)
   \                     ??bdb_SetIdentifyActiveEndpoint_0:
   \   000012   74FF         MOV       A,#-0x1
   \   000014   6A           XRL       A,R2
   \   000015   6028         JZ        ??bdb_SetIdentifyActiveEndpoint_2
    235            {
    236              bdbIndentifyActiveEndpoint = activeEndpoint;
    237              return ZSuccess;
    238            }
    239            
    240            if((activeEndpoint != 0) && (activeEndpoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \   000017   E9           MOV       A,R1
   \   000018   602E         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \   00001A   C3           CLR       C
   \   00001B   94F1         SUBB      A,#-0xf
   \   00001D   5029         JNC       ??bdb_SetIdentifyActiveEndpoint_3
    241            {
    242              bdb_EpDescriptorListTemp = bdb_HeadEpDescriptorList;
   \   00001F   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000022   8004         SJMP      ??bdb_SetIdentifyActiveEndpoint_4
    243              
    244              while(bdb_EpDescriptorListTemp != NULL)
    245              {
    246                if(bdb_EpDescriptorListTemp->epDesc->endPoint == activeEndpoint)
    247                {
    248                  bdbIndentifyActiveEndpoint = activeEndpoint;
    249                  return ZSuccess;
    250                }
    251                bdb_EpDescriptorListTemp = bdb_EpDescriptorListTemp->nextDesc;
   \                     ??bdb_SetIdentifyActiveEndpoint_5:
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \                     ??bdb_SetIdentifyActiveEndpoint_4:
   \   000028   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00002B   601B         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FB           MOV       R3,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F583         MOV       DPH,A
   \   000039   8B82         MOV       DPL,R3
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6A           XRL       A,R2
   \   00003D   70E5         JNZ       ??bdb_SetIdentifyActiveEndpoint_5
   \                     ??bdb_SetIdentifyActiveEndpoint_2:
   \   00003F   EA           MOV       A,R2
   \   000040   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000043   F0           MOVX      @DPTR,A
   \   000044   7900         MOV       R1,#0x0
   \   000046   8002         SJMP      ??bdb_SetIdentifyActiveEndpoint_1
    252              }
    253            }
    254            
    255            return ZInvalidParameter;
   \                     ??bdb_SetIdentifyActiveEndpoint_3:
   \   000048   7902         MOV       R1,#0x2
   \                     ??bdb_SetIdentifyActiveEndpoint_1:
   \   00004A   02....       LJMP      ??Subroutine39_0 & 0xFFFF
    256          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET
    257          
    258          
    259          /*********************************************************************
    260           * @fn      bdb_setEpDescListToActiveEndpoint
    261           *
    262           * @brief   Set the endpoint list to the active endpoint selected by the application for F&B process
    263           *
    264           * @return  Current endpoint descriptor
    265           */
    266          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          endPointDesc_t* bdb_setEpDescListToActiveEndpoint(void)
   \                     bdb_setEpDescListToActiveEndpoint:
    268          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    269            bdb_CurrEpDescriptorList = bdb_HeadEpDescriptorList;
   \   000004   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000007   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00000A   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   00000D   12....       LCALL     ?Subroutine27 & 0xFFFF
    270           
    271            //Check which active endpoit is being requested
    272            if(bdbIndentifyActiveEndpoint != 0xFF)
   \                     ??CrossCallReturnLabel_36:
   \   000010   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F4           CPL       A
   \   000015   601B         JZ        ??CrossCallReturnLabel_1
    273            {
    274              //Search for an specific endpoint
    275              while(bdb_CurrEpDescriptorList != NULL)
   \                     ??bdb_setEpDescListToActiveEndpoint_0:
   \   000017   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   00001A   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00001D   602E         JZ        ??bdb_setEpDescListToActiveEndpoint_1
    276              {
    277                if(bdb_CurrEpDescriptorList->epDesc->endPoint == bdbIndentifyActiveEndpoint)
   \   00001F   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000022   F8           MOV       R0,A
   \   000023   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000026   E0           MOVX      A,@DPTR
   \   000027   68           XRL       A,R0
   \   000028   601A         JZ        ??bdb_setEpDescListToActiveEndpoint_2
    278                {
    279                  return bdb_CurrEpDescriptorList->epDesc;
    280                }
    281                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \   00002A   12....       LCALL     ?Subroutine5 & 0xFFFF
    282              }
    283            }
   \                     ??CrossCallReturnLabel_0:
   \   00002D   80E8         SJMP      ??bdb_setEpDescListToActiveEndpoint_0
    284            else
    285            {
    286              //Look for the first endpoint that has Identify cluster
    287              while(bdb_CurrEpDescriptorList != NULL)
    288              {
    289                if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
    290                {
    291                  return bdb_CurrEpDescriptorList->epDesc;
    292                }
    293                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_setEpDescListToActiveEndpoint_3:
   \   00002F   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000032   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000035   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000038   6013         JZ        ??bdb_setEpDescListToActiveEndpoint_1
   \   00003A   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00003D   60F0         JZ        ??bdb_setEpDescListToActiveEndpoint_3
   \   00003F   C3           CLR       C
   \   000040   94F1         SUBB      A,#-0xf
   \   000042   50EB         JNC       ??bdb_setEpDescListToActiveEndpoint_3
   \                     ??bdb_setEpDescListToActiveEndpoint_2:
   \   000044   12....       LCALL     ?Subroutine12 & 0xFFFF
    294              }
    295            }
   \                     ??CrossCallReturnLabel_14:
   \   000047   FA           MOV       R2,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FB           MOV       R3,A
   \   00004B   8004         SJMP      ??bdb_setEpDescListToActiveEndpoint_4
    296            //not found
    297            return NULL;
   \                     ??bdb_setEpDescListToActiveEndpoint_1:
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B00         MOV       R3,#0x0
   \                     ??bdb_setEpDescListToActiveEndpoint_4:
   \   000051   02....       LJMP      ??Subroutine39_0 & 0xFFFF
    298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000006   F8           MOV       R0,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F9           MOV       R1,A
   \   00000A   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   00000D   E8           MOV       A,R0
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   E9           MOV       A,R1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
    299          
    300          
    301          /*********************************************************************
    302           * @fn      bdb_ProcessIEEEAddrRsp
    303           *
    304           * @brief   Process IEEE addr response and mark the entry as done or remove the 
    305           *          bind if not successful.
    306           *
    307           * @param   zdoIncomingMsg_t *pMsg
    308           *
    309           * @return  none
    310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessIEEEAddrRsp:
    312          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    313            ZDO_NwkIEEEAddrResp_t *pAddrRsp = NULL;
    314            bdbFindingBindingRespondent_t *pCurr = NULL;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    315          
    316            pAddrRsp = ZDO_ParseAddrRsp( pMsg );
   \   000014                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000014   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   AE..         MOV       R6,?V0
   \   00001D   AF..         MOV       R7,?V1
    317            
    318            if(pAddrRsp == NULL)
   \   00001F   EA           MOV       A,R2
   \   000020   4F           ORL       A,R7
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??bdb_ProcessIEEEAddrRsp_0 & 0xFFFF
    319            {
    320              return;
    321            }
    322            
    323            bdb_setEpDescListToActiveEndpoint();
   \   000026                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000026   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
    324            
    325            pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, pAddrRsp->nwkAddr);
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   8582..       MOV       ?V0,DPL
   \   000031   8583..       MOV       ?V1,DPH
   \   000034                ; Setup parameters for call to function bdb_findRespondentNode
   \   000034   12....       LCALL     ?Subroutine4 & 0xFFFF
    326            
    327            //Does the entry exist and we were waiting an IEEE addr rsp from this device?
    328            if((pCurr != NULL) && (pCurr->attempts > FINDING_AND_BINDING_MISSING_IEEE_ADDR))
   \                     ??CrossCallReturnLabel_113:
   \   000037   606A         JZ        ??bdb_ProcessIEEEAddrRsp_1
   \   000039   E8           MOV       A,R0
   \   00003A   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00003D   C3           CLR       C
   \   00003E   9481         SUBB      A,#-0x7f
   \   000040   4061         JC        ??bdb_ProcessIEEEAddrRsp_1
    329            {
    330              if(pAddrRsp->status == ZSuccess )
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   E0           MOVX      A,@DPTR
   \   000047   704E         JNZ       ??bdb_ProcessIEEEAddrRsp_2
    331              {
    332                uint8 extAddr[8]; 
    333                AddrMgrEntry_t entry;
    334                
    335                entry.nwkAddr = pAddrRsp->nwkAddr;
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000052   7403         MOV       A,#0x3
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine27 & 0xFFFF
    336                entry.user = ADDRMGR_USER_BINDING;
   \                     ??CrossCallReturnLabel_37:
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   7404         MOV       A,#0x4
   \   000061   F0           MOVX      @DPTR,A
    337                AddrMgrExtAddrSet(entry.extAddr, pAddrRsp->extAddr);
   \   000062                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000062   EE           MOV       A,R6
   \   000063   2403         ADD       A,#0x3
   \   000065   FC           MOV       R4,A
   \   000066   E4           CLR       A
   \   000067   3F           ADDC      A,R7
   \   000068   FD           MOV       R5,A
   \   000069   7405         MOV       A,#0x5
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   AA82         MOV       R2,DPL
   \   000070   AB83         MOV       R3,DPH
   \   000072   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    338                
    339                //Add it as bind entry
    340                if(AddrMgrEntryUpdate(&entry) == FALSE)
   \   000075                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000075   7402         MOV       A,#0x2
   \   000077   12....       LCALL     ?XSTACK_DISP101_8
   \   00007A   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00007D   E9           MOV       A,R1
   \   00007E   7005         JNZ       ??bdb_ProcessIEEEAddrRsp_3
    341                {
    342                  //No space, then report F&B table full
    343                  //If periodic was triggered, then finish it
    344                  if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    345                  {
    346                    bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   000080   12....       LCALL     ?Subroutine7 & 0xFFFF
    347                    osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    348                  }
    349                  
    350                  bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
    351                  osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
    352                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
    353                  return;
   \                     ??CrossCallReturnLabel_3:
   \   000083   8025         SJMP      ??bdb_ProcessIEEEAddrRsp_0
    354                }
    355          
    356                //search for the matching clusters to be added this time as we have the IEEE addrs
    357                bdb_checkMatchingEndpoints(TRUE, pAddrRsp->nwkAddr, &pCurr);
   \                     ??bdb_ProcessIEEEAddrRsp_3:
   \   000085                ; Setup parameters for call to function bdb_checkMatchingEndpoints
   \   000085   AC..         MOV       R4,?XSP + 0
   \   000087   AD..         MOV       R5,?XSP + 1
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000092   7901         MOV       R1,#0x1
   \   000094   12....       LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
    358                (void)extAddr;  //dummy
    359              }
    360              //Bind cannot be added if the device was not found
    361              pCurr->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \                     ??bdb_ProcessIEEEAddrRsp_2:
   \   000097   85..82       MOV       DPL,?XSP + 0
   \   00009A   85..83       MOV       DPH,?XSP + 1
   \   00009D   12....       LCALL     ?Subroutine15 & 0xFFFF
    362            }
   \                     ??CrossCallReturnLabel_21:
   \   0000A0   74FF         MOV       A,#-0x1
   \   0000A2   F0           MOVX      @DPTR,A
    363            
    364            //release the memory
    365            osal_mem_free( pAddrRsp );
   \                     ??bdb_ProcessIEEEAddrRsp_1:
   \   0000A3                ; Setup parameters for call to function osal_mem_free
   \   0000A3   EE           MOV       A,R6
   \   0000A4   FA           MOV       R2,A
   \   0000A5   EF           MOV       A,R7
   \   0000A6   FB           MOV       R3,A
   \   0000A7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    366          }
   \                     ??bdb_ProcessIEEEAddrRsp_0:
   \   0000AA   740F         MOV       A,#0xf
   \   0000AC   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   C8           XCH       A,R0
   \   000004   240C         ADD       A,#0xc
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   7A40         MOV       R2,#0x40
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00000B                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   00000B                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   00000B   7A..         MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   00000D   7B..         MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   00000F   12....       LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
   \   000012                ; Setup parameters for call to function osal_stop_timerEx
   \   000012                ; Setup parameters for call to function osal_stop_timerEx
   \   000012   7A00         MOV       R2,#0x0
   \   000014   7B40         MOV       R3,#0x40
   \   000016   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000019                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000019                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000019   790C         MOV       R1,#0xc
   \   00001B   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine51_0
   \   000006                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
   \   00000B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00000E                REQUIRE ??Subroutine55_0
   \   00000E                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine56_0
   \   000006                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    367          
    368          
    369          /*********************************************************************
    370           * @fn      bdb_StopInitiatorFindingBinding
    371           *
    372           * @brief   Stops finding and binding for initiator devices.
    373           *
    374           * @param   none
    375           *
    376           * @return  none
    377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          void bdb_StopInitiatorFindingBinding(void)
   \                     bdb_StopInitiatorFindingBinding:
    379          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            //If periodic was triggered, then finish it
    381            if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    382            {
    383              bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   000004   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    384              osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   \   000009                ; Setup parameters for call to function osal_stop_timerEx
   \   000009   7A40         MOV       R2,#0x40
   \   00000B   FB           MOV       R3,A
   \   00000C   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    385            }      
    386            //Clean the respondent list and stop its timer
    387            bdb_zclRespondentListClean( &pRespondentHead );
   \                     ??CrossCallReturnLabel_84:
   \   00000F                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   00000F   7A..         MOV       R2,#pRespondentHead & 0xff
   \   000011   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   000013   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
    388            osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000016                ; Setup parameters for call to function osal_stop_timerEx
   \   000016   12....       LCALL     ?Subroutine26 & 0xFFFF
    389            
    390            //Notify status
    391            bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \                     ??CrossCallReturnLabel_82:
   \   000019                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000019   790B         MOV       R1,#0xb
   \   00001B   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    392          
    393          }
   \   00001E   80..         SJMP      ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B40         MOV       R3,#0x40
   \   000004                REQUIRE ??Subroutine49_0
   \   000004                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   22           RET
    394          
    395          
    396          /*********************************************************************
    397           * @fn      bdb_checkMatchingEndpoints
    398           *
    399           * @brief   Check active endpoints for F&B and the respondant simple descriptor 
    400           *          for matching application clusters
    401           *
    402           * @param   pRespondant - Respondant to be process
    403           * @param   bindIfMatch - Flag to indicate that binds for matching cluster must 
    404           *                        be done
    405           *
    406           * @return  status - Result of the operation
    407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    408          void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddr, bdbFindingBindingRespondent_t **pCurr)
   \                     bdb_checkMatchingEndpoints:
    409          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   EC           MOV       A,R4
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   ED           MOV       A,R5
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   89..         MOV       ?V1,R1
    410            uint8 matchFound;
    411            endPointDesc_t *bdb_CurrEpDescriptor;
    412            uint8 i, status;
    413            zAddrType_t dstAddr;
    414          #ifdef ZCL_GROUPS
    415            afAddrType_t afDstAddr;
    416          #endif  
    417            
    418            //Check all the endpoints active for F&B
    419            while(bdb_CurrEpDescriptorList != NULL)
   \   00001F   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000022   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??bdb_checkMatchingEndpoints_0 & 0xFFFF
    420            {
    421              matchFound = FALSE;
   \                     ??bdb_checkMatchingEndpoints_1:
   \   00002A   7F00         MOV       R7,#0x0
    422          
    423              bdb_CurrEpDescriptor = bdb_CurrEpDescriptorList->epDesc;
   \   00002C   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00002F   F5..         MOV       ?V4,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V5,A
    424          
    425          #ifdef ZCL_GROUPS
    426              if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )    
   \   000035   90....       MOV       DPTR,#bdbAttributes + 8
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F4           CPL       A
   \   00003A   7003         JNZ       ??bdb_checkMatchingEndpoints_2
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F4           CPL       A
   \                     ??bdb_checkMatchingEndpoints_2:
   \   00003F   6029         JZ        ??bdb_checkMatchingEndpoints_3
    427              {
    428                zcl_registerClusterOptionList(bdb_CurrEpDescriptor->endPoint,1,zcl_Groups_Options);      
   \   000041                ; Setup parameters for call to function zcl_registerClusterOptionList
   \   000041   7C..         MOV       R4,#zcl_Groups_Options & 0xff
   \   000043   7D..         MOV       R5,#(zcl_Groups_Options >> 8) & 0xff
   \   000045   7A01         MOV       R2,#0x1
   \   000047   85..82       MOV       DPL,?V4
   \   00004A   85..83       MOV       DPH,?V5
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   12....       LCALL     `??zcl_registerClusterOptionList::?relay`; Banked call to: zcl_registerClusterOptionList
    429                
    430                dstAddr.addr.shortAddr = bdbAttributes.bdbCommissioningGroupID;
   \   000052   90....       MOV       DPTR,#bdbAttributes + 8
   \   000055   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000058   7404         MOV       A,#0x4
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine27 & 0xFFFF
    431                dstAddr.addrMode = AddrGroup;
   \                     ??CrossCallReturnLabel_38:
   \   000060   740C         MOV       A,#0xc
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   7401         MOV       A,#0x1
   \   000067   F0           MOVX      @DPTR,A
   \   000068   8019         SJMP      ??CrossCallReturnLabel_34
    432              }
    433              else
    434          #endif
    435              {
    436                dstAddr.addrMode = Addr64Bit;
   \                     ??bdb_checkMatchingEndpoints_3:
   \   00006A   740C         MOV       A,#0xc
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   7403         MOV       A,#0x3
   \   000071   F0           MOVX      @DPTR,A
    437                if(bindIfMatch)
   \   000072   E5..         MOV       A,?V1
   \   000074   600D         JZ        ??CrossCallReturnLabel_34
    438                {
    439                  //if bind is to be created, then we should have the ext address in addr mgr
    440                  AddrMgrExtAddrLookup( shortAddr, dstAddr.addr.extAddr );
   \   000076                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000076   7404         MOV       A,#0x4
   \   000078   12....       LCALL     ?XSTACK_DISP102_8
   \   00007B   7402         MOV       A,#0x2
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?Subroutine24 & 0xFFFF
    441                }
    442              }
    443              for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumOutClusters; i++)
   \                     ??CrossCallReturnLabel_34:
   \   000083   7E00         MOV       R6,#0x0
   \   000085   E5..         MOV       A,?V4
   \   000087   2404         ADD       A,#0x4
   \   000089   F5..         MOV       ?V6,A
   \   00008B   E4           CLR       A
   \   00008C   35..         ADDC      A,?V5
   \   00008E   F5..         MOV       ?V7,A
   \   000090   8043         SJMP      ??bdb_checkMatchingEndpoints_4
    444              {
    445                //Filter for Application clusters (to bind app clusters only)
    446                status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    447                                        bdb_CurrEpDescriptor->simpleDesc->pAppOutClusterList[i],
    448                                        bdb_FindingBindingTargetSimpleDesc.AppNumInClusters,
    449                                        bdb_FindingBindingTargetSimpleDesc.pAppInClusterList,
    450                                        &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch );
   \                     ??bdb_checkMatchingEndpoints_5:
   \   000092                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   000092   E5..         MOV       A,?V1
   \   000094   F5..         MOV       ?V0,A
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   7405         MOV       A,#0x5
   \   00009D   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A0   88..         MOV       ?V2,R0
   \   0000A2   89..         MOV       ?V3,R1
   \   0000A4   78..         MOV       R0,#?V2
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 7
   \   0000AC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000AF   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   FD           MOV       R5,A
   \   0000B4   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 6
   \   0000B7   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C3   E9           MOV       A,R1
   \   0000C4   F5..         MOV       ?V0,A
    451                
    452                if ( status == ZApsTableFull )
   \   0000C6   74B2         MOV       A,#-0x4e
   \   0000C8   69           XRL       A,R1
   \   0000C9   6074         JZ        ??bdb_checkMatchingEndpoints_6
    453                {
    454                  break;
    455                }
    456                else if(status == ZSuccess)
   \   0000CB   E9           MOV       A,R1
   \   0000CC   7006         JNZ       ??bdb_checkMatchingEndpoints_7
    457                {
    458                  matchFound = TRUE;
   \   0000CE   7F01         MOV       R7,#0x1
    459                  //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
    460                  if(!bindIfMatch)
   \   0000D0   E5..         MOV       A,?V1
   \   0000D2   607C         JZ        ??bdb_checkMatchingEndpoints_8
    461                  {
    462                    break;
    463                  }
    464                }
    465              }
   \                     ??bdb_checkMatchingEndpoints_7:
   \   0000D4   0E           INC       R6
   \                     ??bdb_checkMatchingEndpoints_4:
   \   0000D5   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F8           MOV       R0,A
   \   0000DD   EE           MOV       A,R6
   \   0000DE   C3           CLR       C
   \   0000DF   98           SUBB      A,R0
   \   0000E0   40B0         JC        ??bdb_checkMatchingEndpoints_5
    466              
    467              //Only search for other matches if the table is not full and we have not 
    468              //found any match or we have to add bind as many as we can
    469              if( (status != ZApsTableFull) && (!matchFound || bindIfMatch) )      
   \   0000E2   74B2         MOV       A,#-0x4e
   \   0000E4   65..         XRL       A,?V0
   \   0000E6   6057         JZ        ??bdb_checkMatchingEndpoints_6
   \   0000E8   EF           MOV       A,R7
   \   0000E9   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000EB   5004         JNC       ??bdb_checkMatchingEndpoints_9
   \   0000ED   E5..         MOV       A,?V1
   \   0000EF   604E         JZ        ??bdb_checkMatchingEndpoints_6
    470              {
    471                for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumInClusters; i++)
   \                     ??bdb_checkMatchingEndpoints_9:
   \   0000F1   7E00         MOV       R6,#0x0
   \   0000F3   800A         SJMP      ??bdb_checkMatchingEndpoints_10
    472                {
    473                  //Filter for Application clusters (to bind app clusters only)
    474                  status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    475                                          bdb_CurrEpDescriptor->simpleDesc->pAppInClusterList[i],
    476                                          bdb_FindingBindingTargetSimpleDesc.AppNumOutClusters,
    477                                          bdb_FindingBindingTargetSimpleDesc.pAppOutClusterList,
    478                                          &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch );
    479          
    480                  if ( status == ZApsTableFull )
    481                  {
    482                    break;
    483                  }
    484                  else if(status == ZSuccess)
   \                     ??bdb_checkMatchingEndpoints_11:
   \   0000F5   E9           MOV       A,R1
   \   0000F6   7006         JNZ       ??bdb_checkMatchingEndpoints_12
    485                  {
    486                    matchFound = TRUE;
   \   0000F8   7F01         MOV       R7,#0x1
    487                    
    488                    //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
    489                    if(!bindIfMatch)
   \   0000FA   E5..         MOV       A,?V1
   \   0000FC   6052         JZ        ??bdb_checkMatchingEndpoints_8
    490                    {
    491                      break;
    492                    }
    493                  }
   \                     ??bdb_checkMatchingEndpoints_12:
   \   0000FE   0E           INC       R6
   \                     ??bdb_checkMatchingEndpoints_10:
   \   0000FF   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F8           MOV       R0,A
   \   000104   EE           MOV       A,R6
   \   000105   C3           CLR       C
   \   000106   98           SUBB      A,R0
   \   000107   5036         JNC       ??bdb_checkMatchingEndpoints_6
   \   000109                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   000109   E5..         MOV       A,?V1
   \   00010B   F5..         MOV       ?V0,A
   \   00010D   78..         MOV       R0,#?V0
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   7405         MOV       A,#0x5
   \   000114   12....       LCALL     ?XSTACK_DISP100_8
   \   000117   88..         MOV       ?V2,R0
   \   000119   89..         MOV       ?V3,R1
   \   00011B   78..         MOV       R0,#?V2
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 10
   \   000123   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000126   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   FD           MOV       R5,A
   \   00012B   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 9
   \   00012E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000131   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
   \   000137   E9           MOV       A,R1
   \   000138   F5..         MOV       ?V0,A
   \   00013A   74B2         MOV       A,#-0x4e
   \   00013C   69           XRL       A,R1
   \   00013D   70B6         JNZ       ??bdb_checkMatchingEndpoints_11
    494                }
    495              }
    496              
    497              //Check if we have found any match
    498              if( matchFound == TRUE )
   \                     ??bdb_checkMatchingEndpoints_6:
   \   00013F   EF           MOV       A,R7
   \   000140   A2E0         MOV       C,0xE0 /* A   */.0
   \   000142   4003         JC        $+5
   \   000144   02....       LJMP      ??bdb_checkMatchingEndpoints_13 & 0xFFFF
    499              {
    500                if(bindIfMatch)
   \   000147   E5..         MOV       A,?V1
   \   000149   6005         JZ        ??bdb_checkMatchingEndpoints_8
    501                {
    502                  //Mark respondent as complete as simple desc has been process and we do 
    503                  //have IEEE addrs
    504                  (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \   00014B   12....       LCALL     ?Subroutine11 & 0xFFFF
    505                }
   \                     ??CrossCallReturnLabel_12:
   \   00014E   8010         SJMP      ??bdb_checkMatchingEndpoints_14
    506                else
    507                {
    508                  //Mark as we need IEEE addrs
    509                  (*pCurr)->attempts = FINDING_AND_BINDING_MISSING_IEEE_ADDR;
   \                     ??bdb_checkMatchingEndpoints_8:
   \   000150   85..82       MOV       DPL,?XSP + 0
   \   000153   85..83       MOV       DPH,?XSP + 1
   \   000156   E0           MOVX      A,@DPTR
   \   000157   F8           MOV       R0,A
   \   000158   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    510                }
   \                     ??CrossCallReturnLabel_73:
   \   00015B   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00015E   7480         MOV       A,#-0x80
   \                     ??bdb_checkMatchingEndpoints_14:
   \   000160   F0           MOVX      @DPTR,A
    511          
    512          #ifdef ZCL_GROUPS
    513                if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )
   \   000161   90....       MOV       DPTR,#bdbAttributes + 8
   \   000164   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000167   74FF         MOV       A,#-0x1
   \   000169   6A           XRL       A,R2
   \   00016A   7003         JNZ       ??bdb_checkMatchingEndpoints_15
   \   00016C   74FF         MOV       A,#-0x1
   \   00016E   6B           XRL       A,R3
   \                     ??bdb_checkMatchingEndpoints_15:
   \   00016F   6061         JZ        ??bdb_checkMatchingEndpoints_16
    514                {
    515                  afDstAddr.addr.shortAddr = shortAddr;
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000179   740D         MOV       A,#0xd
   \   00017B   12....       LCALL     ?XSTACK_DISP0_8
   \   00017E   12....       LCALL     ?Subroutine27 & 0xFFFF
    516                  afDstAddr.addrMode = afAddr16Bit;
   \                     ??CrossCallReturnLabel_39:
   \   000181   7415         MOV       A,#0x15
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   7402         MOV       A,#0x2
   \   000188   F0           MOVX      @DPTR,A
    517                  afDstAddr.endPoint = bdb_FindingBindingTargetSimpleDesc.EndPoint;
   \   000189   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   C0E0         PUSH      A
   \   00018F   7416         MOV       A,#0x16
   \   000191   12....       LCALL     ?XSTACK_DISP0_8
   \   000194   D0E0         POP       A
   \   000196   F0           MOVX      @DPTR,A
    518                      
    519                  zclGeneral_SendAddGroupRequest( bdb_CurrEpDescriptor->endPoint, &afDstAddr,
    520                                              COMMAND_GROUP_ADD, bdbAttributes.bdbCommissioningGroupID, grpName,
    521                                              TRUE, 0x00 );
   \   000197                ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
   \   000197   75..00       MOV       ?V2,#0x0
   \   00019A   78..         MOV       R0,#?V2
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019F   75....       MOV       ?V2,#grpName & 0xff
   \   0001A2   75....       MOV       ?V3,#(grpName >> 8) & 0xff
   \   0001A5   78..         MOV       R0,#?V2
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AA   8A..         MOV       ?V2,R2
   \   0001AC   8B..         MOV       ?V3,R3
   \   0001AE   78..         MOV       R0,#?V2
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B3   7D01         MOV       R5,#0x1
   \   0001B5   7C00         MOV       R4,#0x0
   \   0001B7   7412         MOV       A,#0x12
   \   0001B9   12....       LCALL     ?XSTACK_DISP101_8
   \   0001BC   85..82       MOV       DPL,?V4
   \   0001BF   85..83       MOV       DPH,?V5
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   F9           MOV       R1,A
   \   0001C4   12....       LCALL     `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
   \   0001C7   7405         MOV       A,#0x5
   \   0001C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CC   8004         SJMP      ??bdb_checkMatchingEndpoints_16
    522                }
    523          #endif
    524              }
    525              else
    526              {
    527                //No matching cluster, then we are done with this respondent
    528                (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \                     ??bdb_checkMatchingEndpoints_13:
   \   0001CE   12....       LCALL     ?Subroutine11 & 0xFFFF
    529              }
   \                     ??CrossCallReturnLabel_13:
   \   0001D1   F0           MOVX      @DPTR,A
    530              
    531              if ( status == ZApsTableFull )
   \                     ??bdb_checkMatchingEndpoints_16:
   \   0001D2   74B2         MOV       A,#-0x4e
   \   0001D4   65..         XRL       A,?V0
   \   0001D6   7005         JNZ       ??bdb_checkMatchingEndpoints_17
    532              {
    533                //If periodic was triggered, then finish it
    534                if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    535                {
    536                  bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   0001D8   12....       LCALL     ?Subroutine7 & 0xFFFF
    537                  osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    538                }      
    539                
    540                bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
    541                osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
    542                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
    543                
    544                return;
   \                     ??CrossCallReturnLabel_4:
   \   0001DB   8021         SJMP      ??bdb_checkMatchingEndpoints_0
    545              }
    546              
    547              //If an specific endpoint was requested, then don't go trough the rest of 
    548              //the endpoints
    549              if( bdbIndentifyActiveEndpoint != 0xFF )
   \                     ??bdb_checkMatchingEndpoints_17:
   \   0001DD   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   F4           CPL       A
   \   0001E2   701A         JNZ       ??bdb_checkMatchingEndpoints_0
    550              {
    551                break;
    552              }
    553              else
    554              {
    555                //If active endpoints 'all' is attempted, then process the next endpoint in 
    556                //the list
    557                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \   0001E4   800D         SJMP      ??bdb_checkMatchingEndpoints_18
    558          
    559                while(bdb_CurrEpDescriptorList != NULL)
    560                {
    561                  //It has to be different from 0 or reserved for Zigbee
    562                  if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \                     ??bdb_checkMatchingEndpoints_19:
   \   0001E6   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001E9   6008         JZ        ??bdb_checkMatchingEndpoints_18
   \   0001EB   C3           CLR       C
   \   0001EC   94F1         SUBB      A,#-0xf
   \   0001EE   5003         JNC       $+5
   \   0001F0   02....       LJMP      ??bdb_checkMatchingEndpoints_1 & 0xFFFF
    563                  {
    564                    break;
    565                  }
    566                  bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_checkMatchingEndpoints_18:
   \   0001F3   12....       LCALL     ?Subroutine5 & 0xFFFF
    567                }
   \                     ??CrossCallReturnLabel_2:
   \   0001F6   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   0001F9   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    568              }
    569            }
   \                     ??CrossCallReturnLabel_119:
   \   0001FC   70E8         JNZ       ??bdb_checkMatchingEndpoints_19
    570          }
   \                     ??bdb_checkMatchingEndpoints_0:
   \   0001FE   7419         MOV       A,#0x19
   \   000200                REQUIRE ?Subroutine2
   \   000200                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   EE           MOV       A,R6
   \   000003   25E0         ADD       A,0xE0 /* A   */
   \   000005   F8           MOV       R0,A
   \   000006   E4           CLR       A
   \   000007   33           RLC       A
   \   000008   F9           MOV       R1,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000009   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00000C   74FF         MOV       A,#-0x1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   28           ADD       A,R0
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   39           ADDC      A,R1
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000014   85..82       MOV       DPL,?V4
   \   000017   85..83       MOV       DPH,?V5
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
   \   00001F   7405         MOV       A,#0x5
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   22           RET
    571          
    572          
    573          
    574          /*********************************************************************
    575           * @fn      bdb_ProcessSimpleDesc
    576           *
    577           * @brief   Process simple descriptor requested by F&B. Binds will be added if 
    578           *          matching cluster is found and if IEEE addrs of the device is already 
    579           *          stored
    580           *
    581           * @param   msgPtr - pointer to simple descriptor response indication message
    582           *
    583           * @return  none
    584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    585          void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr )
   \                     bdb_ProcessSimpleDesc:
    586          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    587            zAddrType_t dstAddr;
    588            bdbFindingBindingRespondent_t *pCurr = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    589            uint8 isRespondantReadyToBeAdded = FALSE;
   \   000018   75..00       MOV       ?V0,#0x0
    590          
    591            bdb_setEpDescListToActiveEndpoint();
   \   00001B                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   00001B   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
    592            
    593            if ( !(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR )) 
   \   00001E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000021   F8           MOV       R0,A
   \   000022   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   A2E0         MOV       C,0xE0 /* A   */.0
   \   000029   4003         JC        $+5
   \   00002B   02....       LJMP      ??bdb_ProcessSimpleDesc_0 & 0xFFFF
    594            {  
    595              //We should not be processing these commands as we are not initiator
    596              return;
    597            }
    598            
    599            dstAddr.addr.shortAddr = BUILD_UINT16( msgPtr->asdu[1], msgPtr->asdu[2] );
   \   00002E   EE           MOV       A,R6
   \   00002F   2413         ADD       A,#0x13
   \   000031   F582         MOV       DPL,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   F583         MOV       DPH,A
   \   000037   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FC           MOV       R4,A
   \   00003D   8882         MOV       DPL,R0
   \   00003F   8983         MOV       DPH,R1
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FB           MOV       R3,A
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   EC           MOV       A,R4
   \   00004B   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    600            dstAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_93:
   \   00004E   740A         MOV       A,#0xa
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   7402         MOV       A,#0x2
   \   000055   F0           MOVX      @DPTR,A
    601            
    602            ZDO_ParseSimpleDescBuf( &msgPtr->asdu[4], &bdb_FindingBindingTargetSimpleDesc );
   \   000056                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000056   7C..         MOV       R4,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   000058   7D..         MOV       R5,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   00005A   E8           MOV       A,R0
   \   00005B   2404         ADD       A,#0x4
   \   00005D   FA           MOV       R2,A
   \   00005E   E4           CLR       A
   \   00005F   39           ADDC      A,R1
   \   000060   FB           MOV       R3,A
   \   000061   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
    603            
    604            pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, dstAddr.addr.shortAddr);
   \   000064                ; Setup parameters for call to function bdb_findRespondentNode
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine4 & 0xFFFF
    605            
    606            //Just for safety check this is a valid entry
    607            if(pCurr != NULL) 
   \                     ??CrossCallReturnLabel_114:
   \   00006C   604F         JZ        ??bdb_ProcessSimpleDesc_0
    608            {
    609              uint8 extAddr[Z_EXTADDR_LEN]; 
    610              
    611              if(AddrMgrExtAddrLookup( pCurr->data.addr.shortAddr, extAddr ))
   \   00006E                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00006E   740B         MOV       A,#0xb
   \   000070   12....       LCALL     ?XSTACK_DISP102_8
   \   000073   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000076   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000079   E9           MOV       A,R1
   \   00007A   6005         JZ        ??bdb_ProcessSimpleDesc_1
    612              {
    613                isRespondantReadyToBeAdded = TRUE;
   \   00007C   75..01       MOV       ?V0,#0x1
   \   00007F   8018         SJMP      ??bdb_ProcessSimpleDesc_2
    614              }
    615              else
    616              {
    617                //Save the simple desc to don't ask for it again
    618                pCurr->SimpleDescriptor = &bdb_FindingBindingTargetSimpleDesc;
   \                     ??bdb_ProcessSimpleDesc_1:
   \   000081   85..82       MOV       DPL,?XSP + 0
   \   000084   85..83       MOV       DPH,?XSP + 1
   \   000087   12....       LCALL     ??Subroutine50_0 & 0xFFFF
    619              }
   \                     ??CrossCallReturnLabel_88:
   \   00008A   240D         ADD       A,#0xd
   \   00008C   F582         MOV       DPL,A
   \   00008E   E4           CLR       A
   \   00008F   38           ADDC      A,R0
   \   000090   F583         MOV       DPH,A
   \   000092   74..         MOV       A,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   000094   F0           MOVX      @DPTR,A
   \   000095   A3           INC       DPTR
   \   000096   74..         MOV       A,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   000098   F0           MOVX      @DPTR,A
    620              (void)extAddr;  //dummy
    621            }
    622            else
    623            {
    624              //This simple desc rsp was not requested by BDB F&B
    625              return;
    626            } 
    627            
    628            bdb_checkMatchingEndpoints(isRespondantReadyToBeAdded, dstAddr.addr.shortAddr, &pCurr);
   \                     ??bdb_ProcessSimpleDesc_2:
   \   000099                ; Setup parameters for call to function bdb_checkMatchingEndpoints
   \   000099   AC..         MOV       R4,?XSP + 0
   \   00009B   AD..         MOV       R5,?XSP + 1
   \   00009D   7402         MOV       A,#0x2
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000A5   A9..         MOV       R1,?V0
   \   0000A7   12....       LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
    629            
    630            //If the respondent got process complete, then release the entry
    631            if(pCurr->attempts == FINDING_AND_BINDING_RESPONDENT_COMPLETE)
   \   0000AA   85..82       MOV       DPL,?XSP + 0
   \   0000AD   85..83       MOV       DPH,?XSP + 1
   \   0000B0   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000B3   F4           CPL       A
   \   0000B4   7007         JNZ       ??bdb_ProcessSimpleDesc_0
    632            {
    633              bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );  
   \   0000B6                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   0000B6   7A..         MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   0000B8   7B..         MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   0000BA   12....       LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
    634            }
    635          }
   \                     ??bdb_ProcessSimpleDesc_0:
   \   0000BD   7413         MOV       A,#0x13
   \   0000BF                REQUIRE ?Subroutine3
   \   0000BF                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    636          
    637          /*********************************************************************
    638           * @fn      bdb_zclFindingBindingEpType
    639           *
    640           * @brief   Gives the Ep Type according to application clusters in
    641           *          simple descriptor
    642           *
    643           * @return  epType - If Target, Initiator or both
    644           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          uint8 bdb_zclFindingBindingEpType( endPointDesc_t *epDesc )
   \                     bdb_zclFindingBindingEpType:
    646          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    647            uint8 epType = 0;
   \   000005   7E00         MOV       R6,#0x0
    648            uint8 status;
    649            uint8 type1ClusterCnt;
    650            uint8 type2ClusterCnt;
    651            
    652            type1ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
    653            type2ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
    654            
    655          
    656            // Are there matching type 1 on server side?
    657            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    658                                            epDesc->simpleDesc->pAppInClusterList,
    659                                            type1ClusterCnt,
    660                                            (uint16*)bdb_ZclType1Clusters);
    661            
    662            if( status == TRUE )
   \   000007   EA           MOV       A,R2
   \   000008   2404         ADD       A,#0x4
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   E4           CLR       A
   \   00000D   3B           ADDC      A,R3
   \   00000E   F5..         MOV       ?V1,A
   \   000010   85..82       MOV       DPL,?V0
   \   000013   F583         MOV       DPH,A
   \   000015   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000018   75....       MOV       ?V4,#bdb_ZclType1Clusters & 0xff
   \   00001B   75....       MOV       ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   00001E                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7C18         MOV       R4,#0x18
   \   000025   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   6401         XRL       A,#0x1
   \   00002E   7002         JNZ       ??bdb_zclFindingBindingEpType_0
    663            {
    664              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   000030   7E02         MOV       R6,#0x2
    665            }
    666            
    667            // Are there matching type 1 on client side?
    668            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    669                                            epDesc->simpleDesc->pAppOutClusterList,
    670                                            type1ClusterCnt,
    671                                            (uint16*)bdb_ZclType1Clusters);
    672            
    673            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_0:
   \   000032   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000035                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000035   78..         MOV       R0,#?V4
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7C18         MOV       R4,#0x18
   \   00003C   85..82       MOV       DPL,?V2
   \   00003F   85..83       MOV       DPH,?V3
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00004F   85..82       MOV       DPL,?V2
   \   000052   85..83       MOV       DPH,?V3
   \   000055   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005B   E9           MOV       A,R1
   \   00005C   6401         XRL       A,#0x1
   \   00005E   7004         JNZ       ??bdb_zclFindingBindingEpType_1
    674            {
    675              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   000060   EE           MOV       A,R6
   \   000061   D2E0         SETB      0xE0 /* A   */.0
   \   000063   FE           MOV       R6,A
    676            }
    677            
    678            // Are there matching type 2 on server side?
    679            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    680                                            epDesc->simpleDesc->pAppInClusterList,
    681                                            type2ClusterCnt,
    682                                            (uint16*)bdb_ZclType2Clusters);
    683            
    684            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_1:
   \   000064   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000067   75....       MOV       ?V4,#bdb_ZclType2Clusters & 0xff
   \   00006A   75....       MOV       ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   00006D                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   7C31         MOV       R4,#0x31
   \   000074   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007A   E9           MOV       A,R1
   \   00007B   6401         XRL       A,#0x1
   \   00007D   7004         JNZ       ??bdb_zclFindingBindingEpType_2
    685            {
    686              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   00007F   EE           MOV       A,R6
   \   000080   D2E0         SETB      0xE0 /* A   */.0
   \   000082   FE           MOV       R6,A
    687            }
    688            
    689            // Are there matching type 2 on client side?
    690            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    691                                            epDesc->simpleDesc->pAppOutClusterList,
    692                                            type2ClusterCnt,
    693                                            (uint16*)bdb_ZclType2Clusters);
    694            
    695            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_2:
   \   000083   85..82       MOV       DPL,?V0
   \   000086   85..83       MOV       DPH,?V1
   \   000089   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00008C   88..         MOV       ?V0,R0
   \   00008E   F5..         MOV       ?V1,A
   \   000090                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   7C31         MOV       R4,#0x31
   \   000097   85..82       MOV       DPL,?V0
   \   00009A   85..83       MOV       DPH,?V1
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000AA   85..82       MOV       DPL,?V0
   \   0000AD   85..83       MOV       DPH,?V1
   \   0000B0   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   6401         XRL       A,#0x1
   \   0000B9   7004         JNZ       ??bdb_zclFindingBindingEpType_3
    696            {
    697              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   0000BB   EE           MOV       A,R6
   \   0000BC   D2E1         SETB      0xE0 /* A   */.1
   \   0000BE   FE           MOV       R6,A
    698            }
    699          
    700            return epType;
   \                     ??bdb_zclFindingBindingEpType_3:
   \   0000BF   EE           MOV       A,R6
   \   0000C0   F9           MOV       R1,A
   \   0000C1   7F06         MOV       R7,#0x6
   \   0000C3   02....       LJMP      ?BANKED_LEAVE_XDATA
    701          
    702          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00000B   7402         MOV       A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine44_0
   \   000006                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000010   85..82       MOV       DPL,?V2
   \   000013   85..83       MOV       DPH,?V3
   \   000016   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000019   22           RET
    703          
    704          /*********************************************************************
    705           * @fn      bdb_zclFindingBindingAddBindEntry
    706           *
    707           * @brief   This function is used to Add an entry to the binding table
    708           *
    709           * @param   SrcEndpInt - source endpoint
    710           * @param   BindClusterId - cluster to try bind
    711           * @param   Cnt - list of remote clusters
    712           * @param   ClusterList - pointer to the Object ID list
    713           * @param   DstAddr - Address of remote node
    714           * @param   DstEndpInt - EndPoint of remote node
    715           * @param   addBind - Indicate wheter or not bind must be added or not
    716           *
    717           * @return  status - Success if added
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
   \                     bdb_zclFindingBindingAddBindEntry:
    720                                            uint16 BindClusterId,
    721                                            byte Cnt,                 
    722                                            uint16 * ClusterList,
    723                                            zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind )
    724          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00000D   E9           MOV       A,R1
   \   00000E   FF           MOV       R7,A
   \   00000F   EC           MOV       A,R4
   \   000010   FE           MOV       R6,A
   \   000011   8D..         MOV       ?V0,R5
    725            uint8 status;
    726          
    727            if ( bdb_FindIfAppCluster ( BindClusterId ) != SUCCESS )
   \   000013                ; Setup parameters for call to function bdb_FindIfAppCluster
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FA           MOV       R2,A
   \   00001B   12....       LCALL     `??bdb_FindIfAppCluster::?relay`; Banked call to: bdb_FindIfAppCluster
   \   00001E   E9           MOV       A,R1
   \   00001F   7024         JNZ       ??bdb_zclFindingBindingAddBindEntry_0
    728            {
    729              return ( ZApsFail ); // No App cluster
    730            }
    731          
    732            // Are there matching clusters?
    733            status = ZDO_AnyClusterMatches( Cnt, 
    734                                            ClusterList,
    735                                            1,
    736                                           &BindClusterId);
    737            if ( status == FALSE )
   \   000021                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V2,R0
   \   000027   89..         MOV       ?V3,R1
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7C01         MOV       R4,#0x1
   \   000030   7410         MOV       A,#0x10
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000038   EE           MOV       A,R6
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   E9           MOV       A,R1
   \   000043   7004         JNZ       ??bdb_zclFindingBindingAddBindEntry_1
    738            {
    739              return ( ZApsFail ); // No matched Cluster
   \                     ??bdb_zclFindingBindingAddBindEntry_0:
   \   000045   79B1         MOV       R1,#-0x4f
   \   000047   803D         SJMP      ??bdb_zclFindingBindingAddBindEntry_2
    740            }
    741          
    742            if(addBind)  
   \                     ??bdb_zclFindingBindingAddBindEntry_1:
   \   000049   7412         MOV       A,#0x12
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   6033         JZ        ??bdb_zclFindingBindingAddBindEntry_3
    743            {
    744              if ( pbindAddEntry )
   \   000051   90....       MOV       DPTR,#pbindAddEntry
   \   000054   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000057   602B         JZ        ??bdb_zclFindingBindingAddBindEntry_3
    745              {
    746                // Add the entry into the binding table
    747                if (!pbindAddEntry( SrcEndpInt, DstAddr, DstEndpInt,
    748                                       1, &BindClusterId ) )
   \   000059                ; Setup parameters for indirect call
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7D01         MOV       R5,#0x1
   \   000060   AC..         MOV       R4,?V0
   \   000062   7412         MOV       A,#0x12
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00006A   EF           MOV       A,R7
   \   00006B   F9           MOV       R1,A
   \   00006C   90....       MOV       DPTR,#pbindAddEntry
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F8           MOV       R0,A
   \   000071   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000074   12....       LCALL     ?CALL_IND
   \   000077   7402         MOV       A,#0x2
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007C   EA           MOV       A,R2
   \   00007D   4B           ORL       A,R3
   \   00007E   7004         JNZ       ??bdb_zclFindingBindingAddBindEntry_3
    749                {
    750                  return ( ZApsTableFull );
   \   000080   79B2         MOV       R1,#-0x4e
   \   000082   8002         SJMP      ??bdb_zclFindingBindingAddBindEntry_2
    751                }
    752              }
    753            }
    754            
    755            return ( ZSuccess );
   \                     ??bdb_zclFindingBindingAddBindEntry_3:
   \   000084   7900         MOV       R1,#0x0
   \                     ??bdb_zclFindingBindingAddBindEntry_2:
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008B   7F04         MOV       R7,#0x4
   \   00008D   02....       LJMP      ?BANKED_LEAVE_XDATA
    756          }
    757          
    758          /*********************************************************************
    759           * @fn      bdb_exitFindingBindingWStatus
    760           *
    761           * @brief   Clean respondent list and reports the status to bdb state machine
    762           *
    763           * @return  
    764           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    765          void bdb_exitFindingBindingWStatus( uint8 status )
   \                     bdb_exitFindingBindingWStatus:
    766          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    767            // bdb report status
    768            bdbAttributes.bdbCommissioningStatus = status;
   \   000006   90....       MOV       DPTR,#bdbAttributes + 10
   \   000009   F0           MOVX      @DPTR,A
    769            
    770            bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_FINDING_BINDING, TRUE );
   \   00000A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00000A   7A01         MOV       R2,#0x1
   \   00000C   7906         MOV       R1,#0x6
   \   00000E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    771          }
   \   000011   02....       LJMP      ??Subroutine42_0 & 0xFFFF
    772          
    773          /*********************************************************************
    774           * @fn      bdb_zclSimpleDescClusterListClean
    775           *
    776           * @brief   This function free Simple Descriptor cluster lists
    777           *
    778           * @param   pSimpleDesc - pointer to simple descriptor
    779           *
    780           * @return  status
    781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   FE           MOV       R6,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   FF           MOV       R7,A
   \   000005   8E82         MOV       DPL,R6
   \   000007                REQUIRE ??Subroutine45_0
   \   000007                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    782          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc )
   \                     bdb_zclSimpleDescClusterListClean:
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    784            if(pSimpleDesc->pAppInClusterList != NULL)
   \   000009   EA           MOV       A,R2
   \   00000A   2407         ADD       A,#0x7
   \   00000C   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00000F   EA           MOV       A,R2
   \   000010   4B           ORL       A,R3
   \   000011   6003         JZ        ??CrossCallReturnLabel_45
    785            {
    786              osal_mem_free( pSimpleDesc->pAppInClusterList );
   \   000013                ; Setup parameters for call to function osal_mem_free
   \   000013   12....       LCALL     ?Subroutine29 & 0xFFFF
    787              pSimpleDesc->pAppInClusterList = ( cId_t* )NULL;
    788            }
    789            if(pSimpleDesc->pAppOutClusterList != NULL)
   \                     ??CrossCallReturnLabel_45:
   \   000016   E5..         MOV       A,?V0
   \   000018   240A         ADD       A,#0xa
   \   00001A   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00001D   EA           MOV       A,R2
   \   00001E   4B           ORL       A,R3
   \   00001F   6003         JZ        ??CrossCallReturnLabel_46
    790            {
    791              osal_mem_free( pSimpleDesc->pAppOutClusterList );
   \   000021                ; Setup parameters for call to function osal_mem_free
   \   000021   12....       LCALL     ?Subroutine29 & 0xFFFF
    792              pSimpleDesc->pAppOutClusterList = ( cId_t* )NULL;
    793            }
    794          }
   \                     ??CrossCallReturnLabel_46:
   \   000024   80..         SJMP      ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET
    795          
    796          /*********************************************************************
    797           * @fn      bdb_RegisterIdentifyTimeChangeCB
    798           *
    799           * @brief   Register an Application's Identify Time change callback function
    800           *          to let know the application when identify is active or not.
    801           *
    802           * @param   pfnIdentify - application callback
    803           *
    804           * @return  none
    805           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    806          void bdb_RegisterIdentifyTimeChangeCB( bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChange )
   \                     bdb_RegisterIdentifyTimeChangeCB:
    807          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    808            pfnIdentifyTimeChangeCB = pfnIdentifyTimeChange;
   \   000004   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    809          }
    810          
    811          #if (FINDING_AND_BINDING_PERIODIC_ENABLE==TRUE)
    812          /*********************************************************************
    813           * @fn      bdb_GetFBInitiatorStatus
    814           *
    815           * @brief   Get the F&B initiator status for periodic requests.
    816           *
    817           * @param   RemainingTime - in seconds
    818           * @param   AttemptsLeft - number of attempts to be done
    819           * @param   MatchesFound - Add the number of matches to this parameter
    820           *                         since the last bdb_GetFBInitiatorStatus call
    821           *
    822           * @return  none
    823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    824          void bdb_GetFBInitiatorStatus(uint8 *RemainingTime, uint8* AttemptsLeft)
   \                     bdb_GetFBInitiatorStatus:
    825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   EA           MOV       A,R2
   \   000016   FE           MOV       R6,A
   \   000017   EB           MOV       A,R3
   \   000018   FF           MOV       R7,A
    826            if(RemainingTime != NULL)  
   \   000019   EA           MOV       A,R2
   \   00001A   4F           ORL       A,R7
   \   00001B   6048         JZ        ??bdb_GetFBInitiatorStatus_0
    827            {
    828              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \   00001D   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000020   E0           MOVX      A,@DPTR
   \   000021   7007         JNZ       ??bdb_GetFBInitiatorStatus_1
    829              {
    830                *RemainingTime = 0;
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   E4           CLR       A
   \   000028   803A         SJMP      ??bdb_GetFBInitiatorStatus_2
    831              }
    832              else
    833              {
    834                *RemainingTime = (bdb_FB_InitiatorCurrentCyclesNumber - 1) * FINDING_AND_BINDING_PERIODIC_TIME + ((osal_get_timeoutEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT) + 999) / 1000);
   \                     ??bdb_GetFBInitiatorStatus_1:
   \   00002A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00002A   7A40         MOV       R2,#0x40
   \   00002C   7B00         MOV       R3,#0x0
   \   00002E   90....       MOV       DPTR,#bdb_TaskID
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F9           MOV       R1,A
   \   000033   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000036   8A..         MOV       ?V4,R2
   \   000038   8B..         MOV       ?V5,R3
   \   00003A   8C..         MOV       ?V6,R4
   \   00003C   8D..         MOV       ?V7,R5
   \   00003E   90....       MOV       DPTR,#__Constant_3e7
   \   000041   78..         MOV       R0,#?V4
   \   000043   12....       LCALL     ?L_ADD_X
   \   000046   90....       MOV       DPTR,#__Constant_3e8
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?L_MOV_X
   \   00004E   78..         MOV       R0,#?V4
   \   000050   79..         MOV       R1,#?V0
   \   000052   12....       LCALL     ?UL_DIV_MOD
   \   000055   75F00F       MOV       B,#0xf
   \   000058   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   14           DEC       A
   \   00005D   A4           MUL       AB
   \   00005E   25..         ADD       A,?V4
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \                     ??bdb_GetFBInitiatorStatus_2:
   \   000064   F0           MOVX      @DPTR,A
    835              }
    836            }
    837            
    838            if(AttemptsLeft != NULL)
   \                     ??bdb_GetFBInitiatorStatus_0:
   \   000065   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000068   600C         JZ        ??bdb_GetFBInitiatorStatus_3
    839            {
    840              *AttemptsLeft = bdb_FB_InitiatorCurrentCyclesNumber;
   \   00006A   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   C0E0         PUSH      A
   \   000070   12....       LCALL     ?Subroutine19 & 0xFFFF
    841            }
   \                     ??CrossCallReturnLabel_77:
   \   000073   D0E0         POP       A
   \   000075   F0           MOVX      @DPTR,A
    842          }
   \                     ??bdb_GetFBInitiatorStatus_3:
   \   000076   7402         MOV       A,#0x2
   \   000078   02....       LJMP      ?Subroutine2 & 0xFFFF
    843          #endif
    844          
    845          /*********************************************************************
    846           * @fn      bdb_RegisterBindNotificationCB
    847           *
    848           * @brief   Register an Application's notification callback function to let 
    849           *          know the application when a new bind is added to the binding table.
    850           *
    851           * @param   pfnIdentify - application callback
    852           *
    853           * @return  none
    854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    855          void bdb_RegisterBindNotificationCB( bdbGCB_BindNotification_t pfnBindNotification )
   \                     bdb_RegisterBindNotificationCB:
    856          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    857            pfnBindNotificationCB = pfnBindNotification;
   \   000004   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    858          }
    859          
    860          /*********************************************************************
    861           * @fn      bdb_SendIdentifyQuery
    862           *
    863           * @brief   Sends Identify query from the given endpoint
    864           *
    865           * @param   endpoint
    866           *
    867           * @return  ZStatus_t
    868           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    869          ZStatus_t bdb_SendIdentifyQuery( uint8 endpoint )
   \                     bdb_SendIdentifyQuery:
    870          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
    871            afAddrType_t dstAddr;
    872            ZStatus_t    status;
    873            
    874            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   74FF         MOV       A,#-0x1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    875            dstAddr.addrMode = afAddr16Bit;
   \   000017   7408         MOV       A,#0x8
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   7402         MOV       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
    876            dstAddr.endPoint = 0xFF;
   \   00001F   7409         MOV       A,#0x9
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   74FF         MOV       A,#-0x1
   \   000026   F0           MOVX      @DPTR,A
    877          
    878            status = zclGeneral_SendIdentifyQuery( endpoint, &dstAddr, TRUE, bdb_getZCLFrameCounter() ); 
   \   000027                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000027   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   00002A   E9           MOV       A,R1
   \   00002B   F9           MOV       R1,A
   \   00002C                ; Setup parameters for call to function zcl_SendCommand
   \   00002C   E4           CLR       A
   \   00002D   F5..         MOV       ?V0,A
   \   00002F   F5..         MOV       ?V1,A
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   E9           MOV       A,R1
   \   00003C   F5..         MOV       ?V0,A
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000043   E4           CLR       A
   \   000044   F5..         MOV       ?V0,A
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   75..01       MOV       ?V0,#0x1
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000053   75..00       MOV       ?V0,#0x0
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   75..01       MOV       ?V0,#0x1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   7C03         MOV       R4,#0x3
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   740B         MOV       A,#0xb
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   EF           MOV       A,R7
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000076   740B         MOV       A,#0xb
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   E9           MOV       A,R1
   \   00007C   FE           MOV       R6,A
    879            
    880            if(status == ZSuccess)
   \   00007D   7017         JNZ       ??bdb_SendIdentifyQuery_0
    881            {
    882              osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, IDENTIFY_QUERY_RSP_TIMEOUT );
   \   00007F                ; Setup parameters for call to function osal_start_timerEx
   \   00007F   90....       MOV       DPTR,#__Constant_1388
   \   000082   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000085   7A00         MOV       R2,#0x0
   \   000087   7B40         MOV       R3,#0x40
   \   000089   90....       MOV       DPTR,#bdb_TaskID
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F9           MOV       R1,A
   \   00008E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000091   7404         MOV       A,#0x4
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
    883            }
    884            
    885            return status;
   \                     ??bdb_SendIdentifyQuery_0:
   \   000096   EE           MOV       A,R6
   \   000097   F9           MOV       R1,A
   \   000098   740C         MOV       A,#0xc
   \   00009A   02....       LJMP      ?Subroutine1 & 0xFFFF
    886          }
    887          
    888          /*********************************************************************
    889           * @fn      bdb_ZclIdentifyQueryCmdInd
    890           *
    891           * @brief   Callback from the ZCL General Cluster Library when
    892           *          it received an Identity Query Response Command for this 
    893           *          application.
    894           *
    895           * @param   srcAddr - source address and endpoint of the response message
    896           * @param   identifyTime - the number of seconds to identify yourself
    897           *
    898           * @return  none
    899           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    900          void bdb_ZclIdentifyQueryCmdInd( zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_ZclIdentifyQueryCmdInd:
    901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    902            bdbFindingBindingRespondent_t *pCurr;
    903            
    904            // Stop the timer before refresh
    905            osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000009                ; Setup parameters for call to function osal_stop_timerEx
   \   000009   12....       LCALL     ?Subroutine26 & 0xFFFF
    906            
    907            // add new node to the list
    908            pCurr = bdb_AddRespondentNode( &pRespondentHead, pCmd );
   \                     ??CrossCallReturnLabel_83:
   \   00000C                ; Setup parameters for call to function bdb_AddRespondentNode
   \   00000C   EE           MOV       A,R6
   \   00000D   FC           MOV       R4,A
   \   00000E   EF           MOV       A,R7
   \   00000F   FD           MOV       R5,A
   \   000010   7A..         MOV       R2,#pRespondentHead & 0xff
   \   000012   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   000014   12....       LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
    909            
    910            if(pCurr != NULL)
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   605D         JZ        ??bdb_ZclIdentifyQueryCmdInd_0
    911            {
    912              pCurr->data.addrMode = pCmd->srcAddr->addrMode;
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000022   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000025   F0           MOVX      @DPTR,A
    913              pCurr->data.addr.shortAddr = pCmd->srcAddr->addr.shortAddr;
   \   000026   8882         MOV       DPL,R0
   \   000028   8983         MOV       DPH,R1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FC           MOV       R4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FD           MOV       R5,A
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   EC           MOV       A,R4
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   ED           MOV       A,R5
   \   000037   F0           MOVX      @DPTR,A
    914              pCurr->data.endPoint = pCmd->srcAddr->endPoint;
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000040   A3           INC       DPTR
   \   000041   F0           MOVX      @DPTR,A
    915              pCurr->data.panId = pCmd->srcAddr->panId;
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000049   240A         ADD       A,#0xa
   \   00004B   F582         MOV       DPL,A
   \   00004D   E4           CLR       A
   \   00004E   38           ADDC      A,R0
   \   00004F   F583         MOV       DPH,A
   \   000051   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   12....       LCALL     ?Subroutine27 & 0xFFFF
    916              pCurr->attempts = FINDING_AND_BINDING_NEW_RESPONDENT;
   \                     ??CrossCallReturnLabel_40:
   \   000065   EA           MOV       A,R2
   \   000066   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
    917              pCurr->SimpleDescriptor = NULL;
   \   00006B   EA           MOV       A,R2
   \   00006C   240D         ADD       A,#0xd
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   3B           ADDC      A,R3
   \   000072   F583         MOV       DPH,A
   \   000074   E4           CLR       A
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   F0           MOVX      @DPTR,A
    918            }
    919            
    920            //Process the identify query rsp
    921            osal_set_event(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT);
   \                     ??bdb_ZclIdentifyQueryCmdInd_0:
   \   000078                ; Setup parameters for call to function osal_set_event
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   7B40         MOV       R3,#0x40
   \   00007C   90....       MOV       DPTR,#bdb_TaskID
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F9           MOV       R1,A
   \   000081   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    922          }
   \   000084   02....       LJMP      ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   22           RET
    923          
    924          /*********************************************************************
    925           * @fn      bdb_ProcessRespondentList
    926           *
    927           * @brief   Process the respondent list by sending Simple Descriptor request to 
    928           *          devices respondent in the list. Also send IEEE Addr Req to those 
    929           *          device for which a bind is created buy IEEE addr is missing.
    930           *
    931           * @param   none
    932           *
    933           * @return  none
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          void bdb_ProcessRespondentList( void )
   \                     bdb_ProcessRespondentList:
    936          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    937            zAddrType_t dstAddr = { 0 };
   \   00000A   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7409         MOV       A,#0x9
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    938            
    939            // Look for the first respondent
    940            if ( pRespondentCurr == NULL )
   \   000016   90....       MOV       DPTR,#pRespondentCurr
   \   000019   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00001C   7011         JNZ       ??bdb_ProcessRespondentList_0
    941            {
    942              pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   00001E                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00001E   12....       LCALL     ?Subroutine13 & 0xFFFF
    943              
    944              // If null, then no responses from Identify query request
    945              if ( (pRespondentCurr == NULL) )
   \                     ??CrossCallReturnLabel_17:
   \   000021   7042         JNZ       ??CrossCallReturnLabel_41
    946              {
    947                //No responses, then no responses
    948                if(pRespondentHead == NULL)
   \   000023   90....       MOV       DPTR,#pRespondentHead
   \   000026   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000029   702C         JNZ       ??bdb_ProcessRespondentList_1
    949                {
    950                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \   00002B                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00002B   790B         MOV       R1,#0xb
   \   00002D   802A         SJMP      ??bdb_ProcessRespondentList_2
    951                }
    952                //Responses and binded to all clusters possible
    953                else
    954                {
    955                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
    956                }
    957                return;
    958              }
    959            }
    960            else
    961            {
    962              //Validate that we are not processing a missing IEEE Address before chaning 
    963              //the current respondent to be process
    964              if((pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR) &&
    965                 (pRespondentCurr->attempts & ~FINDING_AND_BINDING_MISSING_IEEE_ADDR) >= FINDING_AND_BINDING_MAX_ATTEMPTS)
   \                     ??bdb_ProcessRespondentList_0:
   \   00002F   90....       MOV       DPTR,#pRespondentCurr
   \   000032   E0           MOVX      A,@DPTR
   \   000033   240C         ADD       A,#0xc
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   3400         ADDC      A,#0x0
   \   00003A   8882         MOV       DPL,R0
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   A2E7         MOV       C,0xE0 /* A   */.7
   \   000041   5022         JNC       ??CrossCallReturnLabel_41
   \   000043   547F         ANL       A,#0x7f
   \   000045   C3           CLR       C
   \   000046   9404         SUBB      A,#0x4
   \   000048   401B         JC        ??CrossCallReturnLabel_41
    966              {
    967                if(pRespondentNext == NULL)
   \   00004A   90....       MOV       DPTR,#pRespondentNext
   \   00004D   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000050   700D         JNZ       ??bdb_ProcessRespondentList_3
    968                {
    969                  //Review the whole list if we have simple desc that we need to attempt.
    970                  pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   000052                ; Setup parameters for call to function bdb_getRespondentRetry
   \   000052   12....       LCALL     ?Subroutine13 & 0xFFFF
    971                    
    972                  if(pRespondentCurr == NULL)
   \                     ??CrossCallReturnLabel_18:
   \   000055   700E         JNZ       ??CrossCallReturnLabel_41
    973                  {
    974                    bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
   \   000057                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \                     ??bdb_ProcessRespondentList_1:
   \   000057   7900         MOV       R1,#0x0
   \                     ??bdb_ProcessRespondentList_2:
   \   000059   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    975                    return;
   \   00005C   02....       LJMP      ??CrossCallReturnLabel_95 & 0xFFFF
    976                  }
    977                }
    978                else
    979                {
    980                  pRespondentCurr = pRespondentNext;
   \                     ??bdb_ProcessRespondentList_3:
   \   00005F   90....       MOV       DPTR,#pRespondentCurr
   \   000062   12....       LCALL     ?Subroutine27 & 0xFFFF
    981                }
    982              }
    983            }
    984            
    985            //Start the timer to process the next respondent
    986            osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
   \                     ??CrossCallReturnLabel_41:
   \   000065                ; Setup parameters for call to function osal_start_timerEx
   \   000065   90....       MOV       DPTR,#__Constant_1388
   \   000068   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00006B   7A00         MOV       R2,#0x0
   \   00006D   7B40         MOV       R3,#0x40
   \   00006F   90....       MOV       DPTR,#bdb_TaskID
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F9           MOV       R1,A
   \   000074   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
    987            
    988            //If ParentLost is reported, then do not attempt send SimpleDesc, mark those as pending, 
    989            //if Parent Lost is restored, then these simpleDesc attempts will be restored to 0
    990            if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   \   00007C   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   6408         XRL       A,#0x8
   \   000082   90....       MOV       DPTR,#pRespondentCurr
   \   000085   606D         JZ        ??bdb_ProcessRespondentList_4
    991            {
    992              dstAddr.addr.shortAddr = pRespondentCurr->data.addr.shortAddr;
   \   000087   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00008A   F8           MOV       R0,A
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F9           MOV       R1,A
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   12....       LCALL     ?Subroutine27 & 0xFFFF
    993              dstAddr.addrMode = pRespondentCurr->data.addrMode;
   \                     ??CrossCallReturnLabel_42:
   \   000097   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00009A   2408         ADD       A,#0x8
   \   00009C   F582         MOV       DPL,A
   \   00009E   E4           CLR       A
   \   00009F   38           ADDC      A,R0
   \   0000A0   F583         MOV       DPH,A
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   C0E0         PUSH      A
   \   0000A5   7408         MOV       A,#0x8
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   D0E0         POP       A
   \   0000AC   12....       LCALL     ?Subroutine6 & 0xFFFF
    994          
    995              //Update the attempts, ahead of actually sending the frame, as this is done just below
    996              pRespondentCurr->attempts++;
   \                     ??CrossCallReturnLabel_106:
   \   0000AF   04           INC       A
   \   0000B0   12....       LCALL     ?Subroutine6 & 0xFFFF
    997              
    998              //Send IEEE addr request or simple desc req
    999              if(pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR)
   \                     ??CrossCallReturnLabel_107:
   \   0000B3   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000B5   5012         JNC       ??bdb_ProcessRespondentList_5
   1000              {
   1001                ZDP_IEEEAddrReq(pRespondentCurr->data.addr.shortAddr,0,0,0);
   \   0000B7                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000B7   7D00         MOV       R5,#0x0
   \   0000B9   7C00         MOV       R4,#0x0
   \   0000BB   7900         MOV       R1,#0x0
   \   0000BD   12....       LCALL     ?Subroutine16 & 0xFFFF
   1002              }
   \                     ??CrossCallReturnLabel_101:
   \   0000C0   FA           MOV       R2,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   FB           MOV       R3,A
   \   0000C4   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   0000C7   8031         SJMP      ??bdb_ProcessRespondentList_6
   1003              else
   1004              {
   1005                //Send simple descriptor
   1006                ZDP_SimpleDescReq( &dstAddr, pRespondentCurr->data.addr.shortAddr, pRespondentCurr->data.endPoint, 0 );
   \                     ??bdb_ProcessRespondentList_5:
   \   0000C9                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   0000C9   75..00       MOV       ?V0,#0x0
   \   0000CC   78..         MOV       R0,#?V0
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D1   12....       LCALL     ?Subroutine20 & 0xFFFF
   1007              }
   1008            }
   \                     ??CrossCallReturnLabel_91:
   \   0000D4   2409         ADD       A,#0x9
   \   0000D6   F582         MOV       DPL,A
   \   0000D8   E4           CLR       A
   \   0000D9   38           ADDC      A,R0
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   F9           MOV       R1,A
   \   0000DE   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000E1   FC           MOV       R4,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   FD           MOV       R5,A
   \   0000E5   7401         MOV       A,#0x1
   \   0000E7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EA   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   0000ED   7401         MOV       A,#0x1
   \   0000EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F2   8006         SJMP      ??bdb_ProcessRespondentList_6
   1009            else
   1010            {
   1011              //Stop any attempt due to parent lost
   1012              pRespondentCurr->attempts |= FINDING_AND_BINDING_PARENT_LOST;
   \                     ??bdb_ProcessRespondentList_4:
   \   0000F4   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   1013            }
   \                     ??CrossCallReturnLabel_109:
   \   0000F7   D2E6         SETB      0xE0 /* A   */.6
   \   0000F9   F0           MOVX      @DPTR,A
   1014            
   1015            //Search for the next respondant that has not enough tries in the list
   1016            pRespondentNext = bdb_getRespondentRetry(pRespondentCurr->pNext);
   \                     ??bdb_ProcessRespondentList_6:
   \   0000FA                ; Setup parameters for call to function bdb_getRespondentRetry
   \   0000FA   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000FD   240F         ADD       A,#0xf
   \   0000FF   F582         MOV       DPL,A
   \   000101   E4           CLR       A
   \   000102   38           ADDC      A,R0
   \   000103   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000106   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000109   90....       MOV       DPTR,#pRespondentNext
   \   00010C   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1017          }
   \                     ??CrossCallReturnLabel_95:
   \   00010F   7409         MOV       A,#0x9
   \   000111   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV       DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#pRespondentHead
   \   000003   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000006   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000009   90....       MOV       DPTR,#pRespondentCurr
   \   00000C   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00000F   F9           MOV       R1,A
   \   000010   EA           MOV       A,R2
   \   000011   49           ORL       A,R1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pRespondentCurr
   \   000004                REQUIRE ??Subroutine54_0
   \   000004                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00           DB 0
   1018          
   1019          /*********************************************************************
   1020           * @fn      bdb_FindIfAppCluster
   1021           *
   1022           * @brief   To verify if cluster is application type
   1023           *
   1024           * @param   none
   1025           *
   1026           * @return  true if success
   1027           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1028          uint8 bdb_FindIfAppCluster( cId_t ClusterId )
   \                     bdb_FindIfAppCluster:
   1029          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1030            uint8 i;
   1031            uint8 ClusterCnt;
   1032          
   1033            ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
   1034            
   1035            for ( i = 0; i < ClusterCnt; i++ )
   \   000004   7800         MOV       R0,#0x0
   1036            {
   1037              if ( bdb_ZclType1Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_0:
   \   000006   E8           MOV       A,R0
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   FD           MOV       R5,A
   \   00000D   74..         MOV       A,#bdb_ZclType1Clusters & 0xff
   \   00000F   2C           ADD       A,R4
   \   000010   F582         MOV       DPL,A
   \   000012   74..         MOV       A,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   000014   3D           ADDC      A,R5
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6A           XRL       A,R2
   \   000019   7003         JNZ       ??bdb_FindIfAppCluster_1
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6B           XRL       A,R3
   \                     ??bdb_FindIfAppCluster_1:
   \   00001E   6023         JZ        ??bdb_FindIfAppCluster_2
   1038              {
   1039                return ( SUCCESS );
   1040              }
   1041            }
   \   000020   08           INC       R0
   \   000021   E8           MOV       A,R0
   \   000022   C3           CLR       C
   \   000023   9418         SUBB      A,#0x18
   \   000025   40DF         JC        ??bdb_FindIfAppCluster_0
   1042            
   1043            ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
   1044            
   1045            for ( i = 0; i < ClusterCnt; i++ )
   \   000027   7800         MOV       R0,#0x0
   1046            {
   1047              if ( bdb_ZclType2Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_3:
   \   000029   E8           MOV       A,R0
   \   00002A   25E0         ADD       A,0xE0 /* A   */
   \   00002C   FC           MOV       R4,A
   \   00002D   E4           CLR       A
   \   00002E   33           RLC       A
   \   00002F   FD           MOV       R5,A
   \   000030   74..         MOV       A,#bdb_ZclType2Clusters & 0xff
   \   000032   2C           ADD       A,R4
   \   000033   F582         MOV       DPL,A
   \   000035   74..         MOV       A,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   000037   3D           ADDC      A,R5
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6A           XRL       A,R2
   \   00003C   7003         JNZ       ??bdb_FindIfAppCluster_4
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6B           XRL       A,R3
   \                     ??bdb_FindIfAppCluster_4:
   \   000041   7004         JNZ       ??bdb_FindIfAppCluster_5
   1048              {
   1049                return ( SUCCESS );
   \                     ??bdb_FindIfAppCluster_2:
   \   000043   7900         MOV       R1,#0x0
   \   000045   8009         SJMP      ??bdb_FindIfAppCluster_6
   1050              }
   1051            }
   \                     ??bdb_FindIfAppCluster_5:
   \   000047   08           INC       R0
   \   000048   E8           MOV       A,R0
   \   000049   C3           CLR       C
   \   00004A   9431         SUBB      A,#0x31
   \   00004C   40DB         JC        ??bdb_FindIfAppCluster_3
   1052            
   1053            // If not found, take it as application cluster it will be filtered
   1054            // by simple descriptor at some point
   1055            return ( FAILURE );
   \   00004E   7901         MOV       R1,#0x1
   \                     ??bdb_FindIfAppCluster_6:
   \   000050   02....       LJMP      ??Subroutine39_0 & 0xFFFF
   1056          }
   1057          
   1058          
   1059          /*********************************************************************
   1060           * @fn      bdb_getRespondentRetry
   1061           *
   1062           * @brief   Get the next Respondant entry to retry
   1063           *
   1064           * @param   pHead - pointer to a pointer of the list head
   1065           *
   1066           * @return  respondant entry if found, otherwise NULL
   1067           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1068          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead)
   \                     bdb_getRespondentRetry:
   1069          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1070            bdbFindingBindingRespondent_t *pTemp;
   1071            
   1072            pTemp = pRespondentHead;
   \   000004   800A         SJMP      ??CrossCallReturnLabel_63
   1073            
   1074            while(pTemp != NULL)
   1075            {
   1076              //does the next entry requires to perform an attempt on simple desc req or IEEE addr req?
   1077              if((pTemp->attempts & ~FINDING_AND_BINDING_MISSING_IEEE_ADDR) < FINDING_AND_BINDING_MAX_ATTEMPTS)
   1078              {
   1079                return pTemp;
   1080              }
   1081             
   1082              pTemp = pTemp->pNext;
   \                     ??bdb_getRespondentRetry_0:
   \   000006   EA           MOV       A,R2
   \   000007   240F         ADD       A,#0xf
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3B           ADDC      A,R3
   \   00000D   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   600D         JZ        ??bdb_getRespondentRetry_1
   \   000014   EA           MOV       A,R2
   \   000015   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000018   547F         ANL       A,#0x7f
   \   00001A   C3           CLR       C
   \   00001B   9404         SUBB      A,#0x4
   \   00001D   50E7         JNC       ??bdb_getRespondentRetry_0
   \   00001F   8004         SJMP      ??bdb_getRespondentRetry_2
   1083            }
   1084            return NULL;
   \                     ??bdb_getRespondentRetry_1:
   \   000021   7A00         MOV       R2,#0x0
   \   000023   7B00         MOV       R3,#0x0
   \                     ??bdb_getRespondentRetry_2:
   \   000025   02....       LJMP      ??Subroutine39_0 & 0xFFFF
   1085          }
   1086          
   1087          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1088          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress)
   \                     bdb_findRespondentNode:
   1089          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1090            bdbFindingBindingRespondent_t* pTemp = pRespondentHead;
   \   000004   90....       MOV       DPTR,#pRespondentHead
   \   000007   8009         SJMP      ??bdb_findRespondentNode_0
   1091            
   1092            while(pTemp != NULL)  
   1093            {
   1094              if((pTemp->data.addr.shortAddr == shortAddress) && (pTemp->data.endPoint == endpoint))
   1095              {
   1096                return pTemp;
   1097              }
   1098              
   1099              pTemp = pTemp->pNext;
   \                     ??bdb_findRespondentNode_1:
   \   000009   EC           MOV       A,R4
   \   00000A   240F         ADD       A,#0xf
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   F583         MOV       DPH,A
   \                     ??bdb_findRespondentNode_0:
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FC           MOV       R4,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FD           MOV       R5,A
   \   000017   EC           MOV       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   6024         JZ        ??bdb_findRespondentNode_2
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6A           XRL       A,R2
   \   000021   7003         JNZ       ??bdb_findRespondentNode_3
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6B           XRL       A,R3
   \                     ??bdb_findRespondentNode_3:
   \   000026   70E1         JNZ       ??bdb_findRespondentNode_1
   \   000028   8C82         MOV       DPL,R4
   \   00002A   8D83         MOV       DPH,R5
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   69           XRL       A,R1
   \   000037   70D0         JNZ       ??bdb_findRespondentNode_1
   \   000039   EC           MOV       A,R4
   \   00003A   FA           MOV       R2,A
   \   00003B   ED           MOV       A,R5
   \   00003C   FB           MOV       R3,A
   \   00003D   8004         SJMP      ??bdb_findRespondentNode_4
   1100            }
   1101            
   1102            return NULL;
   \                     ??bdb_findRespondentNode_2:
   \   00003F   7A00         MOV       R2,#0x0
   \   000041   7B00         MOV       R3,#0x0
   \                     ??bdb_findRespondentNode_4:
   \   000043   02....       LJMP      ??Subroutine39_0 & 0xFFFF
   1103          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for grpName>`:
   \   000000   47           DB 71
   \   000001   72           DB 114
   \   000002   6F           DB 111
   \   000003   75           DB 117
   \   000004   70           DB 112
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbIndentifyActiveEndpoint>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_Groups_Options>`:
   \   000000   0400         DW 4
   \   000002   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e7:
   \   000000   E7030000     DD 999

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SetIdentifyActiveEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SetIdentifyActiveEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setEpDescListToActiveEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setEpDescListToActiveEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessIEEEAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessIEEEAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_StopInitiatorFindingBinding::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_StopInitiatorFindingBinding

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_checkMatchingEndpoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_checkMatchingEndpoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclFindingBindingEpType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclFindingBindingEpType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclFindingBindingAddBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclFindingBindingAddBindEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_exitFindingBindingWStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_exitFindingBindingWStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclSimpleDescClusterListClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclSimpleDescClusterListClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterIdentifyTimeChangeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterIdentifyTimeChangeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_GetFBInitiatorStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_GetFBInitiatorStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterBindNotificationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterBindNotificationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SendIdentifyQuery::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SendIdentifyQuery

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ZclIdentifyQueryCmdInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ZclIdentifyQueryCmdInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessRespondentList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessRespondentList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_FindIfAppCluster::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_FindIfAppCluster

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_getRespondentRetry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_getRespondentRetry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_findRespondentNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_findRespondentNode
   1104          
   1105          #endif  
   1106          
   1107          /*********************************************************************
   1108          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     14   bdb_FindIfAppCluster
      1     18   bdb_GetFBInitiatorStatus
        0     18   -> osal_get_timeoutEx
      0     25   bdb_ProcessIEEEAddrRsp
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> ZDO_ParseAddrRsp
        0     25   -> bdb_checkMatchingEndpoints
        0     25   -> bdb_exitFindingBindingWStatus
        0     25   -> bdb_findRespondentNode
        0     25   -> bdb_setEpDescListToActiveEndpoint
        0     25   -> bdb_zclSimpleDescClusterListClean
        0     25   -> osal_mem_free
        0     25   -> osal_stop_timerEx
      1     22   bdb_ProcessRespondentList
        0     18   -> ZDP_IEEEAddrReq
        0     19   -> ZDP_SimpleDescReq
        0     18   -> bdb_exitFindingBindingWStatus
        0     18   -> bdb_getRespondentRetry
        0     22   -> osal_start_timerEx
      0     28   bdb_ProcessSimpleDesc
        0     28   -> AddrMgrExtAddrLookup
        0     28   -> ZDO_ParseSimpleDescBuf
        0     28   -> bdb_checkMatchingEndpoints
        0     28   -> bdb_findRespondentNode
        0     28   -> bdb_setEpDescListToActiveEndpoint
        0     28   -> bdb_zclSimpleDescClusterListClean
      2      0   bdb_RegisterBindNotificationCB
      2      0   bdb_RegisterIdentifyTimeChangeCB
      0     33   bdb_SendIdentifyQuery
        0     22   -> bdb_getZCLFrameCounter
        0     26   -> osal_start_timerEx
        0     33   -> zcl_SendCommand
      2      0   bdb_SetIdentifyActiveEndpoint
      2      0   bdb_StopInitiatorFindingBinding
        2      0   -> bdb_exitFindingBindingWStatus
        2      0   -> bdb_zclRespondentListClean
        2      0   -> osal_stop_timerEx
      1     10   bdb_ZclIdentifyQueryCmdInd
        0     10   -> bdb_AddRespondentNode
        0     10   -> osal_set_event
        0     10   -> osal_stop_timerEx
      1     74   bdb_checkMatchingEndpoints
        0     41   -> AddrMgrExtAddrLookup
        0     41   -> bdb_exitFindingBindingWStatus
        0     46   -> bdb_zclFindingBindingAddBindEntry
        0     41   -> bdb_zclSimpleDescClusterListClean
        0     41   -> osal_stop_timerEx
        0     46   -> zclGeneral_SendAddGroupRequest
        0     41   -> zcl_registerClusterOptionList
      0     50   bdb_exitFindingBindingWStatus
        0      9   -> bdb_reportCommissioningState
      2     28   bdb_findRespondentNode
      2     18   bdb_getRespondentRetry
      2     28   bdb_setEpDescListToActiveEndpoint
      0     62   bdb_zclFindingBindingAddBindEntry
        0     16   -> ZDO_AnyClusterMatches
        0     14   -> bdb_FindIfAppCluster
      0     16   bdb_zclFindingBindingEpType
        0     16   -> ZDO_AnyClusterMatches
      0     51   bdb_zclSimpleDescClusterListClean
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant {{0}}>
       1  ?<Initializer for bdbIndentifyActiveEndpoint>
       6  ?<Initializer for grpName>
       3  ?<Initializer for zcl_Groups_Options>
       7  ??Subroutine39_0
       1  ??Subroutine40_0
       6  ??Subroutine41_0
       5  ??Subroutine42_0
      14  ??Subroutine43_0
       8  ??Subroutine44_0
       2  ??Subroutine45_0
       4  ??Subroutine46_0
       4  ??Subroutine47_0
       5  ??Subroutine48_0
       4  ??Subroutine49_0
       5  ??Subroutine50_0
       1  ??Subroutine51_0
       5  ??Subroutine52_0
       4  ??Subroutine53_0
       5  ??Subroutine54_0
       6  ??Subroutine55_0
       7  ??Subroutine56_0
       3  ?Subroutine0
       3  ?Subroutine1
      26  ?Subroutine10
      15  ?Subroutine11
      10  ?Subroutine12
      19  ?Subroutine13
      20  ?Subroutine14
       4  ?Subroutine15
       3  ?Subroutine16
      14  ?Subroutine17
      22  ?Subroutine18
       6  ?Subroutine19
       8  ?Subroutine2
       3  ?Subroutine20
       6  ?Subroutine21
       9  ?Subroutine22
       5  ?Subroutine23
       7  ?Subroutine24
       7  ?Subroutine25
       4  ?Subroutine26
       6  ?Subroutine27
       5  ?Subroutine28
      12  ?Subroutine29
       3  ?Subroutine3
      13  ?Subroutine30
       9  ?Subroutine31
       6  ?Subroutine32
       3  ?Subroutine33
       2  ?Subroutine34
       9  ?Subroutine35
       6  ?Subroutine36
       9  ?Subroutine37
       5  ?Subroutine38
      14  ?Subroutine4
      19  ?Subroutine5
       4  ?Subroutine6
      31  ?Subroutine7
       9  ?Subroutine8
      34  ?Subroutine9
       4  __Constant_1388
       4  __Constant_3e7
       4  __Constant_3e8
       1  bdbIndentifyActiveEndpoint
      83  bdb_FindIfAppCluster
       6  bdb_FindIfAppCluster::?relay
      12  bdb_FindingBindingTargetSimpleDesc
     123  bdb_GetFBInitiatorStatus
       6  bdb_GetFBInitiatorStatus::?relay
     175  bdb_ProcessIEEEAddrRsp
       6  bdb_ProcessIEEEAddrRsp::?relay
     276  bdb_ProcessRespondentList
       6  bdb_ProcessRespondentList::?relay
     191  bdb_ProcessSimpleDesc
       6  bdb_ProcessSimpleDesc::?relay
      10  bdb_RegisterBindNotificationCB
       6  bdb_RegisterBindNotificationCB::?relay
      10  bdb_RegisterIdentifyTimeChangeCB
       6  bdb_RegisterIdentifyTimeChangeCB::?relay
     157  bdb_SendIdentifyQuery
       6  bdb_SendIdentifyQuery::?relay
      77  bdb_SetIdentifyActiveEndpoint
       6  bdb_SetIdentifyActiveEndpoint::?relay
      32  bdb_StopInitiatorFindingBinding
       6  bdb_StopInitiatorFindingBinding::?relay
     135  bdb_ZclIdentifyQueryCmdInd
       6  bdb_ZclIdentifyQueryCmdInd::?relay
      48  bdb_ZclType1Clusters
      98  bdb_ZclType2Clusters
     512  bdb_checkMatchingEndpoints
       6  bdb_checkMatchingEndpoints::?relay
      20  bdb_exitFindingBindingWStatus
       6  bdb_exitFindingBindingWStatus::?relay
      70  bdb_findRespondentNode
       6  bdb_findRespondentNode::?relay
      40  bdb_getRespondentRetry
       6  bdb_getRespondentRetry::?relay
      84  bdb_setEpDescListToActiveEndpoint
       6  bdb_setEpDescListToActiveEndpoint::?relay
     144  bdb_zclFindingBindingAddBindEntry
       6  bdb_zclFindingBindingAddBindEntry::?relay
     198  bdb_zclFindingBindingEpType
       6  bdb_zclFindingBindingEpType::?relay
      38  bdb_zclSimpleDescClusterListClean
       6  bdb_zclSimpleDescClusterListClean::?relay
       6  grpName
       2  pfnBindNotificationCB
       2  pfnIdentifyTimeChangeCB
       3  zcl_Groups_Options

 
 2 861 bytes in segment BANKED_CODE
   114 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
   167 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
   124 bytes of CODE     memory
   155 bytes of CONST    memory (+ 12 bytes shared)
 2 861 bytes of HUGECODE memory
    26 bytes of XDATA    memory

Errors: none
Warnings: none
